"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _a, _ModelResourceIDs_modelNameMap;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelResourceIDs = void 0;
const util_1 = require("./util");
const definition_1 = require("./definition");
class ModelResourceIDs {
    static ModelTableResourceID(typeName) {
        var _b, _c;
        const tableName = (_c = (_b = __classPrivateFieldGet(this, _a, "f", _ModelResourceIDs_modelNameMap)) === null || _b === void 0 ? void 0 : _b.get(typeName)) !== null && _c !== void 0 ? _c : typeName;
        return `${tableName}Table`;
    }
    static ModelTableStreamArn(typeName) {
        return `${typeName}TableStreamArn`;
    }
    static ModelTableDataSourceID(typeName) {
        return `${typeName}DataSource`;
    }
    static ModelTableIAMRoleID(typeName) {
        return `${typeName}IAMRole`;
    }
    static ModelFilterInputTypeName(name) {
        const nameOverride = definition_1.DEFAULT_SCALARS[name];
        if (nameOverride) {
            return `Model${nameOverride}FilterInput`;
        }
        return `Model${name}FilterInput`;
    }
    static ModelFilterScalarInputTypeName(name, includeFilter, isSubscriptionFilter = false) {
        const nameOverride = definition_1.DEFAULT_SCALARS[name];
        if (nameOverride) {
            return `Model${isSubscriptionFilter ? 'Subscription' : ''}${nameOverride}${includeFilter ? 'Filter' : ''}Input`;
        }
        return `Model${isSubscriptionFilter ? 'Subscription' : ''}${name}${includeFilter ? 'Filter' : ''}Input`;
    }
    static ModelConditionInputTypeName(name) {
        const nameOverride = definition_1.DEFAULT_SCALARS[name];
        if (nameOverride) {
            return `Model${nameOverride}ConditionInput`;
        }
        return `Model${name}ConditionInput`;
    }
    static ModelKeyConditionInputTypeName(name) {
        const nameOverride = definition_1.DEFAULT_SCALARS[name];
        if (nameOverride) {
            return `Model${nameOverride}KeyConditionInput`;
        }
        return `Model${name}KeyConditionInput`;
    }
    static ModelCompositeKeyArgumentName(keyFieldNames) {
        return (0, util_1.toCamelCase)(keyFieldNames.map((n) => (0, util_1.graphqlName)(n)));
    }
    static ModelCompositeKeySeparator() {
        return '#';
    }
    static ModelCompositeAttributeName(keyFieldNames) {
        return keyFieldNames.join(ModelResourceIDs.ModelCompositeKeySeparator());
    }
    static ModelCompositeKeyConditionInputTypeName(modelName, keyName) {
        return `Model${modelName}${keyName}CompositeKeyConditionInput`;
    }
    static ModelCompositeKeyInputTypeName(modelName, keyName) {
        return `Model${modelName}${keyName}CompositeKeyInput`;
    }
    static ModelFilterListInputTypeName(name, includeFilter, isSubscriptionFilter = false) {
        const nameOverride = definition_1.DEFAULT_SCALARS[name];
        if (nameOverride) {
            return `Model${isSubscriptionFilter ? 'Subscription' : ''}${nameOverride}List${includeFilter ? 'Filter' : ''}Input`;
        }
        return `Model${isSubscriptionFilter ? 'Subscription' : ''}${name}List${includeFilter ? 'Filter' : ''}Input`;
    }
    static ModelScalarFilterInputTypeName(name, includeFilter) {
        const nameOverride = definition_1.DEFAULT_SCALARS[name];
        if (nameOverride) {
            return `Model${nameOverride}${includeFilter ? 'Filter' : ''}Input`;
        }
        return `Model${name}${includeFilter ? 'Filter' : ''}Input`;
    }
    static ModelConnectionTypeName(typeName) {
        return `Model${typeName}Connection`;
    }
    static IsModelConnectionType(typeName) {
        return /^Model.*Connection$/.test(typeName);
    }
    static GetModelFromConnectionType(typeName) {
        var _b;
        return (_b = /(?<=Model)(.*)(?=Connection)/.exec(typeName)) === null || _b === void 0 ? void 0 : _b[0];
    }
    static ModelDeleteInputObjectName(typeName) {
        return (0, util_1.graphqlName)('Delete' + (0, util_1.toUpper)(typeName) + 'Input');
    }
    static ModelUpdateInputObjectName(typeName) {
        return (0, util_1.graphqlName)('Update' + (0, util_1.toUpper)(typeName) + 'Input');
    }
    static ModelCreateInputObjectName(typeName) {
        return (0, util_1.graphqlName)(`Create` + (0, util_1.toUpper)(typeName) + 'Input');
    }
    static ModelOnCreateSubscriptionName(typeName) {
        return (0, util_1.graphqlName)(`onCreate` + (0, util_1.toUpper)(typeName));
    }
    static ModelOnUpdateSubscriptionName(typeName) {
        return (0, util_1.graphqlName)(`onUpdate` + (0, util_1.toUpper)(typeName));
    }
    static ModelOnDeleteSubscriptionName(typeName) {
        return (0, util_1.graphqlName)(`onDelete` + (0, util_1.toUpper)(typeName));
    }
    static ModelAttributeTypesName() {
        return `ModelAttributeTypes`;
    }
    static ModelSizeInputTypeName() {
        return `ModelSizeInput`;
    }
    static NonModelInputObjectName(typeName) {
        return (0, util_1.graphqlName)((0, util_1.toUpper)(typeName) + 'Input');
    }
    static UrlParamsInputObjectName(typeName, fieldName) {
        return (0, util_1.graphqlName)((0, util_1.toUpper)(typeName) + (0, util_1.toUpper)(fieldName) + 'ParamsInput');
    }
    static HttpQueryInputObjectName(typeName, fieldName) {
        return (0, util_1.graphqlName)((0, util_1.toUpper)(typeName) + (0, util_1.toUpper)(fieldName) + 'QueryInput');
    }
    static HttpBodyInputObjectName(typeName, fieldName) {
        return (0, util_1.graphqlName)((0, util_1.toUpper)(typeName) + (0, util_1.toUpper)(fieldName) + 'BodyInput');
    }
}
exports.ModelResourceIDs = ModelResourceIDs;
_a = ModelResourceIDs;
_ModelResourceIDs_modelNameMap = { value: void 0 };
ModelResourceIDs.setModelNameMap = (modelToTableNameMap) => {
    __classPrivateFieldSet(ModelResourceIDs, _a, modelToTableNameMap, "f", _ModelResourceIDs_modelNameMap);
};
//# sourceMappingURL=ModelResourceIDs.js.map