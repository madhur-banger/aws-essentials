"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable import/order */
const setup = require("./hotswap-test-setup");
const common_1 = require("../../../lib/api/hotswap/common");
const silent_1 = require("../../util/silent");
let hotswapMockSdkProvider;
beforeEach(() => {
    hotswapMockSdkProvider = setup.setupHotswapTests();
});
describe.each([common_1.HotswapMode.FALL_BACK, common_1.HotswapMode.HOTSWAP_ONLY])('%p mode', (hotswapMode) => {
    (0, silent_1.silentTest)('A change to an IAM Policy results in a full deployment for HOTSWAP and a noOp for HOTSWAP_ONLY', async () => {
        // GIVEN
        setup.setCurrentCfnStackTemplate({
            Resources: {
                RoleOne: {
                    Type: 'AWS::IAM::Role',
                    Properties: {
                        AssumeRolePolicyDocument: {
                            Statement: [
                                {
                                    Action: 'sts:AssumeRole',
                                    Effect: 'Allow',
                                    Principal: {
                                        Service: 'sqs.amazonaws.com',
                                    },
                                },
                            ],
                            Version: '2012-10-17',
                        },
                    },
                },
                RoleDefaultPolicy: {
                    Type: 'AWS::IAM::Policy',
                    Properties: {
                        PolicyDocument: {
                            Statement: [
                                {
                                    Action: [
                                        'sqs:ChangeMessageVisibility',
                                        'sqs:DeleteMessage',
                                        'sqs:GetQueueAttributes',
                                        'sqs:GetQueueUrl',
                                        'sqs:ReceiveMessage',
                                    ],
                                    Effect: 'Allow',
                                    Resource: '*',
                                },
                            ],
                            Version: '2012-10-17',
                        },
                        PolicyName: 'roleDefaultPolicy',
                        Roles: [
                            {
                                Ref: 'RoleOne',
                            },
                        ],
                    },
                },
            },
        });
        setup.pushStackResourceSummaries({
            LogicalResourceId: 'RoleOne',
            PhysicalResourceId: 'RoleOne',
            ResourceType: 'AWS::IAM::Role',
            ResourceStatus: 'CREATE_COMPLETE',
            LastUpdatedTimestamp: new Date(),
        });
        const cdkStackArtifact = setup.cdkStackArtifactOf({
            template: {
                Resources: {
                    RoleOne: {
                        Type: 'AWS::IAM::Role',
                        Properties: {
                            AssumeRolePolicyDocument: {
                                Statement: [
                                    {
                                        Action: 'sts:AssumeRole',
                                        Effect: 'Allow',
                                        Principal: {
                                            Service: 'sqs.amazonaws.com',
                                        },
                                    },
                                ],
                                Version: '2012-10-17',
                            },
                        },
                    },
                    RoleDefaultPolicy: {
                        Type: 'AWS::IAM::Policy',
                        Properties: {
                            PolicyDocument: {
                                Statement: [
                                    {
                                        Action: [
                                            'sqs:DeleteMessage',
                                        ],
                                        Effect: 'Allow',
                                        Resource: '*',
                                    },
                                ],
                                Version: '2012-10-17',
                            },
                            PolicyName: 'roleDefaultPolicy',
                            Roles: [
                                {
                                    Ref: 'RoleOne',
                                },
                            ],
                        },
                    },
                },
            },
        });
        if (hotswapMode === common_1.HotswapMode.FALL_BACK) {
            // WHEN
            const deployStackResult = await hotswapMockSdkProvider.tryHotswapDeployment(hotswapMode, cdkStackArtifact);
            // THEN
            expect(deployStackResult).toBeUndefined();
        }
        else if (hotswapMode === common_1.HotswapMode.HOTSWAP_ONLY) {
            // WHEN
            const deployStackResult = await hotswapMockSdkProvider.tryHotswapDeployment(hotswapMode, cdkStackArtifact);
            // THEN
            expect(deployStackResult).not.toBeUndefined();
            expect(deployStackResult?.noOp).toEqual(true);
        }
    });
});
//# sourceMappingURL=data:application/json;base64,