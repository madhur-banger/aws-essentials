"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable import/order */
const api_1 = require("../../lib/api");
const environment_resources_1 = require("../../lib/api/environment-resources");
const notices_1 = require("../../lib/notices");
const settings_1 = require("../../lib/settings");
const mock_sdk_1 = require("../util/mock-sdk");
const version = require("../../lib/version");
const mock_toolkitinfo_1 = require("../util/mock-toolkitinfo");
let mockSdk;
let envRegistry;
let toolkitMock;
beforeEach(() => {
    mockSdk = new mock_sdk_1.MockSdk();
    envRegistry = new environment_resources_1.EnvironmentResourcesRegistry();
    toolkitMock = mock_toolkitinfo_1.MockToolkitInfo.setup();
});
afterEach(() => {
    toolkitMock.dispose();
});
function mockToolkitInfo(ti) {
    api_1.ToolkitInfo.lookup = jest.fn().mockResolvedValue(ti);
}
function envResources() {
    return envRegistry.for({
        account: '11111111',
        region: 'us-nowhere',
        name: 'aws://11111111/us-nowhere',
    }, mockSdk);
}
test('failure to read SSM parameter results in upgrade message for existing bootstrap stack under v5', async () => {
    // GIVEN
    mockToolkitInfo(api_1.ToolkitInfo.fromStack((0, mock_sdk_1.mockBootstrapStack)(mockSdk, {
        Outputs: [{ OutputKey: 'BootstrapVersion', OutputValue: '4' }],
    })));
    mockSdk.stubSsm({
        getParameter() {
            throw (0, mock_sdk_1.errorWithCode)('AccessDeniedException', 'Computer says no');
        },
    });
    // THEN
    await expect(envResources().validateVersion(99, '/abc')).rejects.toThrow(/This CDK deployment requires bootstrap stack version/);
});
test('failure to read SSM parameter results in exception passthrough for existing bootstrap stack v5 or higher', async () => {
    // GIVEN
    mockToolkitInfo(api_1.ToolkitInfo.fromStack((0, mock_sdk_1.mockBootstrapStack)(mockSdk, {
        Outputs: [{ OutputKey: 'BootstrapVersion', OutputValue: '5' }],
    })));
    mockSdk.stubSsm({
        getParameter() {
            throw (0, mock_sdk_1.errorWithCode)('AccessDeniedException', 'Computer says no');
        },
    });
    // THEN
    await expect(envResources().validateVersion(99, '/abc')).rejects.toThrow(/Computer says no/);
});
describe('validateversion without bootstrap stack', () => {
    beforeEach(() => {
        mockToolkitInfo(api_1.ToolkitInfo.bootstrapStackNotFoundInfo('TestBootstrapStack'));
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    test('validating version with explicit SSM parameter succeeds', async () => {
        // GIVEN
        mockSdk.stubSsm({
            getParameter() {
                return { Parameter: { Value: '10' } };
            },
        });
        // disable notices caching
        jest.spyOn(notices_1.CachedDataSource.prototype, 'save').mockImplementation((_) => Promise.resolve());
        jest.spyOn(notices_1.CachedDataSource.prototype, 'load').mockImplementation(() => Promise.resolve({ expiration: 0, notices: [] }));
        // mock cli version number
        jest.spyOn(version, 'versionNumber').mockImplementation(() => '1.0.0');
        // THEN
        const notices = notices_1.Notices.create({ configuration: new settings_1.Configuration() });
        await notices.refresh({ dataSource: { fetch: async () => [] } });
        await expect(envResources().validateVersion(8, '/abc')).resolves.toBeUndefined();
        const filter = jest.spyOn(notices_1.NoticesFilter, 'filter');
        notices.display();
        expect(filter).toHaveBeenCalledTimes(1);
        expect(filter).toHaveBeenCalledWith({
            bootstrappedEnvironments: [{
                    bootstrapStackVersion: 10,
                    environment: {
                        account: '11111111',
                        region: 'us-nowhere',
                        name: 'aws://11111111/us-nowhere',
                    },
                }],
            cliVersion: '1.0.0',
            data: [],
            outDir: 'cdk.out',
        });
    });
    test('validating version without explicit SSM parameter fails', async () => {
        // WHEN
        await expect(envResources().validateVersion(8, undefined)).rejects.toThrow(/This deployment requires a bootstrap stack with a known name/);
    });
    test('validating version with access denied error gives upgrade hint', async () => {
        // GIVEN
        mockSdk.stubSsm({
            getParameter() {
                throw (0, mock_sdk_1.errorWithCode)('AccessDeniedException', 'Computer says no');
            },
        });
        // WHEN
        await expect(envResources().validateVersion(8, '/abc')).rejects.toThrow(/This CDK deployment requires bootstrap stack version/);
    });
    test('validating version with missing parameter gives bootstrap hint', async () => {
        // GIVEN
        mockSdk.stubSsm({
            getParameter() {
                throw (0, mock_sdk_1.errorWithCode)('ParameterNotFound', 'Wut?');
            },
        });
        // WHEN
        await expect(envResources().validateVersion(8, '/abc')).rejects.toThrow(/Has the environment been bootstrapped?/);
    });
});
//# sourceMappingURL=data:application/json;base64,