"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FakeCloudformationStack = void 0;
/* eslint-disable import/order */
const aws_sdk_1 = require("aws-sdk");
const cloudformation_1 = require("../../lib/api/util/cloudformation");
const util_1 = require("../util");
const stack_status_1 = require("../../lib/api/util/cloudformation/stack-status");
class FakeCloudformationStack extends cloudformation_1.CloudFormationStack {
    constructor(props) {
        const cfnMock = (0, util_1.instanceMockFrom)(aws_sdk_1.CloudFormation);
        super(cfnMock, props.stackName);
        this.cfnMock = cfnMock;
        this.props = props;
        this.__template = {};
    }
    setTemplate(template) {
        this.__template = template;
    }
    async template() {
        return Promise.resolve(this.__template);
    }
    get exists() {
        return this.props.stackId !== undefined;
    }
    get stackStatus() {
        const status = this.props.stackStatus ?? 'UPDATE_COMPLETE';
        return new stack_status_1.StackStatus(status, 'The test said so');
    }
    get stackId() {
        if (!this.props.stackId) {
            throw new Error('Cannot retrieve stackId from a non-existent stack');
        }
        return this.props.stackId;
    }
    get outputs() {
        return {};
    }
}
exports.FakeCloudformationStack = FakeCloudformationStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFrZS1jbG91ZGZvcm1hdGlvbi1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZha2UtY2xvdWRmb3JtYXRpb24tc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQWlDO0FBQ2pDLHFDQUF5QztBQUN6QyxzRUFBa0Y7QUFDbEYsa0NBQTJDO0FBQzNDLGlGQUE2RTtBQVE3RSxNQUFhLHVCQUF3QixTQUFRLG9DQUFtQjtJQUs5RCxZQUFtQixLQUFtQztRQUNwRCxNQUFNLE9BQU8sR0FBRyxJQUFBLHVCQUFnQixFQUFDLHdCQUFjLENBQUMsQ0FBQztRQUNqRCxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRU0sV0FBVyxDQUFDLFFBQWtCO1FBQ25DLElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDO0lBQzdCLENBQUM7SUFFTSxLQUFLLENBQUMsUUFBUTtRQUNuQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxJQUFXLE1BQU07UUFDZixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxLQUFLLFNBQVMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsSUFBVyxXQUFXO1FBQ3BCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLGlCQUFpQixDQUFDO1FBQzNELE9BQU8sSUFBSSwwQkFBVyxDQUFDLE1BQU0sRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxJQUFXLE9BQU87UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO1FBQ3ZFLENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO0lBQzVCLENBQUM7SUFFRCxJQUFXLE9BQU87UUFDaEIsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0NBQ0Y7QUF4Q0QsMERBd0NDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L29yZGVyICovXG5pbXBvcnQgeyBDbG91ZEZvcm1hdGlvbiB9IGZyb20gJ2F3cy1zZGsnO1xuaW1wb3J0IHsgQ2xvdWRGb3JtYXRpb25TdGFjaywgVGVtcGxhdGUgfSBmcm9tICcuLi8uLi9saWIvYXBpL3V0aWwvY2xvdWRmb3JtYXRpb24nO1xuaW1wb3J0IHsgaW5zdGFuY2VNb2NrRnJvbSB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgU3RhY2tTdGF0dXMgfSBmcm9tICcuLi8uLi9saWIvYXBpL3V0aWwvY2xvdWRmb3JtYXRpb24vc3RhY2stc3RhdHVzJztcblxuZXhwb3J0IGludGVyZmFjZSBGYWtlQ2xvdWRGb3JtYXRpb25TdGFja1Byb3BzIHtcbiAgcmVhZG9ubHkgc3RhY2tOYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHN0YWNrSWQ/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHN0YWNrU3RhdHVzPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgRmFrZUNsb3VkZm9ybWF0aW9uU3RhY2sgZXh0ZW5kcyBDbG91ZEZvcm1hdGlvblN0YWNrIHtcbiAgcHVibGljIHJlYWRvbmx5IGNmbk1vY2s6IGplc3QuTW9ja2VkPENsb3VkRm9ybWF0aW9uPjtcbiAgcHJpdmF0ZSByZWFkb25seSBwcm9wczogRmFrZUNsb3VkRm9ybWF0aW9uU3RhY2tQcm9wcztcbiAgcHJpdmF0ZSBfX3RlbXBsYXRlOiBUZW1wbGF0ZTtcblxuICBwdWJsaWMgY29uc3RydWN0b3IocHJvcHM6IEZha2VDbG91ZEZvcm1hdGlvblN0YWNrUHJvcHMpIHtcbiAgICBjb25zdCBjZm5Nb2NrID0gaW5zdGFuY2VNb2NrRnJvbShDbG91ZEZvcm1hdGlvbik7XG4gICAgc3VwZXIoY2ZuTW9jaywgcHJvcHMuc3RhY2tOYW1lKTtcbiAgICB0aGlzLmNmbk1vY2sgPSBjZm5Nb2NrO1xuICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICB0aGlzLl9fdGVtcGxhdGUgPSB7fTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRUZW1wbGF0ZSh0ZW1wbGF0ZTogVGVtcGxhdGUpOiB2b2lkIHtcbiAgICB0aGlzLl9fdGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB0ZW1wbGF0ZSgpOiBQcm9taXNlPFRlbXBsYXRlPiB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9fdGVtcGxhdGUpO1xuICB9XG5cbiAgcHVibGljIGdldCBleGlzdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuc3RhY2tJZCAhPT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIGdldCBzdGFja1N0YXR1cygpIHtcbiAgICBjb25zdCBzdGF0dXMgPSB0aGlzLnByb3BzLnN0YWNrU3RhdHVzID8/ICdVUERBVEVfQ09NUExFVEUnO1xuICAgIHJldHVybiBuZXcgU3RhY2tTdGF0dXMoc3RhdHVzLCAnVGhlIHRlc3Qgc2FpZCBzbycpO1xuICB9XG5cbiAgcHVibGljIGdldCBzdGFja0lkKCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5zdGFja0lkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCByZXRyaWV2ZSBzdGFja0lkIGZyb20gYSBub24tZXhpc3RlbnQgc3RhY2snKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuc3RhY2tJZDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgb3V0cHV0cygpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHtcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbiJdfQ==