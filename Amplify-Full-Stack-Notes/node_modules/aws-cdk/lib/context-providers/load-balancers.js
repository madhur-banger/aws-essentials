"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.describeListenersByLoadBalancerArn = exports.tagsMatch = exports.describeTags = exports.describeLoadBalancers = exports.LoadBalancerListenerContextProviderPlugin = exports.LoadBalancerContextProviderPlugin = void 0;
const cxapi = require("@aws-cdk/cx-api");
const sdk_provider_1 = require("../api/aws-auth/sdk-provider");
/**
 * Provides load balancer context information.
 */
class LoadBalancerContextProviderPlugin {
    constructor(aws) {
        this.aws = aws;
    }
    async getValue(query) {
        const elbv2 = (await (0, sdk_provider_1.initContextProviderSdk)(this.aws, query)).elbv2();
        if (!query.loadBalancerArn && !query.loadBalancerTags) {
            throw new Error('The load balancer lookup query must specify either `loadBalancerArn` or `loadBalancerTags`');
        }
        const loadBalancers = await findLoadBalancers(elbv2, query);
        if (loadBalancers.length === 0) {
            throw new Error(`No load balancers found matching ${JSON.stringify(query)}`);
        }
        if (loadBalancers.length > 1) {
            throw new Error(`Multiple load balancers found matching ${JSON.stringify(query)} - please provide more specific criteria`);
        }
        const loadBalancer = loadBalancers[0];
        const ipAddressType = loadBalancer.IpAddressType === 'ipv4'
            ? cxapi.LoadBalancerIpAddressType.IPV4
            : cxapi.LoadBalancerIpAddressType.DUAL_STACK;
        return {
            loadBalancerArn: loadBalancer.LoadBalancerArn,
            loadBalancerCanonicalHostedZoneId: loadBalancer.CanonicalHostedZoneId,
            loadBalancerDnsName: loadBalancer.DNSName,
            vpcId: loadBalancer.VpcId,
            securityGroupIds: loadBalancer.SecurityGroups ?? [],
            ipAddressType: ipAddressType,
        };
    }
}
exports.LoadBalancerContextProviderPlugin = LoadBalancerContextProviderPlugin;
/**
 * Provides load balancer listener context information
 */
class LoadBalancerListenerContextProviderPlugin {
    constructor(aws) {
        this.aws = aws;
    }
    async getValue(query) {
        const elbv2 = (await (0, sdk_provider_1.initContextProviderSdk)(this.aws, query)).elbv2();
        if (!query.listenerArn && !query.loadBalancerArn && !query.loadBalancerTags) {
            throw new Error('The load balancer listener query must specify at least one of: `listenerArn`, `loadBalancerArn` or `loadBalancerTags`');
        }
        return query.listenerArn ? this.getListenerByArn(elbv2, query) : this.getListenerByFilteringLoadBalancers(elbv2, query);
    }
    /**
     * Look up a listener by querying listeners for query's listener arn and then
     * resolve its load balancer for the security group information.
     */
    async getListenerByArn(elbv2, query) {
        const listenerArn = query.listenerArn;
        const listenerResults = await elbv2.describeListeners({ ListenerArns: [listenerArn] }).promise();
        const listeners = (listenerResults.Listeners ?? []);
        if (listeners.length === 0) {
            throw new Error(`No load balancer listeners found matching arn ${listenerArn}`);
        }
        const listener = listeners[0];
        const loadBalancers = await findLoadBalancers(elbv2, {
            ...query,
            loadBalancerArn: listener.LoadBalancerArn,
        });
        if (loadBalancers.length === 0) {
            throw new Error(`No associated load balancer found for listener arn ${listenerArn}`);
        }
        const loadBalancer = loadBalancers[0];
        return {
            listenerArn: listener.ListenerArn,
            listenerPort: listener.Port,
            securityGroupIds: loadBalancer.SecurityGroups ?? [],
        };
    }
    /**
     * Look up a listener by starting from load balancers, filtering out
     * unmatching load balancers, and then by querying the listeners of each load
     * balancer and filtering out unmatching listeners.
     */
    async getListenerByFilteringLoadBalancers(elbv2, args) {
        // Find matching load balancers
        const loadBalancers = await findLoadBalancers(elbv2, args);
        if (loadBalancers.length === 0) {
            throw new Error(`No associated load balancers found for load balancer listener query ${JSON.stringify(args)}`);
        }
        return this.findMatchingListener(elbv2, loadBalancers, args);
    }
    /**
     * Finds the matching listener from the list of load balancers. This will
     * error unless there is exactly one match so that the user is prompted to
     * provide more specific criteria rather than us providing a nondeterministic
     * result.
     */
    async findMatchingListener(elbv2, loadBalancers, query) {
        const loadBalancersByArn = indexLoadBalancersByArn(loadBalancers);
        const loadBalancerArns = Object.keys(loadBalancersByArn);
        const matches = Array();
        for await (const listener of describeListenersByLoadBalancerArn(elbv2, loadBalancerArns)) {
            const loadBalancer = loadBalancersByArn[listener.LoadBalancerArn];
            if (listenerMatchesQueryFilter(listener, query) && loadBalancer) {
                matches.push({
                    listenerArn: listener.ListenerArn,
                    listenerPort: listener.Port,
                    securityGroupIds: loadBalancer.SecurityGroups ?? [],
                });
            }
        }
        if (matches.length === 0) {
            throw new Error(`No load balancer listeners found matching ${JSON.stringify(query)}`);
        }
        if (matches.length > 1) {
            throw new Error(`Multiple load balancer listeners found matching ${JSON.stringify(query)} - please provide more specific criteria`);
        }
        return matches[0];
    }
}
exports.LoadBalancerListenerContextProviderPlugin = LoadBalancerListenerContextProviderPlugin;
/**
 * Find load balancers by the given filter args.
 */
async function findLoadBalancers(elbv2, args) {
    // List load balancers
    let loadBalancers = await describeLoadBalancers(elbv2, {
        LoadBalancerArns: args.loadBalancerArn ? [args.loadBalancerArn] : undefined,
    });
    // Filter by load balancer type
    loadBalancers = loadBalancers.filter(lb => lb.Type === args.loadBalancerType);
    // Filter by load balancer tags
    if (args.loadBalancerTags) {
        loadBalancers = await filterLoadBalancersByTags(elbv2, loadBalancers, args.loadBalancerTags);
    }
    return loadBalancers;
}
/**
 * Helper to paginate over describeLoadBalancers
 * @internal
 */
async function describeLoadBalancers(elbv2, request) {
    const loadBalancers = Array();
    let page;
    do {
        page = await elbv2.describeLoadBalancers({
            ...request,
            Marker: page?.NextMarker,
        }).promise();
        loadBalancers.push(...Array.from(page.LoadBalancers ?? []));
    } while (page.NextMarker);
    return loadBalancers;
}
exports.describeLoadBalancers = describeLoadBalancers;
/**
 * Describes the tags of each load balancer and returns the load balancers that
 * match the given tags.
 */
async function filterLoadBalancersByTags(elbv2, loadBalancers, loadBalancerTags) {
    const loadBalancersByArn = indexLoadBalancersByArn(loadBalancers);
    const loadBalancerArns = Object.keys(loadBalancersByArn);
    const matchingLoadBalancers = Array();
    // Consume the items of async generator.
    for await (const tags of describeTags(elbv2, loadBalancerArns)) {
        if (tagsMatch(tags, loadBalancerTags) && loadBalancersByArn[tags.ResourceArn]) {
            matchingLoadBalancers.push(loadBalancersByArn[tags.ResourceArn]);
        }
    }
    return matchingLoadBalancers;
}
/**
 * Generator function that yields `TagDescriptions`. The API doesn't support
 * pagination, so this generator breaks the resource list into chunks and issues
 * the appropriate requests, yielding each tag description as it receives it.
 * @internal
 */
async function* describeTags(elbv2, resourceArns) {
    // Max of 20 resource arns per request.
    const chunkSize = 20;
    for (let i = 0; i < resourceArns.length; i += chunkSize) {
        const chunk = resourceArns.slice(i, Math.min(i + chunkSize, resourceArns.length));
        const chunkTags = await elbv2.describeTags({
            ResourceArns: chunk,
        }).promise();
        for (const tag of chunkTags.TagDescriptions ?? []) {
            yield tag;
        }
    }
}
exports.describeTags = describeTags;
/**
 * Determines if the given TagDescription matches the required tags.
 * @internal
 */
function tagsMatch(tagDescription, requiredTags) {
    const tagsByName = {};
    for (const tag of tagDescription.Tags ?? []) {
        tagsByName[tag.Key] = tag.Value;
    }
    for (const tag of requiredTags) {
        if (tagsByName[tag.key] !== tag.value) {
            return false;
        }
    }
    return true;
}
exports.tagsMatch = tagsMatch;
/**
 * Async generator that produces listener descriptions by traversing the
 * pagination. Because describeListeners only lets you search by one load
 * balancer arn at a time, we request them individually and yield the listeners
 * as they come in.
 * @internal
 */
async function* describeListenersByLoadBalancerArn(elbv2, loadBalancerArns) {
    for (const loadBalancerArn of loadBalancerArns) {
        let page;
        do {
            page = await elbv2.describeListeners({
                LoadBalancerArn: loadBalancerArn,
                Marker: page?.NextMarker,
            }).promise();
            for (const listener of page.Listeners ?? []) {
                yield listener;
            }
        } while (page.NextMarker);
    }
}
exports.describeListenersByLoadBalancerArn = describeListenersByLoadBalancerArn;
/**
 * Determines if a listener matches the query filters.
 */
function listenerMatchesQueryFilter(listener, args) {
    if (args.listenerPort && listener.Port !== args.listenerPort) {
        // No match.
        return false;
    }
    if (args.listenerProtocol && listener.Protocol !== args.listenerProtocol) {
        // No match.
        return false;
    }
    return true;
}
/**
 * Returns a record of load balancers indexed by their arns
 */
function indexLoadBalancersByArn(loadBalancers) {
    const loadBalancersByArn = {};
    for (const loadBalancer of loadBalancers) {
        loadBalancersByArn[loadBalancer.LoadBalancerArn] = loadBalancer;
    }
    return loadBalancersByArn;
}
//# sourceMappingURL=data:application/json;base64,