import { DirectiveDefinitionNode, DirectiveNode, EnumValueDefinitionNode, FieldDefinitionNode, InputValueDefinitionNode, TypeDefinitionNode, TypeSystemDefinitionNode } from 'graphql';
import { ModelDataSourceStrategy, SqlDirectiveDataSourceStrategy, TransformerPluginProvider } from '@aws-amplify/graphql-transformer-interfaces';
export declare const makeSeenTransformationKey: (directive: DirectiveNode, type: TypeDefinitionNode, field?: FieldDefinitionNode | InputValueDefinitionNode | EnumValueDefinitionNode, arg?: InputValueDefinitionNode, index?: number) => string;
export declare const matchDirective: (definition: DirectiveDefinitionNode, directive: DirectiveNode, node: TypeSystemDefinitionNode) => boolean;
export declare const matchFieldDirective: (definition: DirectiveDefinitionNode, directive: DirectiveNode, node: FieldDefinitionNode) => boolean;
export declare const matchInputFieldDirective: (definition: DirectiveDefinitionNode, directive: DirectiveNode, node: InputValueDefinitionNode) => boolean;
export declare const matchArgumentDirective: (definition: DirectiveDefinitionNode, directive: DirectiveNode, node: InputValueDefinitionNode) => boolean;
export declare const matchEnumValueDirective: (definition: DirectiveDefinitionNode, directive: DirectiveNode, node: EnumValueDefinitionNode) => boolean;
export declare const sortTransformerPlugins: (plugins: TransformerPluginProvider[]) => TransformerPluginProvider[];
export declare const removeAmplifyInputDefinition: (schema: string) => string;
export declare const getModelTypeNames: (schema: string) => string[];
export declare const constructDataSourceStrategies: (schema: string, dataSourceStrategy: ModelDataSourceStrategy) => Record<string, ModelDataSourceStrategy>;
export declare const constructSqlDirectiveDataSourceStrategies: (schema: string, dataSourceStrategy: ModelDataSourceStrategy, customSqlStatements?: Record<string, string>) => SqlDirectiveDataSourceStrategy[];
//# sourceMappingURL=utils.d.ts.map