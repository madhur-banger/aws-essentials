import { DefinitionNode, DocumentNode, FieldDefinitionNode, InterfaceTypeDefinitionNode, ObjectTypeDefinitionNode } from 'graphql';
export declare const isObjectTypeDefinitionNode: (obj: DefinitionNode) => obj is ObjectTypeDefinitionNode;
export declare const isMutationType: (typeName: string) => typeName is "Mutation";
export declare const isQueryType: (typeName: string) => typeName is "Query";
export declare const isSubscriptionType: (typeName: string) => typeName is "Subscription";
export declare const isBuiltInGraphqlType: (typeName: string) => typeName is "Mutation" | "Query" | "Subscription";
export declare const isMutationNode: (obj: DefinitionNode) => obj is ObjectTypeDefinitionNode | (InterfaceTypeDefinitionNode & {
    name: {
        value: 'Mutation';
    };
});
export declare const isQueryNode: (obj: DefinitionNode) => obj is ObjectTypeDefinitionNode | (InterfaceTypeDefinitionNode & {
    name: {
        value: 'Query';
    };
});
export declare const isSubscriptionNode: (obj: DefinitionNode) => obj is ObjectTypeDefinitionNode | (InterfaceTypeDefinitionNode & {
    name: {
        value: 'Subscription';
    };
});
export declare const isBuiltInGraphqlNode: (obj: DefinitionNode) => obj is ObjectTypeDefinitionNode | (InterfaceTypeDefinitionNode & {
    name: {
        value: 'Mutation' | 'Query';
    };
});
export declare const fieldsWithSqlDirective: (obj: ObjectTypeDefinitionNode | InterfaceTypeDefinitionNode) => FieldDefinitionNode[];
export declare const getField: (obj: ObjectTypeDefinitionNode, fieldName: string) => FieldDefinitionNode | undefined;
export declare const getType: (schema: DocumentNode, typeName: string) => ObjectTypeDefinitionNode | undefined;
//# sourceMappingURL=graphql-utils.d.ts.map