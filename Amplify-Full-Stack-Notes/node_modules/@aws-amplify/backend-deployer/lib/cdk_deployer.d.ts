import { BackendDeployer, DeployProps, DeployResult, DestroyProps, DestroyResult } from './cdk_deployer_singleton_factory.js';
import { CdkErrorMapper } from './cdk_error_mapper.js';
import { BackendIdentifier, type PackageManagerController } from '@aws-amplify/plugin-types';
import { BackendLocator } from '@aws-amplify/platform-core';
/**
 * Invokes CDK command via execa
 */
export declare class CDKDeployer implements BackendDeployer {
    private readonly cdkErrorMapper;
    private readonly backendLocator;
    private readonly packageManagerController;
    private readonly relativeCloudAssemblyLocation;
    /**
     * Instantiates instance of CDKDeployer
     */
    constructor(cdkErrorMapper: CdkErrorMapper, backendLocator: BackendLocator, packageManagerController: PackageManagerController);
    /**
     * Invokes cdk deploy command
     */
    deploy: (backendId: BackendIdentifier, deployProps?: DeployProps) => Promise<{
        deploymentTimes: {
            synthesisTime: number;
            totalTime: number;
        };
    }>;
    /**
     * Invokes cdk destroy command
     */
    destroy: (backendId: BackendIdentifier, destroyProps?: DestroyProps) => Promise<DeployResult | DestroyResult>;
    /**
     * Wrapper for the child process executor. Helps in unit testing as node:test framework
     * doesn't have capabilities to mock exported functions like `execa` as of right now.
     */
    executeCommand: (commandArgs: string[], options?: {
        redirectStdoutToStderr: boolean;
    }) => Promise<{
        deploymentTimes: {};
    }>;
    private getAppCommand;
    private invokeTsc;
    /**
     * calls invokeCDK and wrap it in a try catch
     */
    private tryInvokeCdk;
    /**
     * Executes a CDK command
     */
    private invokeCdk;
    private populateCDKOutputFromStdout;
}
//# sourceMappingURL=cdk_deployer.d.ts.map