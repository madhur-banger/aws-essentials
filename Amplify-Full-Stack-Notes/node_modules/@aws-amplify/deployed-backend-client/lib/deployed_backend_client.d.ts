import { BackendIdentifier } from '@aws-amplify/plugin-types';
import { BackendMetadata, DeployedBackendClient, ListBackendsRequest, ListBackendsResponse } from './deployed_backend_client_factory.js';
import { BackendOutputClient } from './backend_output_client_factory.js';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
import { S3Client } from '@aws-sdk/client-s3';
import { DeployedResourcesEnumerator } from './deployed-backend-client/deployed_resources_enumerator.js';
import { StackStatusMapper } from './deployed-backend-client/stack_status_mapper.js';
import { ArnParser } from './deployed-backend-client/arn_parser.js';
/**
 * Deployment Client
 */
export declare class DefaultDeployedBackendClient implements DeployedBackendClient {
    private readonly cfnClient;
    private readonly s3Client;
    private readonly backendOutputClient;
    private readonly deployedResourcesEnumerator;
    private readonly stackStatusMapper;
    private readonly arnParser;
    /**
     * Constructor for deployment client
     */
    constructor(cfnClient: CloudFormationClient, s3Client: S3Client, backendOutputClient: BackendOutputClient, deployedResourcesEnumerator: DeployedResourcesEnumerator, stackStatusMapper: StackStatusMapper, arnParser: ArnParser);
    /**
     * Deletes a sandbox with the specified id
     */
    deleteSandbox: (sandboxBackendIdentifier: Omit<BackendIdentifier, 'type'>) => Promise<void>;
    /**
     * Fetches all backend metadata for a specified backend
     */
    getBackendMetadata: (backendId: BackendIdentifier) => Promise<BackendMetadata>;
    listBackends: (listBackendsRequest?: ListBackendsRequest) => ListBackendsResponse;
    /**
     * Returns a list of stacks for specific deployment type and status
     * @yields
     */
    private listBackendsInternal;
    private getBackendStackType;
    private tryGetDeploymentType;
    private listStacks;
    private buildBackendMetadata;
    private fetchSchema;
}
//# sourceMappingURL=deployed_backend_client.d.ts.map