import { DefaultDeployedBackendClient } from './deployed_backend_client.js';
import { BackendOutputClientFactory } from './backend_output_client_factory.js';
import { DeployedResourcesEnumerator } from './deployed-backend-client/deployed_resources_enumerator.js';
import { StackStatusMapper } from './deployed-backend-client/stack_status_mapper.js';
import { ArnGenerator } from './deployed-backend-client/arn_generator.js';
import { ArnParser } from './deployed-backend-client/arn_parser.js';
export var ConflictResolutionMode;
(function (ConflictResolutionMode) {
    ConflictResolutionMode["LAMBDA"] = "LAMBDA";
    ConflictResolutionMode["OPTIMISTIC_CONCURRENCY"] = "OPTIMISTIC_CONCURRENCY";
    ConflictResolutionMode["AUTOMERGE"] = "AUTOMERGE";
})(ConflictResolutionMode || (ConflictResolutionMode = {}));
export var ApiAuthType;
(function (ApiAuthType) {
    ApiAuthType["API_KEY"] = "API_KEY";
    ApiAuthType["AWS_LAMBDA"] = "AWS_LAMBDA";
    ApiAuthType["AWS_IAM"] = "AWS_IAM";
    ApiAuthType["OPENID_CONNECT"] = "OPENID_CONNECT";
    ApiAuthType["AMAZON_COGNITO_USER_POOLS"] = "AMAZON_COGNITO_USER_POOLS";
})(ApiAuthType || (ApiAuthType = {}));
export var BackendDeploymentStatus;
(function (BackendDeploymentStatus) {
    BackendDeploymentStatus["DEPLOYED"] = "DEPLOYED";
    BackendDeploymentStatus["FAILED"] = "FAILED";
    BackendDeploymentStatus["DEPLOYING"] = "DEPLOYING";
    BackendDeploymentStatus["DELETING"] = "DELETING";
    BackendDeploymentStatus["DELETED"] = "DELETED";
    BackendDeploymentStatus["UNKNOWN"] = "UNKNOWN";
})(BackendDeploymentStatus || (BackendDeploymentStatus = {}));
export var BackendStatus;
(function (BackendStatus) {
    BackendStatus["DELETE_FAILED"] = "DELETE_FAILED";
})(BackendStatus || (BackendStatus = {}));
/**
 * Factory to create a DeploymentClient
 */
export class DeployedBackendClientFactory {
    /**
     * Returns a single instance of DeploymentClient
     */
    getInstance(awsClientProvider) {
        const stackStatusMapper = new StackStatusMapper();
        const arnGenerator = new ArnGenerator();
        const arnParser = new ArnParser();
        const deployedResourcesEnumerator = new DeployedResourcesEnumerator(stackStatusMapper, arnGenerator, arnParser);
        return new DefaultDeployedBackendClient(awsClientProvider.getCloudFormationClient(), awsClientProvider.getS3Client(), BackendOutputClientFactory.getInstance(awsClientProvider), deployedResourcesEnumerator, stackStatusMapper, arnParser);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95ZWRfYmFja2VuZF9jbGllbnRfZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kZXBsb3llZF9iYWNrZW5kX2NsaWVudF9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBTTVFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDREQUE0RCxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUMxRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFLcEUsTUFBTSxDQUFOLElBQVksc0JBSVg7QUFKRCxXQUFZLHNCQUFzQjtJQUNoQywyQ0FBaUIsQ0FBQTtJQUNqQiwyRUFBaUQsQ0FBQTtJQUNqRCxpREFBdUIsQ0FBQTtBQUN6QixDQUFDLEVBSlcsc0JBQXNCLEtBQXRCLHNCQUFzQixRQUlqQztBQUVELE1BQU0sQ0FBTixJQUFZLFdBTVg7QUFORCxXQUFZLFdBQVc7SUFDckIsa0NBQW1CLENBQUE7SUFDbkIsd0NBQXlCLENBQUE7SUFDekIsa0NBQW1CLENBQUE7SUFDbkIsZ0RBQWlDLENBQUE7SUFDakMsc0VBQXVELENBQUE7QUFDekQsQ0FBQyxFQU5XLFdBQVcsS0FBWCxXQUFXLFFBTXRCO0FBK0RELE1BQU0sQ0FBTixJQUFZLHVCQU9YO0FBUEQsV0FBWSx1QkFBdUI7SUFDakMsZ0RBQXFCLENBQUE7SUFDckIsNENBQWlCLENBQUE7SUFDakIsa0RBQXVCLENBQUE7SUFDdkIsZ0RBQXFCLENBQUE7SUFDckIsOENBQW1CLENBQUE7SUFDbkIsOENBQW1CLENBQUE7QUFDckIsQ0FBQyxFQVBXLHVCQUF1QixLQUF2Qix1QkFBdUIsUUFPbEM7QUFFRCxNQUFNLENBQU4sSUFBWSxhQUVYO0FBRkQsV0FBWSxhQUFhO0lBQ3ZCLGdEQUErQixDQUFBO0FBQ2pDLENBQUMsRUFGVyxhQUFhLEtBQWIsYUFBYSxRQUV4QjtBQWNEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDRCQUE0QjtJQUN2Qzs7T0FFRztJQUNILFdBQVcsQ0FDVCxpQkFJRTtRQUVGLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO1FBQ2xELE1BQU0sWUFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDeEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUNsQyxNQUFNLDJCQUEyQixHQUFHLElBQUksMkJBQTJCLENBQ2pFLGlCQUFpQixFQUNqQixZQUFZLEVBQ1osU0FBUyxDQUNWLENBQUM7UUFFRixPQUFPLElBQUksNEJBQTRCLENBQ3JDLGlCQUFpQixDQUFDLHVCQUF1QixFQUFFLEVBQzNDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxFQUMvQiwwQkFBMEIsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsRUFDekQsMkJBQTJCLEVBQzNCLGlCQUFpQixFQUNqQixTQUFTLENBQ1YsQ0FBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlZmF1bHREZXBsb3llZEJhY2tlbmRDbGllbnQgfSBmcm9tICcuL2RlcGxveWVkX2JhY2tlbmRfY2xpZW50LmpzJztcbmltcG9ydCB7XG4gIEFXU0NsaWVudFByb3ZpZGVyLFxuICBCYWNrZW5kSWRlbnRpZmllcixcbiAgRGVwbG95bWVudFR5cGUsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgQmFja2VuZE91dHB1dENsaWVudEZhY3RvcnkgfSBmcm9tICcuL2JhY2tlbmRfb3V0cHV0X2NsaWVudF9mYWN0b3J5LmpzJztcbmltcG9ydCB7IERlcGxveWVkUmVzb3VyY2VzRW51bWVyYXRvciB9IGZyb20gJy4vZGVwbG95ZWQtYmFja2VuZC1jbGllbnQvZGVwbG95ZWRfcmVzb3VyY2VzX2VudW1lcmF0b3IuanMnO1xuaW1wb3J0IHsgU3RhY2tTdGF0dXNNYXBwZXIgfSBmcm9tICcuL2RlcGxveWVkLWJhY2tlbmQtY2xpZW50L3N0YWNrX3N0YXR1c19tYXBwZXIuanMnO1xuaW1wb3J0IHsgQXJuR2VuZXJhdG9yIH0gZnJvbSAnLi9kZXBsb3llZC1iYWNrZW5kLWNsaWVudC9hcm5fZ2VuZXJhdG9yLmpzJztcbmltcG9ydCB7IEFyblBhcnNlciB9IGZyb20gJy4vZGVwbG95ZWQtYmFja2VuZC1jbGllbnQvYXJuX3BhcnNlci5qcyc7XG5pbXBvcnQgeyBTM0NsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1zMyc7XG5pbXBvcnQgeyBBbXBsaWZ5Q2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWFtcGxpZnknO1xuaW1wb3J0IHsgQ2xvdWRGb3JtYXRpb25DbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtY2xvdWRmb3JtYXRpb24nO1xuXG5leHBvcnQgZW51bSBDb25mbGljdFJlc29sdXRpb25Nb2RlIHtcbiAgTEFNQkRBID0gJ0xBTUJEQScsXG4gIE9QVElNSVNUSUNfQ09OQ1VSUkVOQ1kgPSAnT1BUSU1JU1RJQ19DT05DVVJSRU5DWScsXG4gIEFVVE9NRVJHRSA9ICdBVVRPTUVSR0UnLFxufVxuXG5leHBvcnQgZW51bSBBcGlBdXRoVHlwZSB7XG4gIEFQSV9LRVkgPSAnQVBJX0tFWScsXG4gIEFXU19MQU1CREEgPSAnQVdTX0xBTUJEQScsXG4gIEFXU19JQU0gPSAnQVdTX0lBTScsXG4gIE9QRU5JRF9DT05ORUNUID0gJ09QRU5JRF9DT05ORUNUJyxcbiAgQU1BWk9OX0NPR05JVE9fVVNFUl9QT09MUyA9ICdBTUFaT05fQ09HTklUT19VU0VSX1BPT0xTJyxcbn1cblxuZXhwb3J0IHR5cGUgQmFja2VuZFN1bW1hcnlNZXRhZGF0YSA9IHtcbiAgbmFtZTogc3RyaW5nO1xuICBsYXN0VXBkYXRlZDogRGF0ZSB8IHVuZGVmaW5lZDtcbiAgc3RhdHVzOiBCYWNrZW5kRGVwbG95bWVudFN0YXR1cztcbiAgYmFja2VuZElkOiBCYWNrZW5kSWRlbnRpZmllciB8IHVuZGVmaW5lZDtcbn07XG5cbmV4cG9ydCB0eXBlIExpc3RCYWNrZW5kc1JlcXVlc3QgPSB7XG4gIGRlcGxveW1lbnRUeXBlOiBEZXBsb3ltZW50VHlwZTtcbiAgYmFja2VuZFN0YXR1c0ZpbHRlcnM/OiBCYWNrZW5kU3RhdHVzW107XG59O1xuXG5leHBvcnQgdHlwZSBEZXBsb3llZEJhY2tlbmRSZXNvdXJjZSA9IHtcbiAgbG9naWNhbFJlc291cmNlSWQ/OiBzdHJpbmc7XG4gIGxhc3RVcGRhdGVkPzogRGF0ZTtcbiAgcmVzb3VyY2VTdGF0dXM/OiBzdHJpbmc7XG4gIHJlc291cmNlU3RhdHVzUmVhc29uPzogc3RyaW5nO1xuICByZXNvdXJjZVR5cGU/OiBzdHJpbmc7XG4gIHBoeXNpY2FsUmVzb3VyY2VJZD86IHN0cmluZztcbiAgYXJuPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgQmFja2VuZE1ldGFkYXRhID0ge1xuICBuYW1lOiBzdHJpbmc7XG4gIGxhc3RVcGRhdGVkOiBEYXRlIHwgdW5kZWZpbmVkO1xuICBkZXBsb3ltZW50VHlwZTogRGVwbG95bWVudFR5cGU7XG4gIHN0YXR1czogQmFja2VuZERlcGxveW1lbnRTdGF0dXM7XG4gIHJlc291cmNlczogRGVwbG95ZWRCYWNrZW5kUmVzb3VyY2VbXTtcbiAgYXBpQ29uZmlndXJhdGlvbj86IHtcbiAgICBzdGF0dXM6IEJhY2tlbmREZXBsb3ltZW50U3RhdHVzO1xuICAgIGxhc3RVcGRhdGVkOiBEYXRlIHwgdW5kZWZpbmVkO1xuICAgIGdyYXBocWxFbmRwb2ludDogc3RyaW5nO1xuICAgIGRlZmF1bHRBdXRoVHlwZTogQXBpQXV0aFR5cGU7XG4gICAgYWRkaXRpb25hbEF1dGhUeXBlczogQXBpQXV0aFR5cGVbXTtcbiAgICBjb25mbGljdFJlc29sdXRpb25Nb2RlPzogQ29uZmxpY3RSZXNvbHV0aW9uTW9kZTtcbiAgICBhcGlJZDogc3RyaW5nO1xuICAgIG1vZGVsU2NoZW1hUzNVcmk6IHN0cmluZztcbiAgfTtcbiAgYXV0aENvbmZpZ3VyYXRpb24/OiB7XG4gICAgc3RhdHVzOiBCYWNrZW5kRGVwbG95bWVudFN0YXR1cztcbiAgICBsYXN0VXBkYXRlZDogRGF0ZSB8IHVuZGVmaW5lZDtcbiAgICB1c2VyUG9vbElkOiBzdHJpbmc7XG4gIH07XG4gIHN0b3JhZ2VDb25maWd1cmF0aW9uPzoge1xuICAgIHN0YXR1czogQmFja2VuZERlcGxveW1lbnRTdGF0dXM7XG4gICAgbGFzdFVwZGF0ZWQ6IERhdGUgfCB1bmRlZmluZWQ7XG4gICAgczNCdWNrZXROYW1lOiBzdHJpbmc7XG4gIH07XG4gIGZ1bmN0aW9uQ29uZmlndXJhdGlvbnM/OiBGdW5jdGlvbkNvbmZpZ3VyYXRpb25bXTtcbn07XG5cbmV4cG9ydCB0eXBlIEZ1bmN0aW9uQ29uZmlndXJhdGlvbiA9IHtcbiAgc3RhdHVzOiBCYWNrZW5kRGVwbG95bWVudFN0YXR1cztcbiAgbGFzdFVwZGF0ZWQ6IERhdGUgfCB1bmRlZmluZWQ7XG4gIGZ1bmN0aW9uTmFtZTogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgTGlzdEJhY2tlbmRzUmVzcG9uc2UgPSB7XG4gIGdldEJhY2tlbmRTdW1tYXJ5QnlQYWdlOiAoKSA9PiBBc3luY0dlbmVyYXRvcjxCYWNrZW5kU3VtbWFyeU1ldGFkYXRhW10+O1xufTtcblxuZXhwb3J0IGVudW0gQmFja2VuZERlcGxveW1lbnRTdGF0dXMge1xuICBERVBMT1lFRCA9ICdERVBMT1lFRCcsXG4gIEZBSUxFRCA9ICdGQUlMRUQnLFxuICBERVBMT1lJTkcgPSAnREVQTE9ZSU5HJyxcbiAgREVMRVRJTkcgPSAnREVMRVRJTkcnLFxuICBERUxFVEVEID0gJ0RFTEVURUQnLFxuICBVTktOT1dOID0gJ1VOS05PV04nLFxufVxuXG5leHBvcnQgZW51bSBCYWNrZW5kU3RhdHVzIHtcbiAgREVMRVRFX0ZBSUxFRCA9ICdERUxFVEVfRkFJTEVEJyxcbn1cblxuZXhwb3J0IHR5cGUgRGVwbG95ZWRCYWNrZW5kQ2xpZW50ID0ge1xuICBsaXN0QmFja2VuZHM6IChcbiAgICBsaXN0QmFja2VuZHNSZXF1ZXN0PzogTGlzdEJhY2tlbmRzUmVxdWVzdFxuICApID0+IExpc3RCYWNrZW5kc1Jlc3BvbnNlO1xuICBkZWxldGVTYW5kYm94OiAoXG4gICAgc2FuZGJveEJhY2tlbmRJZGVudGlmaWVyOiBPbWl0PEJhY2tlbmRJZGVudGlmaWVyLCAndHlwZSc+XG4gICkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgZ2V0QmFja2VuZE1ldGFkYXRhOiAoXG4gICAgYmFja2VuZElkOiBCYWNrZW5kSWRlbnRpZmllclxuICApID0+IFByb21pc2U8QmFja2VuZE1ldGFkYXRhPjtcbn07XG5cbi8qKlxuICogRmFjdG9yeSB0byBjcmVhdGUgYSBEZXBsb3ltZW50Q2xpZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBEZXBsb3llZEJhY2tlbmRDbGllbnRGYWN0b3J5IHtcbiAgLyoqXG4gICAqIFJldHVybnMgYSBzaW5nbGUgaW5zdGFuY2Ugb2YgRGVwbG95bWVudENsaWVudFxuICAgKi9cbiAgZ2V0SW5zdGFuY2UoXG4gICAgYXdzQ2xpZW50UHJvdmlkZXI6IEFXU0NsaWVudFByb3ZpZGVyPHtcbiAgICAgIGdldFMzQ2xpZW50OiBTM0NsaWVudDtcbiAgICAgIGdldEFtcGxpZnlDbGllbnQ6IEFtcGxpZnlDbGllbnQ7XG4gICAgICBnZXRDbG91ZEZvcm1hdGlvbkNsaWVudDogQ2xvdWRGb3JtYXRpb25DbGllbnQ7XG4gICAgfT5cbiAgKTogRGVwbG95ZWRCYWNrZW5kQ2xpZW50IHtcbiAgICBjb25zdCBzdGFja1N0YXR1c01hcHBlciA9IG5ldyBTdGFja1N0YXR1c01hcHBlcigpO1xuICAgIGNvbnN0IGFybkdlbmVyYXRvciA9IG5ldyBBcm5HZW5lcmF0b3IoKTtcbiAgICBjb25zdCBhcm5QYXJzZXIgPSBuZXcgQXJuUGFyc2VyKCk7XG4gICAgY29uc3QgZGVwbG95ZWRSZXNvdXJjZXNFbnVtZXJhdG9yID0gbmV3IERlcGxveWVkUmVzb3VyY2VzRW51bWVyYXRvcihcbiAgICAgIHN0YWNrU3RhdHVzTWFwcGVyLFxuICAgICAgYXJuR2VuZXJhdG9yLFxuICAgICAgYXJuUGFyc2VyXG4gICAgKTtcblxuICAgIHJldHVybiBuZXcgRGVmYXVsdERlcGxveWVkQmFja2VuZENsaWVudChcbiAgICAgIGF3c0NsaWVudFByb3ZpZGVyLmdldENsb3VkRm9ybWF0aW9uQ2xpZW50KCksXG4gICAgICBhd3NDbGllbnRQcm92aWRlci5nZXRTM0NsaWVudCgpLFxuICAgICAgQmFja2VuZE91dHB1dENsaWVudEZhY3RvcnkuZ2V0SW5zdGFuY2UoYXdzQ2xpZW50UHJvdmlkZXIpLFxuICAgICAgZGVwbG95ZWRSZXNvdXJjZXNFbnVtZXJhdG9yLFxuICAgICAgc3RhY2tTdGF0dXNNYXBwZXIsXG4gICAgICBhcm5QYXJzZXJcbiAgICApO1xuICB9XG59XG4iXX0=