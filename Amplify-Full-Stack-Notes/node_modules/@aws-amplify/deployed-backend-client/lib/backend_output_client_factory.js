import { DefaultBackendOutputClient } from './backend_output_client.js';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
import { AmplifyClient } from '@aws-sdk/client-amplify';
export var BackendOutputClientErrorType;
(function (BackendOutputClientErrorType) {
    BackendOutputClientErrorType["METADATA_RETRIEVAL_ERROR"] = "MetadataRetrievalError";
    BackendOutputClientErrorType["NO_OUTPUTS_FOUND"] = "NoOutputsFound";
    BackendOutputClientErrorType["DEPLOYMENT_IN_PROGRESS"] = "DeploymentInProgress";
    BackendOutputClientErrorType["NO_STACK_FOUND"] = "NoStackFound";
    BackendOutputClientErrorType["CREDENTIALS_ERROR"] = "CredentialsError";
    BackendOutputClientErrorType["ACCESS_DENIED"] = "AccessDenied";
})(BackendOutputClientErrorType || (BackendOutputClientErrorType = {}));
/**
 * Error type for BackendOutputClientError
 */
export class BackendOutputClientError extends Error {
    code;
    /**
     * Constructor for BackendOutputClientError
     */
    constructor(code, message, options) {
        super(message, options);
        this.code = code;
    }
}
/**
 * Factory to create a backend metadata reader
 */
export class BackendOutputClientFactory {
    /**
     * Returns a single instance of BackendOutputClient
     */
    static getInstance = (awsClientProvider) => {
        return new DefaultBackendOutputClient(awsClientProvider?.getCloudFormationClient() ??
            new CloudFormationClient(), awsClientProvider?.getAmplifyClient() ?? new AmplifyClient());
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9vdXRwdXRfY2xpZW50X2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYmFja2VuZF9vdXRwdXRfY2xpZW50X2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFeEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDdEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBR3hELE1BQU0sQ0FBTixJQUFZLDRCQU9YO0FBUEQsV0FBWSw0QkFBNEI7SUFDdEMsbUZBQW1ELENBQUE7SUFDbkQsbUVBQW1DLENBQUE7SUFDbkMsK0VBQStDLENBQUE7SUFDL0MsK0RBQStCLENBQUE7SUFDL0Isc0VBQXNDLENBQUE7SUFDdEMsOERBQThCLENBQUE7QUFDaEMsQ0FBQyxFQVBXLDRCQUE0QixLQUE1Qiw0QkFBNEIsUUFPdkM7QUFDRDs7R0FFRztBQUNILE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxLQUFLO0lBQzFDLElBQUksQ0FBK0I7SUFFMUM7O09BRUc7SUFDSCxZQUNFLElBQWtDLEVBQ2xDLE9BQWUsRUFDZixPQUFzQjtRQUV0QixLQUFLLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ25CLENBQUM7Q0FDRjtBQXVCRDs7R0FFRztBQUNILE1BQU0sT0FBTywwQkFBMEI7SUFDckM7O09BRUc7SUFDSCxNQUFNLENBQUMsV0FBVyxHQUFHLENBQ25CLGlCQUdFLEVBQ21CLEVBQUU7UUFDdkIsT0FBTyxJQUFJLDBCQUEwQixDQUNuQyxpQkFBaUIsRUFBRSx1QkFBdUIsRUFBRTtZQUMxQyxJQUFJLG9CQUFvQixFQUFFLEVBQzVCLGlCQUFpQixFQUFFLGdCQUFnQixFQUFFLElBQUksSUFBSSxhQUFhLEVBQUUsQ0FDN0QsQ0FBQztJQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF3c0NyZWRlbnRpYWxJZGVudGl0eVByb3ZpZGVyIH0gZnJvbSAnQGF3cy1zZGsvdHlwZXMnO1xuaW1wb3J0IHsgRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllciB9IGZyb20gJy4vaW5kZXguanMnO1xuaW1wb3J0IHsgRGVmYXVsdEJhY2tlbmRPdXRwdXRDbGllbnQgfSBmcm9tICcuL2JhY2tlbmRfb3V0cHV0X2NsaWVudC5qcyc7XG5pbXBvcnQgeyBVbmlmaWVkQmFja2VuZE91dHB1dCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLW91dHB1dC1zY2hlbWFzJztcbmltcG9ydCB7IENsb3VkRm9ybWF0aW9uQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3VkZm9ybWF0aW9uJztcbmltcG9ydCB7IEFtcGxpZnlDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtYW1wbGlmeSc7XG5pbXBvcnQgeyBBV1NDbGllbnRQcm92aWRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuXG5leHBvcnQgZW51bSBCYWNrZW5kT3V0cHV0Q2xpZW50RXJyb3JUeXBlIHtcbiAgTUVUQURBVEFfUkVUUklFVkFMX0VSUk9SID0gJ01ldGFkYXRhUmV0cmlldmFsRXJyb3InLFxuICBOT19PVVRQVVRTX0ZPVU5EID0gJ05vT3V0cHV0c0ZvdW5kJyxcbiAgREVQTE9ZTUVOVF9JTl9QUk9HUkVTUyA9ICdEZXBsb3ltZW50SW5Qcm9ncmVzcycsXG4gIE5PX1NUQUNLX0ZPVU5EID0gJ05vU3RhY2tGb3VuZCcsXG4gIENSRURFTlRJQUxTX0VSUk9SID0gJ0NyZWRlbnRpYWxzRXJyb3InLFxuICBBQ0NFU1NfREVOSUVEID0gJ0FjY2Vzc0RlbmllZCcsXG59XG4vKipcbiAqIEVycm9yIHR5cGUgZm9yIEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvclxuICovXG5leHBvcnQgY2xhc3MgQmFja2VuZE91dHB1dENsaWVudEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBwdWJsaWMgY29kZTogQmFja2VuZE91dHB1dENsaWVudEVycm9yVHlwZTtcblxuICAvKipcbiAgICogQ29uc3RydWN0b3IgZm9yIEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvclxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgY29kZTogQmFja2VuZE91dHB1dENsaWVudEVycm9yVHlwZSxcbiAgICBtZXNzYWdlOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IEVycm9yT3B0aW9uc1xuICApIHtcbiAgICBzdXBlcihtZXNzYWdlLCBvcHRpb25zKTtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICB9XG59XG5cbi8qKlxuICogRGVmaW5lcyBCYWNrZW5kT3V0cHV0Q2xpZW50XG4gKi9cbmV4cG9ydCB0eXBlIEJhY2tlbmRPdXRwdXRDbGllbnQgPSB7XG4gIHJlYWRvbmx5IGdldE91dHB1dDogKFxuICAgIGJhY2tlbmRJZGVudGlmaWVyOiBEZXBsb3llZEJhY2tlbmRJZGVudGlmaWVyXG4gICkgPT4gUHJvbWlzZTxVbmlmaWVkQmFja2VuZE91dHB1dD47XG59O1xuXG5leHBvcnQgdHlwZSBCYWNrZW5kT3V0cHV0Q2xpZW50T3B0aW9ucyA9IHtcbiAgY2xvdWRGb3JtYXRpb25DbGllbnQ6IENsb3VkRm9ybWF0aW9uQ2xpZW50O1xuICBhbXBsaWZ5Q2xpZW50OiBBbXBsaWZ5Q2xpZW50O1xufTtcblxuZXhwb3J0IHR5cGUgQmFja2VuZE91dHB1dENyZWRlbnRpYWxzT3B0aW9ucyA9IHtcbiAgY3JlZGVudGlhbHM6IEF3c0NyZWRlbnRpYWxJZGVudGl0eVByb3ZpZGVyO1xufTtcblxuZXhwb3J0IHR5cGUgQmFja2VuZE91dHB1dENsaWVudEZhY3RvcnlPcHRpb25zID1cbiAgfCBCYWNrZW5kT3V0cHV0Q2xpZW50T3B0aW9uc1xuICB8IEJhY2tlbmRPdXRwdXRDcmVkZW50aWFsc09wdGlvbnM7XG4vKipcbiAqIEZhY3RvcnkgdG8gY3JlYXRlIGEgYmFja2VuZCBtZXRhZGF0YSByZWFkZXJcbiAqL1xuZXhwb3J0IGNsYXNzIEJhY2tlbmRPdXRwdXRDbGllbnRGYWN0b3J5IHtcbiAgLyoqXG4gICAqIFJldHVybnMgYSBzaW5nbGUgaW5zdGFuY2Ugb2YgQmFja2VuZE91dHB1dENsaWVudFxuICAgKi9cbiAgc3RhdGljIGdldEluc3RhbmNlID0gKFxuICAgIGF3c0NsaWVudFByb3ZpZGVyPzogQVdTQ2xpZW50UHJvdmlkZXI8e1xuICAgICAgZ2V0QW1wbGlmeUNsaWVudDogQW1wbGlmeUNsaWVudDtcbiAgICAgIGdldENsb3VkRm9ybWF0aW9uQ2xpZW50OiBDbG91ZEZvcm1hdGlvbkNsaWVudDtcbiAgICB9PlxuICApOiBCYWNrZW5kT3V0cHV0Q2xpZW50ID0+IHtcbiAgICByZXR1cm4gbmV3IERlZmF1bHRCYWNrZW5kT3V0cHV0Q2xpZW50KFxuICAgICAgYXdzQ2xpZW50UHJvdmlkZXI/LmdldENsb3VkRm9ybWF0aW9uQ2xpZW50KCkgPz9cbiAgICAgICAgbmV3IENsb3VkRm9ybWF0aW9uQ2xpZW50KCksXG4gICAgICBhd3NDbGllbnRQcm92aWRlcj8uZ2V0QW1wbGlmeUNsaWVudCgpID8/IG5ldyBBbXBsaWZ5Q2xpZW50KClcbiAgICApO1xuICB9O1xufVxuIl19