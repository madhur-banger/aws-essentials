import { AWSClientProvider, BackendIdentifier, DeploymentType } from '@aws-amplify/plugin-types';
import { S3Client } from '@aws-sdk/client-s3';
import { AmplifyClient } from '@aws-sdk/client-amplify';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
export declare enum ConflictResolutionMode {
    LAMBDA = "LAMBDA",
    OPTIMISTIC_CONCURRENCY = "OPTIMISTIC_CONCURRENCY",
    AUTOMERGE = "AUTOMERGE"
}
export declare enum ApiAuthType {
    API_KEY = "API_KEY",
    AWS_LAMBDA = "AWS_LAMBDA",
    AWS_IAM = "AWS_IAM",
    OPENID_CONNECT = "OPENID_CONNECT",
    AMAZON_COGNITO_USER_POOLS = "AMAZON_COGNITO_USER_POOLS"
}
export type BackendSummaryMetadata = {
    name: string;
    lastUpdated: Date | undefined;
    status: BackendDeploymentStatus;
    backendId: BackendIdentifier | undefined;
};
export type ListBackendsRequest = {
    deploymentType: DeploymentType;
    backendStatusFilters?: BackendStatus[];
};
export type DeployedBackendResource = {
    logicalResourceId?: string;
    lastUpdated?: Date;
    resourceStatus?: string;
    resourceStatusReason?: string;
    resourceType?: string;
    physicalResourceId?: string;
    arn?: string;
};
export type BackendMetadata = {
    name: string;
    lastUpdated: Date | undefined;
    deploymentType: DeploymentType;
    status: BackendDeploymentStatus;
    resources: DeployedBackendResource[];
    apiConfiguration?: {
        status: BackendDeploymentStatus;
        lastUpdated: Date | undefined;
        graphqlEndpoint: string;
        defaultAuthType: ApiAuthType;
        additionalAuthTypes: ApiAuthType[];
        conflictResolutionMode?: ConflictResolutionMode;
        apiId: string;
        modelSchemaS3Uri: string;
    };
    authConfiguration?: {
        status: BackendDeploymentStatus;
        lastUpdated: Date | undefined;
        userPoolId: string;
    };
    storageConfiguration?: {
        status: BackendDeploymentStatus;
        lastUpdated: Date | undefined;
        s3BucketName: string;
    };
    functionConfigurations?: FunctionConfiguration[];
};
export type FunctionConfiguration = {
    status: BackendDeploymentStatus;
    lastUpdated: Date | undefined;
    functionName: string;
};
export type ListBackendsResponse = {
    getBackendSummaryByPage: () => AsyncGenerator<BackendSummaryMetadata[]>;
};
export declare enum BackendDeploymentStatus {
    DEPLOYED = "DEPLOYED",
    FAILED = "FAILED",
    DEPLOYING = "DEPLOYING",
    DELETING = "DELETING",
    DELETED = "DELETED",
    UNKNOWN = "UNKNOWN"
}
export declare enum BackendStatus {
    DELETE_FAILED = "DELETE_FAILED"
}
export type DeployedBackendClient = {
    listBackends: (listBackendsRequest?: ListBackendsRequest) => ListBackendsResponse;
    deleteSandbox: (sandboxBackendIdentifier: Omit<BackendIdentifier, 'type'>) => Promise<void>;
    getBackendMetadata: (backendId: BackendIdentifier) => Promise<BackendMetadata>;
};
/**
 * Factory to create a DeploymentClient
 */
export declare class DeployedBackendClientFactory {
    /**
     * Returns a single instance of DeploymentClient
     */
    getInstance(awsClientProvider: AWSClientProvider<{
        getS3Client: S3Client;
        getAmplifyClient: AmplifyClient;
        getCloudFormationClient: CloudFormationClient;
    }>): DeployedBackendClient;
}
//# sourceMappingURL=deployed_backend_client_factory.d.ts.map