import { AppNameAndBranchMainStackNameResolver, } from './stack-name-resolvers/app_name_and_branch_main_stack_name_resolver.js';
import { PassThroughMainStackNameResolver, } from './stack-name-resolvers/passthrough_main_stack_name_resolver.js';
import { BackendIdentifierMainStackNameResolver } from './stack-name-resolvers/backend_identifier_main_stack_name_resolver.js';
import { StackMetadataBackendOutputRetrievalStrategy } from './stack_metadata_output_retrieval_strategy.js';
/**
 * Asserts that a BackendIdentifier is a BackendIdentifier
 */
export const isBackendIdentifier = (backendIdentifier) => {
    return ('namespace' in backendIdentifier &&
        'name' in backendIdentifier &&
        'type' in backendIdentifier);
};
/**
 * Asserts that a BackendIdentifier is a AppNameAndBranchBackendIdentifier
 */
export const isAppNameAndBranchIdentifier = (backendIdentifier) => {
    return 'appName' in backendIdentifier;
};
/**
 * Asserts that a BackendIdentifier is a StackIdentifier
 */
export const isStackIdentifier = (backendIdentifier) => {
    return 'stackName' in backendIdentifier;
};
/**
 * Constructs an OutputRetrievalStrategy depending on the type of StackIdentifier
 */
export class BackendOutputFetcherFactory {
    cfnClient;
    amplifyClient;
    /**
     * Instantiates the factory
     */
    constructor(cfnClient, amplifyClient) {
        this.cfnClient = cfnClient;
        this.amplifyClient = amplifyClient;
    }
    getStrategy = (backendIdentifier) => {
        if (isStackIdentifier(backendIdentifier)) {
            return new StackMetadataBackendOutputRetrievalStrategy(this.cfnClient, new PassThroughMainStackNameResolver(backendIdentifier));
        }
        else if (isBackendIdentifier(backendIdentifier)) {
            return new StackMetadataBackendOutputRetrievalStrategy(this.cfnClient, new BackendIdentifierMainStackNameResolver(backendIdentifier));
        }
        return new StackMetadataBackendOutputRetrievalStrategy(this.cfnClient, new AppNameAndBranchMainStackNameResolver(this.amplifyClient, backendIdentifier));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9vdXRwdXRfZmV0Y2hlcl9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2JhY2tlbmRfb3V0cHV0X2ZldGNoZXJfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBRUwscUNBQXFDLEdBQ3RDLE1BQU0sd0VBQXdFLENBQUM7QUFDaEYsT0FBTyxFQUNMLGdDQUFnQyxHQUVqQyxNQUFNLGdFQUFnRSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxzQ0FBc0MsRUFBRSxNQUFNLHVFQUF1RSxDQUFDO0FBQy9ILE9BQU8sRUFBRSwyQ0FBMkMsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBRzVHOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsQ0FDakMsaUJBQTRDLEVBQ0osRUFBRTtJQUMxQyxPQUFPLENBQ0wsV0FBVyxJQUFJLGlCQUFpQjtRQUNoQyxNQUFNLElBQUksaUJBQWlCO1FBQzNCLE1BQU0sSUFBSSxpQkFBaUIsQ0FDNUIsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUNGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQUcsQ0FDMUMsaUJBQTRDLEVBQ1ksRUFBRTtJQUMxRCxPQUFPLFNBQVMsSUFBSSxpQkFBaUIsQ0FBQztBQUN4QyxDQUFDLENBQUM7QUFDRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQy9CLGlCQUE0QyxFQUNOLEVBQUU7SUFDeEMsT0FBTyxXQUFXLElBQUksaUJBQWlCLENBQUM7QUFDMUMsQ0FBQyxDQUFDO0FBQ0Y7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMkJBQTJCO0lBSzVCO0lBQ0E7SUFMVjs7T0FFRztJQUNILFlBQ1UsU0FBK0IsRUFDL0IsYUFBNEI7UUFENUIsY0FBUyxHQUFULFNBQVMsQ0FBc0I7UUFDL0Isa0JBQWEsR0FBYixhQUFhLENBQWU7SUFDbkMsQ0FBQztJQUNKLFdBQVcsR0FBRyxDQUFDLGlCQUE0QyxFQUFFLEVBQUU7UUFDN0QsSUFBSSxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO1lBQ3hDLE9BQU8sSUFBSSwyQ0FBMkMsQ0FDcEQsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLGdDQUFnQyxDQUFDLGlCQUFpQixDQUFDLENBQ3hELENBQUM7U0FDSDthQUFNLElBQUksbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsRUFBRTtZQUNqRCxPQUFPLElBQUksMkNBQTJDLENBQ3BELElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxzQ0FBc0MsQ0FBQyxpQkFBaUIsQ0FBQyxDQUM5RCxDQUFDO1NBQ0g7UUFDRCxPQUFPLElBQUksMkNBQTJDLENBQ3BELElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxxQ0FBcUMsQ0FDdkMsSUFBSSxDQUFDLGFBQWEsRUFDbEIsaUJBQWlCLENBQ2xCLENBQ0YsQ0FBQztJQUNKLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW1wbGlmeUNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1hbXBsaWZ5JztcbmltcG9ydCB7IENsb3VkRm9ybWF0aW9uQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3VkZm9ybWF0aW9uJztcbmltcG9ydCB7IERlcGxveWVkQmFja2VuZElkZW50aWZpZXIgfSBmcm9tICcuL2RlcGxveWVkX2JhY2tlbmRfaWRlbnRpZmllci5qcyc7XG5pbXBvcnQge1xuICBBcHBOYW1lQW5kQnJhbmNoQmFja2VuZElkZW50aWZpZXIsXG4gIEFwcE5hbWVBbmRCcmFuY2hNYWluU3RhY2tOYW1lUmVzb2x2ZXIsXG59IGZyb20gJy4vc3RhY2stbmFtZS1yZXNvbHZlcnMvYXBwX25hbWVfYW5kX2JyYW5jaF9tYWluX3N0YWNrX25hbWVfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHtcbiAgUGFzc1Rocm91Z2hNYWluU3RhY2tOYW1lUmVzb2x2ZXIsXG4gIFN0YWNrSWRlbnRpZmllcixcbn0gZnJvbSAnLi9zdGFjay1uYW1lLXJlc29sdmVycy9wYXNzdGhyb3VnaF9tYWluX3N0YWNrX25hbWVfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHsgQmFja2VuZElkZW50aWZpZXJNYWluU3RhY2tOYW1lUmVzb2x2ZXIgfSBmcm9tICcuL3N0YWNrLW5hbWUtcmVzb2x2ZXJzL2JhY2tlbmRfaWRlbnRpZmllcl9tYWluX3N0YWNrX25hbWVfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHsgU3RhY2tNZXRhZGF0YUJhY2tlbmRPdXRwdXRSZXRyaWV2YWxTdHJhdGVneSB9IGZyb20gJy4vc3RhY2tfbWV0YWRhdGFfb3V0cHV0X3JldHJpZXZhbF9zdHJhdGVneS5qcyc7XG5pbXBvcnQgeyBCYWNrZW5kSWRlbnRpZmllciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuXG4vKipcbiAqIEFzc2VydHMgdGhhdCBhIEJhY2tlbmRJZGVudGlmaWVyIGlzIGEgQmFja2VuZElkZW50aWZpZXJcbiAqL1xuZXhwb3J0IGNvbnN0IGlzQmFja2VuZElkZW50aWZpZXIgPSAoXG4gIGJhY2tlbmRJZGVudGlmaWVyOiBEZXBsb3llZEJhY2tlbmRJZGVudGlmaWVyXG4pOiBiYWNrZW5kSWRlbnRpZmllciBpcyBCYWNrZW5kSWRlbnRpZmllciA9PiB7XG4gIHJldHVybiAoXG4gICAgJ25hbWVzcGFjZScgaW4gYmFja2VuZElkZW50aWZpZXIgJiZcbiAgICAnbmFtZScgaW4gYmFja2VuZElkZW50aWZpZXIgJiZcbiAgICAndHlwZScgaW4gYmFja2VuZElkZW50aWZpZXJcbiAgKTtcbn07XG4vKipcbiAqIEFzc2VydHMgdGhhdCBhIEJhY2tlbmRJZGVudGlmaWVyIGlzIGEgQXBwTmFtZUFuZEJyYW5jaEJhY2tlbmRJZGVudGlmaWVyXG4gKi9cbmV4cG9ydCBjb25zdCBpc0FwcE5hbWVBbmRCcmFuY2hJZGVudGlmaWVyID0gKFxuICBiYWNrZW5kSWRlbnRpZmllcjogRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllclxuKTogYmFja2VuZElkZW50aWZpZXIgaXMgQXBwTmFtZUFuZEJyYW5jaEJhY2tlbmRJZGVudGlmaWVyID0+IHtcbiAgcmV0dXJuICdhcHBOYW1lJyBpbiBiYWNrZW5kSWRlbnRpZmllcjtcbn07XG4vKipcbiAqIEFzc2VydHMgdGhhdCBhIEJhY2tlbmRJZGVudGlmaWVyIGlzIGEgU3RhY2tJZGVudGlmaWVyXG4gKi9cbmV4cG9ydCBjb25zdCBpc1N0YWNrSWRlbnRpZmllciA9IChcbiAgYmFja2VuZElkZW50aWZpZXI6IERlcGxveWVkQmFja2VuZElkZW50aWZpZXJcbik6IGJhY2tlbmRJZGVudGlmaWVyIGlzIFN0YWNrSWRlbnRpZmllciA9PiB7XG4gIHJldHVybiAnc3RhY2tOYW1lJyBpbiBiYWNrZW5kSWRlbnRpZmllcjtcbn07XG4vKipcbiAqIENvbnN0cnVjdHMgYW4gT3V0cHV0UmV0cmlldmFsU3RyYXRlZ3kgZGVwZW5kaW5nIG9uIHRoZSB0eXBlIG9mIFN0YWNrSWRlbnRpZmllclxuICovXG5leHBvcnQgY2xhc3MgQmFja2VuZE91dHB1dEZldGNoZXJGYWN0b3J5IHtcbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyB0aGUgZmFjdG9yeVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBjZm5DbGllbnQ6IENsb3VkRm9ybWF0aW9uQ2xpZW50LFxuICAgIHByaXZhdGUgYW1wbGlmeUNsaWVudDogQW1wbGlmeUNsaWVudFxuICApIHt9XG4gIGdldFN0cmF0ZWd5ID0gKGJhY2tlbmRJZGVudGlmaWVyOiBEZXBsb3llZEJhY2tlbmRJZGVudGlmaWVyKSA9PiB7XG4gICAgaWYgKGlzU3RhY2tJZGVudGlmaWVyKGJhY2tlbmRJZGVudGlmaWVyKSkge1xuICAgICAgcmV0dXJuIG5ldyBTdGFja01ldGFkYXRhQmFja2VuZE91dHB1dFJldHJpZXZhbFN0cmF0ZWd5KFxuICAgICAgICB0aGlzLmNmbkNsaWVudCxcbiAgICAgICAgbmV3IFBhc3NUaHJvdWdoTWFpblN0YWNrTmFtZVJlc29sdmVyKGJhY2tlbmRJZGVudGlmaWVyKVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzQmFja2VuZElkZW50aWZpZXIoYmFja2VuZElkZW50aWZpZXIpKSB7XG4gICAgICByZXR1cm4gbmV3IFN0YWNrTWV0YWRhdGFCYWNrZW5kT3V0cHV0UmV0cmlldmFsU3RyYXRlZ3koXG4gICAgICAgIHRoaXMuY2ZuQ2xpZW50LFxuICAgICAgICBuZXcgQmFja2VuZElkZW50aWZpZXJNYWluU3RhY2tOYW1lUmVzb2x2ZXIoYmFja2VuZElkZW50aWZpZXIpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFN0YWNrTWV0YWRhdGFCYWNrZW5kT3V0cHV0UmV0cmlldmFsU3RyYXRlZ3koXG4gICAgICB0aGlzLmNmbkNsaWVudCxcbiAgICAgIG5ldyBBcHBOYW1lQW5kQnJhbmNoTWFpblN0YWNrTmFtZVJlc29sdmVyKFxuICAgICAgICB0aGlzLmFtcGxpZnlDbGllbnQsXG4gICAgICAgIGJhY2tlbmRJZGVudGlmaWVyXG4gICAgICApXG4gICAgKTtcbiAgfTtcbn1cbiJdfQ==