import fs from 'fs/promises';
import path from 'path';
/**
 * Defines a result for Graphql document generation
 */
export class AppsyncGraphqlGenerationResult {
    operations;
    /**
     * Instantiates an AppsyncGraphqlGenerationResult
     * @param operations A record of FileName to FileContent
     * in the format of Record<string,string>
     */
    constructor(operations) {
        this.operations = operations;
    }
    writeToDirectory = async (directoryPath) => {
        const filesWritten = [];
        await Promise.all(Object.entries(this.operations).map(async ([fileName, content]) => {
            await this.writeSchemaToFile(directoryPath, fileName, content).then((filePath) => {
                filesWritten.push(path.relative(process.cwd(), filePath));
                return;
            });
        }));
        return { filesWritten };
    };
    getResults = async () => {
        return this.operations;
    };
    writeSchemaToFile = async (basePath, filePath, contents) => {
        const absFilePath = path.resolve(path.join(basePath, filePath));
        await fs.mkdir(path.dirname(absFilePath), { recursive: true });
        await fs.writeFile(absFilePath, contents);
        return absFilePath;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwc3luY19ncmFwaHFsX2dlbmVyYXRpb25fcmVzdWx0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FwcHN5bmNfZ3JhcGhxbF9nZW5lcmF0aW9uX3Jlc3VsdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDN0IsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBSXhCOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDhCQUE4QjtJQU1yQjtJQUxwQjs7OztPQUlHO0lBQ0gsWUFBb0IsVUFBNEI7UUFBNUIsZUFBVSxHQUFWLFVBQVUsQ0FBa0I7SUFBRyxDQUFDO0lBRXBELGdCQUFnQixHQUFHLEtBQUssRUFBRSxhQUFxQixFQUFFLEVBQUU7UUFDakQsTUFBTSxZQUFZLEdBQWEsRUFBRSxDQUFDO1FBQ2xDLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FDZixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUU7WUFDaEUsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQ2pFLENBQUMsUUFBZ0IsRUFBRSxFQUFFO2dCQUNuQixZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQzFELE9BQU87WUFDVCxDQUFDLENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUNILENBQUM7UUFFRixPQUFPLEVBQUUsWUFBWSxFQUFFLENBQUM7SUFDMUIsQ0FBQyxDQUFDO0lBRUYsVUFBVSxHQUFHLEtBQUssSUFBcUMsRUFBRTtRQUN2RCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQyxDQUFDO0lBRU0saUJBQWlCLEdBQUcsS0FBSyxFQUMvQixRQUFnQixFQUNoQixRQUFnQixFQUNoQixRQUFnQixFQUNDLEVBQUU7UUFDbkIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDL0QsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMxQyxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IEdlbmVyYXRpb25SZXN1bHQgfSBmcm9tICcuL21vZGVsX2dlbmVyYXRvci5qcyc7XG5cbnR5cGUgQ2xpZW50T3BlcmF0aW9ucyA9IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG4vKipcbiAqIERlZmluZXMgYSByZXN1bHQgZm9yIEdyYXBocWwgZG9jdW1lbnQgZ2VuZXJhdGlvblxuICovXG5leHBvcnQgY2xhc3MgQXBwc3luY0dyYXBocWxHZW5lcmF0aW9uUmVzdWx0IGltcGxlbWVudHMgR2VuZXJhdGlvblJlc3VsdCB7XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgYW4gQXBwc3luY0dyYXBocWxHZW5lcmF0aW9uUmVzdWx0XG4gICAqIEBwYXJhbSBvcGVyYXRpb25zIEEgcmVjb3JkIG9mIEZpbGVOYW1lIHRvIEZpbGVDb250ZW50XG4gICAqIGluIHRoZSBmb3JtYXQgb2YgUmVjb3JkPHN0cmluZyxzdHJpbmc+XG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG9wZXJhdGlvbnM6IENsaWVudE9wZXJhdGlvbnMpIHt9XG5cbiAgd3JpdGVUb0RpcmVjdG9yeSA9IGFzeW5jIChkaXJlY3RvcnlQYXRoOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBmaWxlc1dyaXR0ZW46IHN0cmluZ1tdID0gW107XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICBPYmplY3QuZW50cmllcyh0aGlzLm9wZXJhdGlvbnMpLm1hcChhc3luYyAoW2ZpbGVOYW1lLCBjb250ZW50XSkgPT4ge1xuICAgICAgICBhd2FpdCB0aGlzLndyaXRlU2NoZW1hVG9GaWxlKGRpcmVjdG9yeVBhdGgsIGZpbGVOYW1lLCBjb250ZW50KS50aGVuKFxuICAgICAgICAgIChmaWxlUGF0aDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBmaWxlc1dyaXR0ZW4ucHVzaChwYXRoLnJlbGF0aXZlKHByb2Nlc3MuY3dkKCksIGZpbGVQYXRoKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgcmV0dXJuIHsgZmlsZXNXcml0dGVuIH07XG4gIH07XG5cbiAgZ2V0UmVzdWx0cyA9IGFzeW5jICgpOiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+ID0+IHtcbiAgICByZXR1cm4gdGhpcy5vcGVyYXRpb25zO1xuICB9O1xuXG4gIHByaXZhdGUgd3JpdGVTY2hlbWFUb0ZpbGUgPSBhc3luYyAoXG4gICAgYmFzZVBhdGg6IHN0cmluZyxcbiAgICBmaWxlUGF0aDogc3RyaW5nLFxuICAgIGNvbnRlbnRzOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgICBjb25zdCBhYnNGaWxlUGF0aCA9IHBhdGgucmVzb2x2ZShwYXRoLmpvaW4oYmFzZVBhdGgsIGZpbGVQYXRoKSk7XG4gICAgYXdhaXQgZnMubWtkaXIocGF0aC5kaXJuYW1lKGFic0ZpbGVQYXRoKSwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgYXdhaXQgZnMud3JpdGVGaWxlKGFic0ZpbGVQYXRoLCBjb250ZW50cyk7XG4gICAgcmV0dXJuIGFic0ZpbGVQYXRoO1xuICB9O1xufVxuIl19