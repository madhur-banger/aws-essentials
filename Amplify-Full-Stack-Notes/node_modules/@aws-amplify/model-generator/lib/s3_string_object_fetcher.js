import { GetObjectCommand } from '@aws-sdk/client-s3';
/**
 * Handles fetching an object from an s3 bucket and parsing the object contents to a string
 */
export class S3StringObjectFetcher {
    s3Client;
    /**
     * Creates an S3StringObjectFetcher with the provided s3 client
     */
    constructor(s3Client) {
        this.s3Client = s3Client;
    }
    /**
     * Fetches an s3 object and converts its contents to a string
     */
    fetch = async (uri) => {
        const { bucket, key } = this.parseS3Uri(uri);
        const getSchemaCommandResult = await this.s3Client.send(new GetObjectCommand({ Bucket: bucket, Key: key }));
        const schema = await getSchemaCommandResult.Body?.transformToString();
        if (!schema) {
            // eslint-disable-next-line amplify-backend-rules/prefer-amplify-errors
            throw new Error('Error on parsing output schema');
        }
        return schema;
    };
    parseS3Uri = (uri) => {
        const { hostname, pathname } = new URL(uri);
        return {
            bucket: hostname,
            key: pathname.replace('/', ''),
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczNfc3RyaW5nX29iamVjdF9mZXRjaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3MzX3N0cmluZ19vYmplY3RfZmV0Y2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQVksTUFBTSxvQkFBb0IsQ0FBQztBQUVoRTs7R0FFRztBQUNILE1BQU0sT0FBTyxxQkFBcUI7SUFJSDtJQUg3Qjs7T0FFRztJQUNILFlBQTZCLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7SUFBRyxDQUFDO0lBRW5EOztPQUVHO0lBQ0gsS0FBSyxHQUFHLEtBQUssRUFBRSxHQUFXLEVBQUUsRUFBRTtRQUM1QixNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0MsTUFBTSxzQkFBc0IsR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNyRCxJQUFJLGdCQUFnQixDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FDbkQsQ0FBQztRQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0sc0JBQXNCLENBQUMsSUFBSSxFQUFFLGlCQUFpQixFQUFFLENBQUM7UUFDdEUsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLHVFQUF1RTtZQUN2RSxNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7U0FDbkQ7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDLENBQUM7SUFFTSxVQUFVLEdBQUcsQ0FBQyxHQUFXLEVBQW1DLEVBQUU7UUFDcEUsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QyxPQUFPO1lBQ0wsTUFBTSxFQUFFLFFBQVE7WUFDaEIsR0FBRyxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQztTQUMvQixDQUFDO0lBQ0osQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHZXRPYmplY3RDb21tYW5kLCBTM0NsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1zMyc7XG5cbi8qKlxuICogSGFuZGxlcyBmZXRjaGluZyBhbiBvYmplY3QgZnJvbSBhbiBzMyBidWNrZXQgYW5kIHBhcnNpbmcgdGhlIG9iamVjdCBjb250ZW50cyB0byBhIHN0cmluZ1xuICovXG5leHBvcnQgY2xhc3MgUzNTdHJpbmdPYmplY3RGZXRjaGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gUzNTdHJpbmdPYmplY3RGZXRjaGVyIHdpdGggdGhlIHByb3ZpZGVkIHMzIGNsaWVudFxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBzM0NsaWVudDogUzNDbGllbnQpIHt9XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgYW4gczMgb2JqZWN0IGFuZCBjb252ZXJ0cyBpdHMgY29udGVudHMgdG8gYSBzdHJpbmdcbiAgICovXG4gIGZldGNoID0gYXN5bmMgKHVyaTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgeyBidWNrZXQsIGtleSB9ID0gdGhpcy5wYXJzZVMzVXJpKHVyaSk7XG4gICAgY29uc3QgZ2V0U2NoZW1hQ29tbWFuZFJlc3VsdCA9IGF3YWl0IHRoaXMuczNDbGllbnQuc2VuZChcbiAgICAgIG5ldyBHZXRPYmplY3RDb21tYW5kKHsgQnVja2V0OiBidWNrZXQsIEtleToga2V5IH0pXG4gICAgKTtcbiAgICBjb25zdCBzY2hlbWEgPSBhd2FpdCBnZXRTY2hlbWFDb21tYW5kUmVzdWx0LkJvZHk/LnRyYW5zZm9ybVRvU3RyaW5nKCk7XG4gICAgaWYgKCFzY2hlbWEpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhbXBsaWZ5LWJhY2tlbmQtcnVsZXMvcHJlZmVyLWFtcGxpZnktZXJyb3JzXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIG9uIHBhcnNpbmcgb3V0cHV0IHNjaGVtYScpO1xuICAgIH1cbiAgICByZXR1cm4gc2NoZW1hO1xuICB9O1xuXG4gIHByaXZhdGUgcGFyc2VTM1VyaSA9ICh1cmk6IHN0cmluZyk6IHsgYnVja2V0OiBzdHJpbmc7IGtleTogc3RyaW5nIH0gPT4ge1xuICAgIGNvbnN0IHsgaG9zdG5hbWUsIHBhdGhuYW1lIH0gPSBuZXcgVVJMKHVyaSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJ1Y2tldDogaG9zdG5hbWUsXG4gICAgICBrZXk6IHBhdGhuYW1lLnJlcGxhY2UoJy8nLCAnJyksXG4gICAgfTtcbiAgfTtcbn1cbiJdfQ==