import { BackendOutputClientError, BackendOutputClientErrorType, } from '@aws-amplify/deployed-backend-client';
import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * Common Error handling for BackendOutputClient.getOutput() in model-generator package.
 */
export const getBackendOutputWithErrorHandling = async (backendOutputClient, backendIdentifier) => {
    try {
        return await backendOutputClient.getOutput(backendIdentifier);
    }
    catch (error) {
        if (error instanceof BackendOutputClientError &&
            error.code === BackendOutputClientErrorType.DEPLOYMENT_IN_PROGRESS) {
            throw new AmplifyUserError('DeploymentInProgressError', {
                message: 'Deployment is currently in progress.',
                resolution: 'Re-run this command once the deployment completes.',
            }, error);
        }
        if (error instanceof BackendOutputClientError &&
            error.code === BackendOutputClientErrorType.NO_STACK_FOUND) {
            throw new AmplifyUserError('StackDoesNotExistError', {
                message: 'Stack does not exist.',
                resolution: 'Ensure the CloudFormation stack ID or Amplify App ID and branch specified are correct and exists, then re-run this command.',
            }, error);
        }
        if (error instanceof BackendOutputClientError &&
            error.code === BackendOutputClientErrorType.CREDENTIALS_ERROR) {
            throw new AmplifyUserError('CredentialsError', {
                message: 'Unable to get backend outputs due to invalid credentials.',
                resolution: 'Ensure your AWS credentials are correctly set and refreshed.',
            }, error);
        }
        if (error instanceof BackendOutputClientError &&
            error.code === BackendOutputClientErrorType.ACCESS_DENIED) {
            throw new AmplifyUserError('AccessDeniedError', {
                message: 'Unable to get backend outputs due to insufficient permissions.',
                resolution: 'Ensure you have permissions to call cloudformation:GetTemplateSummary.',
            }, error);
        }
        throw error;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0X2JhY2tlbmRfb3V0cHV0X3dpdGhfZXJyb3JfaGFuZGxpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZ2V0X2JhY2tlbmRfb3V0cHV0X3dpdGhfZXJyb3JfaGFuZGxpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLHdCQUF3QixFQUN4Qiw0QkFBNEIsR0FFN0IsTUFBTSxzQ0FBc0MsQ0FBQztBQUM5QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUU5RDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUFHLEtBQUssRUFDcEQsbUJBQXdDLEVBQ3hDLGlCQUE0QyxFQUM1QyxFQUFFO0lBQ0YsSUFBSTtRQUNGLE9BQU8sTUFBTSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQztLQUMvRDtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsSUFDRSxLQUFLLFlBQVksd0JBQXdCO1lBQ3pDLEtBQUssQ0FBQyxJQUFJLEtBQUssNEJBQTRCLENBQUMsc0JBQXNCLEVBQ2xFO1lBQ0EsTUFBTSxJQUFJLGdCQUFnQixDQUN4QiwyQkFBMkIsRUFDM0I7Z0JBQ0UsT0FBTyxFQUFFLHNDQUFzQztnQkFDL0MsVUFBVSxFQUFFLG9EQUFvRDthQUNqRSxFQUNELEtBQUssQ0FDTixDQUFDO1NBQ0g7UUFDRCxJQUNFLEtBQUssWUFBWSx3QkFBd0I7WUFDekMsS0FBSyxDQUFDLElBQUksS0FBSyw0QkFBNEIsQ0FBQyxjQUFjLEVBQzFEO1lBQ0EsTUFBTSxJQUFJLGdCQUFnQixDQUN4Qix3QkFBd0IsRUFDeEI7Z0JBQ0UsT0FBTyxFQUFFLHVCQUF1QjtnQkFDaEMsVUFBVSxFQUNSLDZIQUE2SDthQUNoSSxFQUNELEtBQUssQ0FDTixDQUFDO1NBQ0g7UUFDRCxJQUNFLEtBQUssWUFBWSx3QkFBd0I7WUFDekMsS0FBSyxDQUFDLElBQUksS0FBSyw0QkFBNEIsQ0FBQyxpQkFBaUIsRUFDN0Q7WUFDQSxNQUFNLElBQUksZ0JBQWdCLENBQ3hCLGtCQUFrQixFQUNsQjtnQkFDRSxPQUFPLEVBQUUsMkRBQTJEO2dCQUNwRSxVQUFVLEVBQ1IsOERBQThEO2FBQ2pFLEVBQ0QsS0FBSyxDQUNOLENBQUM7U0FDSDtRQUNELElBQ0UsS0FBSyxZQUFZLHdCQUF3QjtZQUN6QyxLQUFLLENBQUMsSUFBSSxLQUFLLDRCQUE0QixDQUFDLGFBQWEsRUFDekQ7WUFDQSxNQUFNLElBQUksZ0JBQWdCLENBQ3hCLG1CQUFtQixFQUNuQjtnQkFDRSxPQUFPLEVBQ0wsZ0VBQWdFO2dCQUNsRSxVQUFVLEVBQ1Isd0VBQXdFO2FBQzNFLEVBQ0QsS0FBSyxDQUNOLENBQUM7U0FDSDtRQUVELE1BQU0sS0FBSyxDQUFDO0tBQ2I7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBCYWNrZW5kT3V0cHV0Q2xpZW50LFxuICBCYWNrZW5kT3V0cHV0Q2xpZW50RXJyb3IsXG4gIEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvclR5cGUsXG4gIERlcGxveWVkQmFja2VuZElkZW50aWZpZXIsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9kZXBsb3llZC1iYWNrZW5kLWNsaWVudCc7XG5pbXBvcnQgeyBBbXBsaWZ5VXNlckVycm9yIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuXG4vKipcbiAqIENvbW1vbiBFcnJvciBoYW5kbGluZyBmb3IgQmFja2VuZE91dHB1dENsaWVudC5nZXRPdXRwdXQoKSBpbiBtb2RlbC1nZW5lcmF0b3IgcGFja2FnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldEJhY2tlbmRPdXRwdXRXaXRoRXJyb3JIYW5kbGluZyA9IGFzeW5jIChcbiAgYmFja2VuZE91dHB1dENsaWVudDogQmFja2VuZE91dHB1dENsaWVudCxcbiAgYmFja2VuZElkZW50aWZpZXI6IERlcGxveWVkQmFja2VuZElkZW50aWZpZXJcbikgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCBiYWNrZW5kT3V0cHV0Q2xpZW50LmdldE91dHB1dChiYWNrZW5kSWRlbnRpZmllcik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKFxuICAgICAgZXJyb3IgaW5zdGFuY2VvZiBCYWNrZW5kT3V0cHV0Q2xpZW50RXJyb3IgJiZcbiAgICAgIGVycm9yLmNvZGUgPT09IEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvclR5cGUuREVQTE9ZTUVOVF9JTl9QUk9HUkVTU1xuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICdEZXBsb3ltZW50SW5Qcm9ncmVzc0Vycm9yJyxcbiAgICAgICAge1xuICAgICAgICAgIG1lc3NhZ2U6ICdEZXBsb3ltZW50IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy4nLFxuICAgICAgICAgIHJlc29sdXRpb246ICdSZS1ydW4gdGhpcyBjb21tYW5kIG9uY2UgdGhlIGRlcGxveW1lbnQgY29tcGxldGVzLicsXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBlcnJvciBpbnN0YW5jZW9mIEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvciAmJlxuICAgICAgZXJyb3IuY29kZSA9PT0gQmFja2VuZE91dHB1dENsaWVudEVycm9yVHlwZS5OT19TVEFDS19GT1VORFxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICdTdGFja0RvZXNOb3RFeGlzdEVycm9yJyxcbiAgICAgICAge1xuICAgICAgICAgIG1lc3NhZ2U6ICdTdGFjayBkb2VzIG5vdCBleGlzdC4nLFxuICAgICAgICAgIHJlc29sdXRpb246XG4gICAgICAgICAgICAnRW5zdXJlIHRoZSBDbG91ZEZvcm1hdGlvbiBzdGFjayBJRCBvciBBbXBsaWZ5IEFwcCBJRCBhbmQgYnJhbmNoIHNwZWNpZmllZCBhcmUgY29ycmVjdCBhbmQgZXhpc3RzLCB0aGVuIHJlLXJ1biB0aGlzIGNvbW1hbmQuJyxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3JcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIGVycm9yIGluc3RhbmNlb2YgQmFja2VuZE91dHB1dENsaWVudEVycm9yICYmXG4gICAgICBlcnJvci5jb2RlID09PSBCYWNrZW5kT3V0cHV0Q2xpZW50RXJyb3JUeXBlLkNSRURFTlRJQUxTX0VSUk9SXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcihcbiAgICAgICAgJ0NyZWRlbnRpYWxzRXJyb3InLFxuICAgICAgICB7XG4gICAgICAgICAgbWVzc2FnZTogJ1VuYWJsZSB0byBnZXQgYmFja2VuZCBvdXRwdXRzIGR1ZSB0byBpbnZhbGlkIGNyZWRlbnRpYWxzLicsXG4gICAgICAgICAgcmVzb2x1dGlvbjpcbiAgICAgICAgICAgICdFbnN1cmUgeW91ciBBV1MgY3JlZGVudGlhbHMgYXJlIGNvcnJlY3RseSBzZXQgYW5kIHJlZnJlc2hlZC4nLFxuICAgICAgICB9LFxuICAgICAgICBlcnJvclxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgZXJyb3IgaW5zdGFuY2VvZiBCYWNrZW5kT3V0cHV0Q2xpZW50RXJyb3IgJiZcbiAgICAgIGVycm9yLmNvZGUgPT09IEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvclR5cGUuQUNDRVNTX0RFTklFRFxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICdBY2Nlc3NEZW5pZWRFcnJvcicsXG4gICAgICAgIHtcbiAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgJ1VuYWJsZSB0byBnZXQgYmFja2VuZCBvdXRwdXRzIGR1ZSB0byBpbnN1ZmZpY2llbnQgcGVybWlzc2lvbnMuJyxcbiAgICAgICAgICByZXNvbHV0aW9uOlxuICAgICAgICAgICAgJ0Vuc3VyZSB5b3UgaGF2ZSBwZXJtaXNzaW9ucyB0byBjYWxsIGNsb3VkZm9ybWF0aW9uOkdldFRlbXBsYXRlU3VtbWFyeS4nLFxuICAgICAgICB9LFxuICAgICAgICBlcnJvclxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcbiJdfQ==