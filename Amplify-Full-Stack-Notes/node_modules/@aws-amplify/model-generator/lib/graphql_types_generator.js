import { generateStatements, generateTypes, } from '@aws-amplify/graphql-generator';
import { Source } from 'graphql';
/**
 * Generates GraphQL types for a given AppSync API
 */
export class AppSyncGraphqlTypesGenerator {
    fetchSchema;
    resultBuilder;
    /**
     * Configures the AppSyncGraphqlTypesGenerator
     */
    constructor(fetchSchema, resultBuilder) {
        this.fetchSchema = fetchSchema;
        this.resultBuilder = resultBuilder;
    }
    generateTypes = async ({ target, multipleSwiftFiles, maxDepth, typenameIntrospection, }) => {
        const schema = await this.fetchSchema();
        if (!schema) {
            // eslint-disable-next-line amplify-backend-rules/prefer-amplify-errors
            throw new Error('Invalid schema');
        }
        const generatedStatements = generateStatements({
            schema,
            maxDepth,
            typenameIntrospection,
            target: 'graphql',
        });
        const queries = Object.entries(generatedStatements).map(([filename, contents]) => new Source(contents, filename));
        const generatedTypes = await generateTypes({
            schema,
            target,
            queries,
            multipleSwiftFiles,
        });
        return this.resultBuilder(generatedTypes);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhxbF90eXBlc19nZW5lcmF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZ3JhcGhxbF90eXBlc19nZW5lcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGtCQUFrQixFQUNsQixhQUFhLEdBQ2QsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN4QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBT2pDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDRCQUE0QjtJQUs3QjtJQUNBO0lBTFY7O09BRUc7SUFDSCxZQUNVLFdBQWtDLEVBQ2xDLGFBQW9FO1FBRHBFLGdCQUFXLEdBQVgsV0FBVyxDQUF1QjtRQUNsQyxrQkFBYSxHQUFiLGFBQWEsQ0FBdUQ7SUFDM0UsQ0FBQztJQUVKLGFBQWEsR0FBRyxLQUFLLEVBQUUsRUFDckIsTUFBTSxFQUNOLGtCQUFrQixFQUNsQixRQUFRLEVBQ1IscUJBQXFCLEdBQ0ssRUFBRSxFQUFFO1FBQzlCLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRXhDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCx1RUFBdUU7WUFDdkUsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1NBQ25DO1FBRUQsTUFBTSxtQkFBbUIsR0FBRyxrQkFBa0IsQ0FBQztZQUM3QyxNQUFNO1lBQ04sUUFBUTtZQUNSLHFCQUFxQjtZQUNyQixNQUFNLEVBQUUsU0FBUztTQUNsQixDQUFDLENBQUM7UUFFSCxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUMsR0FBRyxDQUNyRCxDQUFDLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQ3pELENBQUM7UUFFRixNQUFNLGNBQWMsR0FBRyxNQUFNLGFBQWEsQ0FBQztZQUN6QyxNQUFNO1lBQ04sTUFBTTtZQUNOLE9BQU87WUFDUCxrQkFBa0I7U0FDbkIsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgZ2VuZXJhdGVTdGF0ZW1lbnRzLFxuICBnZW5lcmF0ZVR5cGVzLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvZ3JhcGhxbC1nZW5lcmF0b3InO1xuaW1wb3J0IHsgU291cmNlIH0gZnJvbSAnZ3JhcGhxbCc7XG5pbXBvcnQge1xuICBHZW5lcmF0aW9uUmVzdWx0LFxuICBHcmFwaHFsVHlwZXNHZW5lcmF0b3IsXG4gIFR5cGVzR2VuZXJhdGlvblBhcmFtZXRlcnMsXG59IGZyb20gJy4vbW9kZWxfZ2VuZXJhdG9yLmpzJztcblxuLyoqXG4gKiBHZW5lcmF0ZXMgR3JhcGhRTCB0eXBlcyBmb3IgYSBnaXZlbiBBcHBTeW5jIEFQSVxuICovXG5leHBvcnQgY2xhc3MgQXBwU3luY0dyYXBocWxUeXBlc0dlbmVyYXRvciBpbXBsZW1lbnRzIEdyYXBocWxUeXBlc0dlbmVyYXRvciB7XG4gIC8qKlxuICAgKiBDb25maWd1cmVzIHRoZSBBcHBTeW5jR3JhcGhxbFR5cGVzR2VuZXJhdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGZldGNoU2NoZW1hOiAoKSA9PiBQcm9taXNlPHN0cmluZz4sXG4gICAgcHJpdmF0ZSByZXN1bHRCdWlsZGVyOiAoZmlsZU1hcDogUmVjb3JkPHN0cmluZywgc3RyaW5nPikgPT4gR2VuZXJhdGlvblJlc3VsdFxuICApIHt9XG5cbiAgZ2VuZXJhdGVUeXBlcyA9IGFzeW5jICh7XG4gICAgdGFyZ2V0LFxuICAgIG11bHRpcGxlU3dpZnRGaWxlcyxcbiAgICBtYXhEZXB0aCxcbiAgICB0eXBlbmFtZUludHJvc3BlY3Rpb24sXG4gIH06IFR5cGVzR2VuZXJhdGlvblBhcmFtZXRlcnMpID0+IHtcbiAgICBjb25zdCBzY2hlbWEgPSBhd2FpdCB0aGlzLmZldGNoU2NoZW1hKCk7XG5cbiAgICBpZiAoIXNjaGVtYSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFtcGxpZnktYmFja2VuZC1ydWxlcy9wcmVmZXItYW1wbGlmeS1lcnJvcnNcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzY2hlbWEnKTtcbiAgICB9XG5cbiAgICBjb25zdCBnZW5lcmF0ZWRTdGF0ZW1lbnRzID0gZ2VuZXJhdGVTdGF0ZW1lbnRzKHtcbiAgICAgIHNjaGVtYSxcbiAgICAgIG1heERlcHRoLFxuICAgICAgdHlwZW5hbWVJbnRyb3NwZWN0aW9uLFxuICAgICAgdGFyZ2V0OiAnZ3JhcGhxbCcsXG4gICAgfSk7XG5cbiAgICBjb25zdCBxdWVyaWVzID0gT2JqZWN0LmVudHJpZXMoZ2VuZXJhdGVkU3RhdGVtZW50cykubWFwKFxuICAgICAgKFtmaWxlbmFtZSwgY29udGVudHNdKSA9PiBuZXcgU291cmNlKGNvbnRlbnRzLCBmaWxlbmFtZSlcbiAgICApO1xuXG4gICAgY29uc3QgZ2VuZXJhdGVkVHlwZXMgPSBhd2FpdCBnZW5lcmF0ZVR5cGVzKHtcbiAgICAgIHNjaGVtYSxcbiAgICAgIHRhcmdldCxcbiAgICAgIHF1ZXJpZXMsXG4gICAgICBtdWx0aXBsZVN3aWZ0RmlsZXMsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcy5yZXN1bHRCdWlsZGVyKGdlbmVyYXRlZFR5cGVzKTtcbiAgfTtcbn1cbiJdfQ==