import { generateModels } from '@aws-amplify/graphql-generator';
/**
 * Generates GraphQL types for a given AppSync API
 */
export class StackMetadataGraphqlModelsGenerator {
    fetchSchema;
    resultBuilder;
    /**
     * Configures the AppSyncGraphqlTypesGenerator
     */
    constructor(fetchSchema, resultBuilder) {
        this.fetchSchema = fetchSchema;
        this.resultBuilder = resultBuilder;
    }
    generateModels = async ({ target, generateIndexRules, emitAuthProvider, useExperimentalPipelinedTransformer, transformerVersion, respectPrimaryKeyAttributesOnConnectionField, generateModelsForLazyLoadAndCustomSelectionSet, addTimestampFields, handleListNullabilityTransparently, }) => {
        const schema = await this.fetchSchema();
        if (!schema) {
            // eslint-disable-next-line amplify-backend-rules/prefer-amplify-errors
            throw new Error('Invalid schema');
        }
        const generatedModels = await generateModels({
            schema,
            target,
            generateIndexRules,
            emitAuthProvider,
            useExperimentalPipelinedTransformer,
            transformerVersion,
            respectPrimaryKeyAttributesOnConnectionField,
            generateModelsForLazyLoadAndCustomSelectionSet,
            addTimestampFields,
            handleListNullabilityTransparently,
        });
        return this.resultBuilder(generatedModels);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhxbF9tb2RlbHNfZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2dyYXBocWxfbW9kZWxzX2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFPaEU7O0dBRUc7QUFDSCxNQUFNLE9BQU8sbUNBQW1DO0lBT3BDO0lBQ0E7SUFMVjs7T0FFRztJQUNILFlBQ1UsV0FBa0MsRUFDbEMsYUFBb0U7UUFEcEUsZ0JBQVcsR0FBWCxXQUFXLENBQXVCO1FBQ2xDLGtCQUFhLEdBQWIsYUFBYSxDQUF1RDtJQUMzRSxDQUFDO0lBRUosY0FBYyxHQUFHLEtBQUssRUFBRSxFQUN0QixNQUFNLEVBQ04sa0JBQWtCLEVBQ2xCLGdCQUFnQixFQUNoQixtQ0FBbUMsRUFDbkMsa0JBQWtCLEVBQ2xCLDRDQUE0QyxFQUM1Qyw4Q0FBOEMsRUFDOUMsa0JBQWtCLEVBQ2xCLGtDQUFrQyxHQUNQLEVBQUUsRUFBRTtRQUMvQixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUV4QyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsdUVBQXVFO1lBQ3ZFLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUNuQztRQUVELE1BQU0sZUFBZSxHQUFHLE1BQU0sY0FBYyxDQUFDO1lBQzNDLE1BQU07WUFDTixNQUFNO1lBQ04sa0JBQWtCO1lBQ2xCLGdCQUFnQjtZQUNoQixtQ0FBbUM7WUFDbkMsa0JBQWtCO1lBQ2xCLDRDQUE0QztZQUM1Qyw4Q0FBOEM7WUFDOUMsa0JBQWtCO1lBQ2xCLGtDQUFrQztTQUNuQyxDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDN0MsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZW5lcmF0ZU1vZGVscyB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9ncmFwaHFsLWdlbmVyYXRvcic7XG5pbXBvcnQge1xuICBHZW5lcmF0aW9uUmVzdWx0LFxuICBHcmFwaHFsTW9kZWxzR2VuZXJhdG9yLFxuICBNb2RlbHNHZW5lcmF0aW9uUGFyYW1ldGVycyxcbn0gZnJvbSAnLi9tb2RlbF9nZW5lcmF0b3IuanMnO1xuXG4vKipcbiAqIEdlbmVyYXRlcyBHcmFwaFFMIHR5cGVzIGZvciBhIGdpdmVuIEFwcFN5bmMgQVBJXG4gKi9cbmV4cG9ydCBjbGFzcyBTdGFja01ldGFkYXRhR3JhcGhxbE1vZGVsc0dlbmVyYXRvclxuICBpbXBsZW1lbnRzIEdyYXBocWxNb2RlbHNHZW5lcmF0b3JcbntcbiAgLyoqXG4gICAqIENvbmZpZ3VyZXMgdGhlIEFwcFN5bmNHcmFwaHFsVHlwZXNHZW5lcmF0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZmV0Y2hTY2hlbWE6ICgpID0+IFByb21pc2U8c3RyaW5nPixcbiAgICBwcml2YXRlIHJlc3VsdEJ1aWxkZXI6IChmaWxlTWFwOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KSA9PiBHZW5lcmF0aW9uUmVzdWx0XG4gICkge31cblxuICBnZW5lcmF0ZU1vZGVscyA9IGFzeW5jICh7XG4gICAgdGFyZ2V0LFxuICAgIGdlbmVyYXRlSW5kZXhSdWxlcyxcbiAgICBlbWl0QXV0aFByb3ZpZGVyLFxuICAgIHVzZUV4cGVyaW1lbnRhbFBpcGVsaW5lZFRyYW5zZm9ybWVyLFxuICAgIHRyYW5zZm9ybWVyVmVyc2lvbixcbiAgICByZXNwZWN0UHJpbWFyeUtleUF0dHJpYnV0ZXNPbkNvbm5lY3Rpb25GaWVsZCxcbiAgICBnZW5lcmF0ZU1vZGVsc0ZvckxhenlMb2FkQW5kQ3VzdG9tU2VsZWN0aW9uU2V0LFxuICAgIGFkZFRpbWVzdGFtcEZpZWxkcyxcbiAgICBoYW5kbGVMaXN0TnVsbGFiaWxpdHlUcmFuc3BhcmVudGx5LFxuICB9OiBNb2RlbHNHZW5lcmF0aW9uUGFyYW1ldGVycykgPT4ge1xuICAgIGNvbnN0IHNjaGVtYSA9IGF3YWl0IHRoaXMuZmV0Y2hTY2hlbWEoKTtcblxuICAgIGlmICghc2NoZW1hKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgYW1wbGlmeS1iYWNrZW5kLXJ1bGVzL3ByZWZlci1hbXBsaWZ5LWVycm9yc1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNjaGVtYScpO1xuICAgIH1cblxuICAgIGNvbnN0IGdlbmVyYXRlZE1vZGVscyA9IGF3YWl0IGdlbmVyYXRlTW9kZWxzKHtcbiAgICAgIHNjaGVtYSxcbiAgICAgIHRhcmdldCxcbiAgICAgIGdlbmVyYXRlSW5kZXhSdWxlcyxcbiAgICAgIGVtaXRBdXRoUHJvdmlkZXIsXG4gICAgICB1c2VFeHBlcmltZW50YWxQaXBlbGluZWRUcmFuc2Zvcm1lcixcbiAgICAgIHRyYW5zZm9ybWVyVmVyc2lvbixcbiAgICAgIHJlc3BlY3RQcmltYXJ5S2V5QXR0cmlidXRlc09uQ29ubmVjdGlvbkZpZWxkLFxuICAgICAgZ2VuZXJhdGVNb2RlbHNGb3JMYXp5TG9hZEFuZEN1c3RvbVNlbGVjdGlvblNldCxcbiAgICAgIGFkZFRpbWVzdGFtcEZpZWxkcyxcbiAgICAgIGhhbmRsZUxpc3ROdWxsYWJpbGl0eVRyYW5zcGFyZW50bHksXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcy5yZXN1bHRCdWlsZGVyKGdlbmVyYXRlZE1vZGVscyk7XG4gIH07XG59XG4iXX0=