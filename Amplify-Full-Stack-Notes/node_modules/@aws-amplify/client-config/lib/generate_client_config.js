import { ClientConfigGeneratorFactory } from './client_config_generator_factory.js';
import { BackendOutputClientFactory, } from '@aws-amplify/deployed-backend-client';
import { ModelIntrospectionSchemaAdapter } from './model_introspection_schema_adapter.js';
import { S3Client } from '@aws-sdk/client-s3';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
import { AmplifyClient } from '@aws-sdk/client-amplify';
// Because this function is acting as the DI container for this functionality, there is no way to test it without
// exposing the ClientConfigGeneratorFactory in the method signature. For this reason, we're turning off coverage for this file
// All this function should do is construct the factory and delegate to generateClientConfig()
// TODO this functionality should be tested in an E2E test once we've worked out a strategy to use real AWS credentials in tests
// https://github.com/aws-amplify/amplify-backend/issues/46
/* c8 ignore start */
/**
 * Main entry point for generating client config
 */
export const generateClientConfig = async (backendIdentifier, version, awsClientProvider) => {
    if (!awsClientProvider) {
        const s3Client = new S3Client();
        const amplifyClient = new AmplifyClient();
        const cloudFormationClient = new CloudFormationClient();
        awsClientProvider = {
            getS3Client: () => s3Client,
            getAmplifyClient: () => amplifyClient,
            getCloudFormationClient: () => cloudFormationClient,
        };
    }
    const backendOutputClient = BackendOutputClientFactory.getInstance(awsClientProvider);
    const modelSchemaAdapter = new ModelIntrospectionSchemaAdapter(awsClientProvider);
    return new ClientConfigGeneratorFactory(() => backendOutputClient.getOutput(backendIdentifier))
        .getInstance(modelSchemaAdapter, version)
        .generateClientConfig();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfY2xpZW50X2NvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9nZW5lcmF0ZV9jbGllbnRfY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBS3BGLE9BQU8sRUFDTCwwQkFBMEIsR0FFM0IsTUFBTSxzQ0FBc0MsQ0FBQztBQUM5QyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUMxRixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDOUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDdEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBR3hELGlIQUFpSDtBQUNqSCwrSEFBK0g7QUFDL0gsOEZBQThGO0FBQzlGLGdJQUFnSTtBQUNoSSwyREFBMkQ7QUFDM0QscUJBQXFCO0FBRXJCOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsS0FBSyxFQUN2QyxpQkFBNEMsRUFDNUMsT0FBVSxFQUNWLGlCQUlFLEVBQzJDLEVBQUU7SUFDL0MsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1FBQ3RCLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7UUFDaEMsTUFBTSxhQUFhLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQztRQUMxQyxNQUFNLG9CQUFvQixHQUFHLElBQUksb0JBQW9CLEVBQUUsQ0FBQztRQUN4RCxpQkFBaUIsR0FBRztZQUNsQixXQUFXLEVBQUUsR0FBRyxFQUFFLENBQUMsUUFBUTtZQUMzQixnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxhQUFhO1lBQ3JDLHVCQUF1QixFQUFFLEdBQUcsRUFBRSxDQUFDLG9CQUFvQjtTQUNwRCxDQUFDO0tBQ0g7SUFFRCxNQUFNLG1CQUFtQixHQUN2QiwwQkFBMEIsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUM1RCxNQUFNLGtCQUFrQixHQUFHLElBQUksK0JBQStCLENBQzVELGlCQUFpQixDQUNsQixDQUFDO0lBQ0YsT0FBTyxJQUFJLDRCQUE0QixDQUFDLEdBQUcsRUFBRSxDQUMzQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FDakQ7U0FDRSxXQUFXLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDO1NBQ3hDLG9CQUFvQixFQUFpRCxDQUFDO0FBQzNFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsaWVudENvbmZpZ0dlbmVyYXRvckZhY3RvcnkgfSBmcm9tICcuL2NsaWVudF9jb25maWdfZ2VuZXJhdG9yX2ZhY3RvcnkuanMnO1xuaW1wb3J0IHtcbiAgQ2xpZW50Q29uZmlnVmVyc2lvbixcbiAgQ2xpZW50Q29uZmlnVmVyc2lvblRlbXBsYXRlVHlwZSxcbn0gZnJvbSAnLi9jbGllbnQtY29uZmlnLXR5cGVzL2NsaWVudF9jb25maWcuanMnO1xuaW1wb3J0IHtcbiAgQmFja2VuZE91dHB1dENsaWVudEZhY3RvcnksXG4gIERlcGxveWVkQmFja2VuZElkZW50aWZpZXIsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9kZXBsb3llZC1iYWNrZW5kLWNsaWVudCc7XG5pbXBvcnQgeyBNb2RlbEludHJvc3BlY3Rpb25TY2hlbWFBZGFwdGVyIH0gZnJvbSAnLi9tb2RlbF9pbnRyb3NwZWN0aW9uX3NjaGVtYV9hZGFwdGVyLmpzJztcbmltcG9ydCB7IFMzQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LXMzJztcbmltcG9ydCB7IENsb3VkRm9ybWF0aW9uQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3VkZm9ybWF0aW9uJztcbmltcG9ydCB7IEFtcGxpZnlDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtYW1wbGlmeSc7XG5pbXBvcnQgeyBBV1NDbGllbnRQcm92aWRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuXG4vLyBCZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgYWN0aW5nIGFzIHRoZSBESSBjb250YWluZXIgZm9yIHRoaXMgZnVuY3Rpb25hbGl0eSwgdGhlcmUgaXMgbm8gd2F5IHRvIHRlc3QgaXQgd2l0aG91dFxuLy8gZXhwb3NpbmcgdGhlIENsaWVudENvbmZpZ0dlbmVyYXRvckZhY3RvcnkgaW4gdGhlIG1ldGhvZCBzaWduYXR1cmUuIEZvciB0aGlzIHJlYXNvbiwgd2UncmUgdHVybmluZyBvZmYgY292ZXJhZ2UgZm9yIHRoaXMgZmlsZVxuLy8gQWxsIHRoaXMgZnVuY3Rpb24gc2hvdWxkIGRvIGlzIGNvbnN0cnVjdCB0aGUgZmFjdG9yeSBhbmQgZGVsZWdhdGUgdG8gZ2VuZXJhdGVDbGllbnRDb25maWcoKVxuLy8gVE9ETyB0aGlzIGZ1bmN0aW9uYWxpdHkgc2hvdWxkIGJlIHRlc3RlZCBpbiBhbiBFMkUgdGVzdCBvbmNlIHdlJ3ZlIHdvcmtlZCBvdXQgYSBzdHJhdGVneSB0byB1c2UgcmVhbCBBV1MgY3JlZGVudGlhbHMgaW4gdGVzdHNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hd3MtYW1wbGlmeS9hbXBsaWZ5LWJhY2tlbmQvaXNzdWVzLzQ2XG4vKiBjOCBpZ25vcmUgc3RhcnQgKi9cblxuLyoqXG4gKiBNYWluIGVudHJ5IHBvaW50IGZvciBnZW5lcmF0aW5nIGNsaWVudCBjb25maWdcbiAqL1xuZXhwb3J0IGNvbnN0IGdlbmVyYXRlQ2xpZW50Q29uZmlnID0gYXN5bmMgPFQgZXh0ZW5kcyBDbGllbnRDb25maWdWZXJzaW9uPihcbiAgYmFja2VuZElkZW50aWZpZXI6IERlcGxveWVkQmFja2VuZElkZW50aWZpZXIsXG4gIHZlcnNpb246IFQsXG4gIGF3c0NsaWVudFByb3ZpZGVyPzogQVdTQ2xpZW50UHJvdmlkZXI8e1xuICAgIGdldFMzQ2xpZW50OiBTM0NsaWVudDtcbiAgICBnZXRBbXBsaWZ5Q2xpZW50OiBBbXBsaWZ5Q2xpZW50O1xuICAgIGdldENsb3VkRm9ybWF0aW9uQ2xpZW50OiBDbG91ZEZvcm1hdGlvbkNsaWVudDtcbiAgfT5cbik6IFByb21pc2U8Q2xpZW50Q29uZmlnVmVyc2lvblRlbXBsYXRlVHlwZTxUPj4gPT4ge1xuICBpZiAoIWF3c0NsaWVudFByb3ZpZGVyKSB7XG4gICAgY29uc3QgczNDbGllbnQgPSBuZXcgUzNDbGllbnQoKTtcbiAgICBjb25zdCBhbXBsaWZ5Q2xpZW50ID0gbmV3IEFtcGxpZnlDbGllbnQoKTtcbiAgICBjb25zdCBjbG91ZEZvcm1hdGlvbkNsaWVudCA9IG5ldyBDbG91ZEZvcm1hdGlvbkNsaWVudCgpO1xuICAgIGF3c0NsaWVudFByb3ZpZGVyID0ge1xuICAgICAgZ2V0UzNDbGllbnQ6ICgpID0+IHMzQ2xpZW50LFxuICAgICAgZ2V0QW1wbGlmeUNsaWVudDogKCkgPT4gYW1wbGlmeUNsaWVudCxcbiAgICAgIGdldENsb3VkRm9ybWF0aW9uQ2xpZW50OiAoKSA9PiBjbG91ZEZvcm1hdGlvbkNsaWVudCxcbiAgICB9O1xuICB9XG5cbiAgY29uc3QgYmFja2VuZE91dHB1dENsaWVudCA9XG4gICAgQmFja2VuZE91dHB1dENsaWVudEZhY3RvcnkuZ2V0SW5zdGFuY2UoYXdzQ2xpZW50UHJvdmlkZXIpO1xuICBjb25zdCBtb2RlbFNjaGVtYUFkYXB0ZXIgPSBuZXcgTW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQWRhcHRlcihcbiAgICBhd3NDbGllbnRQcm92aWRlclxuICApO1xuICByZXR1cm4gbmV3IENsaWVudENvbmZpZ0dlbmVyYXRvckZhY3RvcnkoKCkgPT5cbiAgICBiYWNrZW5kT3V0cHV0Q2xpZW50LmdldE91dHB1dChiYWNrZW5kSWRlbnRpZmllcilcbiAgKVxuICAgIC5nZXRJbnN0YW5jZShtb2RlbFNjaGVtYUFkYXB0ZXIsIHZlcnNpb24pXG4gICAgLmdlbmVyYXRlQ2xpZW50Q29uZmlnKCkgYXMgUHJvbWlzZTxDbGllbnRDb25maWdWZXJzaW9uVGVtcGxhdGVUeXBlPFQ+Pjtcbn07XG4iXX0=