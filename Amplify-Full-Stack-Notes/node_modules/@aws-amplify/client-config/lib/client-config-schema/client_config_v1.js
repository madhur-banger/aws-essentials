/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50X2NvbmZpZ192MS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGllbnQtY29uZmlnLXNjaGVtYS9jbGllbnRfY29uZmlnX3YxLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQjs7OztHQUlHIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbi8qKlxuICogVGhpcyBmaWxlIHdhcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBqc29uLXNjaGVtYS10by10eXBlc2NyaXB0LlxuICogRE8gTk9UIE1PRElGWSBJVCBCWSBIQU5ELiBJbnN0ZWFkLCBtb2RpZnkgdGhlIHNvdXJjZSBKU09OU2NoZW1hIGZpbGUsXG4gKiBhbmQgcnVuIGpzb24tc2NoZW1hLXRvLXR5cGVzY3JpcHQgdG8gcmVnZW5lcmF0ZSB0aGlzIGZpbGUuXG4gKi9cblxuLyoqXG4gKiBBbWF6b24gQ29nbml0byBzdGFuZGFyZCBhdHRyaWJ1dGVzIGZvciB1c2VycyAtLSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vY29nbml0by9sYXRlc3QvZGV2ZWxvcGVyZ3VpZGUvdXNlci1wb29sLXNldHRpbmdzLWF0dHJpYnV0ZXMuaHRtbFxuICovXG5leHBvcnQgdHlwZSBBbWF6b25Db2duaXRvU3RhbmRhcmRBdHRyaWJ1dGVzID1cbiAgfCAnYWRkcmVzcydcbiAgfCAnYmlydGhkYXRlJ1xuICB8ICdlbWFpbCdcbiAgfCAnZmFtaWx5X25hbWUnXG4gIHwgJ2dlbmRlcidcbiAgfCAnZ2l2ZW5fbmFtZSdcbiAgfCAnbG9jYWxlJ1xuICB8ICdtaWRkbGVfbmFtZSdcbiAgfCAnbmFtZSdcbiAgfCAnbmlja25hbWUnXG4gIHwgJ3Bob25lX251bWJlcidcbiAgfCAncGljdHVyZSdcbiAgfCAncHJlZmVycmVkX3VzZXJuYW1lJ1xuICB8ICdwcm9maWxlJ1xuICB8ICdzdWInXG4gIHwgJ3VwZGF0ZWRfYXQnXG4gIHwgJ3dlYnNpdGUnXG4gIHwgJ3pvbmVpbmZvJztcbmV4cG9ydCB0eXBlIEF3c1JlZ2lvbiA9IHN0cmluZztcbi8qKlxuICogTGlzdCBvZiBzdXBwb3J0ZWQgYXV0aCB0eXBlcyBmb3IgQVdTIEFwcFN5bmNcbiAqL1xuZXhwb3J0IHR5cGUgQXdzQXBwc3luY0F1dGhvcml6YXRpb25UeXBlID1cbiAgfCAnQU1BWk9OX0NPR05JVE9fVVNFUl9QT09MUydcbiAgfCAnQVBJX0tFWSdcbiAgfCAnQVdTX0lBTSdcbiAgfCAnQVdTX0xBTUJEQSdcbiAgfCAnT1BFTklEX0NPTk5FQ1QnO1xuLyoqXG4gKiBzdXBwb3J0ZWQgY2hhbm5lbHMgZm9yIEFtYXpvbiBQaW5wb2ludFxuICovXG5leHBvcnQgdHlwZSBBbWF6b25QaW5wb2ludENoYW5uZWxzID1cbiAgfCAnSU5fQVBQX01FU1NBR0lORydcbiAgfCAnRkNNJ1xuICB8ICdBUE5TJ1xuICB8ICdFTUFJTCdcbiAgfCAnU01TJztcblxuLyoqXG4gKiBDb25maWcgZm9ybWF0IGZvciBBbXBsaWZ5IEdlbiAyIGNsaWVudCBsaWJyYXJpZXMgdG8gY29tbXVuaWNhdGUgd2l0aCBiYWNrZW5kIHNlcnZpY2VzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFXU0FtcGxpZnlCYWNrZW5kT3V0cHV0cyB7XG4gIC8qKlxuICAgKiBWZXJzaW9uIG9mIHRoaXMgc2NoZW1hXG4gICAqL1xuICB2ZXJzaW9uOiAnMSc7XG4gIC8qKlxuICAgKiBPdXRwdXRzIG1hbnVhbGx5IHNwZWNpZmllZCBieSBkZXZlbG9wZXJzIGZvciB1c2Ugd2l0aCBmcm9udGVuZCBsaWJyYXJ5XG4gICAqL1xuICBhbmFseXRpY3M/OiB7XG4gICAgYW1hem9uX3BpbnBvaW50Pzoge1xuICAgICAgLyoqXG4gICAgICAgKiBBV1MgUmVnaW9uIG9mIEFtYXpvbiBQaW5wb2ludCByZXNvdXJjZXNcbiAgICAgICAqL1xuICAgICAgYXdzX3JlZ2lvbjogQXdzUmVnaW9uO1xuICAgICAgYXBwX2lkOiBzdHJpbmc7XG4gICAgfTtcbiAgfTtcbiAgLyoqXG4gICAqIE91dHB1dHMgZ2VuZXJhdGVkIGZyb20gZGVmaW5lQXV0aFxuICAgKi9cbiAgYXV0aD86IHtcbiAgICAvKipcbiAgICAgKiBBV1MgUmVnaW9uIG9mIEFtYXpvbiBDb2duaXRvIHJlc291cmNlc1xuICAgICAqL1xuICAgIGF3c19yZWdpb246IEF3c1JlZ2lvbjtcbiAgICAvKipcbiAgICAgKiBDb2duaXRvIFVzZXIgUG9vbCBJRFxuICAgICAqL1xuICAgIHVzZXJfcG9vbF9pZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIENvZ25pdG8gVXNlciBQb29sIENsaWVudCBJRFxuICAgICAqL1xuICAgIHVzZXJfcG9vbF9jbGllbnRfaWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBDb2duaXRvIElkZW50aXR5IFBvb2wgSURcbiAgICAgKi9cbiAgICBpZGVudGl0eV9wb29sX2lkPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIENvZ25pdG8gVXNlciBQb29sIHBhc3N3b3JkIHBvbGljeVxuICAgICAqL1xuICAgIHBhc3N3b3JkX3BvbGljeT86IHtcbiAgICAgIG1pbl9sZW5ndGg6IG51bWJlcjtcbiAgICAgIHJlcXVpcmVfbnVtYmVyczogYm9vbGVhbjtcbiAgICAgIHJlcXVpcmVfbG93ZXJjYXNlOiBib29sZWFuO1xuICAgICAgcmVxdWlyZV91cHBlcmNhc2U6IGJvb2xlYW47XG4gICAgICByZXF1aXJlX3N5bWJvbHM6IGJvb2xlYW47XG4gICAgfTtcbiAgICBvYXV0aD86IHtcbiAgICAgIC8qKlxuICAgICAgICogSWRlbnRpdHkgcHJvdmlkZXJzIHNldCBvbiBDb2duaXRvIFVzZXIgUG9vbFxuICAgICAgICpcbiAgICAgICAqIEBtaW5JdGVtcyAwXG4gICAgICAgKi9cbiAgICAgIGlkZW50aXR5X3Byb3ZpZGVyczogKFxuICAgICAgICB8ICdHT09HTEUnXG4gICAgICAgIHwgJ0ZBQ0VCT09LJ1xuICAgICAgICB8ICdMT0dJTl9XSVRIX0FNQVpPTidcbiAgICAgICAgfCAnU0lHTl9JTl9XSVRIX0FQUExFJ1xuICAgICAgKVtdO1xuICAgICAgLyoqXG4gICAgICAgKiBEb21haW4gdXNlZCBmb3IgaWRlbnRpdHkgcHJvdmlkZXJzXG4gICAgICAgKi9cbiAgICAgIGRvbWFpbjogc3RyaW5nO1xuICAgICAgLyoqXG4gICAgICAgKiBAbWluSXRlbXMgMFxuICAgICAgICovXG4gICAgICBzY29wZXM6IHN0cmluZ1tdO1xuICAgICAgLyoqXG4gICAgICAgKiBVUklzIHVzZWQgdG8gcmVkaXJlY3QgYWZ0ZXIgc2lnbmluZyBpbiB1c2luZyBhbiBpZGVudGl0eSBwcm92aWRlclxuICAgICAgICpcbiAgICAgICAqIEBtaW5JdGVtcyAxXG4gICAgICAgKi9cbiAgICAgIHJlZGlyZWN0X3NpZ25faW5fdXJpOiBzdHJpbmdbXTtcbiAgICAgIC8qKlxuICAgICAgICogVVJJcyB1c2VkIHRvIHJlZGlyZWN0IGFmdGVyIHNpZ25pbmcgb3V0XG4gICAgICAgKlxuICAgICAgICogQG1pbkl0ZW1zIDFcbiAgICAgICAqL1xuICAgICAgcmVkaXJlY3Rfc2lnbl9vdXRfdXJpOiBzdHJpbmdbXTtcbiAgICAgIHJlc3BvbnNlX3R5cGU6ICdjb2RlJyB8ICd0b2tlbic7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb2duaXRvIFVzZXIgUG9vbCBzdGFuZGFyZCBhdHRyaWJ1dGVzIHJlcXVpcmVkIGZvciBzaWdudXBcbiAgICAgKlxuICAgICAqIEBtaW5JdGVtcyAwXG4gICAgICovXG4gICAgc3RhbmRhcmRfcmVxdWlyZWRfYXR0cmlidXRlcz86IEFtYXpvbkNvZ25pdG9TdGFuZGFyZEF0dHJpYnV0ZXNbXTtcbiAgICAvKipcbiAgICAgKiBDb2duaXRvIFVzZXIgUG9vbCB1c2VybmFtZSBhdHRyaWJ1dGVzXG4gICAgICpcbiAgICAgKiBAbWluSXRlbXMgMVxuICAgICAqL1xuICAgIHVzZXJuYW1lX2F0dHJpYnV0ZXM/OiAoJ2VtYWlsJyB8ICdwaG9uZV9udW1iZXInIHwgJ3VzZXJuYW1lJylbXTtcbiAgICB1c2VyX3ZlcmlmaWNhdGlvbl90eXBlcz86ICgnZW1haWwnIHwgJ3Bob25lX251bWJlcicpW107XG4gICAgdW5hdXRoZW50aWNhdGVkX2lkZW50aXRpZXNfZW5hYmxlZD86IGJvb2xlYW47XG4gICAgbWZhX2NvbmZpZ3VyYXRpb24/OiAnTk9ORScgfCAnT1BUSU9OQUwnIHwgJ1JFUVVJUkVEJztcbiAgICBtZmFfbWV0aG9kcz86ICgnU01TJyB8ICdUT1RQJylbXTtcbiAgfTtcbiAgLyoqXG4gICAqIE91dHB1dHMgZ2VuZXJhdGVkIGZyb20gZGVmaW5lRGF0YVxuICAgKi9cbiAgZGF0YT86IHtcbiAgICBhd3NfcmVnaW9uOiBBd3NSZWdpb247XG4gICAgLyoqXG4gICAgICogQXBwU3luYyBlbmRwb2ludCBVUkxcbiAgICAgKi9cbiAgICB1cmw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBnZW5lcmF0ZWQgbW9kZWwgaW50cm9zcGVjdGlvbiBzY2hlbWEgZm9yIHVzZSB3aXRoIGdlbmVyYXRlQ2xpZW50XG4gICAgICovXG4gICAgbW9kZWxfaW50cm9zcGVjdGlvbj86IHtcbiAgICAgIFtrOiBzdHJpbmddOiB1bmtub3duO1xuICAgIH07XG4gICAgYXBpX2tleT86IHN0cmluZztcbiAgICBkZWZhdWx0X2F1dGhvcml6YXRpb25fdHlwZTogQXdzQXBwc3luY0F1dGhvcml6YXRpb25UeXBlO1xuICAgIGF1dGhvcml6YXRpb25fdHlwZXM6IEF3c0FwcHN5bmNBdXRob3JpemF0aW9uVHlwZVtdO1xuICB9O1xuICAvKipcbiAgICogT3V0cHV0cyBtYW51YWxseSBzcGVjaWZpZWQgYnkgZGV2ZWxvcGVycyBmb3IgdXNlIHdpdGggZnJvbnRlbmQgbGlicmFyeVxuICAgKi9cbiAgZ2VvPzoge1xuICAgIC8qKlxuICAgICAqIEFXUyBSZWdpb24gb2YgQW1hem9uIExvY2F0aW9uIFNlcnZpY2UgcmVzb3VyY2VzXG4gICAgICovXG4gICAgYXdzX3JlZ2lvbjogQXdzUmVnaW9uO1xuICAgIC8qKlxuICAgICAqIE1hcHMgZnJvbSBBbWF6b24gTG9jYXRpb24gU2VydmljZVxuICAgICAqL1xuICAgIG1hcHM/OiB7XG4gICAgICBpdGVtczoge1xuICAgICAgICBbazogc3RyaW5nXTogQW1hem9uTG9jYXRpb25TZXJ2aWNlQ29uZmlnO1xuICAgICAgfTtcbiAgICAgIGRlZmF1bHQ6IHN0cmluZztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIExvY2F0aW9uIHNlYXJjaCAoc2VhcmNoIGJ5IHBsYWNlcywgYWRkcmVzc2VzLCBjb29yZGluYXRlcylcbiAgICAgKi9cbiAgICBzZWFyY2hfaW5kaWNlcz86IHtcbiAgICAgIGl0ZW1zOiBzdHJpbmdbXTtcbiAgICAgIGRlZmF1bHQ6IHN0cmluZztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdlb2ZlbmNpbmcgKHZpc3VhbGl6ZSB2aXJ0dWFsIHBlcmltZXRlcnMpXG4gICAgICovXG4gICAgZ2VvZmVuY2VfY29sbGVjdGlvbnM/OiB7XG4gICAgICBpdGVtczogc3RyaW5nW107XG4gICAgICBkZWZhdWx0OiBzdHJpbmc7XG4gICAgfTtcbiAgfTtcbiAgLyoqXG4gICAqIE91dHB1dHMgbWFudWFsbHkgc3BlY2lmaWVkIGJ5IGRldmVsb3BlcnMgZm9yIHVzZSB3aXRoIGZyb250ZW5kIGxpYnJhcnlcbiAgICovXG4gIG5vdGlmaWNhdGlvbnM/OiB7XG4gICAgYXdzX3JlZ2lvbjogQXdzUmVnaW9uO1xuICAgIGFtYXpvbl9waW5wb2ludF9hcHBfaWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAbWluSXRlbXMgMVxuICAgICAqL1xuICAgIGNoYW5uZWxzOiBBbWF6b25QaW5wb2ludENoYW5uZWxzW107XG4gIH07XG4gIC8qKlxuICAgKiBPdXRwdXRzIGdlbmVyYXRlZCBmcm9tIGRlZmluZVN0b3JhZ2VcbiAgICovXG4gIHN0b3JhZ2U/OiB7XG4gICAgYXdzX3JlZ2lvbjogQXdzUmVnaW9uO1xuICAgIGJ1Y2tldF9uYW1lOiBzdHJpbmc7XG4gIH07XG4gIC8qKlxuICAgKiBPdXRwdXRzIGdlbmVyYXRlZCBmcm9tIGJhY2tlbmQuYWRkT3V0cHV0KHsgY3VzdG9tOiA8Y29uZmlnPiB9KVxuICAgKi9cbiAgY3VzdG9tPzoge1xuICAgIFtrOiBzdHJpbmddOiB1bmtub3duO1xuICB9O1xufVxuLyoqXG4gKiBUaGlzIGludGVyZmFjZSB3YXMgcmVmZXJlbmNlZCBieSBgdW5kZWZpbmVkYCdzIEpTT04tU2NoZW1hIGRlZmluaXRpb25cbiAqIHZpYSB0aGUgYHBhdHRlcm5Qcm9wZXJ0eWAgXCIuKlwiLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFtYXpvbkxvY2F0aW9uU2VydmljZUNvbmZpZyB7XG4gIC8qKlxuICAgKiBNYXAgcmVzb3VyY2UgbmFtZVxuICAgKi9cbiAgbmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIE1hcCBzdHlsZVxuICAgKi9cbiAgc3R5bGU/OiBzdHJpbmc7XG59XG4iXX0=