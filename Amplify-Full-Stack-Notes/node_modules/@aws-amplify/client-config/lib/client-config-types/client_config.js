// Versions of new unified config schemas
import * as clientConfigTypesV1 from '../client-config-schema/client_config_v1.js';
/* eslint-disable @typescript-eslint/naming-convention */
import * as clientConfigTypesV1_1 from '../client-config-schema/client_config_v1.1.js';
import * as clientConfigTypesV1_2 from '../client-config-schema/client_config_v1.2.js';
export { clientConfigTypesV1, clientConfigTypesV1_1, clientConfigTypesV1_2 };
export var ClientConfigVersionOption;
(function (ClientConfigVersionOption) {
    ClientConfigVersionOption["V0"] = "0";
    ClientConfigVersionOption["V1"] = "1";
    ClientConfigVersionOption["V1_1"] = "1.1";
    ClientConfigVersionOption["V1_2"] = "1.2";
})(ClientConfigVersionOption || (ClientConfigVersionOption = {}));
// Client config version that is generated by default if customers didn't specify one
export const DEFAULT_CLIENT_CONFIG_VERSION = ClientConfigVersionOption.V1_2;
export var ClientConfigFormat;
(function (ClientConfigFormat) {
    ClientConfigFormat["MJS"] = "mjs";
    ClientConfigFormat["JSON"] = "json";
    ClientConfigFormat["JSON_MOBILE"] = "json-mobile";
    ClientConfigFormat["TS"] = "ts";
    ClientConfigFormat["DART"] = "dart";
})(ClientConfigFormat || (ClientConfigFormat = {}));
export var ClientConfigFileBaseName;
(function (ClientConfigFileBaseName) {
    ClientConfigFileBaseName["LEGACY"] = "amplifyconfiguration";
    ClientConfigFileBaseName["DEFAULT"] = "amplify_outputs";
})(ClientConfigFileBaseName || (ClientConfigFileBaseName = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50X2NvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGllbnQtY29uZmlnLXR5cGVzL2NsaWVudF9jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBU0EseUNBQXlDO0FBQ3pDLE9BQU8sS0FBSyxtQkFBbUIsTUFBTSw2Q0FBNkMsQ0FBQztBQUNuRix5REFBeUQ7QUFDekQsT0FBTyxLQUFLLHFCQUFxQixNQUFNLCtDQUErQyxDQUFDO0FBQ3ZGLE9BQU8sS0FBSyxxQkFBcUIsTUFBTSwrQ0FBK0MsQ0FBQztBQTJCdkYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLHFCQUFxQixFQUFFLHFCQUFxQixFQUFFLENBQUM7QUFFN0UsTUFBTSxDQUFOLElBQVkseUJBS1g7QUFMRCxXQUFZLHlCQUF5QjtJQUNuQyxxQ0FBUSxDQUFBO0lBQ1IscUNBQVEsQ0FBQTtJQUNSLHlDQUFZLENBQUE7SUFDWix5Q0FBWSxDQUFBO0FBQ2QsQ0FBQyxFQUxXLHlCQUF5QixLQUF6Qix5QkFBeUIsUUFLcEM7QUFJRCxxRkFBcUY7QUFDckYsTUFBTSxDQUFDLE1BQU0sNkJBQTZCLEdBQ3hDLHlCQUF5QixDQUFDLElBQUksQ0FBQztBQXFCakMsTUFBTSxDQUFOLElBQVksa0JBTVg7QUFORCxXQUFZLGtCQUFrQjtJQUM1QixpQ0FBVyxDQUFBO0lBQ1gsbUNBQWEsQ0FBQTtJQUNiLGlEQUEyQixDQUFBO0lBQzNCLCtCQUFTLENBQUE7SUFDVCxtQ0FBYSxDQUFBO0FBQ2YsQ0FBQyxFQU5XLGtCQUFrQixLQUFsQixrQkFBa0IsUUFNN0I7QUFFRCxNQUFNLENBQU4sSUFBWSx3QkFHWDtBQUhELFdBQVksd0JBQXdCO0lBQ2xDLDJEQUErQixDQUFBO0lBQy9CLHVEQUEyQixDQUFBO0FBQzdCLENBQUMsRUFIVyx3QkFBd0IsS0FBeEIsd0JBQXdCLFFBR25DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXV0aENsaWVudENvbmZpZyB9IGZyb20gJy4vYXV0aF9jbGllbnRfY29uZmlnLmpzJztcbmltcG9ydCB7IEdyYXBocWxDbGllbnRDb25maWcgfSBmcm9tICcuL2dyYXBocWxfY2xpZW50X2NvbmZpZy5qcyc7XG5pbXBvcnQgeyBQbGF0Zm9ybUNsaWVudENvbmZpZyB9IGZyb20gJy4vcGxhdGZvcm1fY2xpZW50X2NvbmZpZy5qcyc7XG5pbXBvcnQgeyBTdG9yYWdlQ2xpZW50Q29uZmlnIH0gZnJvbSAnLi9zdG9yYWdlX2NsaWVudF9jb25maWcuanMnO1xuaW1wb3J0IHsgQ3VzdG9tQ2xpZW50Q29uZmlnIH0gZnJvbSAnLi9jdXN0b21fY2xpZW50X2NvbmZpZy5qcyc7XG5pbXBvcnQgeyBHZW9DbGllbnRDb25maWcgfSBmcm9tICcuL2dlb19jbGllbnRfY29uZmlnLmpzJztcbmltcG9ydCB7IEFuYWx5dGljc0NsaWVudENvbmZpZyB9IGZyb20gJy4vYW5hbHl0aWNzX2NsaWVudF9jb25maWcuanMnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uc0NsaWVudENvbmZpZyB9IGZyb20gJy4vbm90aWZpY2F0aW9uc19jbGllbnRfY29uZmlnLmpzJztcblxuLy8gVmVyc2lvbnMgb2YgbmV3IHVuaWZpZWQgY29uZmlnIHNjaGVtYXNcbmltcG9ydCAqIGFzIGNsaWVudENvbmZpZ1R5cGVzVjEgZnJvbSAnLi4vY2xpZW50LWNvbmZpZy1zY2hlbWEvY2xpZW50X2NvbmZpZ192MS5qcyc7XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbmltcG9ydCAqIGFzIGNsaWVudENvbmZpZ1R5cGVzVjFfMSBmcm9tICcuLi9jbGllbnQtY29uZmlnLXNjaGVtYS9jbGllbnRfY29uZmlnX3YxLjEuanMnO1xuaW1wb3J0ICogYXMgY2xpZW50Q29uZmlnVHlwZXNWMV8yIGZyb20gJy4uL2NsaWVudC1jb25maWctc2NoZW1hL2NsaWVudF9jb25maWdfdjEuMi5qcyc7XG4vKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuXG4vKipcbiAqIE1lcmdlZCB0eXBlIG9mIGFsbCBjYXRlZ29yeSBjbGllbnQgY29uZmlnIGxlZ2FjeSB0eXBlc1xuICovXG5leHBvcnQgdHlwZSBDbGllbnRDb25maWdMZWdhY3kgPSBQYXJ0aWFsPFxuICBBbmFseXRpY3NDbGllbnRDb25maWcgJlxuICAgIEF1dGhDbGllbnRDb25maWcgJlxuICAgIEdlb0NsaWVudENvbmZpZyAmXG4gICAgR3JhcGhxbENsaWVudENvbmZpZyAmXG4gICAgTm90aWZpY2F0aW9uc0NsaWVudENvbmZpZyAmXG4gICAgU3RvcmFnZUNsaWVudENvbmZpZyAmXG4gICAgUGxhdGZvcm1DbGllbnRDb25maWcgJlxuICAgIEN1c3RvbUNsaWVudENvbmZpZ1xuPjtcblxuLyoqXG4gKiBWZXJzaW9ucyBvZiBjbGllbnQgY29uZmlnIHNjaGVtYSBzdXBwb3J0ZWQgYnkgXCJ0aGlzXCIgcGFja2FnZSB2ZXJzaW9uLlxuICogQ3JlYXRlIHVuaW9uIGZvciBzdXBwb3J0ZWQgdmVyc2lvbnMgaGVyZSwgc3VjaCBhc1xuICogQ2xpZW50Q29uZmlnID0gY2xpZW50Q29uZmlnVHlwZXNWMS5BV1NBbXBsaWZ5QmFja2VuZE91dHB1dHMgfCBjbGllbnRDb25maWdUeXBlc1YyLkFXU0FtcGxpZnlCYWNrZW5kT3V0cHV0cztcbiAqL1xuZXhwb3J0IHR5cGUgQ2xpZW50Q29uZmlnID1cbiAgfCBjbGllbnRDb25maWdUeXBlc1YxXzIuQVdTQW1wbGlmeUJhY2tlbmRPdXRwdXRzXG4gIHwgY2xpZW50Q29uZmlnVHlwZXNWMV8xLkFXU0FtcGxpZnlCYWNrZW5kT3V0cHV0c1xuICB8IGNsaWVudENvbmZpZ1R5cGVzVjEuQVdTQW1wbGlmeUJhY2tlbmRPdXRwdXRzO1xuXG5leHBvcnQgeyBjbGllbnRDb25maWdUeXBlc1YxLCBjbGllbnRDb25maWdUeXBlc1YxXzEsIGNsaWVudENvbmZpZ1R5cGVzVjFfMiB9O1xuXG5leHBvcnQgZW51bSBDbGllbnRDb25maWdWZXJzaW9uT3B0aW9uIHtcbiAgVjAgPSAnMCcsIC8vIExlZ2FjeSBjbGllbnQgY29uZmlnXG4gIFYxID0gJzEnLFxuICBWMV8xID0gJzEuMScsXG4gIFYxXzIgPSAnMS4yJyxcbn1cblxuZXhwb3J0IHR5cGUgQ2xpZW50Q29uZmlnVmVyc2lvbiA9IGAke0NsaWVudENvbmZpZ1ZlcnNpb25PcHRpb259YDtcblxuLy8gQ2xpZW50IGNvbmZpZyB2ZXJzaW9uIHRoYXQgaXMgZ2VuZXJhdGVkIGJ5IGRlZmF1bHQgaWYgY3VzdG9tZXJzIGRpZG4ndCBzcGVjaWZ5IG9uZVxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQ0xJRU5UX0NPTkZJR19WRVJTSU9OOiBDbGllbnRDb25maWdWZXJzaW9uID1cbiAgQ2xpZW50Q29uZmlnVmVyc2lvbk9wdGlvbi5WMV8yO1xuXG4vKipcbiAqIFJldHVybiB0eXBlIG9mIGBnZXRDbGllbnRDb25maWdgLiBUaGlzIHR5cGVzIG5hcnJvdyB0aGUgcmV0dXJuZWQgY2xpZW50IGNvbmZpZyB2ZXJzaW9uXG4gKiBpZiB0aGUgY2FsbGVyIHNwZWNpZmllZCBhIHN0YXRpYyB2ZXJzaW9uLCBlLmcuIGBnZW5lcmF0ZUNsaWVudENvbmZpZyhfLCBfLCBDbGllbnRDb25maWdWZXJzaW9ucy5WMSlgXG4gKlxuICogQWRkIG5ldyBzdXBwb3J0ZWQgdmVyc2lvbiBoZXJlIHN1Y2ggYXNcbiAqIGV4cG9ydCB0eXBlIENsaWVudENvbmZpZ1ZlcnNpb25UeXBlPFQ+ID0gVCBleHRlbmRzICcxLjEnXG4gKiA/IGNsaWVudENvbmZpZ1R5cGVzVjEuQVdTQW1wbGlmeUJhY2tlbmRPdXRwdXRzXG4gKiA6IFQgZXh0ZW5kcyAnMidcbiAqID8gY2xpZW50Q29uZmlnVHlwZXNWMi5BV1NBbXBsaWZ5QmFja2VuZE91dHB1dHNcbiAqIDogbmV2ZXI7XG4gKi9cbmV4cG9ydCB0eXBlIENsaWVudENvbmZpZ1ZlcnNpb25UZW1wbGF0ZVR5cGU8VD4gPSBUIGV4dGVuZHMgJzEuMidcbiAgPyBjbGllbnRDb25maWdUeXBlc1YxXzIuQVdTQW1wbGlmeUJhY2tlbmRPdXRwdXRzXG4gIDogVCBleHRlbmRzICcxLjEnXG4gID8gY2xpZW50Q29uZmlnVHlwZXNWMV8xLkFXU0FtcGxpZnlCYWNrZW5kT3V0cHV0c1xuICA6IFQgZXh0ZW5kcyAnMSdcbiAgPyBjbGllbnRDb25maWdUeXBlc1YxLkFXU0FtcGxpZnlCYWNrZW5kT3V0cHV0c1xuICA6IG5ldmVyO1xuXG5leHBvcnQgZW51bSBDbGllbnRDb25maWdGb3JtYXQge1xuICBNSlMgPSAnbWpzJyxcbiAgSlNPTiA9ICdqc29uJyxcbiAgSlNPTl9NT0JJTEUgPSAnanNvbi1tb2JpbGUnLFxuICBUUyA9ICd0cycsXG4gIERBUlQgPSAnZGFydCcsXG59XG5cbmV4cG9ydCBlbnVtIENsaWVudENvbmZpZ0ZpbGVCYXNlTmFtZSB7XG4gIExFR0FDWSA9ICdhbXBsaWZ5Y29uZmlndXJhdGlvbicsXG4gIERFRkFVTFQgPSAnYW1wbGlmeV9vdXRwdXRzJyxcbn1cblxuZXhwb3J0IHR5cGUgR2VuZXJhdGVDbGllbnRDb25maWdUb0ZpbGVSZXN1bHQgPSB7XG4gIGZpbGVzV3JpdHRlbjogc3RyaW5nW107XG59O1xuIl19