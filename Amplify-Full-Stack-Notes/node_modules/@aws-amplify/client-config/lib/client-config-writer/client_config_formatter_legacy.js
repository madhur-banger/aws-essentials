import { ClientConfigFormat, } from '../client-config-types/client_config.js';
import os from 'os';
import { ClientConfigLegacyConverter } from './client_config_to_legacy_converter.js';
/**
 * Formats client config to desired format.
 */
export class ClientConfigFormatterLegacy {
    configConverter;
    /**
     * Creates new client config formatter.
     */
    constructor(configConverter) {
        this.configConverter = configConverter;
    }
    format = (clientConfig, format) => {
        // This library only generates unified ClientConfig but older version of frontend libraries only support legacy format. So we convert it first.
        const legacyConfig = new ClientConfigLegacyConverter().convertToLegacyConfig(clientConfig);
        switch (format) {
            case ClientConfigFormat.TS:
            case ClientConfigFormat.MJS: {
                return `const amplifyConfig = ${JSON.stringify(legacyConfig, null, 2)}${os.EOL}export default amplifyConfig;${os.EOL}`;
            }
            case ClientConfigFormat.DART: {
                return `const amplifyConfig = '''${JSON.stringify(this.configConverter.convertToMobileConfig(legacyConfig), null, 2)}''';`;
            }
            case ClientConfigFormat.JSON_MOBILE:
                return JSON.stringify(this.configConverter.convertToMobileConfig(legacyConfig), null, 2);
            case ClientConfigFormat.JSON:
                return JSON.stringify(legacyConfig, null, 2);
            default:
                throw new Error(`Unknown client config format`);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50X2NvbmZpZ19mb3JtYXR0ZXJfbGVnYWN5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsaWVudC1jb25maWctd3JpdGVyL2NsaWVudF9jb25maWdfZm9ybWF0dGVyX2xlZ2FjeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsa0JBQWtCLEdBQ25CLE1BQU0seUNBQXlDLENBQUM7QUFDakQsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBRXBCLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBR3JGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDJCQUEyQjtJQUlUO0lBSDdCOztPQUVHO0lBQ0gsWUFBNkIsZUFBNEM7UUFBNUMsb0JBQWUsR0FBZixlQUFlLENBQTZCO0lBQUcsQ0FBQztJQUU3RSxNQUFNLEdBQUcsQ0FBQyxZQUEwQixFQUFFLE1BQTBCLEVBQVUsRUFBRTtRQUMxRSwrSUFBK0k7UUFDL0ksTUFBTSxZQUFZLEdBQ2hCLElBQUksMkJBQTJCLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUV4RSxRQUFRLE1BQU0sRUFBRTtZQUNkLEtBQUssa0JBQWtCLENBQUMsRUFBRSxDQUFDO1lBQzNCLEtBQUssa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzNCLE9BQU8seUJBQXlCLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsR0FDbkUsRUFBRSxDQUFDLEdBQ0wsZ0NBQWdDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQzthQUMxQztZQUNELEtBQUssa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzVCLE9BQU8sNEJBQTRCLElBQUksQ0FBQyxTQUFTLENBQy9DLElBQUksQ0FBQyxlQUFlLENBQUMscUJBQXFCLENBQUMsWUFBWSxDQUFDLEVBQ3hELElBQUksRUFDSixDQUFDLENBQ0YsTUFBTSxDQUFDO2FBQ1Q7WUFDRCxLQUFLLGtCQUFrQixDQUFDLFdBQVc7Z0JBQ2pDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FDbkIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsRUFDeEQsSUFBSSxFQUNKLENBQUMsQ0FDRixDQUFDO1lBQ0osS0FBSyxrQkFBa0IsQ0FBQyxJQUFJO2dCQUMxQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQztnQkFDRSxNQUFNLElBQUksS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7U0FDbkQ7SUFDSCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENsaWVudENvbmZpZyxcbiAgQ2xpZW50Q29uZmlnRm9ybWF0LFxufSBmcm9tICcuLi9jbGllbnQtY29uZmlnLXR5cGVzL2NsaWVudF9jb25maWcuanMnO1xuaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCB7IENsaWVudENvbmZpZ01vYmlsZUNvbnZlcnRlciB9IGZyb20gJy4vY2xpZW50X2NvbmZpZ190b19tb2JpbGVfbGVnYWN5X2NvbnZlcnRlci5qcyc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdMZWdhY3lDb252ZXJ0ZXIgfSBmcm9tICcuL2NsaWVudF9jb25maWdfdG9fbGVnYWN5X2NvbnZlcnRlci5qcyc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdGb3JtYXR0ZXIgfSBmcm9tICcuL2NsaWVudF9jb25maWdfZm9ybWF0dGVyLmpzJztcblxuLyoqXG4gKiBGb3JtYXRzIGNsaWVudCBjb25maWcgdG8gZGVzaXJlZCBmb3JtYXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBDbGllbnRDb25maWdGb3JtYXR0ZXJMZWdhY3kgaW1wbGVtZW50cyBDbGllbnRDb25maWdGb3JtYXR0ZXIge1xuICAvKipcbiAgICogQ3JlYXRlcyBuZXcgY2xpZW50IGNvbmZpZyBmb3JtYXR0ZXIuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGNvbmZpZ0NvbnZlcnRlcjogQ2xpZW50Q29uZmlnTW9iaWxlQ29udmVydGVyKSB7fVxuXG4gIGZvcm1hdCA9IChjbGllbnRDb25maWc6IENsaWVudENvbmZpZywgZm9ybWF0OiBDbGllbnRDb25maWdGb3JtYXQpOiBzdHJpbmcgPT4ge1xuICAgIC8vIFRoaXMgbGlicmFyeSBvbmx5IGdlbmVyYXRlcyB1bmlmaWVkIENsaWVudENvbmZpZyBidXQgb2xkZXIgdmVyc2lvbiBvZiBmcm9udGVuZCBsaWJyYXJpZXMgb25seSBzdXBwb3J0IGxlZ2FjeSBmb3JtYXQuIFNvIHdlIGNvbnZlcnQgaXQgZmlyc3QuXG4gICAgY29uc3QgbGVnYWN5Q29uZmlnID1cbiAgICAgIG5ldyBDbGllbnRDb25maWdMZWdhY3lDb252ZXJ0ZXIoKS5jb252ZXJ0VG9MZWdhY3lDb25maWcoY2xpZW50Q29uZmlnKTtcblxuICAgIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgICBjYXNlIENsaWVudENvbmZpZ0Zvcm1hdC5UUzpcbiAgICAgIGNhc2UgQ2xpZW50Q29uZmlnRm9ybWF0Lk1KUzoge1xuICAgICAgICByZXR1cm4gYGNvbnN0IGFtcGxpZnlDb25maWcgPSAke0pTT04uc3RyaW5naWZ5KGxlZ2FjeUNvbmZpZywgbnVsbCwgMil9JHtcbiAgICAgICAgICBvcy5FT0xcbiAgICAgICAgfWV4cG9ydCBkZWZhdWx0IGFtcGxpZnlDb25maWc7JHtvcy5FT0x9YDtcbiAgICAgIH1cbiAgICAgIGNhc2UgQ2xpZW50Q29uZmlnRm9ybWF0LkRBUlQ6IHtcbiAgICAgICAgcmV0dXJuIGBjb25zdCBhbXBsaWZ5Q29uZmlnID0gJycnJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICB0aGlzLmNvbmZpZ0NvbnZlcnRlci5jb252ZXJ0VG9Nb2JpbGVDb25maWcobGVnYWN5Q29uZmlnKSxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIDJcbiAgICAgICAgKX0nJyc7YDtcbiAgICAgIH1cbiAgICAgIGNhc2UgQ2xpZW50Q29uZmlnRm9ybWF0LkpTT05fTU9CSUxFOlxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgdGhpcy5jb25maWdDb252ZXJ0ZXIuY29udmVydFRvTW9iaWxlQ29uZmlnKGxlZ2FjeUNvbmZpZyksXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICAyXG4gICAgICAgICk7XG4gICAgICBjYXNlIENsaWVudENvbmZpZ0Zvcm1hdC5KU09OOlxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobGVnYWN5Q29uZmlnLCBudWxsLCAyKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBjbGllbnQgY29uZmlnIGZvcm1hdGApO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==