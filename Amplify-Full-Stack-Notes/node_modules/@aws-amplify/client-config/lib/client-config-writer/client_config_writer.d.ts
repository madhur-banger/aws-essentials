/// <reference types="node" resolution-mode="require"/>
import _fsp from 'fs/promises';
import { ClientConfig, ClientConfigFileBaseName, ClientConfigFormat, ClientConfigVersion, GenerateClientConfigToFileResult } from '../client-config-types/client_config.js';
import { ClientConfigFormatter } from './client_config_formatter.js';
export type ClientConfigPathResolver = (fileName: ClientConfigFileBaseName, outDir?: string, format?: ClientConfigFormat) => Promise<string>;
export type ClientConfigNameResolver = (version: ClientConfigVersion) => ClientConfigFileBaseName;
/**
 * A class that persists client config to disk.
 */
export declare class ClientConfigWriter {
    private readonly pathResolver;
    private readonly nameResolver;
    private readonly formatter;
    private readonly fsp;
    /**
     * Creates client config writer
     */
    constructor(pathResolver: ClientConfigPathResolver, nameResolver: ClientConfigNameResolver, formatter: ClientConfigFormatter, fsp?: typeof _fsp);
    /**
     * Persists provided client config as json file to target path.
     */
    writeClientConfig: (clientConfig: ClientConfig, version: ClientConfigVersion, outDir?: string, format?: ClientConfigFormat) => Promise<GenerateClientConfigToFileResult>;
}
//# sourceMappingURL=client_config_writer.d.ts.map