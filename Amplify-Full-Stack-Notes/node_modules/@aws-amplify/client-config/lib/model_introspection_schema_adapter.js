import { createGraphqlModelsGenerator } from '@aws-amplify/model-generator';
import { AmplifyFault } from '@aws-amplify/platform-core';
/**
 * Adapts static getModelIntrospectionSchemaFromS3Uri from @aws-amplify/model-generator call to make it injectable and testable.
 */
export class ModelIntrospectionSchemaAdapter {
    awsClientProvider;
    /**
     * Creates new adapter for getModelIntrospectionSchemaFromS3Uri from @aws-amplify/model-generator.
     */
    constructor(awsClientProvider) {
        this.awsClientProvider = awsClientProvider;
    }
    /**
     * Generates the client configuration for a given backend
     */
    getModelIntrospectionSchemaFromS3Uri = async (modelSchemaS3Uri) => {
        if (!modelSchemaS3Uri) {
            return;
        }
        const generatedModels = await (await createGraphqlModelsGenerator({
            modelSchemaS3Uri,
            awsClientProvider: this.awsClientProvider,
        }).generateModels({ target: 'introspection' })).getResults();
        const generatedModelFiles = Object.values(generatedModels);
        if (generatedModelFiles.length !== 1) {
            throw new AmplifyFault('UnexpectedModelIntrospectionSchemaFault', {
                message: `A single model introspection schema is expected, received ${generatedModelFiles.length} values.`,
            });
        }
        try {
            return JSON.parse(generatedModelFiles[0]);
        }
        catch (e) {
            throw new AmplifyFault('InvalidModelIntrospectionSchemaFault', {
                message: 'Caught exception while converting introspection schema to JSON representation',
            }, e);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWxfaW50cm9zcGVjdGlvbl9zY2hlbWFfYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbF9pbnRyb3NwZWN0aW9uX3NjaGVtYV9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzVFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQU0xRDs7R0FFRztBQUNILE1BQU0sT0FBTywrQkFBK0I7SUFLdkI7SUFKbkI7O09BRUc7SUFDSCxZQUNtQixpQkFJZjtRQUplLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FJaEM7SUFDRCxDQUFDO0lBRUo7O09BRUc7SUFDSCxvQ0FBb0MsR0FBRyxLQUFLLEVBQzFDLGdCQUFvQyxFQUNOLEVBQUU7UUFDaEMsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3JCLE9BQU87U0FDUjtRQUNELE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FDNUIsTUFBTSw0QkFBNEIsQ0FBQztZQUNqQyxnQkFBZ0I7WUFDaEIsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGlCQUFpQjtTQUMxQyxDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxDQUFDLENBQy9DLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDZixNQUFNLG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDM0QsSUFBSSxtQkFBbUIsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3BDLE1BQU0sSUFBSSxZQUFZLENBQUMseUNBQXlDLEVBQUU7Z0JBQ2hFLE9BQU8sRUFBRSw2REFBNkQsbUJBQW1CLENBQUMsTUFBTSxVQUFVO2FBQzNHLENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSTtZQUNGLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzNDO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixNQUFNLElBQUksWUFBWSxDQUNwQixzQ0FBc0MsRUFDdEM7Z0JBQ0UsT0FBTyxFQUNMLCtFQUErRTthQUNsRixFQUNELENBQVUsQ0FDWCxDQUFDO1NBQ0g7SUFDSCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUdyYXBocWxNb2RlbHNHZW5lcmF0b3IgfSBmcm9tICdAYXdzLWFtcGxpZnkvbW9kZWwtZ2VuZXJhdG9yJztcbmltcG9ydCB7IEFtcGxpZnlGYXVsdCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcbmltcG9ydCB7IEFXU0NsaWVudFByb3ZpZGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgeyBBbXBsaWZ5Q2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWFtcGxpZnknO1xuaW1wb3J0IHsgQ2xvdWRGb3JtYXRpb25DbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtY2xvdWRmb3JtYXRpb24nO1xuaW1wb3J0IHsgUzNDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtczMnO1xuXG4vKipcbiAqIEFkYXB0cyBzdGF0aWMgZ2V0TW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hRnJvbVMzVXJpIGZyb20gQGF3cy1hbXBsaWZ5L21vZGVsLWdlbmVyYXRvciBjYWxsIHRvIG1ha2UgaXQgaW5qZWN0YWJsZSBhbmQgdGVzdGFibGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBNb2RlbEludHJvc3BlY3Rpb25TY2hlbWFBZGFwdGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgbmV3IGFkYXB0ZXIgZm9yIGdldE1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUZyb21TM1VyaSBmcm9tIEBhd3MtYW1wbGlmeS9tb2RlbC1nZW5lcmF0b3IuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGF3c0NsaWVudFByb3ZpZGVyOiBBV1NDbGllbnRQcm92aWRlcjx7XG4gICAgICBnZXRTM0NsaWVudDogUzNDbGllbnQ7XG4gICAgICBnZXRBbXBsaWZ5Q2xpZW50OiBBbXBsaWZ5Q2xpZW50O1xuICAgICAgZ2V0Q2xvdWRGb3JtYXRpb25DbGllbnQ6IENsb3VkRm9ybWF0aW9uQ2xpZW50O1xuICAgIH0+XG4gICkge31cblxuICAvKipcbiAgICogR2VuZXJhdGVzIHRoZSBjbGllbnQgY29uZmlndXJhdGlvbiBmb3IgYSBnaXZlbiBiYWNrZW5kXG4gICAqL1xuICBnZXRNb2RlbEludHJvc3BlY3Rpb25TY2hlbWFGcm9tUzNVcmkgPSBhc3luYyAoXG4gICAgbW9kZWxTY2hlbWFTM1VyaTogc3RyaW5nIHwgdW5kZWZpbmVkXG4gICk6IFByb21pc2U8dW5rbm93biB8IHVuZGVmaW5lZD4gPT4ge1xuICAgIGlmICghbW9kZWxTY2hlbWFTM1VyaSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBnZW5lcmF0ZWRNb2RlbHMgPSBhd2FpdCAoXG4gICAgICBhd2FpdCBjcmVhdGVHcmFwaHFsTW9kZWxzR2VuZXJhdG9yKHtcbiAgICAgICAgbW9kZWxTY2hlbWFTM1VyaSxcbiAgICAgICAgYXdzQ2xpZW50UHJvdmlkZXI6IHRoaXMuYXdzQ2xpZW50UHJvdmlkZXIsXG4gICAgICB9KS5nZW5lcmF0ZU1vZGVscyh7IHRhcmdldDogJ2ludHJvc3BlY3Rpb24nIH0pXG4gICAgKS5nZXRSZXN1bHRzKCk7XG4gICAgY29uc3QgZ2VuZXJhdGVkTW9kZWxGaWxlcyA9IE9iamVjdC52YWx1ZXMoZ2VuZXJhdGVkTW9kZWxzKTtcbiAgICBpZiAoZ2VuZXJhdGVkTW9kZWxGaWxlcy5sZW5ndGggIT09IDEpIHtcbiAgICAgIHRocm93IG5ldyBBbXBsaWZ5RmF1bHQoJ1VuZXhwZWN0ZWRNb2RlbEludHJvc3BlY3Rpb25TY2hlbWFGYXVsdCcsIHtcbiAgICAgICAgbWVzc2FnZTogYEEgc2luZ2xlIG1vZGVsIGludHJvc3BlY3Rpb24gc2NoZW1hIGlzIGV4cGVjdGVkLCByZWNlaXZlZCAke2dlbmVyYXRlZE1vZGVsRmlsZXMubGVuZ3RofSB2YWx1ZXMuYCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShnZW5lcmF0ZWRNb2RlbEZpbGVzWzBdKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgQW1wbGlmeUZhdWx0KFxuICAgICAgICAnSW52YWxpZE1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUZhdWx0JyxcbiAgICAgICAge1xuICAgICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgICAnQ2F1Z2h0IGV4Y2VwdGlvbiB3aGlsZSBjb252ZXJ0aW5nIGludHJvc3BlY3Rpb24gc2NoZW1hIHRvIEpTT04gcmVwcmVzZW50YXRpb24nLFxuICAgICAgICB9LFxuICAgICAgICBlIGFzIEVycm9yXG4gICAgICApO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==