import fsp from 'fs/promises';
import path from 'path';
import { ClientConfigFormat } from '../index.js';
/**
 * Get path to config file
 * @param fileName - name of the file to be used for client config. Can be different based on the version of the client config.
 * @param outDir - path to directory where config is written. If not provided defaults to current process working directory.
 * @param format - The format which the configuration should be exported into. Defaults to JSON.
 * returns path to config file
 */
export const getClientConfigPath = async (fileName, outDir, format) => {
    const defaultArgs = {
        out: process.cwd(),
        format: ClientConfigFormat.JSON,
    };
    format = format || defaultArgs.format;
    let targetPath = defaultArgs.out;
    if (outDir) {
        targetPath = path.isAbsolute(outDir)
            ? outDir
            : path.resolve(process.cwd(), outDir);
        try {
            await fsp.access(outDir);
        }
        catch (error) {
            // outDir does not exist, so create dir
            if (error instanceof Error && error.message.includes('ENOENT')) {
                await fsp.mkdir(outDir, { recursive: true });
            }
            else {
                throw error;
            }
        }
    }
    let extension;
    switch (format) {
        case ClientConfigFormat.JSON_MOBILE:
            extension = 'json';
            break;
        default:
            extension = format;
            break;
    }
    targetPath = path.resolve(targetPath, `${fileName}.${extension}`);
    return targetPath;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0X2NsaWVudF9jb25maWdfcGF0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXRocy9nZXRfY2xpZW50X2NvbmZpZ19wYXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sR0FBRyxNQUFNLGFBQWEsQ0FBQztBQUM5QixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxFQUE0QixrQkFBa0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUzRTs7Ozs7O0dBTUc7QUFDSCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLEVBQ3RDLFFBQWtDLEVBQ2xDLE1BQWUsRUFDZixNQUEyQixFQUMzQixFQUFFO0lBQ0YsTUFBTSxXQUFXLEdBQUc7UUFDbEIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUU7UUFDbEIsTUFBTSxFQUFFLGtCQUFrQixDQUFDLElBQUk7S0FDaEMsQ0FBQztJQUNGLE1BQU0sR0FBRyxNQUFNLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQztJQUV0QyxJQUFJLFVBQVUsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDO0lBRWpDLElBQUksTUFBTSxFQUFFO1FBQ1YsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1lBQ2xDLENBQUMsQ0FBQyxNQUFNO1lBQ1IsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXhDLElBQUk7WUFDRixNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDMUI7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLHVDQUF1QztZQUN2QyxJQUFJLEtBQUssWUFBWSxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQzlELE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUM5QztpQkFBTTtnQkFDTCxNQUFNLEtBQUssQ0FBQzthQUNiO1NBQ0Y7S0FDRjtJQUVELElBQUksU0FBaUIsQ0FBQztJQUN0QixRQUFRLE1BQU0sRUFBRTtRQUNkLEtBQUssa0JBQWtCLENBQUMsV0FBVztZQUNqQyxTQUFTLEdBQUcsTUFBTSxDQUFDO1lBQ25CLE1BQU07UUFDUjtZQUNFLFNBQVMsR0FBRyxNQUFNLENBQUM7WUFDbkIsTUFBTTtLQUNUO0lBRUQsVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEdBQUcsUUFBUSxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDbEUsT0FBTyxVQUFVLENBQUM7QUFDcEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzcCBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IENsaWVudENvbmZpZ0ZpbGVCYXNlTmFtZSwgQ2xpZW50Q29uZmlnRm9ybWF0IH0gZnJvbSAnLi4vaW5kZXguanMnO1xuXG4vKipcbiAqIEdldCBwYXRoIHRvIGNvbmZpZyBmaWxlXG4gKiBAcGFyYW0gZmlsZU5hbWUgLSBuYW1lIG9mIHRoZSBmaWxlIHRvIGJlIHVzZWQgZm9yIGNsaWVudCBjb25maWcuIENhbiBiZSBkaWZmZXJlbnQgYmFzZWQgb24gdGhlIHZlcnNpb24gb2YgdGhlIGNsaWVudCBjb25maWcuXG4gKiBAcGFyYW0gb3V0RGlyIC0gcGF0aCB0byBkaXJlY3Rvcnkgd2hlcmUgY29uZmlnIGlzIHdyaXR0ZW4uIElmIG5vdCBwcm92aWRlZCBkZWZhdWx0cyB0byBjdXJyZW50IHByb2Nlc3Mgd29ya2luZyBkaXJlY3RvcnkuXG4gKiBAcGFyYW0gZm9ybWF0IC0gVGhlIGZvcm1hdCB3aGljaCB0aGUgY29uZmlndXJhdGlvbiBzaG91bGQgYmUgZXhwb3J0ZWQgaW50by4gRGVmYXVsdHMgdG8gSlNPTi5cbiAqIHJldHVybnMgcGF0aCB0byBjb25maWcgZmlsZVxuICovXG5leHBvcnQgY29uc3QgZ2V0Q2xpZW50Q29uZmlnUGF0aCA9IGFzeW5jIChcbiAgZmlsZU5hbWU6IENsaWVudENvbmZpZ0ZpbGVCYXNlTmFtZSxcbiAgb3V0RGlyPzogc3RyaW5nLFxuICBmb3JtYXQ/OiBDbGllbnRDb25maWdGb3JtYXRcbikgPT4ge1xuICBjb25zdCBkZWZhdWx0QXJncyA9IHtcbiAgICBvdXQ6IHByb2Nlc3MuY3dkKCksXG4gICAgZm9ybWF0OiBDbGllbnRDb25maWdGb3JtYXQuSlNPTixcbiAgfTtcbiAgZm9ybWF0ID0gZm9ybWF0IHx8IGRlZmF1bHRBcmdzLmZvcm1hdDtcblxuICBsZXQgdGFyZ2V0UGF0aCA9IGRlZmF1bHRBcmdzLm91dDtcblxuICBpZiAob3V0RGlyKSB7XG4gICAgdGFyZ2V0UGF0aCA9IHBhdGguaXNBYnNvbHV0ZShvdXREaXIpXG4gICAgICA/IG91dERpclxuICAgICAgOiBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgb3V0RGlyKTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBmc3AuYWNjZXNzKG91dERpcik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIG91dERpciBkb2VzIG5vdCBleGlzdCwgc28gY3JlYXRlIGRpclxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnRU5PRU5UJykpIHtcbiAgICAgICAgYXdhaXQgZnNwLm1rZGlyKG91dERpciwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBsZXQgZXh0ZW5zaW9uOiBzdHJpbmc7XG4gIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgY2FzZSBDbGllbnRDb25maWdGb3JtYXQuSlNPTl9NT0JJTEU6XG4gICAgICBleHRlbnNpb24gPSAnanNvbic7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZXh0ZW5zaW9uID0gZm9ybWF0O1xuICAgICAgYnJlYWs7XG4gIH1cblxuICB0YXJnZXRQYXRoID0gcGF0aC5yZXNvbHZlKHRhcmdldFBhdGgsIGAke2ZpbGVOYW1lfS4ke2V4dGVuc2lvbn1gKTtcbiAgcmV0dXJuIHRhcmdldFBhdGg7XG59O1xuIl19