import { ClientConfigWriter } from './client-config-writer/client_config_writer.js';
import { ClientConfigVersionOption, } from './client-config-types/client_config.js';
import { getClientConfigPath } from './paths/index.js';
import { ClientConfigMobileConverter } from './client-config-writer/client_config_to_mobile_legacy_converter.js';
import { fileURLToPath } from 'node:url';
import * as fsp from 'fs/promises';
import { ClientConfigFormatterLegacy } from './client-config-writer/client_config_formatter_legacy.js';
import { ClientConfigFormatterDefault } from './client-config-writer/client_config_formatter_default.js';
import { getClientConfigFileName } from './paths/get_client_config_name.js';
/**
 * Main entry point for writing provided client config to a file
 */
export const writeClientConfigToFile = async (clientConfig, version, outDir, format) => {
    const packageJson = await readPackageJson();
    const isLegacyConfig = version === ClientConfigVersionOption.V0;
    const clientConfigWriter = new ClientConfigWriter(getClientConfigPath, getClientConfigFileName, isLegacyConfig
        ? new ClientConfigFormatterLegacy(new ClientConfigMobileConverter(packageJson.name, packageJson.version))
        : new ClientConfigFormatterDefault());
    return await clientConfigWriter.writeClientConfig(clientConfig, version, outDir, format);
};
const readPackageJson = async () => {
    const packageJsonPath = fileURLToPath(new URL('../package.json', import.meta.url));
    return JSON.parse(await fsp.readFile(packageJsonPath, 'utf-8'));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JpdGVfY2xpZW50X2NvbmZpZ190b19maWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dyaXRlX2NsaWVudF9jb25maWdfdG9fZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNwRixPQUFPLEVBSUwseUJBQXlCLEdBRTFCLE1BQU0sd0NBQXdDLENBQUM7QUFDaEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDdkQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sb0VBQW9FLENBQUM7QUFDakgsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN6QyxPQUFPLEtBQUssR0FBRyxNQUFNLGFBQWEsQ0FBQztBQUNuQyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUN2RyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwyREFBMkQsQ0FBQztBQUN6RyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUU1RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLEtBQUssRUFDMUMsWUFBMEIsRUFDMUIsT0FBNEIsRUFDNUIsTUFBZSxFQUNmLE1BQTJCLEVBQ2dCLEVBQUU7SUFDN0MsTUFBTSxXQUFXLEdBQUcsTUFBTSxlQUFlLEVBQUUsQ0FBQztJQUU1QyxNQUFNLGNBQWMsR0FBRyxPQUFPLEtBQUsseUJBQXlCLENBQUMsRUFBRSxDQUFDO0lBRWhFLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsQ0FDL0MsbUJBQW1CLEVBQ25CLHVCQUF1QixFQUN2QixjQUFjO1FBQ1osQ0FBQyxDQUFDLElBQUksMkJBQTJCLENBQzdCLElBQUksMkJBQTJCLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQ3ZFO1FBQ0gsQ0FBQyxDQUFDLElBQUksNEJBQTRCLEVBQUUsQ0FDdkMsQ0FBQztJQUVGLE9BQU8sTUFBTSxrQkFBa0IsQ0FBQyxpQkFBaUIsQ0FDL0MsWUFBWSxFQUNaLE9BQU8sRUFDUCxNQUFNLEVBQ04sTUFBTSxDQUNQLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLGVBQWUsR0FBRyxLQUFLLElBRzFCLEVBQUU7SUFDSCxNQUFNLGVBQWUsR0FBRyxhQUFhLENBQ25DLElBQUksR0FBRyxDQUFDLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQzVDLENBQUM7SUFDRixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ2xFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsaWVudENvbmZpZ1dyaXRlciB9IGZyb20gJy4vY2xpZW50LWNvbmZpZy13cml0ZXIvY2xpZW50X2NvbmZpZ193cml0ZXIuanMnO1xuaW1wb3J0IHtcbiAgQ2xpZW50Q29uZmlnLFxuICBDbGllbnRDb25maWdGb3JtYXQsXG4gIENsaWVudENvbmZpZ1ZlcnNpb24sXG4gIENsaWVudENvbmZpZ1ZlcnNpb25PcHRpb24sXG4gIEdlbmVyYXRlQ2xpZW50Q29uZmlnVG9GaWxlUmVzdWx0LFxufSBmcm9tICcuL2NsaWVudC1jb25maWctdHlwZXMvY2xpZW50X2NvbmZpZy5qcyc7XG5pbXBvcnQgeyBnZXRDbGllbnRDb25maWdQYXRoIH0gZnJvbSAnLi9wYXRocy9pbmRleC5qcyc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdNb2JpbGVDb252ZXJ0ZXIgfSBmcm9tICcuL2NsaWVudC1jb25maWctd3JpdGVyL2NsaWVudF9jb25maWdfdG9fbW9iaWxlX2xlZ2FjeV9jb252ZXJ0ZXIuanMnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ25vZGU6dXJsJztcbmltcG9ydCAqIGFzIGZzcCBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdGb3JtYXR0ZXJMZWdhY3kgfSBmcm9tICcuL2NsaWVudC1jb25maWctd3JpdGVyL2NsaWVudF9jb25maWdfZm9ybWF0dGVyX2xlZ2FjeS5qcyc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdGb3JtYXR0ZXJEZWZhdWx0IH0gZnJvbSAnLi9jbGllbnQtY29uZmlnLXdyaXRlci9jbGllbnRfY29uZmlnX2Zvcm1hdHRlcl9kZWZhdWx0LmpzJztcbmltcG9ydCB7IGdldENsaWVudENvbmZpZ0ZpbGVOYW1lIH0gZnJvbSAnLi9wYXRocy9nZXRfY2xpZW50X2NvbmZpZ19uYW1lLmpzJztcblxuLyoqXG4gKiBNYWluIGVudHJ5IHBvaW50IGZvciB3cml0aW5nIHByb3ZpZGVkIGNsaWVudCBjb25maWcgdG8gYSBmaWxlXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZUNsaWVudENvbmZpZ1RvRmlsZSA9IGFzeW5jIChcbiAgY2xpZW50Q29uZmlnOiBDbGllbnRDb25maWcsXG4gIHZlcnNpb246IENsaWVudENvbmZpZ1ZlcnNpb24sXG4gIG91dERpcj86IHN0cmluZyxcbiAgZm9ybWF0PzogQ2xpZW50Q29uZmlnRm9ybWF0XG4pOiBQcm9taXNlPEdlbmVyYXRlQ2xpZW50Q29uZmlnVG9GaWxlUmVzdWx0PiA9PiB7XG4gIGNvbnN0IHBhY2thZ2VKc29uID0gYXdhaXQgcmVhZFBhY2thZ2VKc29uKCk7XG5cbiAgY29uc3QgaXNMZWdhY3lDb25maWcgPSB2ZXJzaW9uID09PSBDbGllbnRDb25maWdWZXJzaW9uT3B0aW9uLlYwO1xuXG4gIGNvbnN0IGNsaWVudENvbmZpZ1dyaXRlciA9IG5ldyBDbGllbnRDb25maWdXcml0ZXIoXG4gICAgZ2V0Q2xpZW50Q29uZmlnUGF0aCxcbiAgICBnZXRDbGllbnRDb25maWdGaWxlTmFtZSxcbiAgICBpc0xlZ2FjeUNvbmZpZ1xuICAgICAgPyBuZXcgQ2xpZW50Q29uZmlnRm9ybWF0dGVyTGVnYWN5KFxuICAgICAgICAgIG5ldyBDbGllbnRDb25maWdNb2JpbGVDb252ZXJ0ZXIocGFja2FnZUpzb24ubmFtZSwgcGFja2FnZUpzb24udmVyc2lvbilcbiAgICAgICAgKVxuICAgICAgOiBuZXcgQ2xpZW50Q29uZmlnRm9ybWF0dGVyRGVmYXVsdCgpXG4gICk7XG5cbiAgcmV0dXJuIGF3YWl0IGNsaWVudENvbmZpZ1dyaXRlci53cml0ZUNsaWVudENvbmZpZyhcbiAgICBjbGllbnRDb25maWcsXG4gICAgdmVyc2lvbixcbiAgICBvdXREaXIsXG4gICAgZm9ybWF0XG4gICk7XG59O1xuXG5jb25zdCByZWFkUGFja2FnZUpzb24gPSBhc3luYyAoKTogUHJvbWlzZTx7XG4gIG5hbWU6IHN0cmluZztcbiAgdmVyc2lvbjogc3RyaW5nO1xufT4gPT4ge1xuICBjb25zdCBwYWNrYWdlSnNvblBhdGggPSBmaWxlVVJMVG9QYXRoKFxuICAgIG5ldyBVUkwoJy4uL3BhY2thZ2UuanNvbicsIGltcG9ydC5tZXRhLnVybClcbiAgKTtcbiAgcmV0dXJuIEpTT04ucGFyc2UoYXdhaXQgZnNwLnJlYWRGaWxlKHBhY2thZ2VKc29uUGF0aCwgJ3V0Zi04JykpO1xufTtcbiJdfQ==