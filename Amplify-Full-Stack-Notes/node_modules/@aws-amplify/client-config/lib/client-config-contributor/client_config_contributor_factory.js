// Versions of config schemas supported by this package version
import { AuthClientConfigContributor as Auth1_1, CustomClientConfigContributor as Custom1_1, DataClientConfigContributor as Data1_1, StorageClientConfigContributorV1 as Storage1, StorageClientConfigContributorV1_1 as Storage1_1, StorageClientConfigContributor as Storage1_2, VersionContributor as VersionContributor1_2, VersionContributorV1, VersionContributorV1_1, } from './client_config_contributor_v1.js';
import { ClientConfigVersionOption, } from '../client-config-types/client_config.js';
/**
 * Factory to generate client config contributors for client config schema given a version
 */
export class ClientConfigContributorFactory {
    modelIntrospectionSchemaAdapter;
    versionedClientConfigContributors;
    /**
     * Creates a list of all contributors available and caches it.
     */
    constructor(modelIntrospectionSchemaAdapter) {
        this.modelIntrospectionSchemaAdapter = modelIntrospectionSchemaAdapter;
        this.versionedClientConfigContributors = {
            [ClientConfigVersionOption.V1_2]: [
                new Auth1_1(),
                new Data1_1(this.modelIntrospectionSchemaAdapter),
                new Storage1_2(),
                new VersionContributor1_2(),
                new Custom1_1(),
            ],
            [ClientConfigVersionOption.V1_1]: [
                new Auth1_1(),
                new Data1_1(this.modelIntrospectionSchemaAdapter),
                new Storage1_1(),
                new VersionContributorV1_1(),
                new Custom1_1(),
            ],
            // Except for storage and version, other contributors are same as V1
            [ClientConfigVersionOption.V1]: [
                new Auth1_1(),
                new Data1_1(this.modelIntrospectionSchemaAdapter),
                new Storage1(),
                new VersionContributorV1(),
                new Custom1_1(),
            ],
            // Legacy config is derived from V1.2 (latest) of unified default config
            [ClientConfigVersionOption.V0]: [
                new Auth1_1(),
                new Data1_1(this.modelIntrospectionSchemaAdapter),
                new Storage1_2(),
                new VersionContributor1_2(),
                new Custom1_1(),
            ],
        };
    }
    /**
     * Return all the contributors for the given version
     */
    getContributors(version) {
        return this.versionedClientConfigContributors[version];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50X2NvbmZpZ19jb250cmlidXRvcl9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsaWVudC1jb25maWctY29udHJpYnV0b3IvY2xpZW50X2NvbmZpZ19jb250cmlidXRvcl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLCtEQUErRDtBQUMvRCxPQUFPLEVBQ0wsMkJBQTJCLElBQUksT0FBTyxFQUN0Qyw2QkFBNkIsSUFBSSxTQUFTLEVBQzFDLDJCQUEyQixJQUFJLE9BQU8sRUFDdEMsZ0NBQWdDLElBQUksUUFBUSxFQUM1QyxrQ0FBa0MsSUFBSSxVQUFVLEVBQ2hELDhCQUE4QixJQUFJLFVBQVUsRUFDNUMsa0JBQWtCLElBQUkscUJBQXFCLEVBQzNDLG9CQUFvQixFQUNwQixzQkFBc0IsR0FDdkIsTUFBTSxtQ0FBbUMsQ0FBQztBQUkzQyxPQUFPLEVBRUwseUJBQXlCLEdBQzFCLE1BQU0seUNBQXlDLENBQUM7QUFDakQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sOEJBQThCO0lBVXRCO0lBVG5CLGlDQUFpQyxDQUcvQjtJQUVGOztPQUVHO0lBQ0gsWUFDbUIsK0JBQWdFO1FBQWhFLG9DQUErQixHQUEvQiwrQkFBK0IsQ0FBaUM7UUFFakYsSUFBSSxDQUFDLGlDQUFpQyxHQUFHO1lBQ3ZDLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ2hDLElBQUksT0FBTyxFQUFFO2dCQUNiLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQywrQkFBK0IsQ0FBQztnQkFDakQsSUFBSSxVQUFVLEVBQUU7Z0JBQ2hCLElBQUkscUJBQXFCLEVBQUU7Z0JBQzNCLElBQUksU0FBUyxFQUFFO2FBQ2hCO1lBRUQsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDaEMsSUFBSSxPQUFPLEVBQUU7Z0JBQ2IsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLCtCQUErQixDQUFDO2dCQUNqRCxJQUFJLFVBQVUsRUFBRTtnQkFDaEIsSUFBSSxzQkFBc0IsRUFBRTtnQkFDNUIsSUFBSSxTQUFTLEVBQUU7YUFDaEI7WUFFRCxvRUFBb0U7WUFDcEUsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDOUIsSUFBSSxPQUFPLEVBQUU7Z0JBQ2IsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLCtCQUErQixDQUFDO2dCQUNqRCxJQUFJLFFBQVEsRUFBRTtnQkFDZCxJQUFJLG9CQUFvQixFQUFFO2dCQUMxQixJQUFJLFNBQVMsRUFBRTthQUNoQjtZQUVELHdFQUF3RTtZQUN4RSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUM5QixJQUFJLE9BQU8sRUFBRTtnQkFDYixJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsK0JBQStCLENBQUM7Z0JBQ2pELElBQUksVUFBVSxFQUFFO2dCQUNoQixJQUFJLHFCQUFxQixFQUFFO2dCQUMzQixJQUFJLFNBQVMsRUFBRTthQUNoQjtTQUNGLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSCxlQUFlLENBQUMsT0FBNEI7UUFDMUMsT0FBTyxJQUFJLENBQUMsaUNBQWlDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVmVyc2lvbnMgb2YgY29uZmlnIHNjaGVtYXMgc3VwcG9ydGVkIGJ5IHRoaXMgcGFja2FnZSB2ZXJzaW9uXG5pbXBvcnQge1xuICBBdXRoQ2xpZW50Q29uZmlnQ29udHJpYnV0b3IgYXMgQXV0aDFfMSxcbiAgQ3VzdG9tQ2xpZW50Q29uZmlnQ29udHJpYnV0b3IgYXMgQ3VzdG9tMV8xLFxuICBEYXRhQ2xpZW50Q29uZmlnQ29udHJpYnV0b3IgYXMgRGF0YTFfMSxcbiAgU3RvcmFnZUNsaWVudENvbmZpZ0NvbnRyaWJ1dG9yVjEgYXMgU3RvcmFnZTEsXG4gIFN0b3JhZ2VDbGllbnRDb25maWdDb250cmlidXRvclYxXzEgYXMgU3RvcmFnZTFfMSxcbiAgU3RvcmFnZUNsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIGFzIFN0b3JhZ2UxXzIsXG4gIFZlcnNpb25Db250cmlidXRvciBhcyBWZXJzaW9uQ29udHJpYnV0b3IxXzIsXG4gIFZlcnNpb25Db250cmlidXRvclYxLFxuICBWZXJzaW9uQ29udHJpYnV0b3JWMV8xLFxufSBmcm9tICcuL2NsaWVudF9jb25maWdfY29udHJpYnV0b3JfdjEuanMnO1xuXG5pbXBvcnQgeyBDbGllbnRDb25maWdDb250cmlidXRvciB9IGZyb20gJy4uL2NsaWVudC1jb25maWctdHlwZXMvY2xpZW50X2NvbmZpZ19jb250cmlidXRvci5qcyc7XG5pbXBvcnQgeyBNb2RlbEludHJvc3BlY3Rpb25TY2hlbWFBZGFwdGVyIH0gZnJvbSAnLi4vbW9kZWxfaW50cm9zcGVjdGlvbl9zY2hlbWFfYWRhcHRlci5qcyc7XG5pbXBvcnQge1xuICBDbGllbnRDb25maWdWZXJzaW9uLFxuICBDbGllbnRDb25maWdWZXJzaW9uT3B0aW9uLFxufSBmcm9tICcuLi9jbGllbnQtY29uZmlnLXR5cGVzL2NsaWVudF9jb25maWcuanMnO1xuLyoqXG4gKiBGYWN0b3J5IHRvIGdlbmVyYXRlIGNsaWVudCBjb25maWcgY29udHJpYnV0b3JzIGZvciBjbGllbnQgY29uZmlnIHNjaGVtYSBnaXZlbiBhIHZlcnNpb25cbiAqL1xuZXhwb3J0IGNsYXNzIENsaWVudENvbmZpZ0NvbnRyaWJ1dG9yRmFjdG9yeSB7XG4gIHZlcnNpb25lZENsaWVudENvbmZpZ0NvbnRyaWJ1dG9yczogUmVjb3JkPFxuICAgIENsaWVudENvbmZpZ1ZlcnNpb24sXG4gICAgQ2xpZW50Q29uZmlnQ29udHJpYnV0b3JbXVxuICA+O1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbGlzdCBvZiBhbGwgY29udHJpYnV0b3JzIGF2YWlsYWJsZSBhbmQgY2FjaGVzIGl0LlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBtb2RlbEludHJvc3BlY3Rpb25TY2hlbWFBZGFwdGVyOiBNb2RlbEludHJvc3BlY3Rpb25TY2hlbWFBZGFwdGVyXG4gICkge1xuICAgIHRoaXMudmVyc2lvbmVkQ2xpZW50Q29uZmlnQ29udHJpYnV0b3JzID0ge1xuICAgICAgW0NsaWVudENvbmZpZ1ZlcnNpb25PcHRpb24uVjFfMl06IFtcbiAgICAgICAgbmV3IEF1dGgxXzEoKSxcbiAgICAgICAgbmV3IERhdGExXzEodGhpcy5tb2RlbEludHJvc3BlY3Rpb25TY2hlbWFBZGFwdGVyKSxcbiAgICAgICAgbmV3IFN0b3JhZ2UxXzIoKSxcbiAgICAgICAgbmV3IFZlcnNpb25Db250cmlidXRvcjFfMigpLFxuICAgICAgICBuZXcgQ3VzdG9tMV8xKCksXG4gICAgICBdLFxuXG4gICAgICBbQ2xpZW50Q29uZmlnVmVyc2lvbk9wdGlvbi5WMV8xXTogW1xuICAgICAgICBuZXcgQXV0aDFfMSgpLFxuICAgICAgICBuZXcgRGF0YTFfMSh0aGlzLm1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUFkYXB0ZXIpLFxuICAgICAgICBuZXcgU3RvcmFnZTFfMSgpLFxuICAgICAgICBuZXcgVmVyc2lvbkNvbnRyaWJ1dG9yVjFfMSgpLFxuICAgICAgICBuZXcgQ3VzdG9tMV8xKCksXG4gICAgICBdLFxuXG4gICAgICAvLyBFeGNlcHQgZm9yIHN0b3JhZ2UgYW5kIHZlcnNpb24sIG90aGVyIGNvbnRyaWJ1dG9ycyBhcmUgc2FtZSBhcyBWMVxuICAgICAgW0NsaWVudENvbmZpZ1ZlcnNpb25PcHRpb24uVjFdOiBbXG4gICAgICAgIG5ldyBBdXRoMV8xKCksXG4gICAgICAgIG5ldyBEYXRhMV8xKHRoaXMubW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQWRhcHRlciksXG4gICAgICAgIG5ldyBTdG9yYWdlMSgpLFxuICAgICAgICBuZXcgVmVyc2lvbkNvbnRyaWJ1dG9yVjEoKSxcbiAgICAgICAgbmV3IEN1c3RvbTFfMSgpLFxuICAgICAgXSxcblxuICAgICAgLy8gTGVnYWN5IGNvbmZpZyBpcyBkZXJpdmVkIGZyb20gVjEuMiAobGF0ZXN0KSBvZiB1bmlmaWVkIGRlZmF1bHQgY29uZmlnXG4gICAgICBbQ2xpZW50Q29uZmlnVmVyc2lvbk9wdGlvbi5WMF06IFtcbiAgICAgICAgbmV3IEF1dGgxXzEoKSxcbiAgICAgICAgbmV3IERhdGExXzEodGhpcy5tb2RlbEludHJvc3BlY3Rpb25TY2hlbWFBZGFwdGVyKSxcbiAgICAgICAgbmV3IFN0b3JhZ2UxXzIoKSxcbiAgICAgICAgbmV3IFZlcnNpb25Db250cmlidXRvcjFfMigpLFxuICAgICAgICBuZXcgQ3VzdG9tMV8xKCksXG4gICAgICBdLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFsbCB0aGUgY29udHJpYnV0b3JzIGZvciB0aGUgZ2l2ZW4gdmVyc2lvblxuICAgKi9cbiAgZ2V0Q29udHJpYnV0b3JzKHZlcnNpb246IENsaWVudENvbmZpZ1ZlcnNpb24pIHtcbiAgICByZXR1cm4gdGhpcy52ZXJzaW9uZWRDbGllbnRDb25maWdDb250cmlidXRvcnNbdmVyc2lvbl07XG4gIH1cbn1cbiJdfQ==