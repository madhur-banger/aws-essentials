import { authOutputKey, customOutputKey, graphqlOutputKey, storageOutputKey, } from '@aws-amplify/backend-output-schemas';
import { ClientConfigVersionOption, } from '../client-config-types/client_config.js';
// All categories client config contributors are included here to mildly enforce them using
// the same schema (version and other types)
/**
 * Translator for the version number of ClientConfig of V1.2
 */
export class VersionContributor {
    /**
     * Return the version of the schema types that this contributor uses
     */
    contribute = () => {
        return { version: ClientConfigVersionOption.V1_2 };
    };
}
/**
 * Translator for the version number of ClientConfig of V1.1
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export class VersionContributorV1_1 {
    /**
     * Return the version of the schema types that this contributor uses
     */
    contribute = () => {
        return { version: ClientConfigVersionOption.V1_1 };
    };
}
/**
 * Translator for the version number of ClientConfig of V1.0
 */
export class VersionContributorV1 {
    /**
     * Return the version of the schema types that this contributor uses
     */
    contribute = () => {
        return { version: ClientConfigVersionOption.V1 };
    };
}
/**
 * Translator for the Auth portion of ClientConfig
 */
export class AuthClientConfigContributor {
    /**
     * Given some BackendOutput, contribute the Auth portion of the ClientConfig
     */
    contribute = ({ [authOutputKey]: authOutput, }) => {
        if (authOutput === undefined) {
            return {};
        }
        const parseAndAssignObject = (obj, key, value) => {
            if (value == null) {
                return;
            }
            obj[key] = JSON.parse(value);
        };
        const authClientConfig = {};
        authClientConfig.auth = {
            user_pool_id: authOutput.payload.userPoolId,
            aws_region: authOutput.payload.authRegion,
            user_pool_client_id: authOutput.payload.webClientId,
        };
        if (authOutput.payload.identityPoolId) {
            authClientConfig.auth.identity_pool_id =
                authOutput.payload.identityPoolId;
        }
        parseAndAssignObject(authClientConfig.auth, 'mfa_methods', authOutput.payload.mfaTypes);
        parseAndAssignObject(authClientConfig.auth, 'standard_required_attributes', authOutput.payload.signupAttributes);
        parseAndAssignObject(authClientConfig.auth, 'username_attributes', authOutput.payload.usernameAttributes);
        parseAndAssignObject(authClientConfig.auth, 'user_verification_types', authOutput.payload.verificationMechanisms);
        if (authOutput.payload.mfaConfiguration) {
            switch (authOutput.payload.mfaConfiguration) {
                case 'OFF': {
                    authClientConfig.auth.mfa_configuration = 'NONE';
                    break;
                }
                case 'OPTIONAL': {
                    authClientConfig.auth.mfa_configuration = 'OPTIONAL';
                    break;
                }
                case 'ON': {
                    authClientConfig.auth.mfa_configuration = 'REQUIRED';
                }
            }
        }
        if (authOutput.payload.passwordPolicyMinLength ||
            authOutput.payload.passwordPolicyRequirements) {
            authClientConfig.auth.password_policy = {
                min_length: 8,
                // Values below are set to false instead of being undefined as libraries expect defined values.
                // They are overridden below with construct outputs (default or not) if applicable.
                require_lowercase: false,
                require_numbers: false,
                require_symbols: false,
                require_uppercase: false,
            };
            if (authOutput.payload.passwordPolicyMinLength) {
                authClientConfig.auth.password_policy.min_length = Number.parseInt(authOutput.payload.passwordPolicyMinLength);
            }
            if (authOutput.payload.passwordPolicyRequirements) {
                const requirements = JSON.parse(authOutput.payload.passwordPolicyRequirements);
                for (const requirement of requirements) {
                    switch (requirement) {
                        case 'REQUIRES_NUMBERS':
                            authClientConfig.auth.password_policy.require_numbers = true;
                            break;
                        case 'REQUIRES_LOWERCASE':
                            authClientConfig.auth.password_policy.require_lowercase = true;
                            break;
                        case 'REQUIRES_UPPERCASE':
                            authClientConfig.auth.password_policy.require_uppercase = true;
                            break;
                        case 'REQUIRES_SYMBOLS':
                            authClientConfig.auth.password_policy.require_symbols = true;
                            break;
                    }
                }
            }
        }
        // OAuth settings are present if both oauthRedirectSignIn and oauthRedirectSignOut are.
        if (authOutput.payload.oauthRedirectSignIn &&
            authOutput.payload.oauthRedirectSignOut) {
            let socialProviders = authOutput.payload.socialProviders
                ? JSON.parse(authOutput.payload.socialProviders)
                : [];
            if (Array.isArray(socialProviders)) {
                socialProviders = socialProviders.filter(this.isValidIdentityProvider);
            }
            authClientConfig.auth.oauth = {
                identity_providers: socialProviders,
                redirect_sign_in_uri: authOutput.payload.oauthRedirectSignIn.split(','),
                redirect_sign_out_uri: authOutput.payload.oauthRedirectSignOut.split(','),
                response_type: authOutput.payload.oauthResponseType,
                scopes: authOutput.payload.oauthScope
                    ? JSON.parse(authOutput.payload.oauthScope)
                    : [],
                domain: authOutput.payload.oauthCognitoDomain ?? '',
            };
        }
        if (authOutput.payload.allowUnauthenticatedIdentities) {
            authClientConfig.auth.unauthenticated_identities_enabled =
                authOutput.payload.allowUnauthenticatedIdentities === 'true';
        }
        return authClientConfig;
    };
    // Define a type guard function to check if a value is a valid IdentityProvider
    isValidIdentityProvider = (identityProvider) => {
        return [
            'GOOGLE',
            'FACEBOOK',
            'LOGIN_WITH_AMAZON',
            'SIGN_IN_WITH_APPLE',
        ].includes(identityProvider);
    };
}
/**
 * Translator for the Data portion of ClientConfig
 */
export class DataClientConfigContributor {
    modelIntrospectionSchemaAdapter;
    /**
     * Constructor
     * @param modelIntrospectionSchemaAdapter the adapter to provide the model introspection schema from s3 uri
     */
    constructor(modelIntrospectionSchemaAdapter) {
        this.modelIntrospectionSchemaAdapter = modelIntrospectionSchemaAdapter;
    }
    /**
     * Given some BackendOutput, contribute the Graphql API portion of the client config
     */
    contribute = async ({ [graphqlOutputKey]: graphqlOutput, }) => {
        if (graphqlOutput === undefined) {
            return {};
        }
        const config = {};
        config.data = {
            url: graphqlOutput.payload.awsAppsyncApiEndpoint,
            aws_region: graphqlOutput.payload.awsAppsyncRegion,
            api_key: graphqlOutput.payload.awsAppsyncApiKey,
            default_authorization_type: graphqlOutput.payload.awsAppsyncAuthenticationType,
            authorization_types: graphqlOutput.payload.awsAppsyncAdditionalAuthenticationTypes?.split(','),
        };
        const modelIntrospection = await this.modelIntrospectionSchemaAdapter.getModelIntrospectionSchemaFromS3Uri(graphqlOutput.payload.amplifyApiModelSchemaS3Uri);
        if (modelIntrospection) {
            config.data.model_introspection = modelIntrospection;
        }
        return config;
    };
}
/**
 * Translator for the Storage portion of ClientConfig in V1.2
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export class StorageClientConfigContributor {
    /**
     * Given some BackendOutput, contribute the Storage portion of the client config
     */
    contribute = ({ [storageOutputKey]: storageOutput, }) => {
        if (storageOutput === undefined) {
            return {};
        }
        const config = {};
        const bucketsStringArray = JSON.parse(storageOutput.payload.buckets ?? '[]');
        config.storage = {
            aws_region: storageOutput.payload.storageRegion,
            bucket_name: storageOutput.payload.bucketName,
            buckets: bucketsStringArray
                .map((b) => JSON.parse(b))
                .map(({ name, bucketName, storageRegion, paths, }) => ({
                name,
                bucket_name: bucketName,
                aws_region: storageRegion,
                paths,
            })),
        };
        return config;
    };
}
/**
 * Translator for the Storage portion of ClientConfig in V1.1
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export class StorageClientConfigContributorV1_1 {
    /**
     * Given some BackendOutput, contribute the Storage portion of the client config
     */
    contribute = ({ [storageOutputKey]: storageOutput, }) => {
        if (storageOutput === undefined) {
            return {};
        }
        const config = {};
        const bucketsStringArray = JSON.parse(storageOutput.payload.buckets ?? '[]');
        config.storage = {
            aws_region: storageOutput.payload.storageRegion,
            bucket_name: storageOutput.payload.bucketName,
            buckets: bucketsStringArray
                .map((b) => JSON.parse(b))
                .map(({ name, bucketName, storageRegion, }) => ({
                name,
                bucket_name: bucketName,
                aws_region: storageRegion,
            })),
        };
        return config;
    };
}
/**
 * Translator for the Storage portion of ClientConfig in V1
 */
export class StorageClientConfigContributorV1 {
    /**
     * Given some BackendOutput, contribute the Storage portion of the client config
     */
    contribute = ({ [storageOutputKey]: storageOutput, }) => {
        if (storageOutput === undefined) {
            return {};
        }
        const config = {};
        config.storage = {
            aws_region: storageOutput.payload.storageRegion,
            bucket_name: storageOutput.payload.bucketName,
        };
        return config;
    };
}
/**
 * Translator for the Custom portion of ClientConfig
 */
export class CustomClientConfigContributor {
    /**
     * Given some BackendOutput, contribute the Custom portion of the ClientConfig
     */
    contribute = ({ [customOutputKey]: customOutput, }) => {
        if (customOutput === undefined) {
            return {};
        }
        return JSON.parse(customOutput.payload.customOutputs);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50X2NvbmZpZ19jb250cmlidXRvcl92MS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGllbnQtY29uZmlnLWNvbnRyaWJ1dG9yL2NsaWVudF9jb25maWdfY29udHJpYnV0b3JfdjEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUVMLGFBQWEsRUFDYixlQUFlLEVBQ2YsZ0JBQWdCLEVBQ2hCLGdCQUFnQixHQUNqQixNQUFNLHFDQUFxQyxDQUFDO0FBQzdDLE9BQU8sRUFFTCx5QkFBeUIsR0FJMUIsTUFBTSx5Q0FBeUMsQ0FBQztBQUtqRCwyRkFBMkY7QUFDM0YsNENBQTRDO0FBRTVDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGtCQUFrQjtJQUM3Qjs7T0FFRztJQUNILFVBQVUsR0FBRyxHQUFpQixFQUFFO1FBQzlCLE9BQU8sRUFBRSxPQUFPLEVBQUUseUJBQXlCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDckQsQ0FBQyxDQUFDO0NBQ0g7QUFFRDs7R0FFRztBQUNILGdFQUFnRTtBQUNoRSxNQUFNLE9BQU8sc0JBQXNCO0lBQ2pDOztPQUVHO0lBQ0gsVUFBVSxHQUFHLEdBQWlCLEVBQUU7UUFDOUIsT0FBTyxFQUFFLE9BQU8sRUFBRSx5QkFBeUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNyRCxDQUFDLENBQUM7Q0FDSDtBQUVEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG9CQUFvQjtJQUMvQjs7T0FFRztJQUNILFVBQVUsR0FBRyxHQUFpQixFQUFFO1FBQzlCLE9BQU8sRUFBRSxPQUFPLEVBQUUseUJBQXlCLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDbkQsQ0FBQyxDQUFDO0NBQ0g7QUFFRDs7R0FFRztBQUNILE1BQU0sT0FBTywyQkFBMkI7SUFDdEM7O09BRUc7SUFDSCxVQUFVLEdBQUcsQ0FBQyxFQUNaLENBQUMsYUFBYSxDQUFDLEVBQUUsVUFBVSxHQUNOLEVBQWlELEVBQUU7UUFDeEUsSUFBSSxVQUFV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QUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2pDLEdBQUcsQ0FDRixDQUFDLEVBQ0MsSUFBSSxFQUNKLFVBQVUsRUFDVixhQUFhLEdBS2QsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDTCxJQUFJO2dCQUNKLFdBQVcsRUFBRSxVQUFVO2dCQUN2QixVQUFVLEVBQUUsYUFBYTthQUMxQixDQUFDLENBQ0g7U0FDSixDQUFDO1FBRUYsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQyxDQUFDO0NBQ0g7QUFFRDs7R0FFRztBQUNILE1BQU0sT0FBTyxnQ0FBZ0M7SUFHM0M7O09BRUc7SUFDSCxVQUFVLEdBQUcsQ0FBQyxFQUNaLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxhQUFhLEdBQ1osRUFBaUQsRUFBRTtRQUN4RSxJQUFJLGFBQWEsS0FBSyxTQUFTLEVBQUU7WUFDL0IsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUNELE1BQU0sTUFBTSxHQUEwRCxFQUFFLENBQUM7UUFFekUsTUFBTSxDQUFDLE9BQU8sR0FBRztZQUNmLFVBQVUsRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDLGFBQWE7WUFDL0MsV0FBVyxFQUFFLGFBQWEsQ0FBQyxPQUFPLENBQUMsVUFBVTtTQUM5QyxDQUFDO1FBRUYsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQyxDQUFDO0NBQ0g7QUFFRDs7R0FFRztBQUNILE1BQU0sT0FBTyw2QkFBNkI7SUFDeEM7O09BRUc7SUFDSCxVQUFVLEdBQUcsQ0FBQyxFQUNaLENBQUMsZUFBZSxDQUFDLEVBQUUsWUFBWSxHQUNWLEVBQXlCLEVBQUU7UUFDaEQsSUFBSSxZQUFZLEtBQUssU0FBUyxFQUFFO1lBQzlCLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFFRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN4RCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIH0gZnJvbSAnLi4vY2xpZW50LWNvbmZpZy10eXBlcy9jbGllbnRfY29uZmlnX2NvbnRyaWJ1dG9yLmpzJztcbmltcG9ydCB7XG4gIFVuaWZpZWRCYWNrZW5kT3V0cHV0LFxuICBhdXRoT3V0cHV0S2V5LFxuICBjdXN0b21PdXRwdXRLZXksXG4gIGdyYXBocWxPdXRwdXRLZXksXG4gIHN0b3JhZ2VPdXRwdXRLZXksXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLW91dHB1dC1zY2hlbWFzJztcbmltcG9ydCB7XG4gIENsaWVudENvbmZpZyxcbiAgQ2xpZW50Q29uZmlnVmVyc2lvbk9wdGlvbixcbiAgY2xpZW50Q29uZmlnVHlwZXNWMSxcbiAgY2xpZW50Q29uZmlnVHlwZXNWMV8xLFxuICBjbGllbnRDb25maWdUeXBlc1YxXzIsXG59IGZyb20gJy4uL2NsaWVudC1jb25maWctdHlwZXMvY2xpZW50X2NvbmZpZy5qcyc7XG5pbXBvcnQgeyBNb2RlbEludHJvc3BlY3Rpb25TY2hlbWFBZGFwdGVyIH0gZnJvbSAnLi4vbW9kZWxfaW50cm9zcGVjdGlvbl9zY2hlbWFfYWRhcHRlci5qcyc7XG5pbXBvcnQgeyBBd3NBcHBzeW5jQXV0aG9yaXphdGlvblR5cGUgfSBmcm9tICcuLi9jbGllbnQtY29uZmlnLXNjaGVtYS9jbGllbnRfY29uZmlnX3YxLjEuanMnO1xuaW1wb3J0IHsgQW1wbGlmeVN0b3JhZ2VBY2Nlc3NSdWxlIH0gZnJvbSAnLi4vY2xpZW50LWNvbmZpZy1zY2hlbWEvY2xpZW50X2NvbmZpZ192MS4yLmpzJztcblxuLy8gQWxsIGNhdGVnb3JpZXMgY2xpZW50IGNvbmZpZyBjb250cmlidXRvcnMgYXJlIGluY2x1ZGVkIGhlcmUgdG8gbWlsZGx5IGVuZm9yY2UgdGhlbSB1c2luZ1xuLy8gdGhlIHNhbWUgc2NoZW1hICh2ZXJzaW9uIGFuZCBvdGhlciB0eXBlcylcblxuLyoqXG4gKiBUcmFuc2xhdG9yIGZvciB0aGUgdmVyc2lvbiBudW1iZXIgb2YgQ2xpZW50Q29uZmlnIG9mIFYxLjJcbiAqL1xuZXhwb3J0IGNsYXNzIFZlcnNpb25Db250cmlidXRvciBpbXBsZW1lbnRzIENsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIHtcbiAgLyoqXG4gICAqIFJldHVybiB0aGUgdmVyc2lvbiBvZiB0aGUgc2NoZW1hIHR5cGVzIHRoYXQgdGhpcyBjb250cmlidXRvciB1c2VzXG4gICAqL1xuICBjb250cmlidXRlID0gKCk6IENsaWVudENvbmZpZyA9PiB7XG4gICAgcmV0dXJuIHsgdmVyc2lvbjogQ2xpZW50Q29uZmlnVmVyc2lvbk9wdGlvbi5WMV8yIH07XG4gIH07XG59XG5cbi8qKlxuICogVHJhbnNsYXRvciBmb3IgdGhlIHZlcnNpb24gbnVtYmVyIG9mIENsaWVudENvbmZpZyBvZiBWMS4xXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBjbGFzcyBWZXJzaW9uQ29udHJpYnV0b3JWMV8xIGltcGxlbWVudHMgQ2xpZW50Q29uZmlnQ29udHJpYnV0b3Ige1xuICAvKipcbiAgICogUmV0dXJuIHRoZSB2ZXJzaW9uIG9mIHRoZSBzY2hlbWEgdHlwZXMgdGhhdCB0aGlzIGNvbnRyaWJ1dG9yIHVzZXNcbiAgICovXG4gIGNvbnRyaWJ1dGUgPSAoKTogQ2xpZW50Q29uZmlnID0+IHtcbiAgICByZXR1cm4geyB2ZXJzaW9uOiBDbGllbnRDb25maWdWZXJzaW9uT3B0aW9uLlYxXzEgfTtcbiAgfTtcbn1cblxuLyoqXG4gKiBUcmFuc2xhdG9yIGZvciB0aGUgdmVyc2lvbiBudW1iZXIgb2YgQ2xpZW50Q29uZmlnIG9mIFYxLjBcbiAqL1xuZXhwb3J0IGNsYXNzIFZlcnNpb25Db250cmlidXRvclYxIGltcGxlbWVudHMgQ2xpZW50Q29uZmlnQ29udHJpYnV0b3Ige1xuICAvKipcbiAgICogUmV0dXJuIHRoZSB2ZXJzaW9uIG9mIHRoZSBzY2hlbWEgdHlwZXMgdGhhdCB0aGlzIGNvbnRyaWJ1dG9yIHVzZXNcbiAgICovXG4gIGNvbnRyaWJ1dGUgPSAoKTogQ2xpZW50Q29uZmlnID0+IHtcbiAgICByZXR1cm4geyB2ZXJzaW9uOiBDbGllbnRDb25maWdWZXJzaW9uT3B0aW9uLlYxIH07XG4gIH07XG59XG5cbi8qKlxuICogVHJhbnNsYXRvciBmb3IgdGhlIEF1dGggcG9ydGlvbiBvZiBDbGllbnRDb25maWdcbiAqL1xuZXhwb3J0IGNsYXNzIEF1dGhDbGllbnRDb25maWdDb250cmlidXRvciBpbXBsZW1lbnRzIENsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIHtcbiAgLyoqXG4gICAqIEdpdmVuIHNvbWUgQmFja2VuZE91dHB1dCwgY29udHJpYnV0ZSB0aGUgQXV0aCBwb3J0aW9uIG9mIHRoZSBDbGllbnRDb25maWdcbiAgICovXG4gIGNvbnRyaWJ1dGUgPSAoe1xuICAgIFthdXRoT3V0cHV0S2V5XTogYXV0aE91dHB1dCxcbiAgfTogVW5pZmllZEJhY2tlbmRPdXRwdXQpOiBQYXJ0aWFsPENsaWVudENvbmZpZz4gfCBSZWNvcmQ8c3RyaW5nLCBuZXZlcj4gPT4ge1xuICAgIGlmIChhdXRoT3V0cHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICBjb25zdCBwYXJzZUFuZEFzc2lnbk9iamVjdCA9IDxUPihcbiAgICAgIG9iajogVCxcbiAgICAgIGtleToga2V5b2YgVCxcbiAgICAgIHZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgICApID0+IHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG9ialtrZXldID0gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGF1dGhDbGllbnRDb25maWc6IFBhcnRpYWw8Y2xpZW50Q29uZmlnVHlwZXNWMV8yLkFXU0FtcGxpZnlCYWNrZW5kT3V0cHV0cz4gPVxuICAgICAge307XG5cbiAgICBhdXRoQ2xpZW50Q29uZmlnLmF1dGggPSB7XG4gICAgICB1c2VyX3Bvb2xfaWQ6IGF1dGhPdXRwdXQucGF5bG9hZC51c2VyUG9vbElkLFxuICAgICAgYXdzX3JlZ2lvbjogYXV0aE91dHB1dC5wYXlsb2FkLmF1dGhSZWdpb24sXG4gICAgICB1c2VyX3Bvb2xfY2xpZW50X2lkOiBhdXRoT3V0cHV0LnBheWxvYWQud2ViQ2xpZW50SWQsXG4gICAgfTtcblxuICAgIGlmIChhdXRoT3V0cHV0LnBheWxvYWQuaWRlbnRpdHlQb29sSWQpIHtcbiAgICAgIGF1dGhDbGllbnRDb25maWcuYXV0aC5pZGVudGl0eV9wb29sX2lkID1cbiAgICAgICAgYXV0aE91dHB1dC5wYXlsb2FkLmlkZW50aXR5UG9vbElkO1xuICAgIH1cblxuICAgIHBhcnNlQW5kQXNzaWduT2JqZWN0KFxuICAgICAgYXV0aENsaWVudENvbmZpZy5hdXRoLFxuICAgICAgJ21mYV9tZXRob2RzJyxcbiAgICAgIGF1dGhPdXRwdXQucGF5bG9hZC5tZmFUeXBlc1xuICAgICk7XG5cbiAgICBwYXJzZUFuZEFzc2lnbk9iamVjdChcbiAgICAgIGF1dGhDbGllbnRDb25maWcuYXV0aCxcbiAgICAgICdzdGFuZGFyZF9yZXF1aXJlZF9hdHRyaWJ1dGVzJyxcbiAgICAgIGF1dGhPdXRwdXQucGF5bG9hZC5zaWdudXBBdHRyaWJ1dGVzXG4gICAgKTtcblxuICAgIHBhcnNlQW5kQXNzaWduT2JqZWN0KFxuICAgICAgYXV0aENsaWVudENvbmZpZy5hdXRoLFxuICAgICAgJ3VzZXJuYW1lX2F0dHJpYnV0ZXMnLFxuICAgICAgYXV0aE91dHB1dC5wYXlsb2FkLnVzZXJuYW1lQXR0cmlidXRlc1xuICAgICk7XG5cbiAgICBwYXJzZUFuZEFzc2lnbk9iamVjdChcbiAgICAgIGF1dGhDbGllbnRDb25maWcuYXV0aCxcbiAgICAgICd1c2VyX3ZlcmlmaWNhdGlvbl90eXBlcycsXG4gICAgICBhdXRoT3V0cHV0LnBheWxvYWQudmVyaWZpY2F0aW9uTWVjaGFuaXNtc1xuICAgICk7XG5cbiAgICBpZiAoYXV0aE91dHB1dC5wYXlsb2FkLm1mYUNvbmZpZ3VyYXRpb24pIHtcbiAgICAgIHN3aXRjaCAoYXV0aE91dHB1dC5wYXlsb2FkLm1mYUNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgY2FzZSAnT0ZGJzoge1xuICAgICAgICAgIGF1dGhDbGllbnRDb25maWcuYXV0aC5tZmFfY29uZmlndXJhdGlvbiA9ICdOT05FJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdPUFRJT05BTCc6IHtcbiAgICAgICAgICBhdXRoQ2xpZW50Q29uZmlnLmF1dGgubWZhX2NvbmZpZ3VyYXRpb24gPSAnT1BUSU9OQUwnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ09OJzoge1xuICAgICAgICAgIGF1dGhDbGllbnRDb25maWcuYXV0aC5tZmFfY29uZmlndXJhdGlvbiA9ICdSRVFVSVJFRCc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBhdXRoT3V0cHV0LnBheWxvYWQucGFzc3dvcmRQb2xpY3lNaW5MZW5ndGggfHxcbiAgICAgIGF1dGhPdXRwdXQucGF5bG9hZC5wYXNzd29yZFBvbGljeVJlcXVpcmVtZW50c1xuICAgICkge1xuICAgICAgYXV0aENsaWVudENvbmZpZy5hdXRoLnBhc3N3b3JkX3BvbGljeSA9IHtcbiAgICAgICAgbWluX2xlbmd0aDogOCwgLy8gVGhpcyBpcyB0aGUgZGVmYXVsdCB0aGF0IGlzIG1hdGNoaW5nIHdoYXQgY29uc3RydWN0IGRlZmluZXMuXG4gICAgICAgIC8vIFZhbHVlcyBiZWxvdyBhcmUgc2V0IHRvIGZhbHNlIGluc3RlYWQgb2YgYmVpbmcgdW5kZWZpbmVkIGFzIGxpYnJhcmllcyBleHBlY3QgZGVmaW5lZCB2YWx1ZXMuXG4gICAgICAgIC8vIFRoZXkgYXJlIG92ZXJyaWRkZW4gYmVsb3cgd2l0aCBjb25zdHJ1Y3Qgb3V0cHV0cyAoZGVmYXVsdCBvciBub3QpIGlmIGFwcGxpY2FibGUuXG4gICAgICAgIHJlcXVpcmVfbG93ZXJjYXNlOiBmYWxzZSxcbiAgICAgICAgcmVxdWlyZV9udW1iZXJzOiBmYWxzZSxcbiAgICAgICAgcmVxdWlyZV9zeW1ib2xzOiBmYWxzZSxcbiAgICAgICAgcmVxdWlyZV91cHBlcmNhc2U6IGZhbHNlLFxuICAgICAgfTtcbiAgICAgIGlmIChhdXRoT3V0cHV0LnBheWxvYWQucGFzc3dvcmRQb2xpY3lNaW5MZW5ndGgpIHtcbiAgICAgICAgYXV0aENsaWVudENvbmZpZy5hdXRoLnBhc3N3b3JkX3BvbGljeS5taW5fbGVuZ3RoID0gTnVtYmVyLnBhcnNlSW50KFxuICAgICAgICAgIGF1dGhPdXRwdXQucGF5bG9hZC5wYXNzd29yZFBvbGljeU1pbkxlbmd0aFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGF1dGhPdXRwdXQucGF5bG9hZC5wYXNzd29yZFBvbGljeVJlcXVpcmVtZW50cykge1xuICAgICAgICBjb25zdCByZXF1aXJlbWVudHMgPSBKU09OLnBhcnNlKFxuICAgICAgICAgIGF1dGhPdXRwdXQucGF5bG9hZC5wYXNzd29yZFBvbGljeVJlcXVpcmVtZW50c1xuICAgICAgICApIGFzIHN0cmluZ1tdO1xuICAgICAgICBmb3IgKGNvbnN0IHJlcXVpcmVtZW50IG9mIHJlcXVpcmVtZW50cykge1xuICAgICAgICAgIHN3aXRjaCAocmVxdWlyZW1lbnQpIHtcbiAgICAgICAgICAgIGNhc2UgJ1JFUVVJUkVTX05VTUJFUlMnOlxuICAgICAgICAgICAgICBhdXRoQ2xpZW50Q29uZmlnLmF1dGgucGFzc3dvcmRfcG9saWN5LnJlcXVpcmVfbnVtYmVycyA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnUkVRVUlSRVNfTE9XRVJDQVNFJzpcbiAgICAgICAgICAgICAgYXV0aENsaWVudENvbmZpZy5hdXRoLnBhc3N3b3JkX3BvbGljeS5yZXF1aXJlX2xvd2VyY2FzZSA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnUkVRVUlSRVNfVVBQRVJDQVNFJzpcbiAgICAgICAgICAgICAgYXV0aENsaWVudENvbmZpZy5hdXRoLnBhc3N3b3JkX3BvbGljeS5yZXF1aXJlX3VwcGVyY2FzZSA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnUkVRVUlSRVNfU1lNQk9MUyc6XG4gICAgICAgICAgICAgIGF1dGhDbGllbnRDb25maWcuYXV0aC5wYXNzd29yZF9wb2xpY3kucmVxdWlyZV9zeW1ib2xzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gT0F1dGggc2V0dGluZ3MgYXJlIHByZXNlbnQgaWYgYm90aCBvYXV0aFJlZGlyZWN0U2lnbkluIGFuZCBvYXV0aFJlZGlyZWN0U2lnbk91dCBhcmUuXG4gICAgaWYgKFxuICAgICAgYXV0aE91dHB1dC5wYXlsb2FkLm9hdXRoUmVkaXJlY3RTaWduSW4gJiZcbiAgICAgIGF1dGhPdXRwdXQucGF5bG9hZC5vYXV0aFJlZGlyZWN0U2lnbk91dFxuICAgICkge1xuICAgICAgbGV0IHNvY2lhbFByb3ZpZGVycyA9IGF1dGhPdXRwdXQucGF5bG9hZC5zb2NpYWxQcm92aWRlcnNcbiAgICAgICAgPyBKU09OLnBhcnNlKGF1dGhPdXRwdXQucGF5bG9hZC5zb2NpYWxQcm92aWRlcnMpXG4gICAgICAgIDogW107XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzb2NpYWxQcm92aWRlcnMpKSB7XG4gICAgICAgIHNvY2lhbFByb3ZpZGVycyA9IHNvY2lhbFByb3ZpZGVycy5maWx0ZXIodGhpcy5pc1ZhbGlkSWRlbnRpdHlQcm92aWRlcik7XG4gICAgICB9XG4gICAgICBhdXRoQ2xpZW50Q29uZmlnLmF1dGgub2F1dGggPSB7XG4gICAgICAgIGlkZW50aXR5X3Byb3ZpZGVyczogc29jaWFsUHJvdmlkZXJzLFxuICAgICAgICByZWRpcmVjdF9zaWduX2luX3VyaTogYXV0aE91dHB1dC5wYXlsb2FkLm9hdXRoUmVkaXJlY3RTaWduSW4uc3BsaXQoJywnKSxcbiAgICAgICAgcmVkaXJlY3Rfc2lnbl9vdXRfdXJpOlxuICAgICAgICAgIGF1dGhPdXRwdXQucGF5bG9hZC5vYXV0aFJlZGlyZWN0U2lnbk91dC5zcGxpdCgnLCcpLFxuICAgICAgICByZXNwb25zZV90eXBlOiBhdXRoT3V0cHV0LnBheWxvYWQub2F1dGhSZXNwb25zZVR5cGUgYXMgJ2NvZGUnIHwgJ3Rva2VuJyxcbiAgICAgICAgc2NvcGVzOiBhdXRoT3V0cHV0LnBheWxvYWQub2F1dGhTY29wZVxuICAgICAgICAgID8gSlNPTi5wYXJzZShhdXRoT3V0cHV0LnBheWxvYWQub2F1dGhTY29wZSlcbiAgICAgICAgICA6IFtdLFxuICAgICAgICBkb21haW46IGF1dGhPdXRwdXQucGF5bG9hZC5vYXV0aENvZ25pdG9Eb21haW4gPz8gJycsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChhdXRoT3V0cHV0LnBheWxvYWQuYWxsb3dVbmF1dGhlbnRpY2F0ZWRJZGVudGl0aWVzKSB7XG4gICAgICBhdXRoQ2xpZW50Q29uZmlnLmF1dGgudW5hdXRoZW50aWNhdGVkX2lkZW50aXRpZXNfZW5hYmxlZCA9XG4gICAgICAgIGF1dGhPdXRwdXQucGF5bG9hZC5hbGxvd1VuYXV0aGVudGljYXRlZElkZW50aXRpZXMgPT09ICd0cnVlJztcbiAgICB9XG5cbiAgICByZXR1cm4gYXV0aENsaWVudENvbmZpZztcbiAgfTtcblxuICAvLyBEZWZpbmUgYSB0eXBlIGd1YXJkIGZ1bmN0aW9uIHRvIGNoZWNrIGlmIGEgdmFsdWUgaXMgYSB2YWxpZCBJZGVudGl0eVByb3ZpZGVyXG4gIGlzVmFsaWRJZGVudGl0eVByb3ZpZGVyID0gKGlkZW50aXR5UHJvdmlkZXI6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICAgIHJldHVybiBbXG4gICAgICAnR09PR0xFJyxcbiAgICAgICdGQUNFQk9PSycsXG4gICAgICAnTE9HSU5fV0lUSF9BTUFaT04nLFxuICAgICAgJ1NJR05fSU5fV0lUSF9BUFBMRScsXG4gICAgXS5pbmNsdWRlcyhpZGVudGl0eVByb3ZpZGVyKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBUcmFuc2xhdG9yIGZvciB0aGUgRGF0YSBwb3J0aW9uIG9mIENsaWVudENvbmZpZ1xuICovXG5leHBvcnQgY2xhc3MgRGF0YUNsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIGltcGxlbWVudHMgQ2xpZW50Q29uZmlnQ29udHJpYnV0b3Ige1xuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICogQHBhcmFtIG1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUFkYXB0ZXIgdGhlIGFkYXB0ZXIgdG8gcHJvdmlkZSB0aGUgbW9kZWwgaW50cm9zcGVjdGlvbiBzY2hlbWEgZnJvbSBzMyB1cmlcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgbW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQWRhcHRlcjogTW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQWRhcHRlclxuICApIHt9XG5cbiAgLyoqXG4gICAqIEdpdmVuIHNvbWUgQmFja2VuZE91dHB1dCwgY29udHJpYnV0ZSB0aGUgR3JhcGhxbCBBUEkgcG9ydGlvbiBvZiB0aGUgY2xpZW50IGNvbmZpZ1xuICAgKi9cbiAgY29udHJpYnV0ZSA9IGFzeW5jICh7XG4gICAgW2dyYXBocWxPdXRwdXRLZXldOiBncmFwaHFsT3V0cHV0LFxuICB9OiBVbmlmaWVkQmFja2VuZE91dHB1dCk6IFByb21pc2U8XG4gICAgUGFydGlhbDxDbGllbnRDb25maWc+IHwgUmVjb3JkPHN0cmluZywgbmV2ZXI+XG4gID4gPT4ge1xuICAgIGlmIChncmFwaHFsT3V0cHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgY29uc3QgY29uZmlnOiBQYXJ0aWFsPGNsaWVudENvbmZpZ1R5cGVzVjFfMS5BV1NBbXBsaWZ5QmFja2VuZE91dHB1dHM+ID0ge307XG5cbiAgICBjb25maWcuZGF0YSA9IHtcbiAgICAgIHVybDogZ3JhcGhxbE91dHB1dC5wYXlsb2FkLmF3c0FwcHN5bmNBcGlFbmRwb2ludCxcbiAgICAgIGF3c19yZWdpb246IGdyYXBocWxPdXRwdXQucGF5bG9hZC5hd3NBcHBzeW5jUmVnaW9uLFxuICAgICAgYXBpX2tleTogZ3JhcGhxbE91dHB1dC5wYXlsb2FkLmF3c0FwcHN5bmNBcGlLZXksXG4gICAgICBkZWZhdWx0X2F1dGhvcml6YXRpb25fdHlwZTpcbiAgICAgICAgZ3JhcGhxbE91dHB1dC5wYXlsb2FkLmF3c0FwcHN5bmNBdXRoZW50aWNhdGlvblR5cGUsXG4gICAgICBhdXRob3JpemF0aW9uX3R5cGVzOlxuICAgICAgICBncmFwaHFsT3V0cHV0LnBheWxvYWQuYXdzQXBwc3luY0FkZGl0aW9uYWxBdXRoZW50aWNhdGlvblR5cGVzPy5zcGxpdChcbiAgICAgICAgICAnLCdcbiAgICAgICAgKSBhcyBBd3NBcHBzeW5jQXV0aG9yaXphdGlvblR5cGVbXSxcbiAgICB9O1xuXG4gICAgY29uc3QgbW9kZWxJbnRyb3NwZWN0aW9uID1cbiAgICAgIGF3YWl0IHRoaXMubW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQWRhcHRlci5nZXRNb2RlbEludHJvc3BlY3Rpb25TY2hlbWFGcm9tUzNVcmkoXG4gICAgICAgIGdyYXBocWxPdXRwdXQucGF5bG9hZC5hbXBsaWZ5QXBpTW9kZWxTY2hlbWFTM1VyaVxuICAgICAgKTtcblxuICAgIGlmIChtb2RlbEludHJvc3BlY3Rpb24pIHtcbiAgICAgIGNvbmZpZy5kYXRhLm1vZGVsX2ludHJvc3BlY3Rpb24gPSBtb2RlbEludHJvc3BlY3Rpb24gYXMge1xuICAgICAgICBbazogc3RyaW5nXTogdW5rbm93bjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUcmFuc2xhdG9yIGZvciB0aGUgU3RvcmFnZSBwb3J0aW9uIG9mIENsaWVudENvbmZpZyBpbiBWMS4yXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBjbGFzcyBTdG9yYWdlQ2xpZW50Q29uZmlnQ29udHJpYnV0b3IgaW1wbGVtZW50cyBDbGllbnRDb25maWdDb250cmlidXRvciB7XG4gIC8qKlxuICAgKiBHaXZlbiBzb21lIEJhY2tlbmRPdXRwdXQsIGNvbnRyaWJ1dGUgdGhlIFN0b3JhZ2UgcG9ydGlvbiBvZiB0aGUgY2xpZW50IGNvbmZpZ1xuICAgKi9cbiAgY29udHJpYnV0ZSA9ICh7XG4gICAgW3N0b3JhZ2VPdXRwdXRLZXldOiBzdG9yYWdlT3V0cHV0LFxuICB9OiBVbmlmaWVkQmFja2VuZE91dHB1dCk6IFBhcnRpYWw8Q2xpZW50Q29uZmlnPiB8IFJlY29yZDxzdHJpbmcsIG5ldmVyPiA9PiB7XG4gICAgaWYgKHN0b3JhZ2VPdXRwdXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBjb25zdCBjb25maWc6IFBhcnRpYWw8Y2xpZW50Q29uZmlnVHlwZXNWMV8yLkFXU0FtcGxpZnlCYWNrZW5kT3V0cHV0cz4gPSB7fTtcbiAgICBjb25zdCBidWNrZXRzU3RyaW5nQXJyYXkgPSBKU09OLnBhcnNlKFxuICAgICAgc3RvcmFnZU91dHB1dC5wYXlsb2FkLmJ1Y2tldHMgPz8gJ1tdJ1xuICAgICk7XG4gICAgY29uZmlnLnN0b3JhZ2UgPSB7XG4gICAgICBhd3NfcmVnaW9uOiBzdG9yYWdlT3V0cHV0LnBheWxvYWQuc3RvcmFnZVJlZ2lvbixcbiAgICAgIGJ1Y2tldF9uYW1lOiBzdG9yYWdlT3V0cHV0LnBheWxvYWQuYnVja2V0TmFtZSxcbiAgICAgIGJ1Y2tldHM6IGJ1Y2tldHNTdHJpbmdBcnJheVxuICAgICAgICAubWFwKChiOiBzdHJpbmcpID0+IEpTT04ucGFyc2UoYikpXG4gICAgICAgIC5tYXAoXG4gICAgICAgICAgKHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBidWNrZXROYW1lLFxuICAgICAgICAgICAgc3RvcmFnZVJlZ2lvbixcbiAgICAgICAgICAgIHBhdGhzLFxuICAgICAgICAgIH06IHtcbiAgICAgICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgICAgIGJ1Y2tldE5hbWU6IHN0cmluZztcbiAgICAgICAgICAgIHN0b3JhZ2VSZWdpb246IHN0cmluZztcbiAgICAgICAgICAgIHBhdGhzOiBSZWNvcmQ8c3RyaW5nLCBBbXBsaWZ5U3RvcmFnZUFjY2Vzc1J1bGU+O1xuICAgICAgICAgIH0pID0+ICh7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgYnVja2V0X25hbWU6IGJ1Y2tldE5hbWUsXG4gICAgICAgICAgICBhd3NfcmVnaW9uOiBzdG9yYWdlUmVnaW9uLFxuICAgICAgICAgICAgcGF0aHMsXG4gICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUcmFuc2xhdG9yIGZvciB0aGUgU3RvcmFnZSBwb3J0aW9uIG9mIENsaWVudENvbmZpZyBpbiBWMS4xXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBjbGFzcyBTdG9yYWdlQ2xpZW50Q29uZmlnQ29udHJpYnV0b3JWMV8xXG4gIGltcGxlbWVudHMgQ2xpZW50Q29uZmlnQ29udHJpYnV0b3JcbntcbiAgLyoqXG4gICAqIEdpdmVuIHNvbWUgQmFja2VuZE91dHB1dCwgY29udHJpYnV0ZSB0aGUgU3RvcmFnZSBwb3J0aW9uIG9mIHRoZSBjbGllbnQgY29uZmlnXG4gICAqL1xuICBjb250cmlidXRlID0gKHtcbiAgICBbc3RvcmFnZU91dHB1dEtleV06IHN0b3JhZ2VPdXRwdXQsXG4gIH06IFVuaWZpZWRCYWNrZW5kT3V0cHV0KTogUGFydGlhbDxDbGllbnRDb25maWc+IHwgUmVjb3JkPHN0cmluZywgbmV2ZXI+ID0+IHtcbiAgICBpZiAoc3RvcmFnZU91dHB1dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGNvbnN0IGNvbmZpZzogUGFydGlhbDxjbGllbnRDb25maWdUeXBlc1YxXzEuQVdTQW1wbGlmeUJhY2tlbmRPdXRwdXRzPiA9IHt9O1xuICAgIGNvbnN0IGJ1Y2tldHNTdHJpbmdBcnJheSA9IEpTT04ucGFyc2UoXG4gICAgICBzdG9yYWdlT3V0cHV0LnBheWxvYWQuYnVja2V0cyA/PyAnW10nXG4gICAgKTtcbiAgICBjb25maWcuc3RvcmFnZSA9IHtcbiAgICAgIGF3c19yZWdpb246IHN0b3JhZ2VPdXRwdXQucGF5bG9hZC5zdG9yYWdlUmVnaW9uLFxuICAgICAgYnVja2V0X25hbWU6IHN0b3JhZ2VPdXRwdXQucGF5bG9hZC5idWNrZXROYW1lLFxuICAgICAgYnVja2V0czogYnVja2V0c1N0cmluZ0FycmF5XG4gICAgICAgIC5tYXAoKGI6IHN0cmluZykgPT4gSlNPTi5wYXJzZShiKSlcbiAgICAgICAgLm1hcChcbiAgICAgICAgICAoe1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGJ1Y2tldE5hbWUsXG4gICAgICAgICAgICBzdG9yYWdlUmVnaW9uLFxuICAgICAgICAgIH06IHtcbiAgICAgICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgICAgIGJ1Y2tldE5hbWU6IHN0cmluZztcbiAgICAgICAgICAgIHN0b3JhZ2VSZWdpb246IHN0cmluZztcbiAgICAgICAgICB9KSA9PiAoe1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGJ1Y2tldF9uYW1lOiBidWNrZXROYW1lLFxuICAgICAgICAgICAgYXdzX3JlZ2lvbjogc3RvcmFnZVJlZ2lvbixcbiAgICAgICAgICB9KVxuICAgICAgICApLFxuICAgIH07XG5cbiAgICByZXR1cm4gY29uZmlnO1xuICB9O1xufVxuXG4vKipcbiAqIFRyYW5zbGF0b3IgZm9yIHRoZSBTdG9yYWdlIHBvcnRpb24gb2YgQ2xpZW50Q29uZmlnIGluIFYxXG4gKi9cbmV4cG9ydCBjbGFzcyBTdG9yYWdlQ2xpZW50Q29uZmlnQ29udHJpYnV0b3JWMVxuICBpbXBsZW1lbnRzIENsaWVudENvbmZpZ0NvbnRyaWJ1dG9yXG57XG4gIC8qKlxuICAgKiBHaXZlbiBzb21lIEJhY2tlbmRPdXRwdXQsIGNvbnRyaWJ1dGUgdGhlIFN0b3JhZ2UgcG9ydGlvbiBvZiB0aGUgY2xpZW50IGNvbmZpZ1xuICAgKi9cbiAgY29udHJpYnV0ZSA9ICh7XG4gICAgW3N0b3JhZ2VPdXRwdXRLZXldOiBzdG9yYWdlT3V0cHV0LFxuICB9OiBVbmlmaWVkQmFja2VuZE91dHB1dCk6IFBhcnRpYWw8Q2xpZW50Q29uZmlnPiB8IFJlY29yZDxzdHJpbmcsIG5ldmVyPiA9PiB7XG4gICAgaWYgKHN0b3JhZ2VPdXRwdXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBjb25zdCBjb25maWc6IFBhcnRpYWw8Y2xpZW50Q29uZmlnVHlwZXNWMS5BV1NBbXBsaWZ5QmFja2VuZE91dHB1dHM+ID0ge307XG5cbiAgICBjb25maWcuc3RvcmFnZSA9IHtcbiAgICAgIGF3c19yZWdpb246IHN0b3JhZ2VPdXRwdXQucGF5bG9hZC5zdG9yYWdlUmVnaW9uLFxuICAgICAgYnVja2V0X25hbWU6IHN0b3JhZ2VPdXRwdXQucGF5bG9hZC5idWNrZXROYW1lLFxuICAgIH07XG5cbiAgICByZXR1cm4gY29uZmlnO1xuICB9O1xufVxuXG4vKipcbiAqIFRyYW5zbGF0b3IgZm9yIHRoZSBDdXN0b20gcG9ydGlvbiBvZiBDbGllbnRDb25maWdcbiAqL1xuZXhwb3J0IGNsYXNzIEN1c3RvbUNsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIGltcGxlbWVudHMgQ2xpZW50Q29uZmlnQ29udHJpYnV0b3Ige1xuICAvKipcbiAgICogR2l2ZW4gc29tZSBCYWNrZW5kT3V0cHV0LCBjb250cmlidXRlIHRoZSBDdXN0b20gcG9ydGlvbiBvZiB0aGUgQ2xpZW50Q29uZmlnXG4gICAqL1xuICBjb250cmlidXRlID0gKHtcbiAgICBbY3VzdG9tT3V0cHV0S2V5XTogY3VzdG9tT3V0cHV0LFxuICB9OiBVbmlmaWVkQmFja2VuZE91dHB1dCk6IFBhcnRpYWw8Q2xpZW50Q29uZmlnPiA9PiB7XG4gICAgaWYgKGN1c3RvbU91dHB1dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoY3VzdG9tT3V0cHV0LnBheWxvYWQuY3VzdG9tT3V0cHV0cyk7XG4gIH07XG59XG4iXX0=