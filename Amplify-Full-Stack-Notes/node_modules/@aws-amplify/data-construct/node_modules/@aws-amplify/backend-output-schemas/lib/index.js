"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unifiedBackendOutputSchema = exports.functionOutputKey = exports.storageOutputKey = exports.graphqlOutputKey = exports.authOutputKey = exports.customOutputKey = exports.platformOutputKey = void 0;
const zod_1 = require("zod");
const index_js_1 = require("./auth/index.js");
const index_js_2 = require("./graphql/index.js");
const index_js_3 = require("./storage/index.js");
const index_js_4 = require("./stack/index.js");
const custom_1 = require("./custom");
const index_js_5 = require("./function/index.js");
/**
 * The auth, graphql and storage exports here are duplicated from the submodule exports in the package.json file
 * This is because these types need to be consumed in CDK Constructs that may be JSII classes. JSII only supports
 * CommonJS modules which can't interpret submodule exports
 */
/**
 * ---------- Platform exports ----------
 */
exports.platformOutputKey = 'AWS::Amplify::Platform';
__exportStar(require("./platform/index.js"), exports);
/**
 * ---------- Custom exports ----------
 */
exports.customOutputKey = 'AWS::Amplify::Custom';
__exportStar(require("./custom/index.js"), exports);
/**
 * ---------- Auth exports ----------
 */
/**
 * re-export the auth output schema
 */
__exportStar(require("./auth/index.js"), exports);
/**
 * Expected key that auth output is stored under
 */
exports.authOutputKey = 'AWS::Amplify::Auth';
/**
 * ---------- GraphQL exports ----------
 */
/**
 * re-export the graphql output schema
 */
__exportStar(require("./graphql/index.js"), exports);
/**
 * Expected key that graphql output is stored under
 */
exports.graphqlOutputKey = 'AWS::Amplify::GraphQL';
/**
 * ---------- Storage exports ----------
 */
/**
 * re-export the storage output schema
 */
__exportStar(require("./storage/index.js"), exports);
/**
 * Expected key that storage output is stored under
 */
exports.storageOutputKey = 'AWS::Amplify::Storage';
/**
 * ---------- Function exports ----------
 */
/**
 * re-export the function output schema
 */
__exportStar(require("./function/index.js"), exports);
/**
 * Expected key that function output is stored under
 */
exports.functionOutputKey = 'AWS::Amplify::Function';
/**
 * ---------- Unified exports ----------
 */
/**
 * Defines the unified expected shape of Amplify backend output.
 * As new constructs are added that need to contribute backend output, entries should be added here so that client config generation is aware of these outputs
 */
exports.unifiedBackendOutputSchema = zod_1.z.object({
    [exports.platformOutputKey]: index_js_4.versionedStackOutputSchema.optional(),
    [exports.authOutputKey]: index_js_1.versionedAuthOutputSchema.optional(),
    [exports.graphqlOutputKey]: index_js_2.versionedGraphqlOutputSchema.optional(),
    [exports.storageOutputKey]: index_js_3.versionedStorageOutputSchema.optional(),
    [exports.customOutputKey]: custom_1.versionedCustomOutputSchema.optional(),
    [exports.functionOutputKey]: index_js_5.versionedFunctionOutputSchema.optional(),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw2QkFBd0I7QUFDeEIsOENBQTREO0FBQzVELGlEQUFrRTtBQUNsRSxpREFBa0U7QUFDbEUsK0NBQThEO0FBQzlELHFDQUF1RDtBQUN2RCxrREFBb0U7QUFFcEU7Ozs7R0FJRztBQUVIOztHQUVHO0FBRVUsUUFBQSxpQkFBaUIsR0FBRyx3QkFBd0IsQ0FBQztBQUUxRCxzREFBb0M7QUFFcEM7O0dBRUc7QUFFVSxRQUFBLGVBQWUsR0FBRyxzQkFBc0IsQ0FBQztBQUV0RCxvREFBa0M7QUFFbEM7O0dBRUc7QUFFSDs7R0FFRztBQUNILGtEQUFnQztBQUVoQzs7R0FFRztBQUNVLFFBQUEsYUFBYSxHQUFHLG9CQUFvQixDQUFDO0FBRWxEOztHQUVHO0FBRUg7O0dBRUc7QUFDSCxxREFBbUM7QUFFbkM7O0dBRUc7QUFDVSxRQUFBLGdCQUFnQixHQUFHLHVCQUF1QixDQUFDO0FBRXhEOztHQUVHO0FBRUg7O0dBRUc7QUFDSCxxREFBbUM7QUFFbkM7O0dBRUc7QUFDVSxRQUFBLGdCQUFnQixHQUFHLHVCQUF1QixDQUFDO0FBRXhEOztHQUVHO0FBRUg7O0dBRUc7QUFDSCxzREFBb0M7QUFFcEM7O0dBRUc7QUFDVSxRQUFBLGlCQUFpQixHQUFHLHdCQUF3QixDQUFDO0FBRTFEOztHQUVHO0FBRUg7OztHQUdHO0FBQ1UsUUFBQSwwQkFBMEIsR0FBRyxPQUFDLENBQUMsTUFBTSxDQUFDO0lBQ2pELENBQUMseUJBQWlCLENBQUMsRUFBRSxxQ0FBMEIsQ0FBQyxRQUFRLEVBQUU7SUFDMUQsQ0FBQyxxQkFBYSxDQUFDLEVBQUUsb0NBQXlCLENBQUMsUUFBUSxFQUFFO0lBQ3JELENBQUMsd0JBQWdCLENBQUMsRUFBRSx1Q0FBNEIsQ0FBQyxRQUFRLEVBQUU7SUFDM0QsQ0FBQyx3QkFBZ0IsQ0FBQyxFQUFFLHVDQUE0QixDQUFDLFFBQVEsRUFBRTtJQUMzRCxDQUFDLHVCQUFlLENBQUMsRUFBRSxvQ0FBMkIsQ0FBQyxRQUFRLEVBQUU7SUFDekQsQ0FBQyx5QkFBaUIsQ0FBQyxFQUFFLHdDQUE2QixDQUFDLFFBQVEsRUFBRTtDQUM5RCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbmltcG9ydCB7IHZlcnNpb25lZEF1dGhPdXRwdXRTY2hlbWEgfSBmcm9tICcuL2F1dGgvaW5kZXguanMnO1xuaW1wb3J0IHsgdmVyc2lvbmVkR3JhcGhxbE91dHB1dFNjaGVtYSB9IGZyb20gJy4vZ3JhcGhxbC9pbmRleC5qcyc7XG5pbXBvcnQgeyB2ZXJzaW9uZWRTdG9yYWdlT3V0cHV0U2NoZW1hIH0gZnJvbSAnLi9zdG9yYWdlL2luZGV4LmpzJztcbmltcG9ydCB7IHZlcnNpb25lZFN0YWNrT3V0cHV0U2NoZW1hIH0gZnJvbSAnLi9zdGFjay9pbmRleC5qcyc7XG5pbXBvcnQgeyB2ZXJzaW9uZWRDdXN0b21PdXRwdXRTY2hlbWEgfSBmcm9tICcuL2N1c3RvbSc7XG5pbXBvcnQgeyB2ZXJzaW9uZWRGdW5jdGlvbk91dHB1dFNjaGVtYSB9IGZyb20gJy4vZnVuY3Rpb24vaW5kZXguanMnO1xuXG4vKipcbiAqIFRoZSBhdXRoLCBncmFwaHFsIGFuZCBzdG9yYWdlIGV4cG9ydHMgaGVyZSBhcmUgZHVwbGljYXRlZCBmcm9tIHRoZSBzdWJtb2R1bGUgZXhwb3J0cyBpbiB0aGUgcGFja2FnZS5qc29uIGZpbGVcbiAqIFRoaXMgaXMgYmVjYXVzZSB0aGVzZSB0eXBlcyBuZWVkIHRvIGJlIGNvbnN1bWVkIGluIENESyBDb25zdHJ1Y3RzIHRoYXQgbWF5IGJlIEpTSUkgY2xhc3Nlcy4gSlNJSSBvbmx5IHN1cHBvcnRzXG4gKiBDb21tb25KUyBtb2R1bGVzIHdoaWNoIGNhbid0IGludGVycHJldCBzdWJtb2R1bGUgZXhwb3J0c1xuICovXG5cbi8qKlxuICogLS0tLS0tLS0tLSBQbGF0Zm9ybSBleHBvcnRzIC0tLS0tLS0tLS1cbiAqL1xuXG5leHBvcnQgY29uc3QgcGxhdGZvcm1PdXRwdXRLZXkgPSAnQVdTOjpBbXBsaWZ5OjpQbGF0Zm9ybSc7XG5cbmV4cG9ydCAqIGZyb20gJy4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0gQ3VzdG9tIGV4cG9ydHMgLS0tLS0tLS0tLVxuICovXG5cbmV4cG9ydCBjb25zdCBjdXN0b21PdXRwdXRLZXkgPSAnQVdTOjpBbXBsaWZ5OjpDdXN0b20nO1xuXG5leHBvcnQgKiBmcm9tICcuL2N1c3RvbS9pbmRleC5qcyc7XG5cbi8qKlxuICogLS0tLS0tLS0tLSBBdXRoIGV4cG9ydHMgLS0tLS0tLS0tLVxuICovXG5cbi8qKlxuICogcmUtZXhwb3J0IHRoZSBhdXRoIG91dHB1dCBzY2hlbWFcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9hdXRoL2luZGV4LmpzJztcblxuLyoqXG4gKiBFeHBlY3RlZCBrZXkgdGhhdCBhdXRoIG91dHB1dCBpcyBzdG9yZWQgdW5kZXJcbiAqL1xuZXhwb3J0IGNvbnN0IGF1dGhPdXRwdXRLZXkgPSAnQVdTOjpBbXBsaWZ5OjpBdXRoJztcblxuLyoqXG4gKiAtLS0tLS0tLS0tIEdyYXBoUUwgZXhwb3J0cyAtLS0tLS0tLS0tXG4gKi9cblxuLyoqXG4gKiByZS1leHBvcnQgdGhlIGdyYXBocWwgb3V0cHV0IHNjaGVtYVxuICovXG5leHBvcnQgKiBmcm9tICcuL2dyYXBocWwvaW5kZXguanMnO1xuXG4vKipcbiAqIEV4cGVjdGVkIGtleSB0aGF0IGdyYXBocWwgb3V0cHV0IGlzIHN0b3JlZCB1bmRlclxuICovXG5leHBvcnQgY29uc3QgZ3JhcGhxbE91dHB1dEtleSA9ICdBV1M6OkFtcGxpZnk6OkdyYXBoUUwnO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0gU3RvcmFnZSBleHBvcnRzIC0tLS0tLS0tLS1cbiAqL1xuXG4vKipcbiAqIHJlLWV4cG9ydCB0aGUgc3RvcmFnZSBvdXRwdXQgc2NoZW1hXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vc3RvcmFnZS9pbmRleC5qcyc7XG5cbi8qKlxuICogRXhwZWN0ZWQga2V5IHRoYXQgc3RvcmFnZSBvdXRwdXQgaXMgc3RvcmVkIHVuZGVyXG4gKi9cbmV4cG9ydCBjb25zdCBzdG9yYWdlT3V0cHV0S2V5ID0gJ0FXUzo6QW1wbGlmeTo6U3RvcmFnZSc7XG5cbi8qKlxuICogLS0tLS0tLS0tLSBGdW5jdGlvbiBleHBvcnRzIC0tLS0tLS0tLS1cbiAqL1xuXG4vKipcbiAqIHJlLWV4cG9ydCB0aGUgZnVuY3Rpb24gb3V0cHV0IHNjaGVtYVxuICovXG5leHBvcnQgKiBmcm9tICcuL2Z1bmN0aW9uL2luZGV4LmpzJztcblxuLyoqXG4gKiBFeHBlY3RlZCBrZXkgdGhhdCBmdW5jdGlvbiBvdXRwdXQgaXMgc3RvcmVkIHVuZGVyXG4gKi9cbmV4cG9ydCBjb25zdCBmdW5jdGlvbk91dHB1dEtleSA9ICdBV1M6OkFtcGxpZnk6OkZ1bmN0aW9uJztcblxuLyoqXG4gKiAtLS0tLS0tLS0tIFVuaWZpZWQgZXhwb3J0cyAtLS0tLS0tLS0tXG4gKi9cblxuLyoqXG4gKiBEZWZpbmVzIHRoZSB1bmlmaWVkIGV4cGVjdGVkIHNoYXBlIG9mIEFtcGxpZnkgYmFja2VuZCBvdXRwdXQuXG4gKiBBcyBuZXcgY29uc3RydWN0cyBhcmUgYWRkZWQgdGhhdCBuZWVkIHRvIGNvbnRyaWJ1dGUgYmFja2VuZCBvdXRwdXQsIGVudHJpZXMgc2hvdWxkIGJlIGFkZGVkIGhlcmUgc28gdGhhdCBjbGllbnQgY29uZmlnIGdlbmVyYXRpb24gaXMgYXdhcmUgb2YgdGhlc2Ugb3V0cHV0c1xuICovXG5leHBvcnQgY29uc3QgdW5pZmllZEJhY2tlbmRPdXRwdXRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIFtwbGF0Zm9ybU91dHB1dEtleV06IHZlcnNpb25lZFN0YWNrT3V0cHV0U2NoZW1hLm9wdGlvbmFsKCksXG4gIFthdXRoT3V0cHV0S2V5XTogdmVyc2lvbmVkQXV0aE91dHB1dFNjaGVtYS5vcHRpb25hbCgpLFxuICBbZ3JhcGhxbE91dHB1dEtleV06IHZlcnNpb25lZEdyYXBocWxPdXRwdXRTY2hlbWEub3B0aW9uYWwoKSxcbiAgW3N0b3JhZ2VPdXRwdXRLZXldOiB2ZXJzaW9uZWRTdG9yYWdlT3V0cHV0U2NoZW1hLm9wdGlvbmFsKCksXG4gIFtjdXN0b21PdXRwdXRLZXldOiB2ZXJzaW9uZWRDdXN0b21PdXRwdXRTY2hlbWEub3B0aW9uYWwoKSxcbiAgW2Z1bmN0aW9uT3V0cHV0S2V5XTogdmVyc2lvbmVkRnVuY3Rpb25PdXRwdXRTY2hlbWEub3B0aW9uYWwoKSxcbn0pO1xuLyoqXG4gKiBUaGlzIHR5cGUgaXMgYSBzdWJzZXQgb2YgdGhlIEJhY2tlbmRPdXRwdXQgdHlwZSB0aGF0IGlzIGV4cG9zZWQgYnkgdGhlIHBsYXRmb3JtLlxuICogSXQgcmVwcmVzZW50cyBCYWNrZW5kT3V0cHV0IHRoYXQgaGFzIGJlZW4gdmFsaWRhdGVkIGFnYWluc3QgdGhlIHNjaGVtYSBvZiBrbm93biBvdXRwdXQgdmFsdWVzXG4gKi9cbmV4cG9ydCB0eXBlIFVuaWZpZWRCYWNrZW5kT3V0cHV0ID0gei5pbmZlcjx0eXBlb2YgdW5pZmllZEJhY2tlbmRPdXRwdXRTY2hlbWE+O1xuIl19