import { z } from 'zod';
/**
 * The types here are meant to be used internally when reading / writing backend output to stack metadata.
 *
 * They represent broader metadata types than the category-specific metadata objects that allows the platform to interact with metadata in a category-agnostic way
 * They should not be exposed in public APIs (although they currently are under the "platform" submodule export so they can be consumed by both the backend and client-config packages
 */
/**
 * Data schema for storing a backend output entry using stack metadata
 */
export declare const backendOutputEntryStackMetadataSchema: z.ZodObject<{
    version: z.ZodString;
    stackOutputs: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    version: string;
    stackOutputs: string[];
}, {
    version: string;
    stackOutputs: string[];
}>;
/**
 * Inferred type from backendOutputEntryStackMetadataSchema
 */
export type BackendOutputEntryStackMetadata = z.infer<typeof backendOutputEntryStackMetadataSchema>;
/**
 * Data schema for storing backend output using stack metadata
 */
export declare const backendOutputStackMetadataSchema: z.ZodRecord<z.ZodString, z.ZodObject<{
    version: z.ZodString;
    stackOutputs: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    version: string;
    stackOutputs: string[];
}, {
    version: string;
    stackOutputs: string[];
}>>;
/**
 * Inferred type from backendOutputStackMetadataSchema
 */
export type BackendOutputStackMetadata = z.infer<typeof backendOutputStackMetadataSchema>;
//# sourceMappingURL=stack_metadata_schemas.d.ts.map