"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSearchableDomainRole = exports.createSearchableDomain = void 0;
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_elasticsearch_1 = require("aws-cdk-lib/aws-elasticsearch");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const graphql_transformer_common_1 = require("graphql-transformer-common");
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const createSearchableDomain = (stack, parameterMap, apiId, nodeToNodeEncryption) => {
    var _a, _b, _c;
    const { OpenSearchEBSVolumeGB, OpenSearchInstanceType, OpenSearchInstanceCount } = graphql_transformer_common_1.ResourceConstants.PARAMETERS;
    const { OpenSearchDomainLogicalID } = graphql_transformer_common_1.ResourceConstants.RESOURCES;
    const { HasEnvironmentParameter } = graphql_transformer_common_1.ResourceConstants.CONDITIONS;
    const domain = new aws_elasticsearch_1.Domain(stack, OpenSearchDomainLogicalID, {
        version: { version: '7.10' },
        enforceHttps: true,
        ebs: {
            enabled: true,
            volumeType: aws_ec2_1.EbsDeviceVolumeType.GP2,
            volumeSize: (_a = parameterMap.get(OpenSearchEBSVolumeGB)) === null || _a === void 0 ? void 0 : _a.valueAsNumber,
        },
        nodeToNodeEncryption,
        zoneAwareness: {
            enabled: false,
        },
        domainName: aws_cdk_lib_1.Fn.conditionIf(HasEnvironmentParameter, aws_cdk_lib_1.Fn.ref('AWS::NoValue'), `d${apiId}`).toString(),
        removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
    });
    const cfnDomain = domain.node.defaultChild;
    (0, graphql_transformer_core_1.setResourceName)(domain, { name: OpenSearchDomainLogicalID, setOnDefaultChild: true });
    cfnDomain.overrideLogicalId(OpenSearchDomainLogicalID);
    cfnDomain.elasticsearchClusterConfig = {
        instanceCount: (_b = parameterMap.get(OpenSearchInstanceCount)) === null || _b === void 0 ? void 0 : _b.valueAsNumber,
        instanceType: (_c = parameterMap.get(OpenSearchInstanceType)) === null || _c === void 0 ? void 0 : _c.valueAsString,
    };
    return domain;
};
exports.createSearchableDomain = createSearchableDomain;
const createSearchableDomainRole = (context, stack, parameterMap) => {
    var _a;
    const { OpenSearchAccessIAMRoleLogicalID } = graphql_transformer_common_1.ResourceConstants.RESOURCES;
    const { OpenSearchAccessIAMRoleName } = graphql_transformer_common_1.ResourceConstants.PARAMETERS;
    const roleName = (_a = parameterMap.get(OpenSearchAccessIAMRoleName)) === null || _a === void 0 ? void 0 : _a.valueAsString;
    if (!roleName) {
        throw new Error(`Could find role name parameter for ${OpenSearchAccessIAMRoleName}`);
    }
    const role = new aws_iam_1.Role(stack, OpenSearchAccessIAMRoleLogicalID, {
        assumedBy: new aws_iam_1.ServicePrincipal('appsync.amazonaws.com'),
        roleName: context.resourceHelper.generateIAMRoleName(roleName),
    });
    (0, graphql_transformer_core_1.setResourceName)(role, { name: OpenSearchAccessIAMRoleLogicalID, setOnDefaultChild: true });
    return role;
};
exports.createSearchableDomainRole = createSearchableDomainRole;
//# sourceMappingURL=create-searchable-domain.js.map