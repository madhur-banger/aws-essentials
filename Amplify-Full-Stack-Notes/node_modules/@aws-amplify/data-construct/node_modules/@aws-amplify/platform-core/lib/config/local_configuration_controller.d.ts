import { ConfigurationController } from './local_configuration_controller_factory';
/**
 * Used to interact with config file based on OS.
 */
export declare class LocalConfigurationController implements ConfigurationController {
    private readonly projectName;
    private readonly configFileName;
    dirPath: string;
    configFilePath: string;
    _store: Record<string, unknown>;
    /**
     * Initializes paths to project config dir & config file.
     */
    constructor(projectName?: string, configFileName?: string);
    /**
     * Gets values from cached config by path.
     */
    get<T>(path: string): Promise<T>;
    /**
     * Set value by path & update config file to disk.
     */
    set(path: string, value: string | boolean | number): Promise<void>;
    /**
     * Writes config file to disk if found.
     */
    write(): Promise<void>;
    /**
     * Reset cached config and delete the config file.
     */
    clear(): Promise<void>;
    /**
     * Getter for cached config, retrieves config from disk if not cached already.
     * If the store is not cached & config file does not exist, it will create a blank one.
     */
    private store;
    /**
     * Creates project directory to store config if it doesn't exist yet.
     */
    private mkConfigDir;
    /**
     * Returns the path to config directory depending on OS
     */
    private getConfigDirPath;
}
//# sourceMappingURL=local_configuration_controller.d.ts.map