"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributionMetadataStorage = void 0;
const _os = __importStar(require("os"));
const platform_core_1 = require("@aws-amplify/platform-core");
/**
 * Stores BI metrics information in stack descriptions
 */
class AttributionMetadataStorage {
    os;
    packageJsonReader;
    /**
     * Constructor with props for injecting test mocks
     */
    constructor(os = _os, packageJsonReader = new platform_core_1.PackageJsonReader()) {
        this.os = os;
        this.packageJsonReader = packageJsonReader;
    }
    /**
     * Stores an attribution metadata string in the stack description of the provided stack
     * Does nothing if the stack already has a non-empty description
     */
    storeAttributionMetadata = (stack, stackType, libraryPackageJsonAbsolutePath, additionalMetadata = {}) => {
        if (typeof stack.templateOptions.description === 'string' &&
            stack.templateOptions.description.length > 0) {
            // don't overwrite an existing description
            return;
        }
        stack.templateOptions.description = JSON.stringify(this.getAttributionMetadata(stack, stackType, libraryPackageJsonAbsolutePath, additionalMetadata));
    };
    getAttributionMetadata = (stack, stackType, libraryPackageJsonAbsolutePath, additionalMetadata) => ({
        createdOn: this.getPlatform(),
        createdBy: this.getDeploymentEngineType(stack),
        createdWith: this.packageJsonReader.read(libraryPackageJsonAbsolutePath).version ?? '',
        stackType: stackType,
        metadata: additionalMetadata,
    });
    getDeploymentEngineType = (stack) => {
        const deploymentType = stack.node.tryGetContext(platform_core_1.CDKContextKey.DEPLOYMENT_TYPE);
        if (deploymentType === undefined) {
            // if no deployment type context value is set, assume the construct is being used in a native CDK project
            return 'AmplifyCDK';
        }
        switch (deploymentType) {
            case 'branch':
                return 'AmplifyPipelineDeploy';
            case 'sandbox':
                return 'AmplifySandbox';
            default:
                throw new Error(`Unknown ${platform_core_1.CDKContextKey.DEPLOYMENT_TYPE} CDK context value "${deploymentType}"`);
        }
    };
    getPlatform = () => {
        switch (this.os.platform()) {
            case 'darwin':
                return 'Mac';
            case 'win32':
                return 'Windows';
            case 'linux':
                return 'Linux';
            default:
                return 'Other';
        }
    };
}
exports.AttributionMetadataStorage = AttributionMetadataStorage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmVfYXR0cmlidXRpb25fbWV0YWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RvcmVfYXR0cmlidXRpb25fbWV0YWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSx3Q0FBMEI7QUFDMUIsOERBQThFO0FBRzlFOztHQUVHO0FBQ0gsTUFBYSwwQkFBMEI7SUFLbEI7SUFDQTtJQUxuQjs7T0FFRztJQUNILFlBQ21CLEtBQWlCLEdBQUcsRUFDcEIsb0JBQW9CLElBQUksaUNBQWlCLEVBQUU7UUFEM0MsT0FBRSxHQUFGLEVBQUUsQ0FBa0I7UUFDcEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUEwQjtJQUMzRCxDQUFDO0lBRUo7OztPQUdHO0lBQ0gsd0JBQXdCLEdBQUcsQ0FDekIsS0FBWSxFQUNaLFNBQWlCLEVBQ2pCLDhCQUFzQyxFQUN0QyxxQkFBNkMsRUFBRSxFQUN6QyxFQUFFO1FBQ1IsSUFDRSxPQUFPLEtBQUssQ0FBQyxlQUFlLENBQUMsV0FBVyxLQUFLLFFBQVE7WUFDckQsS0FBSyxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFDNUM7WUFDQSwwQ0FBMEM7WUFDMUMsT0FBTztTQUNSO1FBQ0QsS0FBSyxDQUFDLGVBQWUsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FDaEQsSUFBSSxDQUFDLHNCQUFzQixDQUN6QixLQUFLLEVBQ0wsU0FBUyxFQUNULDhCQUE4QixFQUM5QixrQkFBa0IsQ0FDbkIsQ0FDRixDQUFDO0lBQ0osQ0FBQyxDQUFDO0lBRU0sc0JBQXNCLEdBQUcsQ0FDL0IsS0FBWSxFQUNaLFNBQWlCLEVBQ2pCLDhCQUFzQyxFQUN0QyxrQkFBMEMsRUFDckIsRUFBRSxDQUFDLENBQUM7UUFDekIsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUU7UUFDN0IsU0FBUyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUM7UUFDOUMsV0FBVyxFQUNULElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsOEJBQThCLENBQUMsQ0FBQyxPQUFPLElBQUksRUFBRTtRQUMzRSxTQUFTLEVBQUUsU0FBUztRQUNwQixRQUFRLEVBQUUsa0JBQWtCO0tBQzdCLENBQUMsQ0FBQztJQUVLLHVCQUF1QixHQUFHLENBQUMsS0FBWSxFQUF3QixFQUFFO1FBQ3ZFLE1BQU0sY0FBYyxHQUErQixLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FDekUsNkJBQWEsQ0FBQyxlQUFlLENBQzlCLENBQUM7UUFFRixJQUFJLGNBQWMsS0FBSyxTQUFTLEVBQUU7WUFDaEMseUdBQXlHO1lBQ3pHLE9BQU8sWUFBWSxDQUFDO1NBQ3JCO1FBRUQsUUFBUSxjQUFjLEVBQUU7WUFDdEIsS0FBSyxRQUFRO2dCQUNYLE9BQU8sdUJBQXVCLENBQUM7WUFDakMsS0FBSyxTQUFTO2dCQUNaLE9BQU8sZ0JBQWdCLENBQUM7WUFDMUI7Z0JBQ0UsTUFBTSxJQUFJLEtBQUssQ0FDYixXQUFXLDZCQUFhLENBQUMsZUFBZSx1QkFDdEMsY0FDRixHQUFHLENBQ0osQ0FBQztTQUNMO0lBQ0gsQ0FBQyxDQUFDO0lBRU0sV0FBVyxHQUFHLEdBQWEsRUFBRTtRQUNuQyxRQUFRLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDMUIsS0FBSyxRQUFRO2dCQUNYLE9BQU8sS0FBSyxDQUFDO1lBQ2YsS0FBSyxPQUFPO2dCQUNWLE9BQU8sU0FBUyxDQUFDO1lBQ25CLEtBQUssT0FBTztnQkFDVixPQUFPLE9BQU8sQ0FBQztZQUNqQjtnQkFDRSxPQUFPLE9BQU8sQ0FBQztTQUNsQjtJQUNILENBQUMsQ0FBQztDQUNIO0FBdEZELGdFQXNGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YWNrIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgX29zIGZyb20gJ29zJztcbmltcG9ydCB7IENES0NvbnRleHRLZXksIFBhY2thZ2VKc29uUmVhZGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuaW1wb3J0IHsgRGVwbG95bWVudFR5cGUgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcblxuLyoqXG4gKiBTdG9yZXMgQkkgbWV0cmljcyBpbmZvcm1hdGlvbiBpbiBzdGFjayBkZXNjcmlwdGlvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIEF0dHJpYnV0aW9uTWV0YWRhdGFTdG9yYWdlIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIHdpdGggcHJvcHMgZm9yIGluamVjdGluZyB0ZXN0IG1vY2tzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9zOiB0eXBlb2YgX29zID0gX29zLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGFja2FnZUpzb25SZWFkZXIgPSBuZXcgUGFja2FnZUpzb25SZWFkZXIoKVxuICApIHt9XG5cbiAgLyoqXG4gICAqIFN0b3JlcyBhbiBhdHRyaWJ1dGlvbiBtZXRhZGF0YSBzdHJpbmcgaW4gdGhlIHN0YWNrIGRlc2NyaXB0aW9uIG9mIHRoZSBwcm92aWRlZCBzdGFja1xuICAgKiBEb2VzIG5vdGhpbmcgaWYgdGhlIHN0YWNrIGFscmVhZHkgaGFzIGEgbm9uLWVtcHR5IGRlc2NyaXB0aW9uXG4gICAqL1xuICBzdG9yZUF0dHJpYnV0aW9uTWV0YWRhdGEgPSAoXG4gICAgc3RhY2s6IFN0YWNrLFxuICAgIHN0YWNrVHlwZTogc3RyaW5nLFxuICAgIGxpYnJhcnlQYWNrYWdlSnNvbkFic29sdXRlUGF0aDogc3RyaW5nLFxuICAgIGFkZGl0aW9uYWxNZXRhZGF0YTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9XG4gICk6IHZvaWQgPT4ge1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiBzdGFjay50ZW1wbGF0ZU9wdGlvbnMuZGVzY3JpcHRpb24gPT09ICdzdHJpbmcnICYmXG4gICAgICBzdGFjay50ZW1wbGF0ZU9wdGlvbnMuZGVzY3JpcHRpb24ubGVuZ3RoID4gMFxuICAgICkge1xuICAgICAgLy8gZG9uJ3Qgb3ZlcndyaXRlIGFuIGV4aXN0aW5nIGRlc2NyaXB0aW9uXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN0YWNrLnRlbXBsYXRlT3B0aW9ucy5kZXNjcmlwdGlvbiA9IEpTT04uc3RyaW5naWZ5KFxuICAgICAgdGhpcy5nZXRBdHRyaWJ1dGlvbk1ldGFkYXRhKFxuICAgICAgICBzdGFjayxcbiAgICAgICAgc3RhY2tUeXBlLFxuICAgICAgICBsaWJyYXJ5UGFja2FnZUpzb25BYnNvbHV0ZVBhdGgsXG4gICAgICAgIGFkZGl0aW9uYWxNZXRhZGF0YVxuICAgICAgKVxuICAgICk7XG4gIH07XG5cbiAgcHJpdmF0ZSBnZXRBdHRyaWJ1dGlvbk1ldGFkYXRhID0gKFxuICAgIHN0YWNrOiBTdGFjayxcbiAgICBzdGFja1R5cGU6IHN0cmluZyxcbiAgICBsaWJyYXJ5UGFja2FnZUpzb25BYnNvbHV0ZVBhdGg6IHN0cmluZyxcbiAgICBhZGRpdGlvbmFsTWV0YWRhdGE6IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cbiAgKTogQXR0cmlidXRpb25NZXRhZGF0YSA9PiAoe1xuICAgIGNyZWF0ZWRPbjogdGhpcy5nZXRQbGF0Zm9ybSgpLFxuICAgIGNyZWF0ZWRCeTogdGhpcy5nZXREZXBsb3ltZW50RW5naW5lVHlwZShzdGFjayksXG4gICAgY3JlYXRlZFdpdGg6XG4gICAgICB0aGlzLnBhY2thZ2VKc29uUmVhZGVyLnJlYWQobGlicmFyeVBhY2thZ2VKc29uQWJzb2x1dGVQYXRoKS52ZXJzaW9uID8/ICcnLCAvLyBUaGlzIHNob3VsZG4ndCBoYXBwZW4sIHJlZ2FyZGxlc3Mgd2Ugc2hvdWxkbid0IHRocm93IGZvciBhdHRyaWJ1dGlvblxuICAgIHN0YWNrVHlwZTogc3RhY2tUeXBlLFxuICAgIG1ldGFkYXRhOiBhZGRpdGlvbmFsTWV0YWRhdGEsXG4gIH0pO1xuXG4gIHByaXZhdGUgZ2V0RGVwbG95bWVudEVuZ2luZVR5cGUgPSAoc3RhY2s6IFN0YWNrKTogRGVwbG95bWVudEVuZ2luZVR5cGUgPT4ge1xuICAgIGNvbnN0IGRlcGxveW1lbnRUeXBlOiBEZXBsb3ltZW50VHlwZSB8IHVuZGVmaW5lZCA9IHN0YWNrLm5vZGUudHJ5R2V0Q29udGV4dChcbiAgICAgIENES0NvbnRleHRLZXkuREVQTE9ZTUVOVF9UWVBFXG4gICAgKTtcblxuICAgIGlmIChkZXBsb3ltZW50VHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBpZiBubyBkZXBsb3ltZW50IHR5cGUgY29udGV4dCB2YWx1ZSBpcyBzZXQsIGFzc3VtZSB0aGUgY29uc3RydWN0IGlzIGJlaW5nIHVzZWQgaW4gYSBuYXRpdmUgQ0RLIHByb2plY3RcbiAgICAgIHJldHVybiAnQW1wbGlmeUNESyc7XG4gICAgfVxuXG4gICAgc3dpdGNoIChkZXBsb3ltZW50VHlwZSkge1xuICAgICAgY2FzZSAnYnJhbmNoJzpcbiAgICAgICAgcmV0dXJuICdBbXBsaWZ5UGlwZWxpbmVEZXBsb3knO1xuICAgICAgY2FzZSAnc2FuZGJveCc6XG4gICAgICAgIHJldHVybiAnQW1wbGlmeVNhbmRib3gnO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBVbmtub3duICR7Q0RLQ29udGV4dEtleS5ERVBMT1lNRU5UX1RZUEV9IENESyBjb250ZXh0IHZhbHVlIFwiJHtcbiAgICAgICAgICAgIGRlcGxveW1lbnRUeXBlIGFzIHN0cmluZ1xuICAgICAgICAgIH1cImBcbiAgICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSBnZXRQbGF0Zm9ybSA9ICgpOiBQbGF0Zm9ybSA9PiB7XG4gICAgc3dpdGNoICh0aGlzLm9zLnBsYXRmb3JtKCkpIHtcbiAgICAgIGNhc2UgJ2Rhcndpbic6XG4gICAgICAgIHJldHVybiAnTWFjJztcbiAgICAgIGNhc2UgJ3dpbjMyJzpcbiAgICAgICAgcmV0dXJuICdXaW5kb3dzJztcbiAgICAgIGNhc2UgJ2xpbnV4JzpcbiAgICAgICAgcmV0dXJuICdMaW51eCc7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ090aGVyJztcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCB0eXBlIEF0dHJpYnV0aW9uTWV0YWRhdGEgPSB7XG4gIC8qKlxuICAgKiBUaGUgT1MgdGhhdCBzeW50aGVzaXplZCB0aGlzIHN0YWNrXG4gICAqL1xuICBjcmVhdGVkT246IFBsYXRmb3JtO1xuICAvKipcbiAgICogVGhlIHN5bnRoZXNpcyBlbmdpbmUgdGhhdCBnZW5lcmF0ZWQgdGhpcyBzdGFja1xuICAgKi9cbiAgY3JlYXRlZEJ5OiBEZXBsb3ltZW50RW5naW5lVHlwZTtcbiAgLyoqXG4gICAqIFRoZSBsaWJyYXJ5IHZlcnNpb24gdGhhdCBjcmVhdGVkIHRoaXMgbWV0YWRhdGFcbiAgICovXG4gIGNyZWF0ZWRXaXRoOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTdHJpbmcgdGhhdCBpZGVudGlmaWVzIHdoYXQgdHlwZSBvZiBzdGFjayB0aGlzIG1ldGFkYXRhIGlzIHNldCBvblxuICAgKi9cbiAgc3RhY2tUeXBlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEZpZWxkIHdoZXJlIGNvbnN0cnVjdHMgY2FuIHB1dCBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGZvciBCSSB0cmFja2luZ1xuICAgKi9cbiAgbWV0YWRhdGE6IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG59O1xuXG5leHBvcnQgdHlwZSBEZXBsb3ltZW50RW5naW5lVHlwZSA9XG4gIHwgJ0FtcGxpZnlQaXBlbGluZURlcGxveSdcbiAgfCAnQW1wbGlmeVNhbmRib3gnXG4gIHwgJ0FtcGxpZnlDREsnO1xuXG5leHBvcnQgdHlwZSBQbGF0Zm9ybSA9ICdNYWMnIHwgJ1dpbmRvd3MnIHwgJ0xpbnV4JyB8ICdPdGhlcic7XG4iXX0=