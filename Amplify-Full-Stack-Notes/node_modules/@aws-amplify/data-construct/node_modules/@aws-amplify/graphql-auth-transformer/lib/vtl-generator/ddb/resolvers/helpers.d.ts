import { Expression } from 'graphql-mapping-template';
import { RoleDefinition } from '../../../utils';
export declare const getInputFields: () => Expression;
export declare const getIdentityClaimExp: (value: Expression, defaultValueExp: Expression) => Expression;
export declare const iamCheck: (claim: string, exp: Expression, hasIdentityPoolId: boolean) => Expression;
export declare const getOwnerClaim: (ownerClaim: string) => Expression;
export declare const responseCheckForErrors: () => Expression;
export declare const generateStaticRoleExpression: (roles: Array<RoleDefinition>) => Array<Expression>;
export declare const apiKeyExpression: (roles: Array<RoleDefinition>) => Expression;
export declare const lambdaExpression: (roles: Array<RoleDefinition>) => Expression;
export type IamExpressionOptions = {
    roles: Array<RoleDefinition>;
    adminRolesEnabled: boolean;
    hasIdentityPoolId: boolean;
    genericIamAccessEnabled: boolean;
    fieldName?: string;
};
export declare const iamExpression: (options: IamExpressionOptions) => Expression;
export declare const generateIAMAccessCheck: (enableIamAccess: boolean, expression: Expression) => Expression;
export declare const iamAdminRoleCheckExpression: (fieldName?: string, adminCheckExpression?: Expression) => Expression;
export declare const generateAuthRequestExpression: () => string;
export declare const emptyPayload: import("graphql-mapping-template").ToJsonNode;
export declare const generateOwnerClaimListExpression: (claim: string, refName: string) => Expression;
export declare const generateOwnerClaimExpression: (ownerClaim: string, refName: string) => Expression;
export declare const generateOwnerMultiClaimExpression: (ownerClaim: string, refName: string) => Expression | undefined;
export declare const generateInvalidClaimsCondition: (ownerClaim: string, refName: string) => Expression;
export declare const generatePopulateOwnerField: (claimRef: string, ownerEntity: string, entityRef: string, entityIsList: boolean, checkIfAuthorized: boolean, allowedFieldsKey?: string, allowedFieldsCondition?: string) => Expression;
export declare const addAllowedFieldsIfElse: (allowedFieldsKey: string, condition: string, breakLoop?: boolean) => Expression;
export declare const getOwnerClaimReference: (ownerClaim: string, refName: string) => string;
export declare const generateFieldResolverForOwner: (entity: string) => string;
//# sourceMappingURL=helpers.d.ts.map