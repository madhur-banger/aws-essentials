import { GetArgumentsOptions } from '@aws-amplify/graphql-transformer-core';
export type AuthStrategy = 'owner' | 'groups' | 'public' | 'private' | 'custom';
export type AuthProvider = 'apiKey' | 'iam' | 'identityPool' | 'oidc' | 'userPools' | 'function';
export type ModelMutation = 'create' | 'update' | 'delete';
export type ModelOperation = 'create' | 'update' | 'delete' | 'get' | 'list' | 'sync' | 'search' | 'listen';
export type RelationalPrimaryMapConfig = Map<string, {
    claim: string;
    field: string;
}>;
export interface SearchableConfig {
    queries: {
        search: string;
    };
}
export type GetAuthRulesOptions = GetArgumentsOptions & {
    isField?: boolean;
    isSqlDataSource?: boolean;
};
export interface AuthRule {
    allow: AuthStrategy;
    provider?: AuthProvider;
    ownerField?: string;
    identityClaim?: string;
    groupsField?: string;
    groupClaim?: string;
    groups?: string[];
    operations?: ModelOperation[];
    generateIAMPolicy?: boolean;
}
export interface AuthDirective {
    rules: AuthRule[];
}
export interface ConfiguredAuthProviders {
    default: AuthProvider;
    onlyDefaultAuthProviderConfigured: boolean;
    hasApiKey: boolean;
    hasUserPools: boolean;
    hasOIDC: boolean;
    hasIAM: boolean;
    hasLambda: boolean;
    hasAdminRolesEnabled: boolean;
    hasIdentityPoolId: boolean;
    shouldAddDefaultServiceDirective: boolean;
    genericIamAccessEnabled: boolean;
}
export declare const authDirectiveDefinition: string;
//# sourceMappingURL=definitions.d.ts.map