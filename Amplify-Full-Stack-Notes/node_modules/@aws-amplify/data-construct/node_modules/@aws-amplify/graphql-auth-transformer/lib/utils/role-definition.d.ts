import { AuthProvider, AuthStrategy } from './definitions';
export interface RoleDefinition {
    provider: AuthProvider;
    strategy: AuthStrategy;
    static: boolean;
    claim?: string;
    entity?: string;
    allowedFields?: Array<string>;
    nullAllowedFields?: Array<string>;
    areAllFieldsAllowed?: boolean;
    areAllFieldsNullAllowed?: boolean;
    isEntityList?: boolean;
}
export interface RolesByProvider {
    cognitoStaticRoles: Array<RoleDefinition>;
    cognitoDynamicRoles: Array<RoleDefinition>;
    oidcStaticRoles: Array<RoleDefinition>;
    oidcDynamicRoles: Array<RoleDefinition>;
    iamRoles: Array<RoleDefinition>;
    apiKeyRoles: Array<RoleDefinition>;
    lambdaRoles: Array<RoleDefinition>;
}
export declare const isIdenticalAuthRole: (role1: RoleDefinition, role2: RoleDefinition) => boolean;
export declare const isFieldRoleHavingAccessToBothSide: (fieldRole: RoleDefinition, relatedModelRoles: RoleDefinition[]) => boolean;
export declare const isDynamicAuthOrCustomAuth: (role: RoleDefinition) => boolean;
//# sourceMappingURL=role-definition.d.ts.map