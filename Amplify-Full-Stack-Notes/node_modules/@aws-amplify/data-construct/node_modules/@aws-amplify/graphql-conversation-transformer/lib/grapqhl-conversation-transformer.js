"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationTransformer = void 0;
const graphql_directives_1 = require("@aws-amplify/graphql-directives");
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const conversation_prepare_handler_1 = require("./transformer-steps/conversation-prepare-handler");
const conversation_resolver_generator_1 = require("./transformer-steps/conversation-resolver-generator");
const conversation_field_handler_1 = require("./transformer-steps/conversation-field-handler");
class ConversationTransformer extends graphql_transformer_core_1.TransformerPluginBase {
    constructor(modelTransformer, hasManyTransformer, belongsToTransformer, authProvider, functionNameMap) {
        super('amplify-conversation-transformer', graphql_directives_1.ConversationDirective.definition);
        this.directives = [];
        this.field = (parent, definition, directive, context) => {
            const directiveConfg = this.fieldHandler.getDirectiveConfig(parent, definition, directive, context);
            this.directives.push(directiveConfg);
        };
        this.generateResolvers = (ctx) => {
            this.resolverGenerator.generateResolvers(this.directives, ctx);
        };
        this.prepare = (ctx) => {
            this.prepareHandler.prepare(ctx, this.directives);
        };
        this.fieldHandler = new conversation_field_handler_1.ConversationFieldHandler();
        this.prepareHandler = new conversation_prepare_handler_1.ConversationPrepareHandler(modelTransformer, hasManyTransformer, belongsToTransformer, authProvider);
        this.resolverGenerator = new conversation_resolver_generator_1.ConversationResolverGenerator(functionNameMap);
    }
}
exports.ConversationTransformer = ConversationTransformer;
const validate = (config, ctx) => {
    const { field } = config;
    if (field.type.kind !== 'NamedType' || field.type.name.value !== 'ConversationMessage') {
        throw new graphql_transformer_core_1.InvalidDirectiveError('@conversation return type must be ConversationMessage');
    }
};
//# sourceMappingURL=grapqhl-conversation-transformer.js.map