"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManyToManyTransformer = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const graphql_directives_1 = require("@aws-amplify/graphql-directives");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const graphql_1 = require("graphql");
const graphql_transformer_common_1 = require("graphql-transformer-common");
const immer_1 = __importDefault(require("immer"));
const utils_1 = require("./utils");
const resolvers_1 = require("./resolvers");
const schema_1 = require("./schema");
const ddb_generator_1 = require("./resolver/ddb-generator");
class ManyToManyTransformer extends graphql_transformer_core_1.TransformerPluginBase {
    constructor(modelTransformer, indexTransformer, hasOneTransformer, authProvider) {
        super('amplify-many-to-many-transformer', graphql_directives_1.ManyToManyDirective.definition);
        this.relationMap = new Map();
        this.directiveList = [];
        this.field = (parent, definition, directive, context) => {
            const directiveWrapped = new graphql_transformer_core_1.DirectiveWrapper(directive);
            const args = directiveWrapped.getArguments({
                directiveName: graphql_directives_1.ManyToManyDirective.name,
                object: parent,
                field: definition,
                directive,
                limit: graphql_directives_1.ManyToManyDirective.defaults.limit,
            }, (0, graphql_transformer_core_1.generateGetArgumentsInput)(context.transformParameters));
            (0, utils_1.validateModelDirective)(args);
            args.connectionFields = [];
            if (!(0, graphql_transformer_common_1.isListType)(definition.type)) {
                throw new graphql_transformer_core_1.InvalidDirectiveError(`@${graphql_directives_1.ManyToManyDirective.name} must be used with a list.`);
            }
            addDirectiveToRelationMap(this.relationMap, args);
            this.directiveList.push(args);
            this.relationMap.forEach((manyToManyRelation, _) => addJoinTableToDatasourceStrategies(context, manyToManyRelation));
        };
        this.mutateSchema = (context) => {
            const manyToManyMap = new Map();
            const newDocument = (0, immer_1.default)(context.inputDocument, (draftDoc) => {
                var _a;
                const filteredDefs = (_a = draftDoc === null || draftDoc === void 0 ? void 0 : draftDoc.definitions) === null || _a === void 0 ? void 0 : _a.filter((def) => def.kind === 'ObjectTypeExtension' || def.kind === 'ObjectTypeDefinition');
                const objectDefs = filteredDefs;
                objectDefs === null || objectDefs === void 0 ? void 0 : objectDefs.forEach((def) => {
                    var _a;
                    (_a = def === null || def === void 0 ? void 0 : def.fields) === null || _a === void 0 ? void 0 : _a.forEach((field) => {
                        var _a, _b;
                        (_b = (_a = field === null || field === void 0 ? void 0 : field.directives) === null || _a === void 0 ? void 0 : _a.filter((dir) => dir.name.value === graphql_directives_1.ManyToManyDirective.name)) === null || _b === void 0 ? void 0 : _b.forEach((dir) => {
                            var _a, _b, _c, _d, _e, _f, _g;
                            const relationArg = (_a = dir === null || dir === void 0 ? void 0 : dir.arguments) === null || _a === void 0 ? void 0 : _a.find((arg) => arg.name.value === 'relationName');
                            if (((_b = relationArg === null || relationArg === void 0 ? void 0 : relationArg.value) === null || _b === void 0 ? void 0 : _b.kind) === 'StringValue') {
                                const relationName = relationArg.value.value;
                                const manyToManyContext = {
                                    model: def,
                                    field,
                                    directive: dir,
                                    modelAuthDirectives: (_d = (_c = def === null || def === void 0 ? void 0 : def.directives) === null || _c === void 0 ? void 0 : _c.filter((authDir) => authDir.name.value === 'auth')) !== null && _d !== void 0 ? _d : [],
                                    fieldAuthDirectives: (_f = (_e = def === null || def === void 0 ? void 0 : def.directives) === null || _e === void 0 ? void 0 : _e.filter((authDir) => authDir.name.value === 'auth')) !== null && _f !== void 0 ? _f : [],
                                    relationName,
                                };
                                if (!manyToManyMap.has(relationName)) {
                                    manyToManyMap.set(relationName, []);
                                }
                                (_g = manyToManyMap.get(relationName)) === null || _g === void 0 ? void 0 : _g.push(manyToManyContext);
                            }
                        });
                    });
                });
                manyToManyMap.forEach((value, key) => {
                    if (value.length !== 2) {
                        throw new graphql_transformer_core_1.InvalidDirectiveError(`relationNames should have 2 occurrences. '${key}' has '${value.length}' occurrences`);
                    }
                });
                manyToManyMap.forEach((value, key) => {
                    var _a, _b, _c, _d;
                    const manyToManyOne = value[0];
                    const manyToManyTwo = value[1];
                    const d1origTypeName = context.schemaHelper.getTypeMapping(manyToManyOne.model.name.value);
                    const d2origTypeName = context.schemaHelper.getTypeMapping(manyToManyTwo.model.name.value);
                    const d1TypeName = manyToManyOne.model.name.value;
                    const d2TypeName = manyToManyTwo.model.name.value;
                    const d1FieldName = d1TypeName.charAt(0).toLowerCase() + d1TypeName.slice(1);
                    const d2FieldName = d2TypeName.charAt(0).toLowerCase() + d2TypeName.slice(1);
                    const d1FieldNameOrig = d1origTypeName.charAt(0).toLowerCase() + d1origTypeName.slice(1);
                    const d2FieldNameOrig = d2origTypeName.charAt(0).toLowerCase() + d2origTypeName.slice(1);
                    const d1PartitionKey = (0, schema_1.getPartitionKeyFieldNoContext)(manyToManyOne.model);
                    const d1SortKeys = (0, schema_1.getSortKeyFieldsNoContext)(manyToManyOne.model);
                    const d2PartitionKey = (0, schema_1.getPartitionKeyFieldNoContext)(manyToManyTwo.model);
                    const d2SortKeys = (0, schema_1.getSortKeyFieldsNoContext)(manyToManyTwo.model);
                    const d1IndexName = `by${d1origTypeName}`;
                    const d2IndexName = `by${d2origTypeName}`;
                    const d1FieldNameId = (0, utils_1.getManyToManyConnectionAttributeName)(context.transformParameters, d1FieldName, (0, utils_1.getObjectPrimaryKey)(manyToManyOne.model).name.value);
                    const d1SortFieldNames = d1SortKeys.map((node) => `${d1FieldNameOrig}${node.name.value}`);
                    const d2FieldNameId = (0, utils_1.getManyToManyConnectionAttributeName)(context.transformParameters, d2FieldName, (0, utils_1.getObjectPrimaryKey)(manyToManyTwo.model).name.value);
                    const d2SortFieldNames = d2SortKeys.map((node) => `${d2FieldNameOrig}${node.name.value}`);
                    const joinModelDirective = (0, graphql_transformer_common_1.makeDirective)('model', []);
                    const d1IndexDirective = (0, graphql_transformer_common_1.makeDirective)('index', [
                        (0, graphql_transformer_common_1.makeArgument)('name', (0, graphql_transformer_common_1.makeValueNode)(d1IndexName)),
                        (0, graphql_transformer_common_1.makeArgument)('sortKeyFields', (0, graphql_transformer_common_1.makeValueNode)([...d1SortFieldNames])),
                    ]);
                    const d2IndexDirective = (0, graphql_transformer_common_1.makeDirective)('index', [
                        (0, graphql_transformer_common_1.makeArgument)('name', (0, graphql_transformer_common_1.makeValueNode)(d2IndexName)),
                        (0, graphql_transformer_common_1.makeArgument)('sortKeyFields', (0, graphql_transformer_common_1.makeValueNode)([...d2SortFieldNames])),
                    ]);
                    const d1HasOneDirective = (0, graphql_transformer_common_1.makeDirective)('hasOne', [(0, graphql_transformer_common_1.makeArgument)('fields', (0, graphql_transformer_common_1.makeValueNode)([d1FieldNameId, ...d1SortFieldNames]))]);
                    const d2HasOneDirective = (0, graphql_transformer_common_1.makeDirective)('hasOne', [(0, graphql_transformer_common_1.makeArgument)('fields', (0, graphql_transformer_common_1.makeValueNode)([d2FieldNameId, ...d2SortFieldNames]))]);
                    const d1RelatedField = (0, graphql_transformer_common_1.makeField)(d1FieldNameId, [], (0, graphql_transformer_common_1.wrapNonNull)((0, graphql_transformer_common_1.makeNamedType)((0, graphql_transformer_common_1.getBaseType)(d1PartitionKey.type))), [
                        d1IndexDirective,
                    ]);
                    const d1RelatedSortKeyFields = d1SortKeys.map((node) => (0, graphql_transformer_common_1.makeField)(`${d1FieldName}${node.name.value}`, [], (0, graphql_transformer_common_1.wrapNonNull)((0, graphql_transformer_common_1.makeNamedType)((0, graphql_transformer_common_1.getBaseType)(node.type)))));
                    const d2RelatedField = (0, graphql_transformer_common_1.makeField)(d2FieldNameId, [], (0, graphql_transformer_common_1.wrapNonNull)((0, graphql_transformer_common_1.makeNamedType)((0, graphql_transformer_common_1.getBaseType)(d2PartitionKey.type))), [
                        d2IndexDirective,
                    ]);
                    const d2RelatedSortKeyFields = d2SortKeys.map((node) => (0, graphql_transformer_common_1.makeField)(`${d2FieldName}${node.name.value}`, [], (0, graphql_transformer_common_1.wrapNonNull)((0, graphql_transformer_common_1.makeNamedType)((0, graphql_transformer_common_1.getBaseType)(node.type)))));
                    const d1Field = (0, graphql_transformer_common_1.makeField)(d1FieldName, [], (0, graphql_transformer_common_1.wrapNonNull)((0, graphql_transformer_common_1.makeNamedType)(d1TypeName)), [d1HasOneDirective]);
                    const d2Field = (0, graphql_transformer_common_1.makeField)(d2FieldName, [], (0, graphql_transformer_common_1.wrapNonNull)((0, graphql_transformer_common_1.makeNamedType)(d2TypeName)), [d2HasOneDirective]);
                    const joinTableDirectives = [joinModelDirective];
                    const joinTableAuthDirective = createJoinTableAuthDirective(manyToManyOne.model, manyToManyTwo.model);
                    if (joinTableAuthDirective) {
                        joinTableDirectives.push(joinTableAuthDirective);
                    }
                    const joinType = {
                        ...(0, graphql_transformer_common_1.blankObject)(manyToManyOne.relationName),
                        fields: [
                            (0, graphql_transformer_common_1.makeField)('id', [], (0, graphql_transformer_common_1.wrapNonNull)((0, graphql_transformer_common_1.makeNamedType)('ID'))),
                            d1RelatedField,
                            ...d1RelatedSortKeyFields,
                            d2RelatedField,
                            ...d2RelatedSortKeyFields,
                            d1Field,
                            d2Field,
                        ],
                        directives: joinTableDirectives,
                    };
                    const d1SortKeyNames = d1SortKeys.map((field) => field.name.value);
                    const d2SortKeyNames = d2SortKeys.map((field) => field.name.value);
                    const hasManyOne = (0, graphql_transformer_common_1.makeDirective)('hasMany', [
                        (0, graphql_transformer_common_1.makeArgument)('indexName', (0, graphql_transformer_common_1.makeValueNode)(d1IndexName)),
                        (0, graphql_transformer_common_1.makeArgument)('fields', (0, graphql_transformer_common_1.makeValueNode)([d1PartitionKey.name.value, ...d1SortKeyNames])),
                    ]);
                    const hasManyTwo = (0, graphql_transformer_common_1.makeDirective)('hasMany', [
                        (0, graphql_transformer_common_1.makeArgument)('indexName', (0, graphql_transformer_common_1.makeValueNode)(d2IndexName)),
                        (0, graphql_transformer_common_1.makeArgument)('fields', (0, graphql_transformer_common_1.makeValueNode)([d2PartitionKey.name.value, ...d2SortKeyNames])),
                    ]);
                    (_b = (_a = manyToManyOne === null || manyToManyOne === void 0 ? void 0 : manyToManyOne.field) === null || _a === void 0 ? void 0 : _a.directives) === null || _b === void 0 ? void 0 : _b.push(hasManyOne);
                    (_d = (_c = manyToManyTwo === null || manyToManyTwo === void 0 ? void 0 : manyToManyTwo.field) === null || _c === void 0 ? void 0 : _c.directives) === null || _d === void 0 ? void 0 : _d.push(hasManyTwo);
                    let baseTypeD1 = manyToManyOne.field.type;
                    let baseTypeD2 = manyToManyOne.field.type;
                    while (baseTypeD1.kind !== 'NamedType') {
                        baseTypeD1 = baseTypeD1.type;
                    }
                    while (baseTypeD2.kind !== 'NamedType') {
                        baseTypeD2 = baseTypeD2.type;
                    }
                    baseTypeD1.name.value = manyToManyOne.relationName;
                    baseTypeD2.name.value = manyToManyTwo.relationName;
                    draftDoc.definitions.push(joinType);
                });
            });
            return newDocument;
        };
        this.validate = (ctx) => {
            this.relationMap.forEach((relation) => {
                const { directive1, directive2, name } = relation;
                if (!directive2) {
                    throw new graphql_transformer_core_1.InvalidDirectiveError(`@${graphql_directives_1.ManyToManyDirective.name} relation '${name}' must be used in exactly two locations.`);
                }
                const d1ExpectedType = (0, graphql_transformer_common_1.getBaseType)(directive1.field.type);
                const d2ExpectedType = (0, graphql_transformer_common_1.getBaseType)(directive2.field.type);
                if ((0, graphql_transformer_core_1.isSqlModel)(ctx, d1ExpectedType) || (0, graphql_transformer_core_1.isSqlModel)(ctx, d2ExpectedType)) {
                    throw new graphql_transformer_core_1.InvalidDirectiveError(`@${graphql_directives_1.ManyToManyDirective.name} directive cannot be used on a SQL model.`);
                }
                const d1Strategy = (0, graphql_transformer_core_1.getModelDataSourceStrategy)(ctx, d1ExpectedType);
                const d2Strategy = (0, graphql_transformer_core_1.getModelDataSourceStrategy)(ctx, d2ExpectedType);
                if (((0, graphql_transformer_core_1.isDefaultDynamoDbModelDataSourceStrategy)(d1Strategy) && !(0, graphql_transformer_core_1.isDefaultDynamoDbModelDataSourceStrategy)(d2Strategy)) ||
                    ((0, graphql_transformer_core_1.isAmplifyDynamoDbModelDataSourceStrategy)(d1Strategy) && !(0, graphql_transformer_core_1.isAmplifyDynamoDbModelDataSourceStrategy)(d2Strategy))) {
                    throw new graphql_transformer_core_1.InvalidDirectiveError(`@${graphql_directives_1.ManyToManyDirective.name} directive cannot be used to relate models with a different DynamoDB-based strategies.`);
                }
                if (d1ExpectedType !== directive2.object.name.value) {
                    throw new graphql_transformer_core_1.InvalidDirectiveError(`@${graphql_directives_1.ManyToManyDirective.name} relation '${name}' expects '${d1ExpectedType}' but got '${directive2.object.name.value}'.`);
                }
                if (d2ExpectedType !== directive1.object.name.value) {
                    throw new graphql_transformer_core_1.InvalidDirectiveError(`@${graphql_directives_1.ManyToManyDirective.name} relation '${name}' expects '${d2ExpectedType}' but got '${directive1.object.name.value}'.`);
                }
                if (ctx.output.hasType(name)) {
                    throw new graphql_transformer_core_1.InvalidDirectiveError(`@${graphql_directives_1.ManyToManyDirective.name} relation name '${name}' (derived from '${directive1.relationName}') already exists as a type in the schema.`);
                }
            });
        };
        this.prepare = (ctx) => {
            const context = ctx;
            if (!ctx.metadata.has('joinTypeList')) {
                ctx.metadata.set('joinTypeList', []);
            }
            this.relationMap.forEach((relation) => {
                const { directive1, directive2, name } = relation;
                ctx.metadata.get('joinTypeList').push(name);
                const d1origTypeName = ctx.resourceHelper.getModelNameMapping(directive1.object.name.value);
                const d2origTypeName = ctx.resourceHelper.getModelNameMapping(directive2.object.name.value);
                const d1TypeName = directive1.object.name.value;
                const d2TypeName = directive2.object.name.value;
                const d1FieldName = d1TypeName.charAt(0).toLowerCase() + d1TypeName.slice(1);
                const d2FieldName = d2TypeName.charAt(0).toLowerCase() + d2TypeName.slice(1);
                const d1FieldNameOrig = d1origTypeName.charAt(0).toLowerCase() + d1origTypeName.slice(1);
                const d2FieldNameOrig = d2origTypeName.charAt(0).toLowerCase() + d2origTypeName.slice(1);
                const d1PartitionKey = (0, schema_1.getPartitionKeyField)(context, directive1.object);
                const d1SortKeys = (0, schema_1.getSortKeyFields)(context, directive1.object);
                const d2PartitionKey = (0, schema_1.getPartitionKeyField)(context, directive2.object);
                const d2SortKeys = (0, schema_1.getSortKeyFields)(context, directive2.object);
                const d1IndexName = `by${d1origTypeName}`;
                const d2IndexName = `by${d2origTypeName}`;
                const d1FieldNameId = (0, utils_1.getManyToManyConnectionAttributeName)(ctx.transformParameters, d1FieldName, (0, utils_1.getObjectPrimaryKey)(directive1.object).name.value);
                const d1SortFieldNames = d1SortKeys.map((node) => `${d1FieldNameOrig}${node.name.value}`);
                const d2FieldNameId = (0, utils_1.getManyToManyConnectionAttributeName)(ctx.transformParameters, d2FieldName, (0, utils_1.getObjectPrimaryKey)(directive2.object).name.value);
                const d1FieldNameIdOrig = (0, utils_1.getManyToManyConnectionAttributeName)(ctx.transformParameters, d1FieldNameOrig, (0, utils_1.getObjectPrimaryKey)(directive1.object).name.value);
                const d2FieldNameIdOrig = (0, utils_1.getManyToManyConnectionAttributeName)(ctx.transformParameters, d2FieldNameOrig, (0, utils_1.getObjectPrimaryKey)(directive2.object).name.value);
                const d2SortFieldNames = d2SortKeys.map((node) => `${d2FieldNameOrig}${node.name.value}`);
                const joinModelDirective = (0, graphql_transformer_common_1.makeDirective)('model', []);
                const d1IndexDirective = (0, graphql_transformer_common_1.makeDirective)('index', [
                    (0, graphql_transformer_common_1.makeArgument)('name', (0, graphql_transformer_common_1.makeValueNode)(d1IndexName)),
                    (0, graphql_transformer_common_1.makeArgument)('sortKeyFields', (0, graphql_transformer_common_1.makeValueNode)([...d1SortFieldNames])),
                ]);
                const d2IndexDirective = (0, graphql_transformer_common_1.makeDirective)('index', [
                    (0, graphql_transformer_common_1.makeArgument)('name', (0, graphql_transformer_common_1.makeValueNode)(d2IndexName)),
                    (0, graphql_transformer_common_1.makeArgument)('sortKeyFields', (0, graphql_transformer_common_1.makeValueNode)([...d2SortFieldNames])),
                ]);
                const d1HasOneDirective = (0, graphql_transformer_common_1.makeDirective)('hasOne', [(0, graphql_transformer_common_1.makeArgument)('fields', (0, graphql_transformer_common_1.makeValueNode)([d1FieldNameId, ...d1SortFieldNames]))]);
                const d2HasOneDirective = (0, graphql_transformer_common_1.makeDirective)('hasOne', [(0, graphql_transformer_common_1.makeArgument)('fields', (0, graphql_transformer_common_1.makeValueNode)([d2FieldNameId, ...d2SortFieldNames]))]);
                const d1RelatedField = (0, graphql_transformer_common_1.makeField)(d1FieldNameId, [], (0, graphql_transformer_common_1.wrapNonNull)((0, graphql_transformer_common_1.makeNamedType)((0, graphql_transformer_common_1.getBaseType)(d1PartitionKey.type))), [d1IndexDirective]);
                const d1RelatedSortKeyFields = d1SortKeys.map((node) => (0, graphql_transformer_common_1.makeField)(`${d1FieldName}${node.name.value}`, [], (0, graphql_transformer_common_1.wrapNonNull)((0, graphql_transformer_common_1.makeNamedType)((0, graphql_transformer_common_1.getBaseType)(node.type)))));
                const d2RelatedField = (0, graphql_transformer_common_1.makeField)(d2FieldNameId, [], (0, graphql_transformer_common_1.wrapNonNull)((0, graphql_transformer_common_1.makeNamedType)((0, graphql_transformer_common_1.getBaseType)(d2PartitionKey.type))), [d2IndexDirective]);
                const d2RelatedSortKeyFields = d2SortKeys.map((node) => (0, graphql_transformer_common_1.makeField)(`${d2FieldName}${node.name.value}`, [], (0, graphql_transformer_common_1.wrapNonNull)((0, graphql_transformer_common_1.makeNamedType)((0, graphql_transformer_common_1.getBaseType)(node.type)))));
                const d1Field = (0, graphql_transformer_common_1.makeField)(d1FieldName, [], (0, graphql_transformer_common_1.wrapNonNull)((0, graphql_transformer_common_1.makeNamedType)(d1TypeName)), [d1HasOneDirective]);
                const d2Field = (0, graphql_transformer_common_1.makeField)(d2FieldName, [], (0, graphql_transformer_common_1.wrapNonNull)((0, graphql_transformer_common_1.makeNamedType)(d2TypeName)), [d2HasOneDirective]);
                const joinTableDirectives = [joinModelDirective];
                const joinTableAuthDirective = createJoinTableAuthDirective(directive1.object, directive2.object);
                if (joinTableAuthDirective) {
                    joinTableDirectives.push(joinTableAuthDirective);
                }
                const joinType = {
                    ...(0, graphql_transformer_common_1.blankObject)(name),
                    fields: [
                        (0, graphql_transformer_common_1.makeField)('id', [], (0, graphql_transformer_common_1.wrapNonNull)((0, graphql_transformer_common_1.makeNamedType)('ID'))),
                        d1RelatedField,
                        ...d1RelatedSortKeyFields,
                        d2RelatedField,
                        ...d2RelatedSortKeyFields,
                        d1Field,
                        d2Field,
                    ],
                    directives: joinTableDirectives,
                };
                ctx.output.addObject(joinType);
                directive1.indexName = d1IndexName;
                directive2.indexName = d2IndexName;
                directive1.fields = [d1PartitionKey.name.value, ...d1SortKeys.map((node) => `${node.name.value}`)];
                directive2.fields = [d2PartitionKey.name.value, ...d2SortKeys.map((node) => `${node.name.value}`)];
                directive1.fieldNodes = [d1PartitionKey, ...d1SortKeys];
                directive2.fieldNodes = [d2PartitionKey, ...d2SortKeys];
                directive1.relatedType = joinType;
                directive2.relatedType = joinType;
                directive1.relatedTypeIndex = [d1RelatedField];
                directive2.relatedTypeIndex = [d2RelatedField];
                this.modelTransformer.object(joinType, joinModelDirective, context);
                this.hasOneTransformer.field(joinType, d1Field, d1HasOneDirective, context);
                this.hasOneTransformer.field(joinType, d2Field, d2HasOneDirective, context);
                if (joinTableAuthDirective) {
                    this.authProvider.object(joinType, joinTableAuthDirective, context);
                }
                const d1IndexDirectiveOrig = (0, graphql_transformer_common_1.makeDirective)('index', [
                    (0, graphql_transformer_common_1.makeArgument)('name', (0, graphql_transformer_common_1.makeValueNode)(d1IndexName)),
                    (0, graphql_transformer_common_1.makeArgument)('sortKeyFields', (0, graphql_transformer_common_1.makeValueNode)([...d1SortFieldNames])),
                ]);
                const d2IndexDirectiveOrig = (0, graphql_transformer_common_1.makeDirective)('index', [
                    (0, graphql_transformer_common_1.makeArgument)('name', (0, graphql_transformer_common_1.makeValueNode)(d2IndexName)),
                    (0, graphql_transformer_common_1.makeArgument)('sortKeyFields', (0, graphql_transformer_common_1.makeValueNode)([...d2SortFieldNames])),
                ]);
                const d1RelatedFieldOrig = (0, graphql_transformer_common_1.makeField)(d1FieldNameIdOrig, [], (0, graphql_transformer_common_1.wrapNonNull)((0, graphql_transformer_common_1.makeNamedType)((0, graphql_transformer_common_1.getBaseType)(d1PartitionKey.type))), [
                    d1IndexDirectiveOrig,
                ]);
                const d2RelatedFieldOrig = (0, graphql_transformer_common_1.makeField)(d2FieldNameIdOrig, [], (0, graphql_transformer_common_1.wrapNonNull)((0, graphql_transformer_common_1.makeNamedType)((0, graphql_transformer_common_1.getBaseType)(d2PartitionKey.type))), [
                    d2IndexDirectiveOrig,
                ]);
                const joinTypeOrig = {
                    ...(0, graphql_transformer_common_1.blankObject)(name),
                    fields: [
                        (0, graphql_transformer_common_1.makeField)('id', [], (0, graphql_transformer_common_1.wrapNonNull)((0, graphql_transformer_common_1.makeNamedType)('ID'))),
                        d1RelatedFieldOrig,
                        ...d1RelatedSortKeyFields,
                        d2RelatedFieldOrig,
                        ...d2RelatedSortKeyFields,
                        d1Field,
                        d2Field,
                    ],
                    directives: joinTableDirectives,
                };
                this.indexTransformer.field(joinTypeOrig, d1RelatedFieldOrig, d1IndexDirectiveOrig, context);
                this.indexTransformer.field(joinTypeOrig, d2RelatedFieldOrig, d2IndexDirectiveOrig, context);
                const renamedFields = [];
                if (ctx.resourceHelper.isModelRenamed(directive1.object.name.value)) {
                    renamedFields.push({ originalFieldName: d1FieldNameIdOrig, currentFieldName: d1FieldNameId });
                }
                if (ctx.resourceHelper.isModelRenamed(directive2.object.name.value)) {
                    renamedFields.push({ originalFieldName: d2FieldNameIdOrig, currentFieldName: d2FieldNameId });
                }
                if (renamedFields.length && !(0, graphql_transformer_core_1.isSqlModel)(context, name)) {
                    (0, utils_1.registerManyToManyForeignKeyMappings)({
                        resourceHelper: ctx.resourceHelper,
                        typeName: name,
                        referencedBy: [
                            { typeName: directive1.object.name.value, fieldName: directive1.field.name.value, isList: true },
                            { typeName: directive2.object.name.value, fieldName: directive2.field.name.value, isList: true },
                        ],
                        fieldMap: renamedFields,
                    });
                }
                context.providerRegistry.registerDataSourceProvider(joinType, this.modelTransformer);
            });
        };
        this.transformSchema = (ctx) => {
            const context = ctx;
            for (const config of this.directiveList) {
                (0, schema_1.ensureHasManyConnectionField)(config, context);
                (0, schema_1.extendTypeWithConnection)(config, context);
            }
        };
        this.generateResolvers = (ctx) => {
            if (this.directiveList.length === 0) {
                return;
            }
            const context = ctx;
            if (!context.transformParameters.allowGen1Patterns) {
                aws_cdk_lib_1.Annotations.of(context.api).addWarning(`@${graphql_directives_1.ManyToManyDirective.name} is deprecated. This functionality will be removed in the next major release.`);
            }
            for (const config of this.directiveList) {
                (0, resolvers_1.updateTableForConnection)(config, context);
                new ddb_generator_1.DDBRelationalResolverGenerator().makeHasManyGetItemsConnectionWithKeyResolver(config, context);
            }
        };
        this.modelTransformer = modelTransformer;
        this.indexTransformer = indexTransformer;
        this.hasOneTransformer = hasOneTransformer;
        this.authProvider = authProvider;
    }
}
exports.ManyToManyTransformer = ManyToManyTransformer;
const addJoinTableToDatasourceStrategies = (ctx, manyToManyRelation) => {
    const { name: relationName, directive1: { object: { name: { value: typeName }, }, }, } = manyToManyRelation;
    const parentStrategy = (0, graphql_transformer_core_1.getModelDataSourceStrategy)(ctx, typeName);
    ctx.dataSourceStrategies[relationName] = parentStrategy;
};
function addDirectiveToRelationMap(map, directive) {
    const { relationName } = directive;
    const gqlName = getGraphqlRelationName(relationName);
    let relation;
    relation = map.get(gqlName);
    if (relation === undefined) {
        relation = { name: gqlName, directive1: directive };
        map.set(gqlName, relation);
        return;
    }
    if (relation.directive2) {
        throw new graphql_transformer_core_1.InvalidDirectiveError(`@${graphql_directives_1.ManyToManyDirective.name} relation '${relationName}' must be used in exactly two locations.`);
    }
    relation.directive2 = directive;
}
function getGraphqlRelationName(name) {
    return (0, graphql_transformer_common_1.graphqlName)((0, graphql_transformer_common_1.toUpper)(name));
}
function createJoinTableAuthDirective(table1, table2) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const t1Auth = table1.directives.find((directive) => directive.name.value === 'auth');
    const t2Auth = table2.directives.find((directive) => directive.name.value === 'auth');
    const t1Rules = (_d = (_c = (_b = ((_a = t1Auth === null || t1Auth === void 0 ? void 0 : t1Auth.arguments) !== null && _a !== void 0 ? _a : []).find((arg) => arg.name.value === 'rules')) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.values) !== null && _d !== void 0 ? _d : [];
    const t2Rules = (_h = (_g = (_f = ((_e = t2Auth === null || t2Auth === void 0 ? void 0 : t2Auth.arguments) !== null && _e !== void 0 ? _e : []).find((arg) => arg.name.value === 'rules')) === null || _f === void 0 ? void 0 : _f.value) === null || _g === void 0 ? void 0 : _g.values) !== null && _h !== void 0 ? _h : [];
    const rules = [...t1Rules, ...t2Rules];
    if (rules.length === 0) {
        return;
    }
    return (0, graphql_transformer_common_1.makeDirective)('auth', [(0, graphql_transformer_common_1.makeArgument)('rules', { kind: graphql_1.Kind.LIST, values: rules })]);
}
//# sourceMappingURL=graphql-many-to-many-transformer.js.map