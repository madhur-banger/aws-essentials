"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HasManyDirectiveDDBReferencesTransformer = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const ddb_references_generator_1 = require("../resolver/ddb-references-generator");
const resolvers_1 = require("../resolvers");
const utils_1 = require("../utils");
class HasManyDirectiveDDBReferencesTransformer {
    constructor() {
        this.dbType = graphql_transformer_core_1.DDB_DB_TYPE;
        this.prepare = (context, config) => {
            var _a, _b;
            const modelName = config.object.name.value;
            (0, resolvers_1.setFieldMappingResolverReference)(context, (_b = (_a = config.relatedType) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.value, modelName, config.field.name.value, true);
            (0, utils_1.registerHasManyForeignKeyMappings)({
                transformParameters: context.transformParameters,
                resourceHelper: context.resourceHelper,
                thisTypeName: modelName,
                thisFieldName: config.field.name.value,
                relatedType: config.relatedType,
            });
        };
        this.transformSchema = (context, config) => { };
        this.generateResolvers = (context, config) => {
            (0, resolvers_1.updateTableForReferencesConnection)(config, context);
            (0, resolvers_1.updateRelatedModelMutationResolversForCompositeSortKeys)(config, context);
            new ddb_references_generator_1.DDBRelationalReferencesResolverGenerator().makeHasManyGetItemsConnectionWithKeyResolver(config, context);
        };
        this.validate = (context, config) => {
            if (config.indexName) {
                const mappedObjectName = context.resourceHelper.getModelNameMapping(config.object.name.value);
                throw new Error(`Invalid @hasMany directive on ${mappedObjectName}.${config.field.name.value} - indexName is not supported with DynamoDB references.`);
            }
            (0, utils_1.ensureReferencesArray)(config);
            (0, utils_1.validateParentReferencesFields)(config, context);
            (0, utils_1.validateReferencesRelationalFieldNullability)(config);
            const objectName = config.object.name.value;
            const fieldName = config.field.name.value;
            config.indexName = `gsi-${objectName}.${fieldName}`;
            config.referenceNodes = (0, utils_1.getReferencesNodes)(config, context);
            (0, utils_1.validateReferencesBidirectionality)(config);
        };
    }
}
exports.HasManyDirectiveDDBReferencesTransformer = HasManyDirectiveDDBReferencesTransformer;
//# sourceMappingURL=has-many-directive-ddb-references-transformer.js.map