"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeTransform = exports.defaultPrintTransformerLog = exports.constructTransform = exports.constructTransformerChain = void 0;
const graphql_auth_transformer_1 = require("@aws-amplify/graphql-auth-transformer");
const graphql_default_value_transformer_1 = require("@aws-amplify/graphql-default-value-transformer");
const graphql_function_transformer_1 = require("@aws-amplify/graphql-function-transformer");
const graphql_http_transformer_1 = require("@aws-amplify/graphql-http-transformer");
const graphql_index_transformer_1 = require("@aws-amplify/graphql-index-transformer");
const graphql_maps_to_transformer_1 = require("@aws-amplify/graphql-maps-to-transformer");
const graphql_model_transformer_1 = require("@aws-amplify/graphql-model-transformer");
const graphql_sql_transformer_1 = require("@aws-amplify/graphql-sql-transformer");
const graphql_predictions_transformer_1 = require("@aws-amplify/graphql-predictions-transformer");
const graphql_relational_transformer_1 = require("@aws-amplify/graphql-relational-transformer");
const graphql_searchable_transformer_1 = require("@aws-amplify/graphql-searchable-transformer");
const graphql_transformer_interfaces_1 = require("@aws-amplify/graphql-transformer-interfaces");
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const graphql_generation_transformer_1 = require("@aws-amplify/graphql-generation-transformer");
const graphql_conversation_transformer_1 = require("@aws-amplify/graphql-conversation-transformer");
const constructTransformerChain = (options) => {
    var _a;
    const modelTransformer = new graphql_model_transformer_1.ModelTransformer();
    const authTransformer = new graphql_auth_transformer_1.AuthTransformer();
    const indexTransformer = new graphql_index_transformer_1.IndexTransformer();
    const hasOneTransformer = new graphql_relational_transformer_1.HasOneTransformer();
    const hasManyTransformer = new graphql_relational_transformer_1.HasManyTransformer();
    const belongsToTransformer = new graphql_relational_transformer_1.BelongsToTransformer();
    return [
        modelTransformer,
        new graphql_function_transformer_1.FunctionTransformer(options === null || options === void 0 ? void 0 : options.functionNameMap),
        new graphql_http_transformer_1.HttpTransformer(),
        new graphql_predictions_transformer_1.PredictionsTransformer(options === null || options === void 0 ? void 0 : options.storageConfig),
        new graphql_index_transformer_1.PrimaryKeyTransformer(),
        indexTransformer,
        hasManyTransformer,
        hasOneTransformer,
        new graphql_relational_transformer_1.ManyToManyTransformer(modelTransformer, indexTransformer, hasOneTransformer, authTransformer),
        belongsToTransformer,
        new graphql_conversation_transformer_1.ConversationTransformer(modelTransformer, hasManyTransformer, belongsToTransformer, authTransformer, options === null || options === void 0 ? void 0 : options.functionNameMap),
        new graphql_generation_transformer_1.GenerationTransformer(),
        new graphql_default_value_transformer_1.DefaultValueTransformer(),
        authTransformer,
        new graphql_maps_to_transformer_1.MapsToTransformer(),
        new graphql_sql_transformer_1.SqlTransformer(),
        new graphql_maps_to_transformer_1.RefersToTransformer(),
        new graphql_searchable_transformer_1.SearchableModelTransformer(),
        ...((_a = options === null || options === void 0 ? void 0 : options.customTransformers) !== null && _a !== void 0 ? _a : []),
    ];
};
exports.constructTransformerChain = constructTransformerChain;
const constructTransform = (config) => {
    const { transformersFactoryArgs, authConfig, resolverConfig, userDefinedSlots, stackMapping, transformParameters } = config;
    const transformers = (0, exports.constructTransformerChain)(transformersFactoryArgs);
    return new graphql_transformer_core_1.GraphQLTransform({
        transformers,
        stackMapping,
        authConfig,
        transformParameters,
        userDefinedSlots,
        resolverConfig,
    });
};
exports.constructTransform = constructTransform;
const defaultPrintTransformerLog = (log) => {
    switch (log.level) {
        case graphql_transformer_interfaces_1.TransformerLogLevel.ERROR:
            console.error(log.message);
            break;
        case graphql_transformer_interfaces_1.TransformerLogLevel.WARN:
            console.warn(log.message);
            break;
        case graphql_transformer_interfaces_1.TransformerLogLevel.INFO:
            console.info(log.message);
            break;
        case graphql_transformer_interfaces_1.TransformerLogLevel.DEBUG:
            console.debug(log.message);
            break;
        default:
            console.error(log.message);
    }
};
exports.defaultPrintTransformerLog = defaultPrintTransformerLog;
const executeTransform = (config) => {
    const { assetProvider, dataSourceStrategies, nestedStackProvider, parameterProvider, printTransformerLog, rdsLayerMapping, rdsSnsTopicMapping, schema, scope, sqlDirectiveDataSourceStrategies, synthParameters, } = config;
    const printLog = printTransformerLog !== null && printTransformerLog !== void 0 ? printTransformerLog : exports.defaultPrintTransformerLog;
    const transform = (0, exports.constructTransform)(config);
    try {
        transform.transform({
            assetProvider,
            dataSourceStrategies,
            nestedStackProvider,
            parameterProvider,
            rdsLayerMapping,
            rdsSnsTopicMapping,
            schema,
            scope,
            sqlDirectiveDataSourceStrategies,
            synthParameters,
        });
    }
    finally {
        transform.getLogs().forEach(printLog);
    }
};
exports.executeTransform = executeTransform;
//# sourceMappingURL=graphql-transformer.js.map