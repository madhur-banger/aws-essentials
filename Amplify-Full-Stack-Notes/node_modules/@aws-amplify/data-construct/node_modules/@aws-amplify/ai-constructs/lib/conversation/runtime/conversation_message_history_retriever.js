"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationMessageHistoryRetriever = void 0;
const graphql_request_executor_1 = require("./graphql_request_executor");
/**
 * These are all properties we have to pull.
 * Unfortunately, GQL doesn't support wildcards.
 * https://github.com/graphql/graphql-spec/issues/127
 */
const messageItemSelectionSet = `
                id
                conversationId
                associatedUserMessageId
                aiContext
                role
                content {
                  text
                  document {
                    source {
                      bytes
                    }
                    format
                    name
                  }
                  image {
                    format
                    source {
                      bytes
                    }
                  }
                  toolResult {
                    content {
                      document {
                        format
                        name
                        source {
                          bytes
                        }
                      }
                      image {
                        format
                        source {
                          bytes
                        }
                      }
                      json
                      text
                    }
                    status
                    toolUseId
                  }
                  toolUse {
                    input
                    name
                    toolUseId
                  }
                }
`;
/**
 * This class is responsible for retrieving message history that belongs to conversation turn event.
 * It queries AppSync to list messages that belong to conversation.
 * Additionally, it looks up a current message in case it's missing in the list due to eventual consistency.
 */
class ConversationMessageHistoryRetriever {
    /**
     * Creates conversation message history retriever.
     */
    constructor(event, graphqlRequestExecutor = new graphql_request_executor_1.GraphqlRequestExecutor(event.graphqlApiEndpoint, event.request.headers.authorization)) {
        this.event = event;
        this.graphqlRequestExecutor = graphqlRequestExecutor;
        this.getMessageHistory = async () => {
            var _a;
            if ((_a = this.event.messages) === null || _a === void 0 ? void 0 : _a.length) {
                // This is for backwards compatibility and should be removed with messages property.
                return this.event.messages;
            }
            const messages = await this.listMessages();
            let currentMessage = messages.find((m) => m.id === this.event.currentMessageId);
            // This is a fallback in case current message is not available in the message list.
            // I.e. in a situation when freshly written message is not yet visible in
            // eventually consistent reads.
            if (!currentMessage) {
                currentMessage = await this.getCurrentMessage();
                messages.push(currentMessage);
            }
            // Index assistant messages by corresponding user message.
            const assistantMessageByUserMessageId = new Map();
            messages.forEach((message) => {
                if (message.role === 'assistant' && message.associatedUserMessageId) {
                    assistantMessageByUserMessageId.set(message.associatedUserMessageId, message);
                }
            });
            // Reconcile history and inject aiContext
            return messages.reduce((acc, current) => {
                // Bedrock expects that message history is user->assistant->user->assistant->... and so on.
                // The chronological order doesn't assure this ordering if there were any concurrent messages sent.
                // Therefore, conversation is ordered by user's messages only and corresponding assistant messages are inserted
                // into right place regardless of their createdAt value.
                // This algorithm assumes that GQL query returns messages sorted by createdAt.
                if (current.role === 'assistant') {
                    // Initially, skip assistant messages, these might be out of chronological order.
                    return acc;
                }
                if (current.role === 'user' &&
                    !assistantMessageByUserMessageId.has(current.id) &&
                    current.id !== this.event.currentMessageId) {
                    // Skip user messages that didn't get answer from assistant yet.
                    // These might be still "in-flight", i.e. assistant is still working on them in separate invocation.
                    // Except current message, we want to process that one.
                    return acc;
                }
                const aiContext = current.aiContext;
                const content = aiContext
                    ? [...current.content, { text: JSON.stringify(aiContext) }]
                    : current.content;
                acc.push({ role: current.role, content });
                // Find and insert corresponding assistant message.
                const correspondingAssistantMessage = assistantMessageByUserMessageId.get(current.id);
                if (correspondingAssistantMessage) {
                    acc.push({
                        role: correspondingAssistantMessage.role,
                        content: correspondingAssistantMessage.content,
                    });
                }
                return acc;
            }, []);
        };
        this.getCurrentMessage = async () => {
            const query = `
        query GetMessage($id: ${this.event.messageHistoryQuery.getQueryInputTypeName}!) {
            ${this.event.messageHistoryQuery.getQueryName}(id: $id) {
              ${messageItemSelectionSet}
            }
        }
    `;
            const variables = {
                id: this.event.currentMessageId,
            };
            const response = await this.graphqlRequestExecutor.executeGraphql({
                query,
                variables,
            });
            return response.data[this.event.messageHistoryQuery.getQueryName];
        };
        this.listMessages = async () => {
            var _a;
            const query = `
        query ListMessages($filter: ${this.event.messageHistoryQuery.listQueryInputTypeName}!, $limit: Int) {
            ${this.event.messageHistoryQuery.listQueryName}(filter: $filter, limit: $limit) {
              items {
                ${messageItemSelectionSet}
              }
            }
        }
    `;
            const variables = {
                filter: {
                    conversationId: {
                        eq: this.event.conversationId,
                    },
                },
                limit: (_a = this.event.messageHistoryQuery.listQueryLimit) !== null && _a !== void 0 ? _a : 1000,
            };
            const response = await this.graphqlRequestExecutor.executeGraphql({
                query,
                variables,
            });
            return response.data[this.event.messageHistoryQuery.listQueryName].items;
        };
    }
}
exports.ConversationMessageHistoryRetriever = ConversationMessageHistoryRetriever;
//# sourceMappingURL=data:application/json;base64,