"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationHandlerFunction = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_lambda_nodejs_1 = require("aws-cdk-lib/aws-lambda-nodejs");
const aws_logs_1 = require("aws-cdk-lib/aws-logs");
const constructs_1 = require("constructs");
const path_1 = __importDefault(require("path"));
const resourcesRoot = path_1.default.normalize(path_1.default.join(__dirname, 'runtime'));
const defaultHandlerFilePath = path_1.default.join(resourcesRoot, 'default_handler.js');
/**
 * Conversation Handler Function CDK construct.
 * This construct deploys resources that integrate conversation routes
 * defined in data schema with AI models available in AWS Bedrock. I.e.
 * 1. AWS Lambda function that handles conversation turn events.
 *    With Amplify provided implementation by default and option to specify
 *    custom handler.
 * 2. AWS CloudWatch log group policy with appropriate data protection policies.
 * 3. AWS IAM policy that grants access to selected AWS Bedrock models.
 */
class ConversationHandlerFunction extends constructs_1.Construct {
    /**
     * Creates Conversation Handler Function CDK construct.
     */
    constructor(scope, id, props) {
        var _a;
        super(scope, id);
        this.props = props;
        if (this.props.entry && !path_1.default.isAbsolute(this.props.entry)) {
            throw new Error('Entry must be absolute path');
        }
        const conversationHandler = new aws_lambda_nodejs_1.NodejsFunction(this, `conversationHandlerFunction`, {
            runtime: aws_lambda_1.Runtime.NODEJS_18_X,
            timeout: aws_cdk_lib_1.Duration.seconds(60),
            entry: (_a = this.props.entry) !== null && _a !== void 0 ? _a : defaultHandlerFilePath,
            handler: 'handler',
            bundling: {
                // Do not bundle SDK if conversation handler is using our default implementation which is
                // compatible with Lambda provided SDK.
                // For custom entry we do bundle SDK as we can't control version customer is coding against.
                bundleAwsSDK: !!this.props.entry,
            },
            logGroup: new aws_logs_1.LogGroup(this, 'conversationHandlerFunctionLogGroup', {
                retention: aws_logs_1.RetentionDays.INFINITE,
                dataProtectionPolicy: new aws_logs_1.DataProtectionPolicy({
                    identifiers: [
                        new aws_logs_1.CustomDataIdentifier('JWTToken', 'ey[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*'),
                    ],
                }),
            }),
        });
        if (this.props.models && this.props.models.length > 0) {
            const resources = this.props.models.map((model) => {
                var _a;
                return `arn:aws:bedrock:${(_a = model.region) !== null && _a !== void 0 ? _a : aws_cdk_lib_1.Stack.of(this).region}::foundation-model/${model.modelId}`;
            });
            conversationHandler.addToRolePolicy(new aws_iam_1.PolicyStatement({
                effect: aws_iam_1.Effect.ALLOW,
                actions: ['bedrock:InvokeModel'],
                resources,
            }));
        }
        this.resources = {
            lambda: conversationHandler,
            cfnResources: {
                cfnFunction: conversationHandler.node.findChild('Resource'),
            },
        };
    }
}
exports.ConversationHandlerFunction = ConversationHandlerFunction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVyc2F0aW9uX2hhbmRsZXJfY29uc3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnZlcnNhdGlvbi9jb252ZXJzYXRpb25faGFuZGxlcl9jb25zdHJ1Y3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsNkNBQThDO0FBQzlDLGlEQUE4RDtBQUM5RCx1REFBK0U7QUFDL0UscUVBQStEO0FBQy9ELG1EQUs4QjtBQUM5QiwyQ0FBdUM7QUFDdkMsZ0RBQXdCO0FBRXhCLE1BQU0sYUFBYSxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUN0RSxNQUFNLHNCQUFzQixHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLG9CQUFvQixDQUFDLENBQUM7QUFVOUU7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBYSwyQkFDWCxTQUFRLHNCQUFTO0lBS2pCOztPQUVHO0lBQ0gsWUFDRSxLQUFnQixFQUNoQixFQUFVLEVBQ08sS0FBdUM7O1FBRXhELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFGQSxVQUFLLEdBQUwsS0FBSyxDQUFrQztRQUl4RCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsY0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzFELE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztTQUNoRDtRQUVELE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxrQ0FBYyxDQUM1QyxJQUFJLEVBQ0osNkJBQTZCLEVBQzdCO1lBQ0UsT0FBTyxFQUFFLG9CQUFhLENBQUMsV0FBVztZQUNsQyxPQUFPLEVBQUUsc0JBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQzdCLEtBQUssRUFBRSxNQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxtQ0FBSSxzQkFBc0I7WUFDakQsT0FBTyxFQUFFLFNBQVM7WUFDbEIsUUFBUSxFQUFFO2dCQUNSLHlGQUF5RjtnQkFDekYsdUNBQXVDO2dCQUN2Qyw0RkFBNEY7Z0JBQzVGLFlBQVksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLO2FBQ2pDO1lBQ0QsUUFBUSxFQUFFLElBQUksbUJBQVEsQ0FBQyxJQUFJLEVBQUUscUNBQXFDLEVBQUU7Z0JBQ2xFLFNBQVMsRUFBRSx3QkFBYSxDQUFDLFFBQVE7Z0JBQ2pDLG9CQUFvQixFQUFFLElBQUksK0JBQW9CLENBQUM7b0JBQzdDLFdBQVcsRUFBRTt3QkFDWCxJQUFJLCtCQUFvQixDQUN0QixVQUFVLEVBQ1YsMkRBQTJELENBQzVEO3FCQUNGO2lCQUNGLENBQUM7YUFDSCxDQUFDO1NBQ0gsQ0FDRixDQUFDO1FBRUYsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3JELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FDckMsQ0FBQyxLQUFLLEVBQUUsRUFBRTs7Z0JBQ1IsT0FBQSxtQkFDRSxNQUFBLEtBQUssQ0FBQyxNQUFNLG1DQUFJLG1CQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQ2pDLHNCQUFzQixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUE7YUFBQSxDQUN4QyxDQUFDO1lBQ0YsbUJBQW1CLENBQUMsZUFBZSxDQUNqQyxJQUFJLHlCQUFlLENBQUM7Z0JBQ2xCLE1BQU0sRUFBRSxnQkFBTSxDQUFDLEtBQUs7Z0JBQ3BCLE9BQU8sRUFBRSxDQUFDLHFCQUFxQixDQUFDO2dCQUNoQyxTQUFTO2FBQ1YsQ0FBQyxDQUNILENBQUM7U0FDSDtRQUVELElBQUksQ0FBQyxTQUFTLEdBQUc7WUFDZixNQUFNLEVBQUUsbUJBQW1CO1lBQzNCLFlBQVksRUFBRTtnQkFDWixXQUFXLEVBQUUsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FDN0MsVUFBVSxDQUNJO2FBQ2pCO1NBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXpFRCxrRUF5RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGdW5jdGlvblJlc291cmNlcywgUmVzb3VyY2VQcm92aWRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgRHVyYXRpb24sIFN0YWNrIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgRWZmZWN0LCBQb2xpY3lTdGF0ZW1lbnQgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtaWFtJztcbmltcG9ydCB7IENmbkZ1bmN0aW9uLCBSdW50aW1lIGFzIExhbWJkYVJ1bnRpbWUgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcbmltcG9ydCB7IE5vZGVqc0Z1bmN0aW9uIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWxhbWJkYS1ub2RlanMnO1xuaW1wb3J0IHtcbiAgQ3VzdG9tRGF0YUlkZW50aWZpZXIsXG4gIERhdGFQcm90ZWN0aW9uUG9saWN5LFxuICBMb2dHcm91cCxcbiAgUmV0ZW50aW9uRGF5cyxcbn0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWxvZ3MnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuY29uc3QgcmVzb3VyY2VzUm9vdCA9IHBhdGgubm9ybWFsaXplKHBhdGguam9pbihfX2Rpcm5hbWUsICdydW50aW1lJykpO1xuY29uc3QgZGVmYXVsdEhhbmRsZXJGaWxlUGF0aCA9IHBhdGguam9pbihyZXNvdXJjZXNSb290LCAnZGVmYXVsdF9oYW5kbGVyLmpzJyk7XG5cbmV4cG9ydCB0eXBlIENvbnZlcnNhdGlvbkhhbmRsZXJGdW5jdGlvblByb3BzID0ge1xuICBlbnRyeT86IHN0cmluZztcbiAgbW9kZWxzOiBBcnJheTx7XG4gICAgbW9kZWxJZDogc3RyaW5nO1xuICAgIHJlZ2lvbj86IHN0cmluZztcbiAgfT47XG59O1xuXG4vKipcbiAqIENvbnZlcnNhdGlvbiBIYW5kbGVyIEZ1bmN0aW9uIENESyBjb25zdHJ1Y3QuXG4gKiBUaGlzIGNvbnN0cnVjdCBkZXBsb3lzIHJlc291cmNlcyB0aGF0IGludGVncmF0ZSBjb252ZXJzYXRpb24gcm91dGVzXG4gKiBkZWZpbmVkIGluIGRhdGEgc2NoZW1hIHdpdGggQUkgbW9kZWxzIGF2YWlsYWJsZSBpbiBBV1MgQmVkcm9jay4gSS5lLlxuICogMS4gQVdTIExhbWJkYSBmdW5jdGlvbiB0aGF0IGhhbmRsZXMgY29udmVyc2F0aW9uIHR1cm4gZXZlbnRzLlxuICogICAgV2l0aCBBbXBsaWZ5IHByb3ZpZGVkIGltcGxlbWVudGF0aW9uIGJ5IGRlZmF1bHQgYW5kIG9wdGlvbiB0byBzcGVjaWZ5XG4gKiAgICBjdXN0b20gaGFuZGxlci5cbiAqIDIuIEFXUyBDbG91ZFdhdGNoIGxvZyBncm91cCBwb2xpY3kgd2l0aCBhcHByb3ByaWF0ZSBkYXRhIHByb3RlY3Rpb24gcG9saWNpZXMuXG4gKiAzLiBBV1MgSUFNIHBvbGljeSB0aGF0IGdyYW50cyBhY2Nlc3MgdG8gc2VsZWN0ZWQgQVdTIEJlZHJvY2sgbW9kZWxzLlxuICovXG5leHBvcnQgY2xhc3MgQ29udmVyc2F0aW9uSGFuZGxlckZ1bmN0aW9uXG4gIGV4dGVuZHMgQ29uc3RydWN0XG4gIGltcGxlbWVudHMgUmVzb3VyY2VQcm92aWRlcjxGdW5jdGlvblJlc291cmNlcz5cbntcbiAgcmVzb3VyY2VzOiBGdW5jdGlvblJlc291cmNlcztcblxuICAvKipcbiAgICogQ3JlYXRlcyBDb252ZXJzYXRpb24gSGFuZGxlciBGdW5jdGlvbiBDREsgY29uc3RydWN0LlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IENvbnZlcnNhdGlvbkhhbmRsZXJGdW5jdGlvblByb3BzXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5lbnRyeSAmJiAhcGF0aC5pc0Fic29sdXRlKHRoaXMucHJvcHMuZW50cnkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VudHJ5IG11c3QgYmUgYWJzb2x1dGUgcGF0aCcpO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbnZlcnNhdGlvbkhhbmRsZXIgPSBuZXcgTm9kZWpzRnVuY3Rpb24oXG4gICAgICB0aGlzLFxuICAgICAgYGNvbnZlcnNhdGlvbkhhbmRsZXJGdW5jdGlvbmAsXG4gICAgICB7XG4gICAgICAgIHJ1bnRpbWU6IExhbWJkYVJ1bnRpbWUuTk9ERUpTXzE4X1gsXG4gICAgICAgIHRpbWVvdXQ6IER1cmF0aW9uLnNlY29uZHMoNjApLFxuICAgICAgICBlbnRyeTogdGhpcy5wcm9wcy5lbnRyeSA/PyBkZWZhdWx0SGFuZGxlckZpbGVQYXRoLFxuICAgICAgICBoYW5kbGVyOiAnaGFuZGxlcicsXG4gICAgICAgIGJ1bmRsaW5nOiB7XG4gICAgICAgICAgLy8gRG8gbm90IGJ1bmRsZSBTREsgaWYgY29udmVyc2F0aW9uIGhhbmRsZXIgaXMgdXNpbmcgb3VyIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gd2hpY2ggaXNcbiAgICAgICAgICAvLyBjb21wYXRpYmxlIHdpdGggTGFtYmRhIHByb3ZpZGVkIFNESy5cbiAgICAgICAgICAvLyBGb3IgY3VzdG9tIGVudHJ5IHdlIGRvIGJ1bmRsZSBTREsgYXMgd2UgY2FuJ3QgY29udHJvbCB2ZXJzaW9uIGN1c3RvbWVyIGlzIGNvZGluZyBhZ2FpbnN0LlxuICAgICAgICAgIGJ1bmRsZUF3c1NESzogISF0aGlzLnByb3BzLmVudHJ5LFxuICAgICAgICB9LFxuICAgICAgICBsb2dHcm91cDogbmV3IExvZ0dyb3VwKHRoaXMsICdjb252ZXJzYXRpb25IYW5kbGVyRnVuY3Rpb25Mb2dHcm91cCcsIHtcbiAgICAgICAgICByZXRlbnRpb246IFJldGVudGlvbkRheXMuSU5GSU5JVEUsXG4gICAgICAgICAgZGF0YVByb3RlY3Rpb25Qb2xpY3k6IG5ldyBEYXRhUHJvdGVjdGlvblBvbGljeSh7XG4gICAgICAgICAgICBpZGVudGlmaWVyczogW1xuICAgICAgICAgICAgICBuZXcgQ3VzdG9tRGF0YUlkZW50aWZpZXIoXG4gICAgICAgICAgICAgICAgJ0pXVFRva2VuJyxcbiAgICAgICAgICAgICAgICAnZXlbQS1aYS16MC05LV89XStcXFxcLltBLVphLXowLTktXz1dK1xcXFwuP1tBLVphLXowLTktXy4rLz1dKidcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pLFxuICAgICAgfVxuICAgICk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5tb2RlbHMgJiYgdGhpcy5wcm9wcy5tb2RlbHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgcmVzb3VyY2VzID0gdGhpcy5wcm9wcy5tb2RlbHMubWFwKFxuICAgICAgICAobW9kZWwpID0+XG4gICAgICAgICAgYGFybjphd3M6YmVkcm9jazoke1xuICAgICAgICAgICAgbW9kZWwucmVnaW9uID8/IFN0YWNrLm9mKHRoaXMpLnJlZ2lvblxuICAgICAgICAgIH06OmZvdW5kYXRpb24tbW9kZWwvJHttb2RlbC5tb2RlbElkfWBcbiAgICAgICk7XG4gICAgICBjb252ZXJzYXRpb25IYW5kbGVyLmFkZFRvUm9sZVBvbGljeShcbiAgICAgICAgbmV3IFBvbGljeVN0YXRlbWVudCh7XG4gICAgICAgICAgZWZmZWN0OiBFZmZlY3QuQUxMT1csXG4gICAgICAgICAgYWN0aW9uczogWydiZWRyb2NrOkludm9rZU1vZGVsJ10sXG4gICAgICAgICAgcmVzb3VyY2VzLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlc291cmNlcyA9IHtcbiAgICAgIGxhbWJkYTogY29udmVyc2F0aW9uSGFuZGxlcixcbiAgICAgIGNmblJlc291cmNlczoge1xuICAgICAgICBjZm5GdW5jdGlvbjogY29udmVyc2F0aW9uSGFuZGxlci5ub2RlLmZpbmRDaGlsZChcbiAgICAgICAgICAnUmVzb3VyY2UnXG4gICAgICAgICkgYXMgQ2ZuRnVuY3Rpb24sXG4gICAgICB9LFxuICAgIH07XG4gIH1cbn1cbiJdfQ==