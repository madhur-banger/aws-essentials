"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const graphql_transformer_core_2 = require("@aws-amplify/graphql-transformer-core");
const validate = (config, ctx) => {
    validateFieldType(config);
    validateInferenceConfig(config);
};
exports.validate = validate;
const validateFieldType = (config) => {
    const { parent } = config;
    if (!(0, graphql_transformer_core_2.isQueryType)(parent.name.value)) {
        throw new graphql_transformer_core_1.InvalidDirectiveError('@generation directive must be used on Query field.');
    }
};
const validateInferenceConfig = (config) => {
    const { maxTokens, temperature, topP } = config.inferenceConfiguration;
    if (maxTokens !== undefined && maxTokens < 1) {
        throw new graphql_transformer_core_1.InvalidDirectiveError(`@generation directive maxTokens valid range: Minimum value of 1. Provided: ${maxTokens}`);
    }
    if (temperature !== undefined && (temperature < 0 || temperature > 1)) {
        throw new graphql_transformer_core_1.InvalidDirectiveError(`@generation directive temperature valid range: Minimum value of 0. Maximum value of 1. Provided: ${temperature}`);
    }
    if (topP !== undefined && (topP < 0 || topP > 1)) {
        throw new graphql_transformer_core_1.InvalidDirectiveError(`@generation directive topP valid range: Minimum value of 0. Maximum value of 1. Provided: ${topP}`);
    }
};
//# sourceMappingURL=validation.js.map