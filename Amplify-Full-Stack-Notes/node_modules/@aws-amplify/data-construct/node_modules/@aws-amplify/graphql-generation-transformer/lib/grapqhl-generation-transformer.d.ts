import { TransformerPluginBase } from '@aws-amplify/graphql-transformer-core';
import { TransformerContextProvider, TransformerSchemaVisitStepContextProvider } from '@aws-amplify/graphql-transformer-interfaces';
import { DirectiveNode, FieldDefinitionNode, InterfaceTypeDefinitionNode, ObjectTypeDefinitionNode } from 'graphql';
import { ToolConfig } from './utils/tools';
export type GenerationDirectiveConfiguration = {
    parent: ObjectTypeDefinitionNode;
    directive: DirectiveNode;
    aiModel: string;
    field: FieldDefinitionNode;
    systemPrompt: string;
    inferenceConfiguration: InferenceConfiguration;
};
export type InferenceConfiguration = {
    maxTokens?: number;
    temperature?: number;
    topP?: number;
};
export type GenerationConfigurationWithToolConfig = GenerationDirectiveConfiguration & {
    toolConfig: ToolConfig;
};
export declare class GenerationTransformer extends TransformerPluginBase {
    private directives;
    constructor();
    field: (parent: ObjectTypeDefinitionNode | InterfaceTypeDefinitionNode, definition: FieldDefinitionNode, directive: DirectiveNode, context: TransformerSchemaVisitStepContextProvider) => void;
    generateResolvers: (ctx: TransformerContextProvider) => void;
    private createStack;
    private createPipelineResolver;
    private createBedrockDataSource;
    private createBedrockDataSourceRole;
    private bedrockDataSourceName;
}
//# sourceMappingURL=grapqhl-generation-transformer.d.ts.map