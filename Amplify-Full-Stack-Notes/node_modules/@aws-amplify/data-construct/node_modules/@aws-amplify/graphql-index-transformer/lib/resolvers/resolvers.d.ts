import { TransformerContextProvider, TransformerResolverProvider, ModelDataSourceStrategyDbType } from '@aws-amplify/graphql-transformer-interfaces';
import { TypeNode } from 'graphql';
import { Expression, CompoundExpressionNode } from 'graphql-mapping-template';
import { IndexDirectiveConfiguration, PrimaryKeyDirectiveConfiguration } from '../types';
import { RDSIndexVTLGenerator, DynamoDBIndexVTLGenerator } from './generators';
export declare const replaceDdbPrimaryKey: (config: PrimaryKeyDirectiveConfiguration, ctx: TransformerContextProvider) => void;
export declare const updateResolvers: (config: PrimaryKeyDirectiveConfiguration, ctx: TransformerContextProvider, resolverMap: Map<TransformerResolverProvider, string>) => void;
export declare const attributeTypeFromType: (type: TypeNode, ctx: TransformerContextProvider) => 'S' | 'N';
export declare const getResolverObject: (config: PrimaryKeyDirectiveConfiguration, ctx: TransformerContextProvider, op: string) => TransformerResolverProvider | null;
export declare const ensureCompositeKeySnippet: (config: PrimaryKeyDirectiveConfiguration, conditionallySetSortKey: boolean) => string;
export declare const setQuerySnippet: (config: PrimaryKeyDirectiveConfiguration, ctx: TransformerContextProvider, isListResolver: boolean) => CompoundExpressionNode;
export declare const validateSortDirectionInput: (config: PrimaryKeyDirectiveConfiguration, isListResolver: boolean) => Expression[];
export declare const appendSecondaryIndex: (config: IndexDirectiveConfiguration, ctx: TransformerContextProvider) => void;
export declare const overrideIndexAtCfnLevel: (ctx: TransformerContextProvider, typeName: string, table: any, indexInfo: any) => void;
export declare const updateResolversForIndex: (config: IndexDirectiveConfiguration, ctx: TransformerContextProvider, resolverMap: Map<TransformerResolverProvider, string>) => void;
export declare const makeQueryResolver: (config: IndexDirectiveConfiguration, ctx: TransformerContextProvider, dbType: ModelDataSourceStrategyDbType) => void;
export declare const mergeInputsAndDefaultsSnippet: () => string;
export declare const addIndexToResolverSlot: (resolver: TransformerResolverProvider, lines: string[], isSync?: boolean) => void;
export declare const constructSyncVTL: (syncVTLContent: string, resolver: TransformerResolverProvider) => void;
export declare const generatePostAuthExpression: (isSandboxModeEnabled: boolean, genericIamAccessEnabled: boolean | undefined) => string;
export declare const getVTLGenerator: (dbType: ModelDataSourceStrategyDbType | undefined) => RDSIndexVTLGenerator | DynamoDBIndexVTLGenerator;
//# sourceMappingURL=resolvers.d.ts.map