import { entityIdSubstitution } from './constants.js';
export const roleAccessBuilder = {
    authenticated: {
        to: (actions) => ({
            getResourceAccessAcceptors: [getAuthRoleResourceAccessAcceptor],
            uniqueDefinitionIdValidations: [
                {
                    uniqueDefinitionId: `authenticated`,
                    validationErrorOptions: {
                        message: `Entity access definition for authenticated users specified multiple times.`,
                        resolution: `Combine all access definitions for authenticated users on a single path into one access rule.`,
                    },
                },
            ],
            actions,
            idSubstitution: '*',
        }),
    },
    guest: {
        to: (actions) => ({
            getResourceAccessAcceptors: [getUnauthRoleResourceAccessAcceptor],
            uniqueDefinitionIdValidations: [
                {
                    uniqueDefinitionId: `guest`,
                    validationErrorOptions: {
                        message: `Entity access definition for guest users specified multiple times.`,
                        resolution: `Combine all access definitions for guest users on a single path into one access rule.`,
                    },
                },
            ],
            actions,
            idSubstitution: '*',
        }),
    },
    groups: (groupNames) => ({
        to: (actions) => ({
            getResourceAccessAcceptors: groupNames.map((groupName) => (getInstanceProps) => getUserRoleResourceAccessAcceptor(getInstanceProps, groupName)),
            uniqueDefinitionIdValidations: groupNames.map((groupName) => ({
                uniqueDefinitionId: `groups${groupName}`,
                validationErrorOptions: {
                    message: `Group access definition for ${groupName} specified multiple times.`,
                    resolution: `Combine all access definitions for ${groupName} on a single path into one access rule.`,
                },
            })),
            actions,
            idSubstitution: '*',
        }),
    }),
    entity: (entityId) => ({
        to: (actions) => ({
            getResourceAccessAcceptors: [getAuthRoleResourceAccessAcceptor],
            uniqueDefinitionIdValidations: [
                {
                    uniqueDefinitionId: `entity${entityId}`,
                    validationErrorOptions: {
                        message: `Entity access definition for ${entityId} specified multiple times.`,
                        resolution: `Combine all access definitions for ${entityId} on a single path into one access rule.`,
                    },
                },
            ],
            actions,
            idSubstitution: entityIdSubstitution,
        }),
    }),
    resource: (other) => ({
        to: (actions) => ({
            getResourceAccessAcceptors: [
                (getInstanceProps) => other.getInstance(getInstanceProps).getResourceAccessAcceptor(),
            ],
            uniqueDefinitionIdValidations: [],
            actions,
            idSubstitution: '*',
        }),
    }),
};
const getAuthRoleResourceAccessAcceptor = (getInstanceProps) => getUserRoleResourceAccessAcceptor(getInstanceProps, 'authenticatedUserIamRole');
const getUnauthRoleResourceAccessAcceptor = (getInstanceProps) => getUserRoleResourceAccessAcceptor(getInstanceProps, 'unauthenticatedUserIamRole');
const getUserRoleResourceAccessAcceptor = (getInstanceProps, roleName) => {
    const resourceAccessAcceptor = getInstanceProps.constructContainer
        .getConstructFactory('AuthResources')
        ?.getInstance(getInstanceProps)
        .getResourceAccessAcceptor(roleName);
    if (!resourceAccessAcceptor) {
        throw new Error(`Cannot specify auth access for ${roleName} users without defining auth. See https://docs.amplify.aws/gen2/build-a-backend/auth/set-up-auth/ for more information.`);
    }
    return resourceAccessAcceptor;
};
//# sourceMappingURL=data:application/json;base64,