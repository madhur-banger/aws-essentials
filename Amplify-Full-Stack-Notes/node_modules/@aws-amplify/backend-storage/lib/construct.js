import { Construct } from 'constructs';
import { Bucket, HttpMethods, } from 'aws-cdk-lib/aws-s3';
import { RemovalPolicy, Stack } from 'aws-cdk-lib';
import { AttributionMetadataStorage } from '@aws-amplify/backend-output-storage';
import { fileURLToPath } from 'node:url';
import { S3EventSourceV2 } from 'aws-cdk-lib/aws-lambda-event-sources';
// Be very careful editing this value. It is the string that is used to attribute stacks to Amplify Storage in BI metrics
const storageStackType = 'storage-S3';
/**
 * Amplify Storage CDK Construct
 *
 * Currently just a thin wrapper around an S3 bucket
 */
export class AmplifyStorage extends Construct {
    stack;
    resources;
    isDefault;
    name;
    accessDefinition;
    /**
     * Create a new AmplifyStorage instance
     */
    constructor(scope, id, props) {
        super(scope, id);
        this.isDefault = props.isDefault || false;
        this.name = props.name;
        this.stack = Stack.of(scope);
        const bucketProps = {
            versioned: props.versioned || false,
            cors: [
                {
                    maxAge: 3000,
                    exposedHeaders: [
                        'x-amz-server-side-encryption',
                        'x-amz-request-id',
                        'x-amz-id-2',
                        'ETag',
                    ],
                    allowedHeaders: ['*'],
                    allowedOrigins: ['*'],
                    allowedMethods: [
                        HttpMethods.GET,
                        HttpMethods.HEAD,
                        HttpMethods.PUT,
                        HttpMethods.POST,
                        HttpMethods.DELETE,
                    ],
                },
            ],
            autoDeleteObjects: true,
            removalPolicy: RemovalPolicy.DESTROY,
            enforceSSL: true,
        };
        const bucket = new Bucket(this, 'Bucket', bucketProps);
        this.resources = {
            bucket,
            cfnResources: {
                cfnBucket: bucket.node.findChild('Resource'),
            },
        };
        new AttributionMetadataStorage().storeAttributionMetadata(Stack.of(this), storageStackType, fileURLToPath(new URL('../package.json', import.meta.url)));
    }
    /**
     * Attach a Lambda function trigger handler to the S3 events
     * @param events - list of S3 events that will trigger the handler
     * @param handler - The function that will handle the event
     */
    addTrigger = (events, handler) => {
        handler.addEventSource(new S3EventSourceV2(this.resources.bucket, { events }));
    };
    /**
     * Add access definitions to storage
     */
    addAccessDefinition = (accessOutput) => {
        this.accessDefinition = accessOutput;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnN0cnVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3ZDLE9BQU8sRUFDTCxNQUFNLEVBSU4sV0FBVyxHQUVaLE1BQU0sb0JBQW9CLENBQUM7QUFTNUIsT0FBTyxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDbkQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDakYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUV6QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFHdkUseUhBQXlIO0FBQ3pILE1BQU0sZ0JBQWdCLEdBQUcsWUFBWSxDQUFDO0FBaUR0Qzs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLGNBQ1gsU0FBUSxTQUFTO0lBR1IsS0FBSyxDQUFRO0lBQ2IsU0FBUyxDQUFtQjtJQUM1QixTQUFTLENBQVU7SUFDbkIsSUFBSSxDQUFTO0lBQ3RCLGdCQUFnQixDQUFnQztJQUNoRDs7T0FFRztJQUNILFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBMEI7UUFDbEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLElBQUksS0FBSyxDQUFDO1FBQzFDLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFN0IsTUFBTSxXQUFXLEdBQWdCO1lBQy9CLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxJQUFJLEtBQUs7WUFDbkMsSUFBSSxFQUFFO2dCQUNKO29CQUNFLE1BQU0sRUFBRSxJQUFJO29CQUNaLGNBQWMsRUFBRTt3QkFDZCw4QkFBOEI7d0JBQzlCLGtCQUFrQjt3QkFDbEIsWUFBWTt3QkFDWixNQUFNO3FCQUNQO29CQUNELGNBQWMsRUFBRSxDQUFDLEdBQUcsQ0FBQztvQkFDckIsY0FBYyxFQUFFLENBQUMsR0FBRyxDQUFDO29CQUNyQixjQUFjLEVBQUU7d0JBQ2QsV0FBVyxDQUFDLEdBQUc7d0JBQ2YsV0FBVyxDQUFDLElBQUk7d0JBQ2hCLFdBQVcsQ0FBQyxHQUFHO3dCQUNmLFdBQVcsQ0FBQyxJQUFJO3dCQUNoQixXQUFXLENBQUMsTUFBTTtxQkFDbkI7aUJBQ0Y7YUFDRjtZQUNELGlCQUFpQixFQUFFLElBQUk7WUFDdkIsYUFBYSxFQUFFLGFBQWEsQ0FBQyxPQUFPO1lBQ3BDLFVBQVUsRUFBRSxJQUFJO1NBQ2pCLENBQUM7UUFFRixNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRXZELElBQUksQ0FBQyxTQUFTLEdBQUc7WUFDZixNQUFNO1lBQ04sWUFBWSxFQUFFO2dCQUNaLFNBQVMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQWM7YUFDMUQ7U0FDRixDQUFDO1FBRUYsSUFBSSwwQkFBMEIsRUFBRSxDQUFDLHdCQUF3QixDQUN2RCxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUNkLGdCQUFnQixFQUNoQixhQUFhLENBQUMsSUFBSSxHQUFHLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUMzRCxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxVQUFVLEdBQUcsQ0FBQyxNQUFtQixFQUFFLE9BQWtCLEVBQVEsRUFBRTtRQUM3RCxPQUFPLENBQUMsY0FBYyxDQUNwQixJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQ3ZELENBQUM7SUFDSixDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILG1CQUFtQixHQUFHLENBQUMsWUFBMkMsRUFBRSxFQUFFO1FBQ3BFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxZQUFZLENBQUM7SUFDdkMsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7XG4gIEJ1Y2tldCxcbiAgQnVja2V0UHJvcHMsXG4gIENmbkJ1Y2tldCxcbiAgRXZlbnRUeXBlLFxuICBIdHRwTWV0aG9kcyxcbiAgSUJ1Y2tldCxcbn0gZnJvbSAnYXdzLWNkay1saWIvYXdzLXMzJztcbmltcG9ydCB7XG4gIEJhY2tlbmRPdXRwdXRTdG9yYWdlU3RyYXRlZ3ksXG4gIENvbnN0cnVjdEZhY3RvcnksXG4gIEZ1bmN0aW9uUmVzb3VyY2VzLFxuICBSZXNvdXJjZVByb3ZpZGVyLFxuICBTdGFja1Byb3ZpZGVyLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IFN0b3JhZ2VPdXRwdXQgfSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1vdXRwdXQtc2NoZW1hcyc7XG5pbXBvcnQgeyBSZW1vdmFsUG9saWN5LCBTdGFjayB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IEF0dHJpYnV0aW9uTWV0YWRhdGFTdG9yYWdlIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtb3V0cHV0LXN0b3JhZ2UnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ25vZGU6dXJsJztcbmltcG9ydCB7IElGdW5jdGlvbiB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgUzNFdmVudFNvdXJjZVYyIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWxhbWJkYS1ldmVudC1zb3VyY2VzJztcbmltcG9ydCB7IFN0b3JhZ2VBY2Nlc3NEZWZpbml0aW9uT3V0cHV0IH0gZnJvbSAnLi9wcml2YXRlX3R5cGVzLmpzJztcblxuLy8gQmUgdmVyeSBjYXJlZnVsIGVkaXRpbmcgdGhpcyB2YWx1ZS4gSXQgaXMgdGhlIHN0cmluZyB0aGF0IGlzIHVzZWQgdG8gYXR0cmlidXRlIHN0YWNrcyB0byBBbXBsaWZ5IFN0b3JhZ2UgaW4gQkkgbWV0cmljc1xuY29uc3Qgc3RvcmFnZVN0YWNrVHlwZSA9ICdzdG9yYWdlLVMzJztcblxuZXhwb3J0IHR5cGUgQW1wbGlmeVN0b3JhZ2VUcmlnZ2VyRXZlbnQgPSAnb25EZWxldGUnIHwgJ29uVXBsb2FkJztcblxuZXhwb3J0IHR5cGUgQW1wbGlmeVN0b3JhZ2VQcm9wcyA9IHtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBzdG9yYWdlIHJlc291cmNlIGlzIHRoZSBkZWZhdWx0IHN0b3JhZ2UgcmVzb3VyY2UgZm9yIHRoZSBiYWNrZW5kLlxuICAgKiByZXF1aXJlZCBhbmQgcmVsZXZhbnQgb25seSBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgc3RvcmFnZSByZXNvdXJjZXMgZGVmaW5lZC5cbiAgICogQGRlZmF1bHQgZmFsc2UuXG4gICAqL1xuICBpc0RlZmF1bHQ/OiBib29sZWFuO1xuICAvKipcbiAgICogRnJpZW5kbHkgbmFtZSB0aGF0IHdpbGwgYmUgdXNlZCB0byBkZXJpdmUgdGhlIFMzIEJ1Y2tldCBuYW1lXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGVuYWJsZSBTMyBvYmplY3QgdmVyc2lvbmluZyBvbiB0aGUgYnVja2V0LlxuICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9BbWF6b25TMy9sYXRlc3QvdXNlcmd1aWRlL1ZlcnNpb25pbmcuaHRtbFxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdmVyc2lvbmVkPzogYm9vbGVhbjtcbiAgb3V0cHV0U3RvcmFnZVN0cmF0ZWd5PzogQmFja2VuZE91dHB1dFN0b3JhZ2VTdHJhdGVneTxTdG9yYWdlT3V0cHV0PjtcbiAgLyoqXG4gICAqIFMzIGV2ZW50IHRyaWdnZXIgY29uZmlndXJhdGlvblxuICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5hbXBsaWZ5LmF3cy9nZW4yL2J1aWxkLWEtYmFja2VuZC9zdG9yYWdlLyNjb25maWd1cmUtc3RvcmFnZS10cmlnZ2Vyc1xuICAgKiBAZXhhbXBsZVxuICAgKiBpbXBvcnQgeyB0cmlnZ2VySGFuZGxlciB9IGZyb20gJy4uL2Z1bmN0aW9ucy90cmlnZ2VyLWhhbmRsZXIvcmVzb3VyY2UudHMnXG4gICAqXG4gICAqIGV4cG9ydCBjb25zdCBzdG9yYWdlID0gZGVmaW5lU3RvcmFnZSh7XG4gICAqICAgdHJpZ2dlcnM6IHtcbiAgICogICAgIG9uVXBsb2FkOiB0cmlnZ2VySGFuZGxlclxuICAgKiAgIH1cbiAgICogfSlcbiAgICovXG4gIHRyaWdnZXJzPzogUGFydGlhbDxcbiAgICBSZWNvcmQ8XG4gICAgICBBbXBsaWZ5U3RvcmFnZVRyaWdnZXJFdmVudCxcbiAgICAgIENvbnN0cnVjdEZhY3Rvcnk8UmVzb3VyY2VQcm92aWRlcjxGdW5jdGlvblJlc291cmNlcz4+XG4gICAgPlxuICA+O1xufTtcblxuZXhwb3J0IHR5cGUgU3RvcmFnZVJlc291cmNlcyA9IHtcbiAgYnVja2V0OiBJQnVja2V0O1xuICBjZm5SZXNvdXJjZXM6IHtcbiAgICBjZm5CdWNrZXQ6IENmbkJ1Y2tldDtcbiAgfTtcbn07XG5cbi8qKlxuICogQW1wbGlmeSBTdG9yYWdlIENESyBDb25zdHJ1Y3RcbiAqXG4gKiBDdXJyZW50bHkganVzdCBhIHRoaW4gd3JhcHBlciBhcm91bmQgYW4gUzMgYnVja2V0XG4gKi9cbmV4cG9ydCBjbGFzcyBBbXBsaWZ5U3RvcmFnZVxuICBleHRlbmRzIENvbnN0cnVjdFxuICBpbXBsZW1lbnRzIFJlc291cmNlUHJvdmlkZXI8U3RvcmFnZVJlc291cmNlcz4sIFN0YWNrUHJvdmlkZXJcbntcbiAgcmVhZG9ubHkgc3RhY2s6IFN0YWNrO1xuICByZWFkb25seSByZXNvdXJjZXM6IFN0b3JhZ2VSZXNvdXJjZXM7XG4gIHJlYWRvbmx5IGlzRGVmYXVsdDogYm9vbGVhbjtcbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICBhY2Nlc3NEZWZpbml0aW9uOiBTdG9yYWdlQWNjZXNzRGVmaW5pdGlvbk91dHB1dDtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBBbXBsaWZ5U3RvcmFnZSBpbnN0YW5jZVxuICAgKi9cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEFtcGxpZnlTdG9yYWdlUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgIHRoaXMuaXNEZWZhdWx0ID0gcHJvcHMuaXNEZWZhdWx0IHx8IGZhbHNlO1xuICAgIHRoaXMubmFtZSA9IHByb3BzLm5hbWU7XG4gICAgdGhpcy5zdGFjayA9IFN0YWNrLm9mKHNjb3BlKTtcblxuICAgIGNvbnN0IGJ1Y2tldFByb3BzOiBCdWNrZXRQcm9wcyA9IHtcbiAgICAgIHZlcnNpb25lZDogcHJvcHMudmVyc2lvbmVkIHx8IGZhbHNlLFxuICAgICAgY29yczogW1xuICAgICAgICB7XG4gICAgICAgICAgbWF4QWdlOiAzMDAwLFxuICAgICAgICAgIGV4cG9zZWRIZWFkZXJzOiBbXG4gICAgICAgICAgICAneC1hbXotc2VydmVyLXNpZGUtZW5jcnlwdGlvbicsXG4gICAgICAgICAgICAneC1hbXotcmVxdWVzdC1pZCcsXG4gICAgICAgICAgICAneC1hbXotaWQtMicsXG4gICAgICAgICAgICAnRVRhZycsXG4gICAgICAgICAgXSxcbiAgICAgICAgICBhbGxvd2VkSGVhZGVyczogWycqJ10sXG4gICAgICAgICAgYWxsb3dlZE9yaWdpbnM6IFsnKiddLFxuICAgICAgICAgIGFsbG93ZWRNZXRob2RzOiBbXG4gICAgICAgICAgICBIdHRwTWV0aG9kcy5HRVQsXG4gICAgICAgICAgICBIdHRwTWV0aG9kcy5IRUFELFxuICAgICAgICAgICAgSHR0cE1ldGhvZHMuUFVULFxuICAgICAgICAgICAgSHR0cE1ldGhvZHMuUE9TVCxcbiAgICAgICAgICAgIEh0dHBNZXRob2RzLkRFTEVURSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIGF1dG9EZWxldGVPYmplY3RzOiB0cnVlLFxuICAgICAgcmVtb3ZhbFBvbGljeTogUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLFxuICAgICAgZW5mb3JjZVNTTDogdHJ1ZSxcbiAgICB9O1xuXG4gICAgY29uc3QgYnVja2V0ID0gbmV3IEJ1Y2tldCh0aGlzLCAnQnVja2V0JywgYnVja2V0UHJvcHMpO1xuXG4gICAgdGhpcy5yZXNvdXJjZXMgPSB7XG4gICAgICBidWNrZXQsXG4gICAgICBjZm5SZXNvdXJjZXM6IHtcbiAgICAgICAgY2ZuQnVja2V0OiBidWNrZXQubm9kZS5maW5kQ2hpbGQoJ1Jlc291cmNlJykgYXMgQ2ZuQnVja2V0LFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgbmV3IEF0dHJpYnV0aW9uTWV0YWRhdGFTdG9yYWdlKCkuc3RvcmVBdHRyaWJ1dGlvbk1ldGFkYXRhKFxuICAgICAgU3RhY2sub2YodGhpcyksXG4gICAgICBzdG9yYWdlU3RhY2tUeXBlLFxuICAgICAgZmlsZVVSTFRvUGF0aChuZXcgVVJMKCcuLi9wYWNrYWdlLmpzb24nLCBpbXBvcnQubWV0YS51cmwpKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQXR0YWNoIGEgTGFtYmRhIGZ1bmN0aW9uIHRyaWdnZXIgaGFuZGxlciB0byB0aGUgUzMgZXZlbnRzXG4gICAqIEBwYXJhbSBldmVudHMgLSBsaXN0IG9mIFMzIGV2ZW50cyB0aGF0IHdpbGwgdHJpZ2dlciB0aGUgaGFuZGxlclxuICAgKiBAcGFyYW0gaGFuZGxlciAtIFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgaGFuZGxlIHRoZSBldmVudFxuICAgKi9cbiAgYWRkVHJpZ2dlciA9IChldmVudHM6IEV2ZW50VHlwZVtdLCBoYW5kbGVyOiBJRnVuY3Rpb24pOiB2b2lkID0+IHtcbiAgICBoYW5kbGVyLmFkZEV2ZW50U291cmNlKFxuICAgICAgbmV3IFMzRXZlbnRTb3VyY2VWMih0aGlzLnJlc291cmNlcy5idWNrZXQsIHsgZXZlbnRzIH0pXG4gICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogQWRkIGFjY2VzcyBkZWZpbml0aW9ucyB0byBzdG9yYWdlXG4gICAqL1xuICBhZGRBY2Nlc3NEZWZpbml0aW9uID0gKGFjY2Vzc091dHB1dDogU3RvcmFnZUFjY2Vzc0RlZmluaXRpb25PdXRwdXQpID0+IHtcbiAgICB0aGlzLmFjY2Vzc0RlZmluaXRpb24gPSBhY2Nlc3NPdXRwdXQ7XG4gIH07XG59XG4iXX0=