import { Effect, Policy, PolicyStatement } from 'aws-cdk-lib/aws-iam';
import { Stack } from 'aws-cdk-lib';
import { AmplifyFault } from '@aws-amplify/platform-core';
/**
 * Generates IAM policies scoped to a single bucket
 */
export class StorageAccessPolicyFactory {
    bucket;
    stack;
    /**
     * Instantiate with the bucket to generate policies for
     */
    constructor(bucket) {
        this.bucket = bucket;
        this.stack = Stack.of(bucket);
    }
    createPolicy = (permissions) => {
        if (permissions.size === 0) {
            throw new AmplifyFault('EmptyPolicyFault', {
                message: 'At least one permission must be specified',
            });
        }
        const statements = [];
        permissions.forEach(({ allow: allowPrefixes, deny: denyPrefixes }, action) => {
            if (allowPrefixes.size > 0) {
                statements.push(this.getStatement(allowPrefixes, action, Effect.ALLOW));
            }
            if (denyPrefixes.size > 0) {
                statements.push(this.getStatement(denyPrefixes, action, Effect.DENY));
            }
        });
        if (statements.length === 0) {
            // this could happen if the Map contained entries but all of the path sets were empty
            throw new AmplifyFault('EmptyPolicyFault', {
                message: 'At least one permission must be specified',
            });
        }
        return new Policy(this.stack, `storageAccess${this.stack.node.children.length}`, {
            statements,
        });
    };
    getStatement = (s3Prefixes, action, effect) => {
        switch (action) {
            case 'delete':
            case 'get':
            case 'write':
                return new PolicyStatement({
                    effect,
                    actions: actionMap[action],
                    resources: Array.from(s3Prefixes).map((s3Prefix) => `${this.bucket.bucketArn}/${s3Prefix}`),
                });
            case 'list':
                return new PolicyStatement({
                    effect,
                    actions: actionMap[action],
                    resources: [this.bucket.bucketArn],
                    conditions: {
                        StringLike: {
                            's3:prefix': Array.from(s3Prefixes).flatMap(toConditionPrefix),
                        },
                    },
                });
        }
    };
}
const actionMap = {
    get: ['s3:GetObject'],
    list: ['s3:ListBucket'],
    write: ['s3:PutObject'],
    delete: ['s3:DeleteObject'],
};
/**
 * Converts a prefix like foo/bar/* into [foo/bar/, foo/bar/*]
 * This is necessary to grant the ability to list all objects directly in "foo/bar" and all objects under "foo/bar"
 */
const toConditionPrefix = (prefix) => {
    const noTrailingWildcard = prefix.slice(0, -1);
    return [prefix, noTrailingWildcard];
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZV9hY2Nlc3NfcG9saWN5X2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RvcmFnZV9hY2Nlc3NfcG9saWN5X2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFZMUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMEJBQTBCO0lBTVI7SUFMWixLQUFLLENBQVE7SUFFOUI7O09BRUc7SUFDSCxZQUE2QixNQUFlO1FBQWYsV0FBTSxHQUFOLE1BQU0sQ0FBUztRQUMxQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELFlBQVksR0FBRyxDQUNiLFdBR0MsRUFDRCxFQUFFO1FBQ0YsSUFBSSxXQUFXLENBQUMsSUFBSSxLQUFLLENBQUMsRUFBRTtZQUMxQixNQUFNLElBQUksWUFBWSxDQUFDLGtCQUFrQixFQUFFO2dCQUN6QyxPQUFPLEVBQUUsMkNBQTJDO2FBQ3JELENBQUMsQ0FBQztTQUNKO1FBRUQsTUFBTSxVQUFVLEdBQXNCLEVBQUUsQ0FBQztRQUV6QyxXQUFXLENBQUMsT0FBTyxDQUNqQixDQUFDLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDdkQsSUFBSSxhQUFhLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRTtnQkFDMUIsVUFBVSxDQUFDLElBQUksQ0FDYixJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUN2RCxDQUFDO2FBQ0g7WUFDRCxJQUFJLFlBQVksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFO2dCQUN6QixVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzthQUN2RTtRQUNILENBQUMsQ0FDRixDQUFDO1FBRUYsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUMzQixxRkFBcUY7WUFDckYsTUFBTSxJQUFJLFlBQVksQ0FBQyxrQkFBa0IsRUFBRTtnQkFDekMsT0FBTyxFQUFFLDJDQUEyQzthQUNyRCxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sSUFBSSxNQUFNLENBQ2YsSUFBSSxDQUFDLEtBQUssRUFDVixnQkFBZ0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUNqRDtZQUNFLFVBQVU7U0FDWCxDQUNGLENBQUM7SUFDSixDQUFDLENBQUM7SUFFTSxZQUFZLEdBQUcsQ0FDckIsVUFBc0MsRUFDdEMsTUFBNkIsRUFDN0IsTUFBYyxFQUNkLEVBQUU7UUFDRixRQUFRLE1BQU0sRUFBRTtZQUNkLEtBQUssUUFBUSxDQUFDO1lBQ2QsS0FBSyxLQUFLLENBQUM7WUFDWCxLQUFLLE9BQU87Z0JBQ1YsT0FBTyxJQUFJLGVBQWUsQ0FBQztvQkFDekIsTUFBTTtvQkFDTixPQUFPLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQztvQkFDMUIsU0FBUyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUNuQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFBSSxRQUFRLEVBQUUsQ0FDckQ7aUJBQ0YsQ0FBQyxDQUFDO1lBQ0wsS0FBSyxNQUFNO2dCQUNULE9BQU8sSUFBSSxlQUFlLENBQUM7b0JBQ3pCLE1BQU07b0JBQ04sT0FBTyxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUM7b0JBQzFCLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDO29CQUNsQyxVQUFVLEVBQUU7d0JBQ1YsVUFBVSxFQUFFOzRCQUNWLFdBQVcsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQzt5QkFDL0Q7cUJBQ0Y7aUJBQ0YsQ0FBQyxDQUFDO1NBQ047SUFDSCxDQUFDLENBQUM7Q0FDSDtBQUVELE1BQU0sU0FBUyxHQUE0QztJQUN6RCxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUM7SUFDckIsSUFBSSxFQUFFLENBQUMsZUFBZSxDQUFDO0lBQ3ZCLEtBQUssRUFBRSxDQUFDLGNBQWMsQ0FBQztJQUN2QixNQUFNLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztDQUM1QixDQUFDO0FBRUY7OztHQUdHO0FBQ0gsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLE1BQW1CLEVBQUUsRUFBRTtJQUNoRCxNQUFNLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0MsT0FBTyxDQUFDLE1BQU0sRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0FBQ3RDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElCdWNrZXQgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtczMnO1xuaW1wb3J0IHsgRWZmZWN0LCBQb2xpY3ksIFBvbGljeVN0YXRlbWVudCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0IHsgU3RhY2sgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBBbXBsaWZ5RmF1bHQgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBTdG9yYWdlQWN0aW9uLCBTdG9yYWdlUGF0aCB9IGZyb20gJy4vdHlwZXMuanMnO1xuaW1wb3J0IHsgSW50ZXJuYWxTdG9yYWdlQWN0aW9uIH0gZnJvbSAnLi9wcml2YXRlX3R5cGVzLmpzJztcblxuZXhwb3J0IHR5cGUgUGVybWlzc2lvbiA9IHtcbiAgYWN0aW9uczogU3RvcmFnZUFjdGlvbltdO1xuICAvKipcbiAgICogQW4gczMgcHJlZml4IHRoYXQgZGVmaW5lcyB0aGUgc2NvcGUgb2YgdGhlIGFjdGlvbnNcbiAgICovXG4gIHJlc291cmNlczogc3RyaW5nW107XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyBJQU0gcG9saWNpZXMgc2NvcGVkIHRvIGEgc2luZ2xlIGJ1Y2tldFxuICovXG5leHBvcnQgY2xhc3MgU3RvcmFnZUFjY2Vzc1BvbGljeUZhY3Rvcnkge1xuICBwcml2YXRlIHJlYWRvbmx5IHN0YWNrOiBTdGFjaztcblxuICAvKipcbiAgICogSW5zdGFudGlhdGUgd2l0aCB0aGUgYnVja2V0IHRvIGdlbmVyYXRlIHBvbGljaWVzIGZvclxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBidWNrZXQ6IElCdWNrZXQpIHtcbiAgICB0aGlzLnN0YWNrID0gU3RhY2sub2YoYnVja2V0KTtcbiAgfVxuXG4gIGNyZWF0ZVBvbGljeSA9IChcbiAgICBwZXJtaXNzaW9uczogTWFwPFxuICAgICAgSW50ZXJuYWxTdG9yYWdlQWN0aW9uLFxuICAgICAgeyBhbGxvdzogU2V0PFN0b3JhZ2VQYXRoPjsgZGVueTogU2V0PFN0b3JhZ2VQYXRoPiB9XG4gICAgPlxuICApID0+IHtcbiAgICBpZiAocGVybWlzc2lvbnMuc2l6ZSA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEFtcGxpZnlGYXVsdCgnRW1wdHlQb2xpY3lGYXVsdCcsIHtcbiAgICAgICAgbWVzc2FnZTogJ0F0IGxlYXN0IG9uZSBwZXJtaXNzaW9uIG11c3QgYmUgc3BlY2lmaWVkJyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHN0YXRlbWVudHM6IFBvbGljeVN0YXRlbWVudFtdID0gW107XG5cbiAgICBwZXJtaXNzaW9ucy5mb3JFYWNoKFxuICAgICAgKHsgYWxsb3c6IGFsbG93UHJlZml4ZXMsIGRlbnk6IGRlbnlQcmVmaXhlcyB9LCBhY3Rpb24pID0+IHtcbiAgICAgICAgaWYgKGFsbG93UHJlZml4ZXMuc2l6ZSA+IDApIHtcbiAgICAgICAgICBzdGF0ZW1lbnRzLnB1c2goXG4gICAgICAgICAgICB0aGlzLmdldFN0YXRlbWVudChhbGxvd1ByZWZpeGVzLCBhY3Rpb24sIEVmZmVjdC5BTExPVylcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZW55UHJlZml4ZXMuc2l6ZSA+IDApIHtcbiAgICAgICAgICBzdGF0ZW1lbnRzLnB1c2godGhpcy5nZXRTdGF0ZW1lbnQoZGVueVByZWZpeGVzLCBhY3Rpb24sIEVmZmVjdC5ERU5ZKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuXG4gICAgaWYgKHN0YXRlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyB0aGlzIGNvdWxkIGhhcHBlbiBpZiB0aGUgTWFwIGNvbnRhaW5lZCBlbnRyaWVzIGJ1dCBhbGwgb2YgdGhlIHBhdGggc2V0cyB3ZXJlIGVtcHR5XG4gICAgICB0aHJvdyBuZXcgQW1wbGlmeUZhdWx0KCdFbXB0eVBvbGljeUZhdWx0Jywge1xuICAgICAgICBtZXNzYWdlOiAnQXQgbGVhc3Qgb25lIHBlcm1pc3Npb24gbXVzdCBiZSBzcGVjaWZpZWQnLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQb2xpY3koXG4gICAgICB0aGlzLnN0YWNrLFxuICAgICAgYHN0b3JhZ2VBY2Nlc3Mke3RoaXMuc3RhY2subm9kZS5jaGlsZHJlbi5sZW5ndGh9YCxcbiAgICAgIHtcbiAgICAgICAgc3RhdGVtZW50cyxcbiAgICAgIH1cbiAgICApO1xuICB9O1xuXG4gIHByaXZhdGUgZ2V0U3RhdGVtZW50ID0gKFxuICAgIHMzUHJlZml4ZXM6IFJlYWRvbmx5PFNldDxTdG9yYWdlUGF0aD4+LFxuICAgIGFjdGlvbjogSW50ZXJuYWxTdG9yYWdlQWN0aW9uLFxuICAgIGVmZmVjdDogRWZmZWN0XG4gICkgPT4ge1xuICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICBjYXNlICdkZWxldGUnOlxuICAgICAgY2FzZSAnZ2V0JzpcbiAgICAgIGNhc2UgJ3dyaXRlJzpcbiAgICAgICAgcmV0dXJuIG5ldyBQb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICAgIGVmZmVjdCxcbiAgICAgICAgICBhY3Rpb25zOiBhY3Rpb25NYXBbYWN0aW9uXSxcbiAgICAgICAgICByZXNvdXJjZXM6IEFycmF5LmZyb20oczNQcmVmaXhlcykubWFwKFxuICAgICAgICAgICAgKHMzUHJlZml4KSA9PiBgJHt0aGlzLmJ1Y2tldC5idWNrZXRBcm59LyR7czNQcmVmaXh9YFxuICAgICAgICAgICksXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnbGlzdCc6XG4gICAgICAgIHJldHVybiBuZXcgUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgICBlZmZlY3QsXG4gICAgICAgICAgYWN0aW9uczogYWN0aW9uTWFwW2FjdGlvbl0sXG4gICAgICAgICAgcmVzb3VyY2VzOiBbdGhpcy5idWNrZXQuYnVja2V0QXJuXSxcbiAgICAgICAgICBjb25kaXRpb25zOiB7XG4gICAgICAgICAgICBTdHJpbmdMaWtlOiB7XG4gICAgICAgICAgICAgICdzMzpwcmVmaXgnOiBBcnJheS5mcm9tKHMzUHJlZml4ZXMpLmZsYXRNYXAodG9Db25kaXRpb25QcmVmaXgpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmNvbnN0IGFjdGlvbk1hcDogUmVjb3JkPEludGVybmFsU3RvcmFnZUFjdGlvbiwgc3RyaW5nW10+ID0ge1xuICBnZXQ6IFsnczM6R2V0T2JqZWN0J10sXG4gIGxpc3Q6IFsnczM6TGlzdEJ1Y2tldCddLFxuICB3cml0ZTogWydzMzpQdXRPYmplY3QnXSxcbiAgZGVsZXRlOiBbJ3MzOkRlbGV0ZU9iamVjdCddLFxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHByZWZpeCBsaWtlIGZvby9iYXIvKiBpbnRvIFtmb28vYmFyLywgZm9vL2Jhci8qXVxuICogVGhpcyBpcyBuZWNlc3NhcnkgdG8gZ3JhbnQgdGhlIGFiaWxpdHkgdG8gbGlzdCBhbGwgb2JqZWN0cyBkaXJlY3RseSBpbiBcImZvby9iYXJcIiBhbmQgYWxsIG9iamVjdHMgdW5kZXIgXCJmb28vYmFyXCJcbiAqL1xuY29uc3QgdG9Db25kaXRpb25QcmVmaXggPSAocHJlZml4OiBTdG9yYWdlUGF0aCkgPT4ge1xuICBjb25zdCBub1RyYWlsaW5nV2lsZGNhcmQgPSBwcmVmaXguc2xpY2UoMCwgLTEpO1xuICByZXR1cm4gW3ByZWZpeCwgbm9UcmFpbGluZ1dpbGRjYXJkXTtcbn07XG4iXX0=