import { AmplifyStorage } from './construct.js';
import { StorageAccessOrchestratorFactory } from './storage_access_orchestrator.js';
import { EventType } from 'aws-cdk-lib/aws-s3';
import { StorageAccessPolicyFactory } from './storage_access_policy_factory.js';
import { Tags } from 'aws-cdk-lib';
import { TagName } from '@aws-amplify/platform-core';
/**
 * Generates a single instance of storage resources
 */
export class StorageContainerEntryGenerator {
    props;
    getInstanceProps;
    storageAccessOrchestratorFactory;
    resourceGroupName = 'storage';
    /**
     * Initialize with context from storage factory
     */
    constructor(props, getInstanceProps, storageAccessOrchestratorFactory = new StorageAccessOrchestratorFactory()) {
        this.props = props;
        this.getInstanceProps = getInstanceProps;
        this.storageAccessOrchestratorFactory = storageAccessOrchestratorFactory;
    }
    generateContainerEntry = ({ scope, ssmEnvironmentEntriesGenerator, }) => {
        const amplifyStorage = new AmplifyStorage(scope, this.props.name, {
            ...this.props,
            outputStorageStrategy: this.getInstanceProps.outputStorageStrategy,
        });
        Tags.of(amplifyStorage).add(TagName.FRIENDLY_NAME, this.props.name);
        Object.entries(this.props.triggers || {}).forEach(([triggerEvent, handlerFactory]) => {
            const events = [];
            const handler = handlerFactory.getInstance(this.getInstanceProps)
                .resources.lambda;
            // triggerEvent is converted string from Object.entries
            switch (triggerEvent) {
                case 'onDelete':
                    events.push(EventType.OBJECT_REMOVED);
                    break;
                case 'onUpload':
                    events.push(EventType.OBJECT_CREATED);
                    break;
            }
            amplifyStorage.addTrigger(events, handler);
        });
        if (!this.props.access) {
            return amplifyStorage;
        }
        // generate the ssm environment context necessary to access the s3 bucket (in this case, just the bucket name)
        const ssmEnvironmentEntries = ssmEnvironmentEntriesGenerator.generateSsmEnvironmentEntries({
            [`${this.props.name}_BUCKET_NAME`]: amplifyStorage.resources.bucket.bucketName,
        });
        // we pass the access definition along with other dependencies to the storageAccessOrchestrator
        const storageAccessOrchestrator = this.storageAccessOrchestratorFactory.getInstance(this.props.access, this.getInstanceProps, ssmEnvironmentEntries, new StorageAccessPolicyFactory(amplifyStorage.resources.bucket));
        // the orchestrator generates policies according to the accessDefinition and attaches the policies to appropriate roles
        const storageAccessOutput = storageAccessOrchestrator.orchestrateStorageAccess();
        amplifyStorage.addAccessDefinition(storageAccessOutput);
        return amplifyStorage;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZV9jb250YWluZXJfZW50cnlfZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3N0b3JhZ2VfY29udGFpbmVyX2VudHJ5X2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxPQUFPLEVBQUUsY0FBYyxFQUE4QixNQUFNLGdCQUFnQixDQUFDO0FBQzVFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRXBGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNoRixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVyRDs7R0FFRztBQUNILE1BQU0sT0FBTyw4QkFBOEI7SUFTdEI7SUFDQTtJQUNBO0lBUlYsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO0lBRXZDOztPQUVHO0lBQ0gsWUFDbUIsS0FBaUMsRUFDakMsZ0JBQWtELEVBQ2xELG1DQUFxRSxJQUFJLGdDQUFnQyxFQUFFO1FBRjNHLFVBQUssR0FBTCxLQUFLLENBQTRCO1FBQ2pDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0M7UUFDbEQscUNBQWdDLEdBQWhDLGdDQUFnQyxDQUEyRTtJQUMzSCxDQUFDO0lBRUosc0JBQXNCLEdBQUcsQ0FBQyxFQUN4QixLQUFLLEVBQ0wsOEJBQThCLEdBQ0YsRUFBRSxFQUFFO1FBQ2hDLE1BQU0sY0FBYyxHQUFHLElBQUksY0FBYyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtZQUNoRSxHQUFHLElBQUksQ0FBQyxLQUFLO1lBQ2IscUJBQXFCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLHFCQUFxQjtTQUNuRSxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFcEUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQy9DLENBQUMsQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLEVBQUUsRUFBRTtZQUNqQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7WUFDbEIsTUFBTSxPQUFPLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7aUJBQzlELFNBQVMsQ0FBQyxNQUFNLENBQUM7WUFDcEIsdURBQXVEO1lBQ3ZELFFBQVEsWUFBMEMsRUFBRTtnQkFDbEQsS0FBSyxVQUFVO29CQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO29CQUN0QyxNQUFNO2dCQUNSLEtBQUssVUFBVTtvQkFDYixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztvQkFDdEMsTUFBTTthQUNUO1lBQ0QsY0FBYyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDN0MsQ0FBQyxDQUNGLENBQUM7UUFFRixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDdEIsT0FBTyxjQUFjLENBQUM7U0FDdkI7UUFFRCw4R0FBOEc7UUFDOUcsTUFBTSxxQkFBcUIsR0FDekIsOEJBQThCLENBQUMsNkJBQTZCLENBQUM7WUFDM0QsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxjQUFjLENBQUMsRUFDaEMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVTtTQUM3QyxDQUFDLENBQUM7UUFFTCwrRkFBK0Y7UUFDL0YsTUFBTSx5QkFBeUIsR0FDN0IsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLFdBQVcsQ0FDL0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQ2pCLElBQUksQ0FBQyxnQkFBZ0IsRUFDckIscUJBQXFCLEVBQ3JCLElBQUksMEJBQTBCLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FDaEUsQ0FBQztRQUVKLHVIQUF1SDtRQUN2SCxNQUFNLG1CQUFtQixHQUN2Qix5QkFBeUIsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1FBQ3ZELGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRXhELE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29uc3RydWN0Q29udGFpbmVyRW50cnlHZW5lcmF0b3IsXG4gIENvbnN0cnVjdEZhY3RvcnlHZXRJbnN0YW5jZVByb3BzLFxuICBHZW5lcmF0ZUNvbnRhaW5lckVudHJ5UHJvcHMsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgQW1wbGlmeVN0b3JhZ2UsIEFtcGxpZnlTdG9yYWdlVHJpZ2dlckV2ZW50IH0gZnJvbSAnLi9jb25zdHJ1Y3QuanMnO1xuaW1wb3J0IHsgU3RvcmFnZUFjY2Vzc09yY2hlc3RyYXRvckZhY3RvcnkgfSBmcm9tICcuL3N0b3JhZ2VfYWNjZXNzX29yY2hlc3RyYXRvci5qcyc7XG5pbXBvcnQgeyBBbXBsaWZ5U3RvcmFnZUZhY3RvcnlQcm9wcyB9IGZyb20gJy4vdHlwZXMuanMnO1xuaW1wb3J0IHsgRXZlbnRUeXBlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLXMzJztcbmltcG9ydCB7IFN0b3JhZ2VBY2Nlc3NQb2xpY3lGYWN0b3J5IH0gZnJvbSAnLi9zdG9yYWdlX2FjY2Vzc19wb2xpY3lfZmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBUYWdzIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgVGFnTmFtZSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBzaW5nbGUgaW5zdGFuY2Ugb2Ygc3RvcmFnZSByZXNvdXJjZXNcbiAqL1xuZXhwb3J0IGNsYXNzIFN0b3JhZ2VDb250YWluZXJFbnRyeUdlbmVyYXRvclxuICBpbXBsZW1lbnRzIENvbnN0cnVjdENvbnRhaW5lckVudHJ5R2VuZXJhdG9yXG57XG4gIHJlYWRvbmx5IHJlc291cmNlR3JvdXBOYW1lID0gJ3N0b3JhZ2UnO1xuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHdpdGggY29udGV4dCBmcm9tIHN0b3JhZ2UgZmFjdG9yeVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9wczogQW1wbGlmeVN0b3JhZ2VGYWN0b3J5UHJvcHMsXG4gICAgcHJpdmF0ZSByZWFkb25seSBnZXRJbnN0YW5jZVByb3BzOiBDb25zdHJ1Y3RGYWN0b3J5R2V0SW5zdGFuY2VQcm9wcyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN0b3JhZ2VBY2Nlc3NPcmNoZXN0cmF0b3JGYWN0b3J5OiBTdG9yYWdlQWNjZXNzT3JjaGVzdHJhdG9yRmFjdG9yeSA9IG5ldyBTdG9yYWdlQWNjZXNzT3JjaGVzdHJhdG9yRmFjdG9yeSgpXG4gICkge31cblxuICBnZW5lcmF0ZUNvbnRhaW5lckVudHJ5ID0gKHtcbiAgICBzY29wZSxcbiAgICBzc21FbnZpcm9ubWVudEVudHJpZXNHZW5lcmF0b3IsXG4gIH06IEdlbmVyYXRlQ29udGFpbmVyRW50cnlQcm9wcykgPT4ge1xuICAgIGNvbnN0IGFtcGxpZnlTdG9yYWdlID0gbmV3IEFtcGxpZnlTdG9yYWdlKHNjb3BlLCB0aGlzLnByb3BzLm5hbWUsIHtcbiAgICAgIC4uLnRoaXMucHJvcHMsXG4gICAgICBvdXRwdXRTdG9yYWdlU3RyYXRlZ3k6IHRoaXMuZ2V0SW5zdGFuY2VQcm9wcy5vdXRwdXRTdG9yYWdlU3RyYXRlZ3ksXG4gICAgfSk7XG5cbiAgICBUYWdzLm9mKGFtcGxpZnlTdG9yYWdlKS5hZGQoVGFnTmFtZS5GUklFTkRMWV9OQU1FLCB0aGlzLnByb3BzLm5hbWUpO1xuXG4gICAgT2JqZWN0LmVudHJpZXModGhpcy5wcm9wcy50cmlnZ2VycyB8fCB7fSkuZm9yRWFjaChcbiAgICAgIChbdHJpZ2dlckV2ZW50LCBoYW5kbGVyRmFjdG9yeV0pID0+IHtcbiAgICAgICAgY29uc3QgZXZlbnRzID0gW107XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyRmFjdG9yeS5nZXRJbnN0YW5jZSh0aGlzLmdldEluc3RhbmNlUHJvcHMpXG4gICAgICAgICAgLnJlc291cmNlcy5sYW1iZGE7XG4gICAgICAgIC8vIHRyaWdnZXJFdmVudCBpcyBjb252ZXJ0ZWQgc3RyaW5nIGZyb20gT2JqZWN0LmVudHJpZXNcbiAgICAgICAgc3dpdGNoICh0cmlnZ2VyRXZlbnQgYXMgQW1wbGlmeVN0b3JhZ2VUcmlnZ2VyRXZlbnQpIHtcbiAgICAgICAgICBjYXNlICdvbkRlbGV0ZSc6XG4gICAgICAgICAgICBldmVudHMucHVzaChFdmVudFR5cGUuT0JKRUNUX1JFTU9WRUQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnb25VcGxvYWQnOlxuICAgICAgICAgICAgZXZlbnRzLnB1c2goRXZlbnRUeXBlLk9CSkVDVF9DUkVBVEVEKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGFtcGxpZnlTdG9yYWdlLmFkZFRyaWdnZXIoZXZlbnRzLCBoYW5kbGVyKTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgaWYgKCF0aGlzLnByb3BzLmFjY2Vzcykge1xuICAgICAgcmV0dXJuIGFtcGxpZnlTdG9yYWdlO1xuICAgIH1cblxuICAgIC8vIGdlbmVyYXRlIHRoZSBzc20gZW52aXJvbm1lbnQgY29udGV4dCBuZWNlc3NhcnkgdG8gYWNjZXNzIHRoZSBzMyBidWNrZXQgKGluIHRoaXMgY2FzZSwganVzdCB0aGUgYnVja2V0IG5hbWUpXG4gICAgY29uc3Qgc3NtRW52aXJvbm1lbnRFbnRyaWVzID1cbiAgICAgIHNzbUVudmlyb25tZW50RW50cmllc0dlbmVyYXRvci5nZW5lcmF0ZVNzbUVudmlyb25tZW50RW50cmllcyh7XG4gICAgICAgIFtgJHt0aGlzLnByb3BzLm5hbWV9X0JVQ0tFVF9OQU1FYF06XG4gICAgICAgICAgYW1wbGlmeVN0b3JhZ2UucmVzb3VyY2VzLmJ1Y2tldC5idWNrZXROYW1lLFxuICAgICAgfSk7XG5cbiAgICAvLyB3ZSBwYXNzIHRoZSBhY2Nlc3MgZGVmaW5pdGlvbiBhbG9uZyB3aXRoIG90aGVyIGRlcGVuZGVuY2llcyB0byB0aGUgc3RvcmFnZUFjY2Vzc09yY2hlc3RyYXRvclxuICAgIGNvbnN0IHN0b3JhZ2VBY2Nlc3NPcmNoZXN0cmF0b3IgPVxuICAgICAgdGhpcy5zdG9yYWdlQWNjZXNzT3JjaGVzdHJhdG9yRmFjdG9yeS5nZXRJbnN0YW5jZShcbiAgICAgICAgdGhpcy5wcm9wcy5hY2Nlc3MsXG4gICAgICAgIHRoaXMuZ2V0SW5zdGFuY2VQcm9wcyxcbiAgICAgICAgc3NtRW52aXJvbm1lbnRFbnRyaWVzLFxuICAgICAgICBuZXcgU3RvcmFnZUFjY2Vzc1BvbGljeUZhY3RvcnkoYW1wbGlmeVN0b3JhZ2UucmVzb3VyY2VzLmJ1Y2tldClcbiAgICAgICk7XG5cbiAgICAvLyB0aGUgb3JjaGVzdHJhdG9yIGdlbmVyYXRlcyBwb2xpY2llcyBhY2NvcmRpbmcgdG8gdGhlIGFjY2Vzc0RlZmluaXRpb24gYW5kIGF0dGFjaGVzIHRoZSBwb2xpY2llcyB0byBhcHByb3ByaWF0ZSByb2xlc1xuICAgIGNvbnN0IHN0b3JhZ2VBY2Nlc3NPdXRwdXQgPVxuICAgICAgc3RvcmFnZUFjY2Vzc09yY2hlc3RyYXRvci5vcmNoZXN0cmF0ZVN0b3JhZ2VBY2Nlc3MoKTtcbiAgICBhbXBsaWZ5U3RvcmFnZS5hZGRBY2Nlc3NEZWZpbml0aW9uKHN0b3JhZ2VBY2Nlc3NPdXRwdXQpO1xuXG4gICAgcmV0dXJuIGFtcGxpZnlTdG9yYWdlO1xuICB9O1xufVxuIl19