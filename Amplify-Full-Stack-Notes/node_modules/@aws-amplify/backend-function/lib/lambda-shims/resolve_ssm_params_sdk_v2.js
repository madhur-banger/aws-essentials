/**
 * This code loads environment values from SSM and places them in their corresponding environment variables.
 * If there are no SSM environment values for this function, this is a noop.
 *
 * We include the cjs shim here because it is required for the ssm shim to work both in the lambda and in tests
 */
// cjs shim
import { createRequire } from 'node:module';
import path from 'node:path';
import url from 'node:url';
global.require = createRequire(import.meta.url);
global.__filename = url.fileURLToPath(import.meta.url);
global.__dirname = path.dirname(__filename);
// aws-sdk v2 does not play nice with normal ESM imports so we have to use require here
// eslint-disable-next-line @typescript-eslint/no-var-requires
const aws = require('aws-sdk');
/**
 * Reads SSM environment context from a known Amplify environment variable,
 * fetches values from SSM and places those values in the corresponding environment variables
 */
export const internalAmplifyFunctionResolveSsmParams = async (client = new aws.SSM()) => {
    const envPathObject = JSON.parse(process.env.AMPLIFY_SSM_ENV_CONFIG ?? '{}');
    const paths = Object.keys(envPathObject);
    if (paths.length === 0) {
        return;
    }
    const resolveSecrets = async (paths) => {
        const response = await client
            .getParameters({
            Names: paths,
            WithDecryption: true,
        })
            .promise();
        if (response.Parameters && response.Parameters.length > 0) {
            for (const parameter of response.Parameters) {
                if (parameter.Name) {
                    const envKey = Object.keys(envPathObject).find((key) => envPathObject[key].sharedPath === parameter.Name);
                    const envName = envKey
                        ? envPathObject[envKey].name
                        : envPathObject[parameter.Name]?.name;
                    process.env[envName] = parameter.Value;
                }
            }
        }
        return response;
    };
    const response = await resolveSecrets(paths);
    const sharedPaths = (response?.InvalidParameters || [])
        .map((invalidParam) => envPathObject[invalidParam].sharedPath)
        .filter((sharedParam) => !!sharedParam); // this assertion is safe because we are filtering out undefined
    if (sharedPaths.length > 0) {
        await resolveSecrets(sharedPaths);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZV9zc21fcGFyYW1zX3Nka192Mi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW1iZGEtc2hpbXMvcmVzb2x2ZV9zc21fcGFyYW1zX3Nka192Mi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7R0FLRztBQUNILFdBQVc7QUFDWCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzVDLE9BQU8sSUFBSSxNQUFNLFdBQVcsQ0FBQztBQUM3QixPQUFPLEdBQUcsTUFBTSxVQUFVLENBQUM7QUFDM0IsTUFBTSxDQUFDLE9BQU8sR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoRCxNQUFNLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2RCxNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFNNUMsdUZBQXVGO0FBQ3ZGLDhEQUE4RDtBQUM5RCxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFL0I7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sdUNBQXVDLEdBQUcsS0FBSyxFQUMxRCxTQUFTLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBUyxFQUM3QixFQUFFO0lBQ0YsTUFBTSxhQUFhLEdBQWUsSUFBSSxDQUFDLEtBQUssQ0FDMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsSUFBSSxJQUFJLENBQzNDLENBQUM7SUFDRixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRXpDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDdEIsT0FBTztLQUNSO0lBRUQsTUFBTSxjQUFjLEdBQUcsS0FBSyxFQUFFLEtBQWUsRUFBRSxFQUFFO1FBQy9DLE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTTthQUMxQixhQUFhLENBQUM7WUFDYixLQUFLLEVBQUUsS0FBSztZQUNaLGNBQWMsRUFBRSxJQUFJO1NBQ3JCLENBQUM7YUFDRCxPQUFPLEVBQUUsQ0FBQztRQUViLElBQUksUUFBUSxDQUFDLFVBQVUsSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDekQsS0FBSyxNQUFNLFNBQVMsSUFBSSxRQUFRLENBQUMsVUFBVSxFQUFFO2dCQUMzQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLEVBQUU7b0JBQ2xCLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUM1QyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsS0FBSyxTQUFTLENBQUMsSUFBSSxDQUMxRCxDQUFDO29CQUNGLE1BQU0sT0FBTyxHQUFHLE1BQU07d0JBQ3BCLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSTt3QkFDNUIsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDO29CQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7aUJBQ3hDO2FBQ0Y7U0FDRjtRQUVELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUMsQ0FBQztJQUVGLE1BQU0sUUFBUSxHQUFHLE1BQU0sY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTdDLE1BQU0sV0FBVyxHQUFHLENBQUMsUUFBUSxFQUFFLGlCQUFpQixJQUFJLEVBQUUsQ0FBQztTQUNwRCxHQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxVQUFVLENBQUM7U0FDN0QsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFhLENBQUMsQ0FBQyxnRUFBZ0U7SUFFdkgsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUMxQixNQUFNLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUNuQztBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBjb2RlIGxvYWRzIGVudmlyb25tZW50IHZhbHVlcyBmcm9tIFNTTSBhbmQgcGxhY2VzIHRoZW0gaW4gdGhlaXIgY29ycmVzcG9uZGluZyBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG4gKiBJZiB0aGVyZSBhcmUgbm8gU1NNIGVudmlyb25tZW50IHZhbHVlcyBmb3IgdGhpcyBmdW5jdGlvbiwgdGhpcyBpcyBhIG5vb3AuXG4gKlxuICogV2UgaW5jbHVkZSB0aGUgY2pzIHNoaW0gaGVyZSBiZWNhdXNlIGl0IGlzIHJlcXVpcmVkIGZvciB0aGUgc3NtIHNoaW0gdG8gd29yayBib3RoIGluIHRoZSBsYW1iZGEgYW5kIGluIHRlc3RzXG4gKi9cbi8vIGNqcyBzaGltXG5pbXBvcnQgeyBjcmVhdGVSZXF1aXJlIH0gZnJvbSAnbm9kZTptb2R1bGUnO1xuaW1wb3J0IHBhdGggZnJvbSAnbm9kZTpwYXRoJztcbmltcG9ydCB1cmwgZnJvbSAnbm9kZTp1cmwnO1xuZ2xvYmFsLnJlcXVpcmUgPSBjcmVhdGVSZXF1aXJlKGltcG9ydC5tZXRhLnVybCk7XG5nbG9iYWwuX19maWxlbmFtZSA9IHVybC5maWxlVVJMVG9QYXRoKGltcG9ydC5tZXRhLnVybCk7XG5nbG9iYWwuX19kaXJuYW1lID0gcGF0aC5kaXJuYW1lKF9fZmlsZW5hbWUpO1xuXG4vLyB0eXBlIGltcG9ydHMgdGhhdCB3aWxsIGJlIGVyYXNlZCBmcm9tIHRoZSBidW5kbGUgb3V0cHV0XG5pbXBvcnQgdHlwZSB7IFNTTSB9IGZyb20gJ2F3cy1zZGsnO1xuaW1wb3J0IHR5cGUgeyBTc21FbnZWYXJzIH0gZnJvbSAnLi4vZnVuY3Rpb25fZW52X3RyYW5zbGF0b3IuanMnO1xuXG4vLyBhd3Mtc2RrIHYyIGRvZXMgbm90IHBsYXkgbmljZSB3aXRoIG5vcm1hbCBFU00gaW1wb3J0cyBzbyB3ZSBoYXZlIHRvIHVzZSByZXF1aXJlIGhlcmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXG5jb25zdCBhd3MgPSByZXF1aXJlKCdhd3Mtc2RrJyk7XG5cbi8qKlxuICogUmVhZHMgU1NNIGVudmlyb25tZW50IGNvbnRleHQgZnJvbSBhIGtub3duIEFtcGxpZnkgZW52aXJvbm1lbnQgdmFyaWFibGUsXG4gKiBmZXRjaGVzIHZhbHVlcyBmcm9tIFNTTSBhbmQgcGxhY2VzIHRob3NlIHZhbHVlcyBpbiB0aGUgY29ycmVzcG9uZGluZyBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbiAqL1xuZXhwb3J0IGNvbnN0IGludGVybmFsQW1wbGlmeUZ1bmN0aW9uUmVzb2x2ZVNzbVBhcmFtcyA9IGFzeW5jIChcbiAgY2xpZW50ID0gbmV3IGF3cy5TU00oKSBhcyBTU01cbikgPT4ge1xuICBjb25zdCBlbnZQYXRoT2JqZWN0OiBTc21FbnZWYXJzID0gSlNPTi5wYXJzZShcbiAgICBwcm9jZXNzLmVudi5BTVBMSUZZX1NTTV9FTlZfQ09ORklHID8/ICd7fSdcbiAgKTtcbiAgY29uc3QgcGF0aHMgPSBPYmplY3Qua2V5cyhlbnZQYXRoT2JqZWN0KTtcblxuICBpZiAocGF0aHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcmVzb2x2ZVNlY3JldHMgPSBhc3luYyAocGF0aHM6IHN0cmluZ1tdKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnRcbiAgICAgIC5nZXRQYXJhbWV0ZXJzKHtcbiAgICAgICAgTmFtZXM6IHBhdGhzLFxuICAgICAgICBXaXRoRGVjcnlwdGlvbjogdHJ1ZSxcbiAgICAgIH0pXG4gICAgICAucHJvbWlzZSgpO1xuXG4gICAgaWYgKHJlc3BvbnNlLlBhcmFtZXRlcnMgJiYgcmVzcG9uc2UuUGFyYW1ldGVycy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKGNvbnN0IHBhcmFtZXRlciBvZiByZXNwb25zZS5QYXJhbWV0ZXJzKSB7XG4gICAgICAgIGlmIChwYXJhbWV0ZXIuTmFtZSkge1xuICAgICAgICAgIGNvbnN0IGVudktleSA9IE9iamVjdC5rZXlzKGVudlBhdGhPYmplY3QpLmZpbmQoXG4gICAgICAgICAgICAoa2V5KSA9PiBlbnZQYXRoT2JqZWN0W2tleV0uc2hhcmVkUGF0aCA9PT0gcGFyYW1ldGVyLk5hbWVcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IGVudk5hbWUgPSBlbnZLZXlcbiAgICAgICAgICAgID8gZW52UGF0aE9iamVjdFtlbnZLZXldLm5hbWVcbiAgICAgICAgICAgIDogZW52UGF0aE9iamVjdFtwYXJhbWV0ZXIuTmFtZV0/Lm5hbWU7XG4gICAgICAgICAgcHJvY2Vzcy5lbnZbZW52TmFtZV0gPSBwYXJhbWV0ZXIuVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH07XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXNvbHZlU2VjcmV0cyhwYXRocyk7XG5cbiAgY29uc3Qgc2hhcmVkUGF0aHMgPSAocmVzcG9uc2U/LkludmFsaWRQYXJhbWV0ZXJzIHx8IFtdKVxuICAgIC5tYXAoKGludmFsaWRQYXJhbSkgPT4gZW52UGF0aE9iamVjdFtpbnZhbGlkUGFyYW1dLnNoYXJlZFBhdGgpXG4gICAgLmZpbHRlcigoc2hhcmVkUGFyYW0pID0+ICEhc2hhcmVkUGFyYW0pIGFzIHN0cmluZ1tdOyAvLyB0aGlzIGFzc2VydGlvbiBpcyBzYWZlIGJlY2F1c2Ugd2UgYXJlIGZpbHRlcmluZyBvdXQgdW5kZWZpbmVkXG5cbiAgaWYgKHNoYXJlZFBhdGhzLmxlbmd0aCA+IDApIHtcbiAgICBhd2FpdCByZXNvbHZlU2VjcmV0cyhzaGFyZWRQYXRocyk7XG4gIH1cbn07XG4iXX0=