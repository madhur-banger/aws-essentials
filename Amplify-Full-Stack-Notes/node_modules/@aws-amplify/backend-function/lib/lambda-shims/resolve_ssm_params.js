/**
 * Reads SSM environment context from a known Amplify environment variable,
 * fetches values from SSM and places those values in the corresponding environment variables
 */
export const internalAmplifyFunctionResolveSsmParams = async (client) => {
    const envPathObject = JSON.parse(process.env.AMPLIFY_SSM_ENV_CONFIG ?? '{}');
    const paths = Object.keys(envPathObject);
    if (paths.length === 0) {
        return;
    }
    let actualSsmClient;
    if (client) {
        actualSsmClient = client;
    }
    else {
        const ssmSdk = await import('@aws-sdk/client-ssm');
        actualSsmClient = new ssmSdk.SSM();
    }
    const resolveSecrets = async (paths) => {
        const response = await actualSsmClient.getParameters({
            Names: paths,
            WithDecryption: true,
        });
        if (response.Parameters && response.Parameters.length > 0) {
            for (const parameter of response.Parameters) {
                if (parameter.Name) {
                    const envKey = Object.keys(envPathObject).find((key) => envPathObject[key].sharedPath === parameter.Name);
                    const envName = envKey
                        ? envPathObject[envKey].name
                        : envPathObject[parameter.Name]?.name;
                    process.env[envName] = parameter.Value;
                }
            }
        }
        return response;
    };
    const response = await resolveSecrets(paths);
    const sharedPaths = (response?.InvalidParameters || [])
        .map((invalidParam) => envPathObject[invalidParam].sharedPath)
        .filter((sharedParam) => !!sharedParam); // this assertion is safe because we are filtering out undefined
    if (sharedPaths.length > 0) {
        await resolveSecrets(sharedPaths);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZV9zc21fcGFyYW1zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xhbWJkYS1zaGltcy9yZXNvbHZlX3NzbV9wYXJhbXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0E7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sdUNBQXVDLEdBQUcsS0FBSyxFQUFFLE1BQVksRUFBRSxFQUFFO0lBQzVFLE1BQU0sYUFBYSxHQUFlLElBQUksQ0FBQyxLQUFLLENBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLElBQUksSUFBSSxDQUMzQyxDQUFDO0lBQ0YsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUV6QyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3RCLE9BQU87S0FDUjtJQUVELElBQUksZUFBb0IsQ0FBQztJQUN6QixJQUFJLE1BQU0sRUFBRTtRQUNWLGVBQWUsR0FBRyxNQUFNLENBQUM7S0FDMUI7U0FBTTtRQUNMLE1BQU0sTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDbkQsZUFBZSxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQ3BDO0lBRUQsTUFBTSxjQUFjLEdBQUcsS0FBSyxFQUFFLEtBQWUsRUFBRSxFQUFFO1FBQy9DLE1BQU0sUUFBUSxHQUFHLE1BQU0sZUFBZSxDQUFDLGFBQWEsQ0FBQztZQUNuRCxLQUFLLEVBQUUsS0FBSztZQUNaLGNBQWMsRUFBRSxJQUFJO1NBQ3JCLENBQUMsQ0FBQztRQUVILElBQUksUUFBUSxDQUFDLFVBQVUsSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDekQsS0FBSyxNQUFNLFNBQVMsSUFBSSxRQUFRLENBQUMsVUFBVSxFQUFFO2dCQUMzQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLEVBQUU7b0JBQ2xCLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUM1QyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsS0FBSyxTQUFTLENBQUMsSUFBSSxDQUMxRCxDQUFDO29CQUNGLE1BQU0sT0FBTyxHQUFHLE1BQU07d0JBQ3BCLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSTt3QkFDNUIsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDO29CQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7aUJBQ3hDO2FBQ0Y7U0FDRjtRQUVELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUMsQ0FBQztJQUVGLE1BQU0sUUFBUSxHQUFHLE1BQU0sY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTdDLE1BQU0sV0FBVyxHQUFHLENBQUMsUUFBUSxFQUFFLGlCQUFpQixJQUFJLEVBQUUsQ0FBQztTQUNwRCxHQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxVQUFVLENBQUM7U0FDN0QsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFhLENBQUMsQ0FBQyxnRUFBZ0U7SUFFdkgsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUMxQixNQUFNLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUNuQztBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBjb2RlIGxvYWRzIGVudmlyb25tZW50IHZhbHVlcyBmcm9tIFNTTSBhbmQgcGxhY2VzIHRoZW0gaW4gdGhlaXIgY29ycmVzcG9uZGluZyBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG4gKiBJZiB0aGVyZSBhcmUgbm8gU1NNIGVudmlyb25tZW50IHZhbHVlcyBmb3IgdGhpcyBmdW5jdGlvbiwgdGhpcyBpcyBhIG5vb3AuXG4gKi9cbmltcG9ydCB0eXBlIHsgU1NNIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LXNzbSc7XG5pbXBvcnQgdHlwZSB7IFNzbUVudlZhcnMgfSBmcm9tICcuLi9mdW5jdGlvbl9lbnZfdHJhbnNsYXRvci5qcyc7XG5cbi8qKlxuICogUmVhZHMgU1NNIGVudmlyb25tZW50IGNvbnRleHQgZnJvbSBhIGtub3duIEFtcGxpZnkgZW52aXJvbm1lbnQgdmFyaWFibGUsXG4gKiBmZXRjaGVzIHZhbHVlcyBmcm9tIFNTTSBhbmQgcGxhY2VzIHRob3NlIHZhbHVlcyBpbiB0aGUgY29ycmVzcG9uZGluZyBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbiAqL1xuZXhwb3J0IGNvbnN0IGludGVybmFsQW1wbGlmeUZ1bmN0aW9uUmVzb2x2ZVNzbVBhcmFtcyA9IGFzeW5jIChjbGllbnQ/OiBTU00pID0+IHtcbiAgY29uc3QgZW52UGF0aE9iamVjdDogU3NtRW52VmFycyA9IEpTT04ucGFyc2UoXG4gICAgcHJvY2Vzcy5lbnYuQU1QTElGWV9TU01fRU5WX0NPTkZJRyA/PyAne30nXG4gICk7XG4gIGNvbnN0IHBhdGhzID0gT2JqZWN0LmtleXMoZW52UGF0aE9iamVjdCk7XG5cbiAgaWYgKHBhdGhzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBhY3R1YWxTc21DbGllbnQ6IFNTTTtcbiAgaWYgKGNsaWVudCkge1xuICAgIGFjdHVhbFNzbUNsaWVudCA9IGNsaWVudDtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBzc21TZGsgPSBhd2FpdCBpbXBvcnQoJ0Bhd3Mtc2RrL2NsaWVudC1zc20nKTtcbiAgICBhY3R1YWxTc21DbGllbnQgPSBuZXcgc3NtU2RrLlNTTSgpO1xuICB9XG5cbiAgY29uc3QgcmVzb2x2ZVNlY3JldHMgPSBhc3luYyAocGF0aHM6IHN0cmluZ1tdKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhY3R1YWxTc21DbGllbnQuZ2V0UGFyYW1ldGVycyh7XG4gICAgICBOYW1lczogcGF0aHMsXG4gICAgICBXaXRoRGVjcnlwdGlvbjogdHJ1ZSxcbiAgICB9KTtcblxuICAgIGlmIChyZXNwb25zZS5QYXJhbWV0ZXJzICYmIHJlc3BvbnNlLlBhcmFtZXRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChjb25zdCBwYXJhbWV0ZXIgb2YgcmVzcG9uc2UuUGFyYW1ldGVycykge1xuICAgICAgICBpZiAocGFyYW1ldGVyLk5hbWUpIHtcbiAgICAgICAgICBjb25zdCBlbnZLZXkgPSBPYmplY3Qua2V5cyhlbnZQYXRoT2JqZWN0KS5maW5kKFxuICAgICAgICAgICAgKGtleSkgPT4gZW52UGF0aE9iamVjdFtrZXldLnNoYXJlZFBhdGggPT09IHBhcmFtZXRlci5OYW1lXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCBlbnZOYW1lID0gZW52S2V5XG4gICAgICAgICAgICA/IGVudlBhdGhPYmplY3RbZW52S2V5XS5uYW1lXG4gICAgICAgICAgICA6IGVudlBhdGhPYmplY3RbcGFyYW1ldGVyLk5hbWVdPy5uYW1lO1xuICAgICAgICAgIHByb2Nlc3MuZW52W2Vudk5hbWVdID0gcGFyYW1ldGVyLlZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9O1xuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVzb2x2ZVNlY3JldHMocGF0aHMpO1xuXG4gIGNvbnN0IHNoYXJlZFBhdGhzID0gKHJlc3BvbnNlPy5JbnZhbGlkUGFyYW1ldGVycyB8fCBbXSlcbiAgICAubWFwKChpbnZhbGlkUGFyYW0pID0+IGVudlBhdGhPYmplY3RbaW52YWxpZFBhcmFtXS5zaGFyZWRQYXRoKVxuICAgIC5maWx0ZXIoKHNoYXJlZFBhcmFtKSA9PiAhIXNoYXJlZFBhcmFtKSBhcyBzdHJpbmdbXTsgLy8gdGhpcyBhc3NlcnRpb24gaXMgc2FmZSBiZWNhdXNlIHdlIGFyZSBmaWx0ZXJpbmcgb3V0IHVuZGVmaW5lZFxuXG4gIGlmIChzaGFyZWRQYXRocy5sZW5ndGggPiAwKSB7XG4gICAgYXdhaXQgcmVzb2x2ZVNlY3JldHMoc2hhcmVkUGF0aHMpO1xuICB9XG59O1xuIl19