import { BackendSecret, ConstructFactory, FunctionResources, ResourceAccessAcceptorFactory, ResourceProvider, StackProvider } from '@aws-amplify/plugin-types';
export type AddEnvironmentFactory = {
    addEnvironment: (key: string, value: string | BackendSecret) => void;
};
export type CronSchedule = `${string} ${string} ${string} ${string} ${string}` | `${string} ${string} ${string} ${string} ${string} ${string}`;
export type TimeInterval = `every ${number}m` | `every ${number}h` | `every day` | `every week` | `every month` | `every year`;
export type FunctionSchedule = TimeInterval | CronSchedule;
/**
 * Entry point for defining a function in the Amplify ecosystem
 */
export declare const defineFunction: (props?: FunctionProps) => ConstructFactory<ResourceProvider<FunctionResources> & ResourceAccessAcceptorFactory & AddEnvironmentFactory & StackProvider>;
export type FunctionProps = {
    /**
     * A name for the function.
     * Defaults to the basename of the entry path if specified.
     * If no entry is specified, defaults to the directory name in which this function is defined.
     *
     * Example:
     * If entry is `./scheduled-db-backup.ts` the name will default to "scheduled-db-backup"
     * If entry is not set and the function is defined in `amplify/functions/db-backup/resource.ts` the name will default to "db-backup"
     */
    name?: string;
    /**
     * The path to the file that contains the function entry point.
     * If this is a relative path, it is computed relative to the file where this function is defined
     *
     * Defaults to './handler.ts'
     */
    entry?: string;
    /**
     * An amount of time in seconds between 1 second and 15 minutes.
     * Must be a whole number.
     * Default is 3 seconds.
     */
    timeoutSeconds?: number;
    /**
     * An amount of memory (RAM) to allocate to the function between 128 and 10240 MB.
     * Must be a whole number.
     * Default is 128MB.
     */
    memoryMB?: number;
    /**
     * Environment variables that will be available during function execution
     */
    environment?: Record<string, string | BackendSecret>;
    /**
     * Node runtime version for the lambda environment.
     *
     * Defaults to the oldest NodeJS LTS version. See https://nodejs.org/en/about/previous-releases
     */
    runtime?: NodeVersion;
    /**
     * A time interval string to periodically run the function.
     * This can be either a string of `"every <positive whole number><m (minute) or h (hour)>"`, `"every day|week|month|year"` or cron expression.
     * Defaults to no scheduling for the function.
     * @example
     * schedule: "every 5m"
     * @example
     * schedule: "every week"
     * @example
     * schedule: "0 9 ? * 2 *" // every Monday at 9am
     */
    schedule?: FunctionSchedule | FunctionSchedule[];
    /**
     * Attach Lambda layers to a function
     * - A Lambda layer is represented by an object of key/value pair where the key is the module name that is exported from your layer and the value is the ARN of the layer. The key (module name) is used to externalize the module dependency so it doesn't get bundled with your lambda function
     * - Maximum of 5 layers can be attached to a function and must be in the same region as the function.
     * @example
     * layers: {
     *    "@aws-lambda-powertools/logger": "arn:aws:lambda:<current-region>:094274105915:layer:AWSLambdaPowertoolsTypeScriptV2:11"
     * },
     * @see [Amplify documentation for Lambda layers](https://docs.amplify.aws/react/build-a-backend/functions/add-lambda-layers)
     * @see [AWS documentation for Lambda layers](https://docs.aws.amazon.com/lambda/latest/dg/chapter-layers.html)
     */
    layers?: Record<string, string>;
    bundling?: FunctionBundlingOptions;
};
export type FunctionBundlingOptions = {
    /**
     * Whether to minify the function code.
     *
     * Defaults to true.
     */
    minify?: boolean;
};
export type NodeVersion = 16 | 18 | 20;
//# sourceMappingURL=factory.d.ts.map