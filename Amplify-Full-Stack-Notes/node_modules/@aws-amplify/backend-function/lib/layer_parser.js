import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * Parses Lambda Layer ARNs for a function
 */
export class FunctionLayerArnParser {
    arnPattern = new RegExp('arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+:[0-9]+');
    /**
     * Parse the layers for a function
     * @param layers - Layers to be attached to the function
     * @param functionName - Name of the function
     * @returns Valid layers for the function
     * @throws AmplifyUserError if the layer ARN is invalid
     * @throws AmplifyUserError if the number of layers exceeds the limit
     */
    parseLayers(layers, functionName) {
        const validLayers = {};
        const uniqueArns = new Set();
        for (const [key, arn] of Object.entries(layers)) {
            if (!this.isValidLayerArn(arn)) {
                throw new AmplifyUserError('InvalidLayerArnFormatError', {
                    message: `Invalid ARN format for layer: ${arn}`,
                    resolution: `Update the layer ARN with the expected format: arn:aws:lambda:<current-region>:<account-id>:layer:<layer-name>:<version> for function: ${functionName}`,
                });
            }
            // Add to validLayers and uniqueArns only if the ARN hasn't been added already
            if (!uniqueArns.has(arn)) {
                uniqueArns.add(arn);
                validLayers[key] = arn;
            }
        }
        // Validate the number of unique layers
        this.validateLayerCount(uniqueArns);
        return validLayers;
    }
    /**
     * Validate the ARN format for a Lambda Layer
     */
    isValidLayerArn(arn) {
        return this.arnPattern.test(arn);
    }
    /**
     * Validate the number of layers attached to a function
     * @see https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#function-configuration-deployment-and-execution
     */
    validateLayerCount(uniqueArns) {
        if (uniqueArns.size > 5) {
            throw new AmplifyUserError('MaximumLayersReachedError', {
                message: 'A maximum of 5 unique layers can be attached to a function.',
                resolution: 'Remove unused layers in your function',
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5ZXJfcGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xheWVyX3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUU5RDs7R0FFRztBQUNILE1BQU0sT0FBTyxzQkFBc0I7SUFDekIsVUFBVSxHQUFHLElBQUksTUFBTSxDQUM3Qiw0RUFBNEUsQ0FDN0UsQ0FBQztJQUVGOzs7Ozs7O09BT0c7SUFDSCxXQUFXLENBQ1QsTUFBOEIsRUFDOUIsWUFBb0I7UUFFcEIsTUFBTSxXQUFXLEdBQTJCLEVBQUUsQ0FBQztRQUMvQyxNQUFNLFVBQVUsR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFDO1FBRXJDLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQy9DLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUM5QixNQUFNLElBQUksZ0JBQWdCLENBQUMsNEJBQTRCLEVBQUU7b0JBQ3ZELE9BQU8sRUFBRSxpQ0FBaUMsR0FBRyxFQUFFO29CQUMvQyxVQUFVLEVBQUUsMElBQTBJLFlBQVksRUFBRTtpQkFDckssQ0FBQyxDQUFDO2FBQ0o7WUFFRCw4RUFBOEU7WUFDOUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3hCLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3BCLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7YUFDeEI7U0FDRjtRQUVELHVDQUF1QztRQUN2QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFcEMsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVEOztPQUVHO0lBQ0ssZUFBZSxDQUFDLEdBQVc7UUFDakMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssa0JBQWtCLENBQUMsVUFBdUI7UUFDaEQsSUFBSSxVQUFVLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRTtZQUN2QixNQUFNLElBQUksZ0JBQWdCLENBQUMsMkJBQTJCLEVBQUU7Z0JBQ3RELE9BQU8sRUFBRSw2REFBNkQ7Z0JBQ3RFLFVBQVUsRUFBRSx1Q0FBdUM7YUFDcEQsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbXBsaWZ5VXNlckVycm9yIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuXG4vKipcbiAqIFBhcnNlcyBMYW1iZGEgTGF5ZXIgQVJOcyBmb3IgYSBmdW5jdGlvblxuICovXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25MYXllckFyblBhcnNlciB7XG4gIHByaXZhdGUgYXJuUGF0dGVybiA9IG5ldyBSZWdFeHAoXG4gICAgJ2FybjpbYS16QS1aMC05LV0rOmxhbWJkYTpbYS16QS1aMC05LV0rOlxcXFxkezEyfTpsYXllcjpbYS16QS1aMC05LV9dKzpbMC05XSsnXG4gICk7XG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSBsYXllcnMgZm9yIGEgZnVuY3Rpb25cbiAgICogQHBhcmFtIGxheWVycyAtIExheWVycyB0byBiZSBhdHRhY2hlZCB0byB0aGUgZnVuY3Rpb25cbiAgICogQHBhcmFtIGZ1bmN0aW9uTmFtZSAtIE5hbWUgb2YgdGhlIGZ1bmN0aW9uXG4gICAqIEByZXR1cm5zIFZhbGlkIGxheWVycyBmb3IgdGhlIGZ1bmN0aW9uXG4gICAqIEB0aHJvd3MgQW1wbGlmeVVzZXJFcnJvciBpZiB0aGUgbGF5ZXIgQVJOIGlzIGludmFsaWRcbiAgICogQHRocm93cyBBbXBsaWZ5VXNlckVycm9yIGlmIHRoZSBudW1iZXIgb2YgbGF5ZXJzIGV4Y2VlZHMgdGhlIGxpbWl0XG4gICAqL1xuICBwYXJzZUxheWVycyhcbiAgICBsYXllcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sXG4gICAgZnVuY3Rpb25OYW1lOiBzdHJpbmdcbiAgKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB7XG4gICAgY29uc3QgdmFsaWRMYXllcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgICBjb25zdCB1bmlxdWVBcm5zID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbiAgICBmb3IgKGNvbnN0IFtrZXksIGFybl0gb2YgT2JqZWN0LmVudHJpZXMobGF5ZXJzKSkge1xuICAgICAgaWYgKCF0aGlzLmlzVmFsaWRMYXllckFybihhcm4pKSB7XG4gICAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKCdJbnZhbGlkTGF5ZXJBcm5Gb3JtYXRFcnJvcicsIHtcbiAgICAgICAgICBtZXNzYWdlOiBgSW52YWxpZCBBUk4gZm9ybWF0IGZvciBsYXllcjogJHthcm59YCxcbiAgICAgICAgICByZXNvbHV0aW9uOiBgVXBkYXRlIHRoZSBsYXllciBBUk4gd2l0aCB0aGUgZXhwZWN0ZWQgZm9ybWF0OiBhcm46YXdzOmxhbWJkYTo8Y3VycmVudC1yZWdpb24+OjxhY2NvdW50LWlkPjpsYXllcjo8bGF5ZXItbmFtZT46PHZlcnNpb24+IGZvciBmdW5jdGlvbjogJHtmdW5jdGlvbk5hbWV9YCxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCB0byB2YWxpZExheWVycyBhbmQgdW5pcXVlQXJucyBvbmx5IGlmIHRoZSBBUk4gaGFzbid0IGJlZW4gYWRkZWQgYWxyZWFkeVxuICAgICAgaWYgKCF1bmlxdWVBcm5zLmhhcyhhcm4pKSB7XG4gICAgICAgIHVuaXF1ZUFybnMuYWRkKGFybik7XG4gICAgICAgIHZhbGlkTGF5ZXJzW2tleV0gPSBhcm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVmFsaWRhdGUgdGhlIG51bWJlciBvZiB1bmlxdWUgbGF5ZXJzXG4gICAgdGhpcy52YWxpZGF0ZUxheWVyQ291bnQodW5pcXVlQXJucyk7XG5cbiAgICByZXR1cm4gdmFsaWRMYXllcnM7XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGUgdGhlIEFSTiBmb3JtYXQgZm9yIGEgTGFtYmRhIExheWVyXG4gICAqL1xuICBwcml2YXRlIGlzVmFsaWRMYXllckFybihhcm46IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmFyblBhdHRlcm4udGVzdChhcm4pO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlIHRoZSBudW1iZXIgb2YgbGF5ZXJzIGF0dGFjaGVkIHRvIGEgZnVuY3Rpb25cbiAgICogQHNlZSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vbGFtYmRhL2xhdGVzdC9kZy9nZXR0aW5nc3RhcnRlZC1saW1pdHMuaHRtbCNmdW5jdGlvbi1jb25maWd1cmF0aW9uLWRlcGxveW1lbnQtYW5kLWV4ZWN1dGlvblxuICAgKi9cbiAgcHJpdmF0ZSB2YWxpZGF0ZUxheWVyQ291bnQodW5pcXVlQXJuczogU2V0PHN0cmluZz4pOiB2b2lkIHtcbiAgICBpZiAodW5pcXVlQXJucy5zaXplID4gNSkge1xuICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoJ01heGltdW1MYXllcnNSZWFjaGVkRXJyb3InLCB7XG4gICAgICAgIG1lc3NhZ2U6ICdBIG1heGltdW0gb2YgNSB1bmlxdWUgbGF5ZXJzIGNhbiBiZSBhdHRhY2hlZCB0byBhIGZ1bmN0aW9uLicsXG4gICAgICAgIHJlc29sdXRpb246ICdSZW1vdmUgdW51c2VkIGxheWVycyBpbiB5b3VyIGZ1bmN0aW9uJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIl19