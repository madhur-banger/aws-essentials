import fs from 'fs';
import { staticEnvironmentVariables } from './static_env_types.js';
import path from 'path';
import { EOL } from 'os';
/**
 * Generates a typed process.env shim for environment variables
 */
export class FunctionEnvironmentTypeGenerator {
    functionName;
    header = '// This file is auto-generated by Amplify. Edits will be overwritten.';
    // The variable gets updated when the fully typed file is updated.
    envAssignment = 'export const env = process.env';
    typeDefFilePath;
    indentation = '  ';
    /**
     * Initialize typed process.env shim file name and location
     */
    constructor(functionName) {
        this.functionName = functionName;
        this.typeDefFilePath = `${process.cwd()}/.amplify/generated/env/${this.functionName}.ts`;
    }
    /**
     * Generate a typed process.env shim
     */
    generateTypedProcessEnvShim(amplifyBackendEnvVars) {
        const lambdaEnvVarTypeName = 'LambdaProvidedEnvVars';
        const amplifyBackendEnvVarTypeName = 'AmplifyBackendEnvVars';
        const declarations = [];
        // Add Lambda runtime environment variables to the typed shim
        declarations.push(`/** Lambda runtime environment variables, see https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime */`);
        declarations.push(`type ${lambdaEnvVarTypeName} = {`);
        for (const key in staticEnvironmentVariables) {
            const comment = `${this.indentation}/** ${staticEnvironmentVariables[key]} */`;
            const declaration = `${this.indentation}${key}: string;`;
            declarations.push(comment + EOL + declaration + EOL);
        }
        declarations.push(`};${EOL}`);
        /**
         * Add Amplify backend environment variables to the typed shim which can be either of the following:
         * 1. Defined by the customer passing env vars to the environment parameter for defineFunction
         * 2. Defined by resource access mechanisms
         */
        declarations.push(`/** Amplify backend environment variables available at runtime, this includes environment variables defined in \`defineFunction\` and by cross resource mechanisms */`);
        declarations.push(`type ${amplifyBackendEnvVarTypeName} = {`);
        amplifyBackendEnvVars.forEach((envName) => {
            const declaration = `${this.indentation}${envName}: string;`;
            declarations.push(declaration);
        });
        declarations.push(`};${EOL}`);
        const content = `${this.header}${EOL}${this.envAssignment} as unknown as ${lambdaEnvVarTypeName} & ${amplifyBackendEnvVarTypeName};${EOL}${EOL}${declarations.join(EOL)}`;
        this.writeShimFile(content);
    }
    /**
     * Generate an any-typed process.env shim if doesn't exist
     */
    generateProcessEnvShim = () => {
        // Create an "any" typed variable while creating the initial file to keep TSC happy
        // in case the synth fails and doesn't generate the typed shim.
        // We run TSC regardless after the synth to show more relevant TS errors and this prevents showing env related type errors.
        const content = `${this.header}${EOL}${this.envAssignment} as any;`;
        this.writeShimFile(content);
    };
    writeShimFile = (content) => {
        const typeDefFileDirname = path.dirname(this.typeDefFilePath);
        if (!fs.existsSync(typeDefFileDirname)) {
            fs.mkdirSync(typeDefFileDirname, { recursive: true });
        }
        fs.writeFileSync(this.typeDefFilePath, content);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb25fZW52X3R5cGVfZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Z1bmN0aW9uX2Vudl90eXBlX2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDcEIsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbkUsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFFekI7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZ0NBQWdDO0lBY2Q7SUFiWixNQUFNLEdBQ3JCLHVFQUF1RSxDQUFDO0lBRTFFLGtFQUFrRTtJQUNqRCxhQUFhLEdBQUcsZ0NBQWdDLENBQUM7SUFFMUQsZUFBZSxDQUFTO0lBRXhCLFdBQVcsR0FBVyxJQUFJLENBQUM7SUFFbkM7O09BRUc7SUFDSCxZQUE2QixZQUFvQjtRQUFwQixpQkFBWSxHQUFaLFlBQVksQ0FBUTtRQUMvQyxJQUFJLENBQUMsZUFBZSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSwyQkFDckMsSUFBSSxDQUFDLFlBQ1AsS0FBSyxDQUFDO0lBQ1IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsMkJBQTJCLENBQUMscUJBQStCO1FBQ3pELE1BQU0sb0JBQW9CLEdBQUcsdUJBQXVCLENBQUM7UUFDckQsTUFBTSw0QkFBNEIsR0FBRyx1QkFBdUIsQ0FBQztRQUU3RCxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUM7UUFFeEIsNkRBQTZEO1FBQzdELFlBQVksQ0FBQyxJQUFJLENBQ2Ysd0pBQXdKLENBQ3pKLENBQUM7UUFDRixZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsb0JBQW9CLE1BQU0sQ0FBQyxDQUFDO1FBQ3RELEtBQUssTUFBTSxHQUFHLElBQUksMEJBQTBCLEVBQUU7WUFDNUMsTUFBTSxPQUFPLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxPQUFPLDBCQUEwQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7WUFDL0UsTUFBTSxXQUFXLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsV0FBVyxDQUFDO1lBRXpELFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsR0FBRyxXQUFXLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDdEQ7UUFDRCxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQztRQUU5Qjs7OztXQUlHO1FBQ0gsWUFBWSxDQUFDLElBQUksQ0FDZix1S0FBdUssQ0FDeEssQ0FBQztRQUNGLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSw0QkFBNEIsTUFBTSxDQUFDLENBQUM7UUFDOUQscUJBQXFCLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDeEMsTUFBTSxXQUFXLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sV0FBVyxDQUFDO1lBRTdELFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7UUFDSCxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQztRQUU5QixNQUFNLE9BQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxHQUNsQyxJQUFJLENBQUMsYUFDUCxrQkFBa0Isb0JBQW9CLE1BQU0sNEJBQTRCLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUN2RyxHQUFHLENBQ0osRUFBRSxDQUFDO1FBRUosSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxzQkFBc0IsR0FBRyxHQUFHLEVBQUU7UUFDNUIsbUZBQW1GO1FBQ25GLCtEQUErRDtRQUMvRCwySEFBMkg7UUFDM0gsTUFBTSxPQUFPLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsYUFBYSxVQUFVLENBQUM7UUFDcEUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QixDQUFDLENBQUM7SUFFTSxhQUFhLEdBQUcsQ0FBQyxPQUFlLEVBQUUsRUFBRTtRQUMxQyxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLEVBQUU7WUFDdEMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZEO1FBRUQsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2xELENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCB7IHN0YXRpY0Vudmlyb25tZW50VmFyaWFibGVzIH0gZnJvbSAnLi9zdGF0aWNfZW52X3R5cGVzLmpzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgRU9MIH0gZnJvbSAnb3MnO1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHR5cGVkIHByb2Nlc3MuZW52IHNoaW0gZm9yIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICovXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25FbnZpcm9ubWVudFR5cGVHZW5lcmF0b3Ige1xuICBwcml2YXRlIHJlYWRvbmx5IGhlYWRlciA9XG4gICAgJy8vIFRoaXMgZmlsZSBpcyBhdXRvLWdlbmVyYXRlZCBieSBBbXBsaWZ5LiBFZGl0cyB3aWxsIGJlIG92ZXJ3cml0dGVuLic7XG5cbiAgLy8gVGhlIHZhcmlhYmxlIGdldHMgdXBkYXRlZCB3aGVuIHRoZSBmdWxseSB0eXBlZCBmaWxlIGlzIHVwZGF0ZWQuXG4gIHByaXZhdGUgcmVhZG9ubHkgZW52QXNzaWdubWVudCA9ICdleHBvcnQgY29uc3QgZW52ID0gcHJvY2Vzcy5lbnYnO1xuXG4gIHByaXZhdGUgdHlwZURlZkZpbGVQYXRoOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBpbmRlbnRhdGlvbjogc3RyaW5nID0gJyAgJztcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0eXBlZCBwcm9jZXNzLmVudiBzaGltIGZpbGUgbmFtZSBhbmQgbG9jYXRpb25cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZnVuY3Rpb25OYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLnR5cGVEZWZGaWxlUGF0aCA9IGAke3Byb2Nlc3MuY3dkKCl9Ly5hbXBsaWZ5L2dlbmVyYXRlZC9lbnYvJHtcbiAgICAgIHRoaXMuZnVuY3Rpb25OYW1lXG4gICAgfS50c2A7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSB0eXBlZCBwcm9jZXNzLmVudiBzaGltXG4gICAqL1xuICBnZW5lcmF0ZVR5cGVkUHJvY2Vzc0VudlNoaW0oYW1wbGlmeUJhY2tlbmRFbnZWYXJzOiBzdHJpbmdbXSkge1xuICAgIGNvbnN0IGxhbWJkYUVudlZhclR5cGVOYW1lID0gJ0xhbWJkYVByb3ZpZGVkRW52VmFycyc7XG4gICAgY29uc3QgYW1wbGlmeUJhY2tlbmRFbnZWYXJUeXBlTmFtZSA9ICdBbXBsaWZ5QmFja2VuZEVudlZhcnMnO1xuXG4gICAgY29uc3QgZGVjbGFyYXRpb25zID0gW107XG5cbiAgICAvLyBBZGQgTGFtYmRhIHJ1bnRpbWUgZW52aXJvbm1lbnQgdmFyaWFibGVzIHRvIHRoZSB0eXBlZCBzaGltXG4gICAgZGVjbGFyYXRpb25zLnB1c2goXG4gICAgICBgLyoqIExhbWJkYSBydW50aW1lIGVudmlyb25tZW50IHZhcmlhYmxlcywgc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9sYW1iZGEvbGF0ZXN0L2RnL2NvbmZpZ3VyYXRpb24tZW52dmFycy5odG1sI2NvbmZpZ3VyYXRpb24tZW52dmFycy1ydW50aW1lICovYFxuICAgICk7XG4gICAgZGVjbGFyYXRpb25zLnB1c2goYHR5cGUgJHtsYW1iZGFFbnZWYXJUeXBlTmFtZX0gPSB7YCk7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc3RhdGljRW52aXJvbm1lbnRWYXJpYWJsZXMpIHtcbiAgICAgIGNvbnN0IGNvbW1lbnQgPSBgJHt0aGlzLmluZGVudGF0aW9ufS8qKiAke3N0YXRpY0Vudmlyb25tZW50VmFyaWFibGVzW2tleV19ICovYDtcbiAgICAgIGNvbnN0IGRlY2xhcmF0aW9uID0gYCR7dGhpcy5pbmRlbnRhdGlvbn0ke2tleX06IHN0cmluZztgO1xuXG4gICAgICBkZWNsYXJhdGlvbnMucHVzaChjb21tZW50ICsgRU9MICsgZGVjbGFyYXRpb24gKyBFT0wpO1xuICAgIH1cbiAgICBkZWNsYXJhdGlvbnMucHVzaChgfTske0VPTH1gKTtcblxuICAgIC8qKlxuICAgICAqIEFkZCBBbXBsaWZ5IGJhY2tlbmQgZW52aXJvbm1lbnQgdmFyaWFibGVzIHRvIHRoZSB0eXBlZCBzaGltIHdoaWNoIGNhbiBiZSBlaXRoZXIgb2YgdGhlIGZvbGxvd2luZzpcbiAgICAgKiAxLiBEZWZpbmVkIGJ5IHRoZSBjdXN0b21lciBwYXNzaW5nIGVudiB2YXJzIHRvIHRoZSBlbnZpcm9ubWVudCBwYXJhbWV0ZXIgZm9yIGRlZmluZUZ1bmN0aW9uXG4gICAgICogMi4gRGVmaW5lZCBieSByZXNvdXJjZSBhY2Nlc3MgbWVjaGFuaXNtc1xuICAgICAqL1xuICAgIGRlY2xhcmF0aW9ucy5wdXNoKFxuICAgICAgYC8qKiBBbXBsaWZ5IGJhY2tlbmQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGF2YWlsYWJsZSBhdCBydW50aW1lLCB0aGlzIGluY2x1ZGVzIGVudmlyb25tZW50IHZhcmlhYmxlcyBkZWZpbmVkIGluIFxcYGRlZmluZUZ1bmN0aW9uXFxgIGFuZCBieSBjcm9zcyByZXNvdXJjZSBtZWNoYW5pc21zICovYFxuICAgICk7XG4gICAgZGVjbGFyYXRpb25zLnB1c2goYHR5cGUgJHthbXBsaWZ5QmFja2VuZEVudlZhclR5cGVOYW1lfSA9IHtgKTtcbiAgICBhbXBsaWZ5QmFja2VuZEVudlZhcnMuZm9yRWFjaCgoZW52TmFtZSkgPT4ge1xuICAgICAgY29uc3QgZGVjbGFyYXRpb24gPSBgJHt0aGlzLmluZGVudGF0aW9ufSR7ZW52TmFtZX06IHN0cmluZztgO1xuXG4gICAgICBkZWNsYXJhdGlvbnMucHVzaChkZWNsYXJhdGlvbik7XG4gICAgfSk7XG4gICAgZGVjbGFyYXRpb25zLnB1c2goYH07JHtFT0x9YCk7XG5cbiAgICBjb25zdCBjb250ZW50ID0gYCR7dGhpcy5oZWFkZXJ9JHtFT0x9JHtcbiAgICAgIHRoaXMuZW52QXNzaWdubWVudFxuICAgIH0gYXMgdW5rbm93biBhcyAke2xhbWJkYUVudlZhclR5cGVOYW1lfSAmICR7YW1wbGlmeUJhY2tlbmRFbnZWYXJUeXBlTmFtZX07JHtFT0x9JHtFT0x9JHtkZWNsYXJhdGlvbnMuam9pbihcbiAgICAgIEVPTFxuICAgICl9YDtcblxuICAgIHRoaXMud3JpdGVTaGltRmlsZShjb250ZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhbiBhbnktdHlwZWQgcHJvY2Vzcy5lbnYgc2hpbSBpZiBkb2Vzbid0IGV4aXN0XG4gICAqL1xuICBnZW5lcmF0ZVByb2Nlc3NFbnZTaGltID0gKCkgPT4ge1xuICAgIC8vIENyZWF0ZSBhbiBcImFueVwiIHR5cGVkIHZhcmlhYmxlIHdoaWxlIGNyZWF0aW5nIHRoZSBpbml0aWFsIGZpbGUgdG8ga2VlcCBUU0MgaGFwcHlcbiAgICAvLyBpbiBjYXNlIHRoZSBzeW50aCBmYWlscyBhbmQgZG9lc24ndCBnZW5lcmF0ZSB0aGUgdHlwZWQgc2hpbS5cbiAgICAvLyBXZSBydW4gVFNDIHJlZ2FyZGxlc3MgYWZ0ZXIgdGhlIHN5bnRoIHRvIHNob3cgbW9yZSByZWxldmFudCBUUyBlcnJvcnMgYW5kIHRoaXMgcHJldmVudHMgc2hvd2luZyBlbnYgcmVsYXRlZCB0eXBlIGVycm9ycy5cbiAgICBjb25zdCBjb250ZW50ID0gYCR7dGhpcy5oZWFkZXJ9JHtFT0x9JHt0aGlzLmVudkFzc2lnbm1lbnR9IGFzIGFueTtgO1xuICAgIHRoaXMud3JpdGVTaGltRmlsZShjb250ZW50KTtcbiAgfTtcblxuICBwcml2YXRlIHdyaXRlU2hpbUZpbGUgPSAoY29udGVudDogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgdHlwZURlZkZpbGVEaXJuYW1lID0gcGF0aC5kaXJuYW1lKHRoaXMudHlwZURlZkZpbGVQYXRoKTtcblxuICAgIGlmICghZnMuZXhpc3RzU3luYyh0eXBlRGVmRmlsZURpcm5hbWUpKSB7XG4gICAgICBmcy5ta2RpclN5bmModHlwZURlZkZpbGVEaXJuYW1lLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICBmcy53cml0ZUZpbGVTeW5jKHRoaXMudHlwZURlZkZpbGVQYXRoLCBjb250ZW50KTtcbiAgfTtcbn1cbiJdfQ==