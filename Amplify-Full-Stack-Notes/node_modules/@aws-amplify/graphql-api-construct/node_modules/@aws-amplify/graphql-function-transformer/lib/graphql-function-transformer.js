"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionTransformer = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const graphql_directives_1 = require("@aws-amplify/graphql-directives");
const lambda = __importStar(require("aws-cdk-lib/aws-lambda"));
const aws_appsync_1 = require("aws-cdk-lib/aws-appsync");
const cdk = __importStar(require("aws-cdk-lib"));
const graphql_mapping_template_1 = require("graphql-mapping-template");
const graphql_transformer_common_1 = require("graphql-transformer-common");
const graphql_1 = require("graphql");
const FUNCTION_DIRECTIVE_STACK = 'FunctionDirectiveStack';
class FunctionTransformer extends graphql_transformer_core_1.TransformerPluginBase {
    constructor(functionNameMap) {
        super('amplify-function-transformer', graphql_directives_1.FunctionDirective.definition);
        this.functionNameMap = functionNameMap;
        this.resolverGroups = new Map();
        this.field = (parent, definition, directive, acc) => {
            const directiveWrapped = new graphql_transformer_core_1.DirectiveWrapper(directive);
            const args = directiveWrapped.getArguments({
                resolverTypeName: parent.name.value,
                resolverFieldName: definition.name.value,
                invocationType: graphql_directives_1.FunctionDirective.defaults.invocationType,
            }, (0, graphql_transformer_core_1.generateGetArgumentsInput)(acc.transformParameters));
            validate(args, definition, acc);
            let resolver = this.resolverGroups.get(definition);
            if (resolver === undefined) {
                resolver = [];
                this.resolverGroups.set(definition, resolver);
            }
            resolver.push(args);
        };
        this.generateResolvers = (context) => {
            if (this.resolverGroups.size === 0) {
                return;
            }
            const stack = context.stackManager.createStack(FUNCTION_DIRECTIVE_STACK);
            const createdResources = new Map();
            const env = context.synthParameters.amplifyEnvironmentName;
            stack.templateOptions.templateFormatVersion = '2010-09-09';
            stack.templateOptions.description = 'An auto-generated nested stack for the @function directive.';
            new cdk.CfnCondition(stack, graphql_transformer_common_1.ResourceConstants.CONDITIONS.HasEnvironmentParameter, {
                expression: cdk.Fn.conditionNot(cdk.Fn.conditionEquals(env, graphql_transformer_common_1.ResourceConstants.NONE)),
            });
            this.resolverGroups.forEach((resolverFns) => {
                resolverFns.forEach((config) => {
                    var _a;
                    const dataSourceId = graphql_transformer_common_1.FunctionResourceIDs.FunctionDataSourceID(config.name, config.region, config.accountId);
                    if (!createdResources.has(dataSourceId)) {
                        const referencedFunction = this.functionNameMap && config.name in this.functionNameMap
                            ? this.functionNameMap[config.name]
                            : lambda.Function.fromFunctionAttributes(stack, `${dataSourceId}Function`, {
                                functionArn: lambdaArnResource(env, config.name, config.region, config.accountId),
                            });
                        const dataSourceScope = context.stackManager.getScopeFor(dataSourceId, FUNCTION_DIRECTIVE_STACK);
                        const dataSource = context.api.host.addLambdaDataSource(dataSourceId, referencedFunction, {}, dataSourceScope);
                        createdResources.set(dataSourceId, dataSource);
                    }
                    const functionId = graphql_transformer_common_1.FunctionResourceIDs.FunctionAppSyncFunctionConfigurationID(config.name, config.region, config.accountId);
                    let func = createdResources.get(functionId);
                    if (func === undefined) {
                        const funcScope = context.stackManager.getScopeFor(functionId, FUNCTION_DIRECTIVE_STACK);
                        func = context.api.host.addAppSyncVtlRuntimeFunction(functionId, graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString((0, graphql_mapping_template_1.printBlock)(`Invoke AWS Lambda data source: ${dataSourceId}`)((0, graphql_mapping_template_1.obj)({
                            version: (0, graphql_mapping_template_1.str)('2018-05-29'),
                            operation: (0, graphql_mapping_template_1.str)('Invoke'),
                            payload: (0, graphql_mapping_template_1.obj)({
                                typeName: (0, graphql_mapping_template_1.ref)('util.toJson($ctx.stash.get("typeName"))'),
                                fieldName: (0, graphql_mapping_template_1.ref)('util.toJson($ctx.stash.get("fieldName"))'),
                                arguments: (0, graphql_mapping_template_1.ref)('util.toJson($ctx.arguments)'),
                                identity: (0, graphql_mapping_template_1.ref)('util.toJson($ctx.identity)'),
                                source: (0, graphql_mapping_template_1.ref)('util.toJson($ctx.source)'),
                                request: (0, graphql_mapping_template_1.ref)('util.toJson($ctx.request)'),
                                prev: (0, graphql_mapping_template_1.ref)('util.toJson($ctx.prev)'),
                            }),
                            invocationType: (0, graphql_mapping_template_1.str)(config.invocationType),
                        })), `${functionId}.req.vtl`), graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(responseMappingTemplate(config), `${functionId}.res.vtl`), dataSourceId, funcScope);
                        createdResources.set(functionId, func);
                    }
                    const resolverId = graphql_transformer_common_1.ResolverResourceIDs.ResolverResourceID(config.resolverTypeName, config.resolverFieldName);
                    let resolver = createdResources.get(resolverId);
                    const requestTemplate = [
                        (0, graphql_mapping_template_1.qref)(`$ctx.stash.put("typeName", "${config.resolverTypeName}")`),
                        (0, graphql_mapping_template_1.qref)(`$ctx.stash.put("fieldName", "${config.resolverFieldName}")`),
                    ];
                    const authModes = [context.authConfig.defaultAuthentication, ...(context.authConfig.additionalAuthenticationProviders || [])].map((mode) => mode === null || mode === void 0 ? void 0 : mode.authenticationType);
                    if (authModes.includes(aws_appsync_1.AuthorizationType.IAM)) {
                        const authRole = context.synthParameters.authenticatedUserRoleName;
                        const unauthRole = context.synthParameters.unauthenticatedUserRoleName;
                        const account = cdk.Stack.of(context.stackManager.scope).account;
                        requestTemplate.push((0, graphql_mapping_template_1.qref)(`$ctx.stash.put("authRole", "arn:aws:sts::${account}:assumed-role/${authRole}/CognitoIdentityCredentials")`), (0, graphql_mapping_template_1.qref)(`$ctx.stash.put("unauthRole", "arn:aws:sts::${account}:assumed-role/${unauthRole}/CognitoIdentityCredentials")`));
                        const identityPoolId = context.synthParameters.identityPoolId;
                        if (identityPoolId) {
                            requestTemplate.push((0, graphql_mapping_template_1.qref)(`$ctx.stash.put("identityPoolId", "${identityPoolId}")`));
                        }
                        const adminRoles = (_a = context.synthParameters.adminRoles) !== null && _a !== void 0 ? _a : [];
                        requestTemplate.push((0, graphql_mapping_template_1.qref)(`$ctx.stash.put("adminRoles", ${JSON.stringify(adminRoles)})`));
                    }
                    requestTemplate.push((0, graphql_mapping_template_1.obj)({}));
                    if (resolver === undefined) {
                        const resolverScope = context.stackManager.getScopeFor(resolverId, FUNCTION_DIRECTIVE_STACK);
                        resolver = context.api.host.addVtlRuntimeResolver(config.resolverTypeName, config.resolverFieldName, graphql_transformer_core_1.MappingTemplate.inlineTemplateFromString((0, graphql_mapping_template_1.printBlock)('Stash resolver specific context.')((0, graphql_mapping_template_1.compoundExpression)(requestTemplate))), graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString('$util.toJson($ctx.prev.result)', `${config.resolverTypeName}.${config.resolverFieldName}.res.vtl`), resolverId, undefined, [], resolverScope);
                        createdResources.set(resolverId, resolver);
                    }
                    resolver.pipelineConfig.functions.push(func.functionId);
                });
            });
        };
    }
}
exports.FunctionTransformer = FunctionTransformer;
const responseMappingTemplate = (config) => {
    return config.invocationType === 'Event'
        ? responseMappingTemplateEventInvocationType()
        : responseMappingTemplateRequestResponseInvocationType();
};
const responseMappingTemplateEventInvocationType = () => {
    return (0, graphql_mapping_template_1.printBlock)('Handle error and return result for event invocation type')((0, graphql_mapping_template_1.compoundExpression)([
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('success'), (0, graphql_mapping_template_1.bool)(true)),
        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.ref)('ctx.error'), (0, graphql_mapping_template_1.compoundExpression)([(0, graphql_mapping_template_1.raw)('$util.appendError($ctx.error.message, $ctx.error.type)'), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('success'), (0, graphql_mapping_template_1.bool)(false))])),
        (0, graphql_mapping_template_1.compoundExpression)([(0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('response'), (0, graphql_mapping_template_1.obj)({ success: (0, graphql_mapping_template_1.ref)('success') })), (0, graphql_mapping_template_1.raw)('$util.toJson($response)')]),
    ]));
};
const responseMappingTemplateRequestResponseInvocationType = () => {
    return (0, graphql_mapping_template_1.printBlock)('Handle error or return result for request response invocation type')((0, graphql_mapping_template_1.compoundExpression)([
        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.ref)('ctx.error'), (0, graphql_mapping_template_1.compoundExpression)([(0, graphql_mapping_template_1.raw)('$util.error($ctx.error.message, $ctx.error.type)')])),
        (0, graphql_mapping_template_1.raw)('$util.toJson($ctx.result)'),
    ]));
};
const lambdaArnResource = (env, name, region, accountId) => {
    const substitutions = {};
    if (name.includes('${env}')) {
        substitutions.env = env;
    }
    return cdk.Fn.conditionIf(graphql_transformer_common_1.ResourceConstants.CONDITIONS.HasEnvironmentParameter, cdk.Fn.sub(lambdaArnKey(name, region, accountId), substitutions), cdk.Fn.sub(lambdaArnKey(name.replace(/(-\${env})/, ''), region, accountId))).toString();
};
const lambdaArnKey = (name, region, accountId) => {
    return `arn:aws:lambda:${region ? region : '${AWS::Region}'}:${accountId ? accountId : '${AWS::AccountId}'}:function:${name}`;
};
const validate = (config, definition, ctx) => {
    if (config.invocationType === 'Event') {
        validateIsSupportedEventInvocationParentType(config);
        const ultimateFunctionDirectiveConfig = getUltimateFunctionDirectiveConfig(definition, ctx, config);
        if (ultimateFunctionDirectiveConfig.invocationType === 'Event') {
            validateFieldResponseTypeForEventInvocation(definition, config);
            validateSchemaDefinedEventInvocationResponseShape(ctx.inputDocument);
        }
    }
};
const getUltimateFunctionDirectiveConfig = (fieldDefinition, ctx, currentDirectiveConfig) => {
    var _a;
    const functionDirectivesForField = (_a = fieldDefinition.directives) === null || _a === void 0 ? void 0 : _a.filter((directive) => directive.name.value === graphql_directives_1.FunctionDirective.name);
    if (!functionDirectivesForField || functionDirectivesForField.length === 0) {
        throw new graphql_transformer_core_1.InvalidDirectiveError('Unable to locate @function directives for field.' +
            'This is an unexpected error that suggests there is a bug in the amplify-graphql-function-transformer.\n' +
            'Please open a GitHub issue referencing this error message with your schema definition.');
    }
    const ultimateFunctionDirective = functionDirectivesForField[functionDirectivesForField.length - 1];
    const directiveWrapped = new graphql_transformer_core_1.DirectiveWrapper(ultimateFunctionDirective);
    const ultimateFunctionDirectiveConfig = directiveWrapped.getArguments({
        resolverTypeName: currentDirectiveConfig.resolverTypeName,
        resolverFieldName: currentDirectiveConfig.resolverFieldName,
        invocationType: graphql_directives_1.FunctionDirective.defaults.invocationType,
    }, (0, graphql_transformer_core_1.generateGetArgumentsInput)(ctx.transformParameters));
    return ultimateFunctionDirectiveConfig;
};
const eventInvocationResponse = {
    typeName: 'EventInvocationResponse',
    shapeDescription: 'type EventInvocationResponse { success: Boolean! }',
};
const validateFieldResponseTypeForEventInvocation = (fieldDefition, config) => {
    const { type } = fieldDefition;
    const fieldResponseTypeHasValidName = type.kind === graphql_1.Kind.NAMED_TYPE && type.name.value === eventInvocationResponse.typeName;
    if (!fieldResponseTypeHasValidName) {
        const errorMessage = `Invalid return type ${typeDebugDescription(type)} for ${fieldDebugDescription(config, fieldDefition)}.\n` +
            `Use return type '${eventInvocationResponse.typeName}' and, if necessary, add '${eventInvocationResponse.shapeDescription}' to your model schema.`;
        throw new graphql_transformer_core_1.InvalidDirectiveError(errorMessage);
    }
};
const validateSchemaDefinedEventInvocationResponseShape = (inputDocument) => {
    var _a;
    const responseTypeDefinitionNode = inputDocument.definitions.find((definitionNode) => (0, graphql_transformer_core_1.isObjectTypeDefinitionNode)(definitionNode) && definitionNode.name.value === eventInvocationResponse.typeName);
    if (!responseTypeDefinitionNode) {
        const errorMessage = `Missing '${eventInvocationResponse.typeName}' definition. Add this type definition to your schema:\n` +
            eventInvocationResponse.shapeDescription;
        throw new graphql_transformer_core_1.InvalidDirectiveError(errorMessage);
    }
    const errorMessage = `Invalid '${eventInvocationResponse.typeName}' definition. Update the type definition in your schema to:\n` +
        `${eventInvocationResponse.shapeDescription}`;
    const containsOneField = ((_a = responseTypeDefinitionNode.fields) === null || _a === void 0 ? void 0 : _a.length) === 1;
    if (!containsOneField) {
        throw new graphql_transformer_core_1.InvalidDirectiveError(errorMessage);
    }
    const [expectedField] = responseTypeDefinitionNode.fields;
    const schemaDefinedTypeHasValidShape = expectedField.name.value === 'success' &&
        expectedField.type.kind === graphql_1.Kind.NON_NULL_TYPE &&
        expectedField.type.type.kind === graphql_1.Kind.NAMED_TYPE &&
        expectedField.type.type.name.value === 'Boolean';
    if (!schemaDefinedTypeHasValidShape) {
        throw new graphql_transformer_core_1.InvalidDirectiveError(errorMessage);
    }
};
const validateIsSupportedEventInvocationParentType = (config) => {
    const isValidParentType = config.resolverTypeName === 'Query' || config.resolverTypeName === 'Mutation';
    if (!isValidParentType) {
        throw new graphql_transformer_core_1.InvalidDirectiveError("@function definition with 'invocationType: Event' must be defined on Query or Mutation field.");
    }
};
const typeDebugDescription = (typeNode) => {
    const description = (node, prefix = '', suffix = '') => {
        switch (node.kind) {
            case graphql_1.Kind.LIST_TYPE:
                return description(node.type, prefix + '[', ']' + suffix);
            case graphql_1.Kind.NON_NULL_TYPE:
                return description(node.type, prefix, '!' + suffix);
            case graphql_1.Kind.NAMED_TYPE:
                return `${prefix}${node.name.value}${suffix}`;
        }
    };
    return description(typeNode);
};
const fieldDebugDescription = (config, field) => {
    var _a;
    const fieldArgumentsDescription = (nodes) => {
        if (!nodes || nodes.length === 0) {
            return '';
        }
        const description = '(' + nodes.map((node) => `${node.name.value}: ${typeDebugDescription(node.type)}`).join(', ') + ')';
        return description;
    };
    const directiveArgumentsDescription = (nodes) => {
        if (!nodes || nodes.length === 0) {
            return '';
        }
        const description = '(' + nodes.map((node) => `${node.name.value}: ${(0, graphql_1.valueFromASTUntyped)(node.value)}`).join(', ') + ')';
        return description;
    };
    const args = fieldArgumentsDescription(field.arguments);
    const directivesDescription = (_a = field.directives) === null || _a === void 0 ? void 0 : _a.map((directive) => `@${directive.name.value}${directiveArgumentsDescription(directive.arguments)}`).join(' ');
    return `${config.resolverFieldName}${args}: ${typeDebugDescription(field.type)} ${directivesDescription}`;
};
//# sourceMappingURL=graphql-function-transformer.js.map