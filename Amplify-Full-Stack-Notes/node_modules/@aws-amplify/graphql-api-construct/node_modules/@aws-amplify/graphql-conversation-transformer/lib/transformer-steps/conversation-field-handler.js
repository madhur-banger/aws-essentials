"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationFieldHandler = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const graphql_transformer_common_1 = require("graphql-transformer-common");
const session_model_1 = require("../graphql-types/session-model");
const message_model_1 = require("../graphql-types/message-model");
class ConversationFieldHandler {
    getDirectiveConfig(parent, definition, directive, context) {
        if (parent.name.value !== 'Mutation') {
            throw new graphql_transformer_core_1.InvalidDirectiveError('@conversation directive must be used on Mutation field.');
        }
        const config = this.getConversationConfig(directive, parent, definition, context);
        const { messageModel, conversationModel } = this.createModels(config, definition);
        config.messageModel = messageModel;
        config.conversationModel = conversationModel;
        config.responseMutationInputTypeName = messageModel.assistantMutationInput.name.value;
        config.responseMutationName = messageModel.assistantMutationField.name.value;
        this.validate(config);
        return config;
    }
    getConversationConfig(directive, parent, definition, context) {
        const directiveWrapped = new graphql_transformer_core_1.DirectiveWrapper(directive);
        const config = directiveWrapped.getArguments({
            parent,
            directive,
            field: definition,
            inferenceConfiguration: {},
        }, (0, graphql_transformer_core_1.generateGetArgumentsInput)(context.transformParameters));
        return config;
    }
    createModels(config, definition) {
        if (definition.type.kind !== 'NamedType' || definition.type.name.value !== 'ConversationMessage') {
            throw new graphql_transformer_core_1.InvalidDirectiveError('@conversation return type must be ConversationMessage');
        }
        const capitalizedFieldName = (0, graphql_transformer_common_1.toUpper)(config.field.name.value);
        const messageModelName = `ConversationMessage${capitalizedFieldName}`;
        const conversationModelName = `Conversation${capitalizedFieldName}`;
        const referenceFieldName = 'conversationId';
        const messageModel = (0, message_model_1.createMessageModel)(conversationModelName, messageModelName, referenceFieldName, capitalizedFieldName, definition.type);
        const conversationModel = (0, session_model_1.createConversationModel)(conversationModelName, messageModelName, referenceFieldName);
        return { messageModel, conversationModel };
    }
    validate(config) {
        this.validateReturnType(config);
        this.validateInferenceConfig(config);
    }
    validateReturnType(config) {
        const { field } = config;
        if (field.type.kind !== 'NamedType' || field.type.name.value !== 'ConversationMessage') {
            throw new graphql_transformer_core_1.InvalidDirectiveError('@conversation return type must be ConversationMessage');
        }
    }
    validateInferenceConfig(config) {
        const { maxTokens, temperature, topP } = config.inferenceConfiguration;
        if (maxTokens !== undefined && maxTokens < 1) {
            throw new graphql_transformer_core_1.InvalidDirectiveError(`@conversation directive maxTokens valid range: Minimum value of 1. Provided: ${maxTokens}`);
        }
        if (temperature !== undefined && (temperature < 0 || temperature > 1)) {
            throw new graphql_transformer_core_1.InvalidDirectiveError(`@conversation directive temperature valid range: Minimum value of 0. Maximum value of 1. Provided: ${temperature}`);
        }
        if (topP !== undefined && (topP < 0 || topP > 1)) {
            throw new graphql_transformer_core_1.InvalidDirectiveError(`@conversation directive topP valid range: Minimum value of 0. Maximum value of 1. Provided: ${topP}`);
        }
    }
}
exports.ConversationFieldHandler = ConversationFieldHandler;
//# sourceMappingURL=conversation-field-handler.js.map