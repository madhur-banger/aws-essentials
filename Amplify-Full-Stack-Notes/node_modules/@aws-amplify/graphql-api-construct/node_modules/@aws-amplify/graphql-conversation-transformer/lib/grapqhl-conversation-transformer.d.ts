import { ModelTransformer } from '@aws-amplify/graphql-model-transformer';
import { BelongsToTransformer, HasManyTransformer } from '@aws-amplify/graphql-relational-transformer';
import { TransformerPluginBase } from '@aws-amplify/graphql-transformer-core';
import { TransformerAuthProvider, TransformerContextProvider, TransformerPrepareStepContextProvider, TransformerSchemaVisitStepContextProvider } from '@aws-amplify/graphql-transformer-interfaces';
import { DirectiveNode, FieldDefinitionNode, InterfaceTypeDefinitionNode, ObjectTypeDefinitionNode } from 'graphql';
import { ConversationModel } from './graphql-types/session-model';
import { MessageModel } from './graphql-types/message-model';
import { type ToolDefinition, type Tools } from './utils/tools';
import * as lambda from 'aws-cdk-lib/aws-lambda';
export type ConversationDirectiveConfiguration = {
    parent: ObjectTypeDefinitionNode;
    directive: DirectiveNode;
    aiModel: string;
    functionName: string | undefined;
    field: FieldDefinitionNode;
    responseMutationInputTypeName: string;
    responseMutationName: string;
    systemPrompt: string;
    tools: ToolDefinition[];
    toolSpec: Tools;
    conversationModel: ConversationModel;
    messageModel: MessageModel;
    inferenceConfiguration: ConversationInferenceConfiguration;
};
export type ConversationInferenceConfiguration = {
    maxTokens?: number;
    temperature?: number;
    topP?: number;
};
export declare class ConversationTransformer extends TransformerPluginBase {
    private directives;
    private fieldHandler;
    private prepareHandler;
    private resolverGenerator;
    constructor(modelTransformer: ModelTransformer, hasManyTransformer: HasManyTransformer, belongsToTransformer: BelongsToTransformer, authProvider: TransformerAuthProvider, functionNameMap?: Record<string, lambda.IFunction>);
    field: (parent: ObjectTypeDefinitionNode | InterfaceTypeDefinitionNode, definition: FieldDefinitionNode, directive: DirectiveNode, context: TransformerSchemaVisitStepContextProvider) => void;
    generateResolvers: (ctx: TransformerContextProvider) => void;
    prepare: (ctx: TransformerPrepareStepContextProvider) => void;
}
//# sourceMappingURL=grapqhl-conversation-transformer.d.ts.map