"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEventSourceMapping = exports.createLambdaRole = exports.createLambda = void 0;
const path = __importStar(require("path"));
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const graphql_transformer_common_1 = require("graphql-transformer-common");
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const createLambda = (scope, apiGraphql, parameterMap, lambdaRole, endpoint, isProjectUsingDataStore, region) => {
    const { OpenSearchStreamingLambdaFunctionLogicalID } = graphql_transformer_common_1.ResourceConstants.RESOURCES;
    const { OpenSearchStreamingLambdaHandlerName, OpenSearchDebugStreamingLambda } = graphql_transformer_common_1.ResourceConstants.PARAMETERS;
    const enviroment = {
        OPENSEARCH_ENDPOINT: `https://${endpoint}`,
        OPENSEARCH_REGION: region,
        DEBUG: parameterMap.get(OpenSearchDebugStreamingLambda).valueAsString,
        OPENSEARCH_USE_EXTERNAL_VERSIONING: isProjectUsingDataStore.toString(),
    };
    return apiGraphql.host.addLambdaFunction(OpenSearchStreamingLambdaFunctionLogicalID, `functions/${OpenSearchStreamingLambdaFunctionLogicalID}.zip`, parameterMap.get(OpenSearchStreamingLambdaHandlerName).valueAsString, path.resolve(__dirname, '..', '..', 'lib', 'streaming-lambda.zip'), aws_lambda_1.Runtime.PYTHON_3_8, [
        aws_lambda_1.LayerVersion.fromLayerVersionArn(scope, 'LambdaLayerVersion', aws_cdk_lib_1.Fn.findInMap('LayerResourceMapping', aws_cdk_lib_1.Fn.ref('AWS::Region'), 'layerRegion')),
    ], lambdaRole, enviroment, undefined, scope);
};
exports.createLambda = createLambda;
const createLambdaRole = (context, stack, parameterMap) => {
    var _a, _b;
    const { OpenSearchStreamingLambdaIAMRoleLogicalID } = graphql_transformer_common_1.ResourceConstants.RESOURCES;
    const { OpenSearchStreamingIAMRoleName } = graphql_transformer_common_1.ResourceConstants.PARAMETERS;
    const role = new aws_iam_1.Role(stack, OpenSearchStreamingLambdaIAMRoleLogicalID, {
        assumedBy: new aws_iam_1.ServicePrincipal('lambda.amazonaws.com'),
        roleName: context.resourceHelper.generateIAMRoleName((_b = (_a = parameterMap.get(OpenSearchStreamingIAMRoleName)) === null || _a === void 0 ? void 0 : _a.valueAsString) !== null && _b !== void 0 ? _b : ''),
    });
    (0, graphql_transformer_core_1.setResourceName)(role, { name: OpenSearchStreamingLambdaIAMRoleLogicalID, setOnDefaultChild: true });
    role.attachInlinePolicy(new aws_iam_1.Policy(stack, 'CloudwatchLogsAccess', {
        statements: [
            new aws_iam_1.PolicyStatement({
                actions: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents'],
                effect: aws_iam_1.Effect.ALLOW,
                resources: ['arn:aws:logs:*:*:*'],
            }),
        ],
    }));
    return role;
};
exports.createLambdaRole = createLambdaRole;
const createEventSourceMapping = (stack, type, target, parameterMap, tableStreamArn) => {
    const { OpenSearchStreamBatchSize, OpenSearchStreamMaximumBatchingWindowInSeconds } = graphql_transformer_common_1.ResourceConstants.PARAMETERS;
    const eventSourceMapping = new aws_lambda_1.EventSourceMapping(stack, graphql_transformer_common_1.SearchableResourceIDs.SearchableEventSourceMappingID(type), {
        eventSourceArn: tableStreamArn,
        target,
        batchSize: parameterMap.get(OpenSearchStreamBatchSize).valueAsNumber,
        maxBatchingWindow: aws_cdk_lib_1.Duration.seconds(parameterMap.get(OpenSearchStreamMaximumBatchingWindowInSeconds).valueAsNumber),
        enabled: true,
        startingPosition: aws_lambda_1.StartingPosition.LATEST,
    });
    (0, graphql_transformer_core_1.setResourceName)(eventSourceMapping, { name: graphql_transformer_common_1.SearchableResourceIDs.SearchableEventSourceMappingID(type), setOnDefaultChild: true });
    return eventSourceMapping;
};
exports.createEventSourceMapping = createEventSourceMapping;
//# sourceMappingURL=create-streaming-lambda.js.map