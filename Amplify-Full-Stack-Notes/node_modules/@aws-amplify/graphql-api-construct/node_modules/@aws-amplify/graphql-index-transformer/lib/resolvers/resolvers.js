"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVTLGenerator = exports.generatePostAuthExpression = exports.constructSyncVTL = exports.addIndexToResolverSlot = exports.mergeInputsAndDefaultsSnippet = exports.makeQueryResolver = exports.updateResolversForIndex = exports.overrideIndexAtCfnLevel = exports.appendSecondaryIndex = exports.validateSortDirectionInput = exports.setQuerySnippet = exports.ensureCompositeKeySnippet = exports.getResolverObject = exports.attributeTypeFromType = exports.updateResolvers = exports.replaceDdbPrimaryKey = void 0;
const graphql_model_transformer_1 = require("@aws-amplify/graphql-model-transformer");
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const cdk = __importStar(require("aws-cdk-lib"));
const graphql_1 = require("graphql");
const graphql_mapping_template_1 = require("graphql-mapping-template");
const graphql_transformer_common_1 = require("graphql-transformer-common");
const graphql_transformer_core_2 = require("@aws-amplify/graphql-transformer-core");
const utils_1 = require("../utils");
const generators_1 = require("./generators");
const API_KEY = 'API Key Authorization';
const IAM_AUTH_TYPE = 'IAM Authorization';
const replaceDdbPrimaryKey = (config, ctx) => {
    var _a, _b, _c;
    const { field, object } = config;
    const strategy = (0, graphql_transformer_core_1.getModelDataSourceStrategy)(ctx, object.name.value);
    const useAmplifyManagedTableResources = (0, graphql_transformer_core_1.isAmplifyDynamoDbModelDataSourceStrategy)(strategy);
    const table = getTable(ctx, object);
    const cfnTable = useAmplifyManagedTableResources ? table.node.defaultChild.node.defaultChild : table.table;
    const tableAttrDefs = table.attributeDefinitions;
    const tableKeySchema = table.keySchema;
    const keySchema = getDdbKeySchema(config);
    const attrDefs = attributeDefinitions(config, ctx);
    const existingAttrDefSet = new Set(tableAttrDefs.map((ad) => ad.attributeName));
    const primaryKeyPartitionKeyName = (_a = field.name.value) !== null && _a !== void 0 ? _a : 'id';
    const primaryKeyPartitionKeyType = (_c = (_b = attrDefs.find((attr) => attr.attributeName === primaryKeyPartitionKeyName)) === null || _b === void 0 ? void 0 : _b.attributeType) !== null && _c !== void 0 ? _c : 'S';
    for (const existingKey of tableKeySchema) {
        if (existingAttrDefSet.has(existingKey.attributeName)) {
            table.attributeDefinitions = tableAttrDefs.filter((ad) => ad.attributeName !== existingKey.attributeName);
            existingAttrDefSet.delete(existingKey.attributeName);
        }
    }
    table.keySchema = keySchema;
    table.tablePartitionKey = { name: primaryKeyPartitionKeyName, type: primaryKeyPartitionKeyType };
    for (const attr of attrDefs) {
        if (!existingAttrDefSet.has(attr.attributeName)) {
            table.attributeDefinitions.push(attr);
        }
    }
    if (useAmplifyManagedTableResources) {
        cfnTable.addPropertyOverride('keySchema', table.keySchema);
        cfnTable.addPropertyOverride('attributeDefinitions', table.attributeDefinitions);
    }
    else {
        cfnTable.keySchema = table.keySchema;
        cfnTable.attributeDefinitions = table.attributeDefinitions;
    }
};
exports.replaceDdbPrimaryKey = replaceDdbPrimaryKey;
const updateResolvers = (config, ctx, resolverMap) => {
    const getResolver = (0, exports.getResolverObject)(config, ctx, 'get');
    const listResolver = (0, exports.getResolverObject)(config, ctx, 'list');
    const createResolver = (0, exports.getResolverObject)(config, ctx, 'create');
    const updateResolver = (0, exports.getResolverObject)(config, ctx, 'update');
    const deleteResolver = (0, exports.getResolverObject)(config, ctx, 'delete');
    const syncResolver = (0, exports.getResolverObject)(config, ctx, 'sync');
    if (getResolver) {
        (0, exports.addIndexToResolverSlot)(getResolver, [setPrimaryKeySnippet(config, false)]);
    }
    if (listResolver) {
        (0, exports.addIndexToResolverSlot)(listResolver, [
            (0, graphql_mapping_template_1.print)((0, exports.setQuerySnippet)(config, ctx, true)),
            `$util.qr($ctx.stash.put("${graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelQueryExpression}", $${graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelQueryExpression}))`,
        ]);
    }
    if (createResolver) {
        (0, exports.addIndexToResolverSlot)(createResolver, [
            (0, exports.mergeInputsAndDefaultsSnippet)(),
            setPrimaryKeySnippet(config, true),
            (0, exports.ensureCompositeKeySnippet)(config, false),
        ]);
    }
    if (updateResolver) {
        (0, exports.addIndexToResolverSlot)(updateResolver, [
            (0, exports.mergeInputsAndDefaultsSnippet)(),
            setPrimaryKeySnippet(config, true),
            (0, exports.ensureCompositeKeySnippet)(config, false),
        ]);
    }
    if (deleteResolver) {
        (0, exports.addIndexToResolverSlot)(deleteResolver, [(0, exports.mergeInputsAndDefaultsSnippet)(), setPrimaryKeySnippet(config, true)]);
    }
    if (syncResolver) {
        makeSyncResolver('dbTable', config, ctx, syncResolver, resolverMap);
    }
};
exports.updateResolvers = updateResolvers;
const getTable = (context, object) => {
    const ddbDataSource = context.dataSources.get(object);
    const tableName = graphql_transformer_common_1.ModelResourceIDs.ModelTableResourceID(object.name.value);
    const table = ddbDataSource.ds.stack.node.findChild(tableName);
    if (!table) {
        throw new Error(`Table not found in stack with table name ${tableName}`);
    }
    return table;
};
const getDdbKeySchema = (config) => {
    const schema = [{ attributeName: config.field.name.value, keyType: 'HASH' }];
    if (config.sortKey.length > 0) {
        schema.push({ attributeName: getSortKeyName(config), keyType: 'RANGE' });
    }
    return schema;
};
const attributeTypeFromType = (type, ctx) => {
    const baseTypeName = (0, graphql_transformer_common_1.getBaseType)(type);
    const ofType = ctx.output.getType(baseTypeName);
    if (ofType && ofType.kind === graphql_1.Kind.ENUM_TYPE_DEFINITION) {
        return 'S';
    }
    return (0, graphql_transformer_common_1.attributeTypeFromScalar)(type);
};
exports.attributeTypeFromType = attributeTypeFromType;
const attributeDefinitions = (config, ctx) => {
    const { field, sortKey, sortKeyFields } = config;
    const definitions = [{ attributeName: field.name.value, attributeType: (0, exports.attributeTypeFromType)(field.type, ctx) }];
    if (sortKeyFields.length === 1) {
        definitions.push({
            attributeName: sortKeyFields[0],
            attributeType: (0, exports.attributeTypeFromType)(sortKey[0].type, ctx),
        });
    }
    else if (sortKeyFields.length > 1) {
        definitions.push({
            attributeName: getSortKeyName(config),
            attributeType: 'S',
        });
    }
    return definitions;
};
const getSortKeyName = (config) => {
    return config.sortKeyFields.join(graphql_transformer_common_1.ModelResourceIDs.ModelCompositeKeySeparator());
};
const getResolverObject = (config, ctx, op) => {
    var _a;
    const resolverName = (0, utils_1.lookupResolverName)(config, ctx, op);
    if (!resolverName) {
        return null;
    }
    const objectName = op === 'get' || op === 'list' || op === 'sync' ? ctx.output.getQueryTypeName() : ctx.output.getMutationTypeName();
    if (!objectName) {
        return null;
    }
    return (_a = ctx.resolvers.getResolver(objectName, resolverName)) !== null && _a !== void 0 ? _a : null;
};
exports.getResolverObject = getResolverObject;
const setPrimaryKeySnippet = (config, isMutation) => {
    const cmds = [
        (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.stash.metadata.put'), (0, graphql_mapping_template_1.str)(graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelObjectKey), modelObjectKeySnippet(config, isMutation))),
    ];
    return (0, graphql_mapping_template_1.printBlock)('Set the primary key')((0, graphql_mapping_template_1.compoundExpression)(cmds));
};
const modelObjectKeySnippet = (config, isMutation) => {
    const { field, sortKeyFields } = config;
    const argsPrefix = isMutation ? 'mergedValues' : 'ctx.args';
    const modelObject = {
        [field.name.value]: (0, graphql_mapping_template_1.ref)(`util.dynamodb.toDynamoDB($${argsPrefix}.${field.name.value})`),
    };
    if (sortKeyFields.length > 1) {
        const compositeSortKey = getSortKeyName(config);
        const compositeSortKeyValue = sortKeyFields
            .map((keyField) => `\${${argsPrefix}.${keyField}}`)
            .join(graphql_transformer_common_1.ModelResourceIDs.ModelCompositeKeySeparator());
        modelObject[compositeSortKey] = (0, graphql_mapping_template_1.ref)(`util.dynamodb.toDynamoDB("${compositeSortKeyValue}")`);
    }
    else if (sortKeyFields.length === 1) {
        modelObject[sortKeyFields[0]] = (0, graphql_mapping_template_1.ref)(`util.dynamodb.toDynamoDB($${argsPrefix}.${sortKeyFields[0]})`);
    }
    return (0, graphql_mapping_template_1.obj)(modelObject);
};
const ensureCompositeKeySnippet = (config, conditionallySetSortKey) => {
    const { sortKeyFields } = config;
    if (sortKeyFields.length < 2) {
        return '';
    }
    const argsPrefix = 'mergedValues';
    const condensedSortKey = getSortKeyName(config);
    const dynamoDBFriendlySortKeyName = (0, graphql_transformer_common_1.toCamelCase)(sortKeyFields.map((f) => (0, graphql_transformer_common_1.graphqlName)(f)));
    const condensedSortKeyValue = sortKeyFields
        .map((keyField) => `\${${argsPrefix}.${keyField}}`)
        .join(graphql_transformer_common_1.ModelResourceIDs.ModelCompositeKeySeparator());
    return (0, graphql_mapping_template_1.print)((0, graphql_mapping_template_1.compoundExpression)([
        (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.raw)(`$util.isNull($ctx.stash.metadata.${graphql_transformer_common_1.ResourceConstants.SNIPPETS.DynamoDBNameOverrideMap})`), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.stash.metadata.put'), (0, graphql_mapping_template_1.str)(graphql_transformer_common_1.ResourceConstants.SNIPPETS.DynamoDBNameOverrideMap), (0, graphql_mapping_template_1.raw)(`{ '${condensedSortKey}': "${dynamoDBFriendlySortKeyName}" }`))), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`ctx.stash.metadata.${graphql_transformer_common_1.ResourceConstants.SNIPPETS.DynamoDBNameOverrideMap}.put`), (0, graphql_mapping_template_1.raw)(`'${condensedSortKey}'`), (0, graphql_mapping_template_1.str)(dynamoDBFriendlySortKeyName)))),
        conditionallySetSortKey
            ? (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.ref)(graphql_transformer_common_1.ResourceConstants.SNIPPETS.HasSeenSomeKeyArg), (0, graphql_mapping_template_1.qref)(`$ctx.args.input.put('${condensedSortKey}',"${condensedSortKeyValue}")`))
            : (0, graphql_mapping_template_1.qref)(`$ctx.args.input.put('${condensedSortKey}',"${condensedSortKeyValue}")`),
    ]));
};
exports.ensureCompositeKeySnippet = ensureCompositeKeySnippet;
const setQuerySnippet = (config, ctx, isListResolver) => {
    const { field, sortKey, sortKeyFields } = config;
    const keyFields = [field, ...sortKey];
    const keyNames = [field.name.value, ...sortKeyFields];
    const keyTypes = keyFields.map((k) => (0, exports.attributeTypeFromType)(k.type, ctx));
    const expressions = (0, exports.validateSortDirectionInput)(config, isListResolver);
    expressions.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelQueryExpression), (0, graphql_mapping_template_1.obj)({})), (0, graphql_transformer_common_1.applyKeyExpressionForCompositeKey)(keyNames, keyTypes, graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelQueryExpression));
    return (0, graphql_mapping_template_1.block)('Set query expression for key', expressions);
};
exports.setQuerySnippet = setQuerySnippet;
const validateSortDirectionInput = (config, isListResolver) => {
    const { field, sortKeyFields } = config;
    const keyNames = [field.name.value, ...sortKeyFields];
    const expressions = [];
    if (keyNames.length === 1) {
        const sortDirectionValidation = (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.raw)('!$util.isNull($ctx.args.sortDirection)'), (0, graphql_mapping_template_1.raw)('$util.error("sortDirection is not supported for List operations without a Sort key defined.", "InvalidArgumentsError")'));
        expressions.push(sortDirectionValidation);
    }
    else if (isListResolver === true && keyNames.length >= 1) {
        const sortDirectionValidation = (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.and)([(0, graphql_mapping_template_1.raw)(`$util.isNull($ctx.args.${keyNames[0]})`), (0, graphql_mapping_template_1.raw)('!$util.isNull($ctx.args.sortDirection)')]), (0, graphql_mapping_template_1.raw)(`$util.error("When providing argument 'sortDirection' you must also provide argument '${keyNames[0]}'.", "InvalidArgumentsError")`));
        expressions.push(sortDirectionValidation);
    }
    return expressions;
};
exports.validateSortDirectionInput = validateSortDirectionInput;
const appendSecondaryIndex = (config, ctx) => {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const { name, object, primaryKeyField } = config;
    if ((0, graphql_transformer_core_2.isSqlModel)(ctx, object.name.value)) {
        return;
    }
    const table = getTable(ctx, object);
    const keySchema = getDdbKeySchema(config);
    const attrDefs = attributeDefinitions(config, ctx);
    const primaryKeyPartitionKeyName = (_b = (_a = primaryKeyField === null || primaryKeyField === void 0 ? void 0 : primaryKeyField.name) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 'id';
    const partitionKeyName = (_c = keySchema[0]) === null || _c === void 0 ? void 0 : _c.attributeName;
    const sortKeyName = (_d = keySchema === null || keySchema === void 0 ? void 0 : keySchema[1]) === null || _d === void 0 ? void 0 : _d.attributeName;
    const partitionKeyType = (_f = (_e = attrDefs.find((attr) => attr.attributeName === partitionKeyName)) === null || _e === void 0 ? void 0 : _e.attributeType) !== null && _f !== void 0 ? _f : 'S';
    const sortKeyType = sortKeyName ? (_h = (_g = attrDefs.find((attr) => attr.attributeName === sortKeyName)) === null || _g === void 0 ? void 0 : _g.attributeType) !== null && _h !== void 0 ? _h : 'S' : undefined;
    if (!ctx.transformParameters.secondaryKeyAsGSI && primaryKeyPartitionKeyName === partitionKeyName) {
        table.addLocalSecondaryIndex({
            indexName: name,
            projectionType: 'ALL',
            sortKey: sortKeyName
                ? {
                    name: sortKeyName,
                    type: sortKeyType,
                }
                : undefined,
        });
    }
    else {
        table.addGlobalSecondaryIndex({
            indexName: name,
            projectionType: 'ALL',
            partitionKey: {
                name: partitionKeyName,
                type: partitionKeyType,
            },
            sortKey: sortKeyName
                ? {
                    name: sortKeyName,
                    type: sortKeyType,
                }
                : undefined,
            readCapacity: cdk.Fn.ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBModelTableReadIOPS),
            writeCapacity: cdk.Fn.ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBModelTableWriteIOPS),
        });
        const newIndex = {
            indexName: name,
            keySchema,
            projection: { projectionType: 'ALL' },
            provisionedThroughput: cdk.Fn.conditionIf(graphql_transformer_common_1.ResourceConstants.CONDITIONS.ShouldUsePayPerRequestBilling, cdk.Fn.ref('AWS::NoValue'), {
                ReadCapacityUnits: cdk.Fn.ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBModelTableReadIOPS),
                WriteCapacityUnits: cdk.Fn.ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBModelTableWriteIOPS),
            }),
        };
        (0, exports.overrideIndexAtCfnLevel)(ctx, object.name.value, table, newIndex);
    }
};
exports.appendSecondaryIndex = appendSecondaryIndex;
const overrideIndexAtCfnLevel = (ctx, typeName, table, indexInfo) => {
    const strategy = (0, graphql_transformer_core_1.getModelDataSourceStrategy)(ctx, typeName);
    const useAmplifyManagedTableResources = (0, graphql_transformer_core_1.isAmplifyDynamoDbModelDataSourceStrategy)(strategy);
    if (!useAmplifyManagedTableResources) {
        const cfnTable = table.table;
        cfnTable.globalSecondaryIndexes = appendIndex(cfnTable.globalSecondaryIndexes, indexInfo);
    }
    else {
        const cfnTable = table.table.node.defaultChild;
        const idx = table.globalSecondaryIndexes.length - 1;
        cfnTable.addOverride(`Properties.globalSecondaryIndexes.${idx}`, indexInfo);
    }
};
exports.overrideIndexAtCfnLevel = overrideIndexAtCfnLevel;
const appendIndex = (targetList, newIndex) => {
    if (Array.isArray(targetList)) {
        targetList.push(newIndex);
        return targetList;
    }
    return [newIndex];
};
const updateResolversForIndex = (config, ctx, resolverMap) => {
    const { name, queryField, object } = config;
    if (!name) {
        throw new Error('Expected name while updating index resolvers.');
    }
    const createResolver = (0, exports.getResolverObject)(config, ctx, 'create');
    const updateResolver = (0, exports.getResolverObject)(config, ctx, 'update');
    const deleteResolver = (0, exports.getResolverObject)(config, ctx, 'delete');
    const syncResolver = (0, exports.getResolverObject)(config, ctx, 'sync');
    const dbType = (0, graphql_transformer_core_1.getModelDataSourceStrategy)(ctx, object.name.value).dbType;
    const isDynamoDB = (0, graphql_transformer_core_2.isDynamoDbType)(dbType);
    if (isDynamoDB && createResolver) {
        const checks = [validateIndexArgumentSnippet(config, 'create'), (0, exports.ensureCompositeKeySnippet)(config, true)];
        if (checks[0] || checks[1]) {
            (0, exports.addIndexToResolverSlot)(createResolver, [(0, exports.mergeInputsAndDefaultsSnippet)(), ...checks]);
        }
    }
    if (isDynamoDB && updateResolver) {
        const checks = [validateIndexArgumentSnippet(config, 'update'), (0, exports.ensureCompositeKeySnippet)(config, true)];
        if (checks[0] || checks[1]) {
            (0, exports.addIndexToResolverSlot)(updateResolver, [(0, exports.mergeInputsAndDefaultsSnippet)(), ...checks]);
        }
    }
    if (isDynamoDB && deleteResolver) {
        const checks = [(0, exports.ensureCompositeKeySnippet)(config, false)];
        if (checks[0]) {
            (0, exports.addIndexToResolverSlot)(deleteResolver, [(0, exports.mergeInputsAndDefaultsSnippet)(), ...checks]);
        }
    }
    if (queryField) {
        (0, exports.makeQueryResolver)(config, ctx, dbType);
    }
    if (isDynamoDB && syncResolver) {
        makeSyncResolver(name, config, ctx, syncResolver, resolverMap);
    }
};
exports.updateResolversForIndex = updateResolversForIndex;
const makeQueryResolver = (config, ctx, dbType) => {
    var _a;
    const { name, object, queryField } = config;
    if (!(name && queryField)) {
        throw new Error('Expected name and queryField to be defined while generating resolver.');
    }
    const modelName = object.name.value;
    const dataSourceName = (0, graphql_transformer_core_1.getModelDataSourceNameForTypeName)(ctx, modelName);
    const isDynamoDB = (0, graphql_transformer_core_2.isDynamoDbType)(dbType);
    const dataSource = ctx.api.host.getDataSource(dataSourceName);
    const queryTypeName = ctx.output.getQueryTypeName();
    let stackId = object.name.value;
    if (isDynamoDB) {
        const table = getTable(ctx, object);
        stackId = table.stack.node.id;
    }
    if (!dataSource) {
        throw new Error(`Could not find datasource with name ${dataSourceName} in context.`);
    }
    const resolverResourceId = graphql_transformer_common_1.ResolverResourceIDs.ResolverResourceID(queryTypeName, queryField);
    const resolver = ctx.resolvers.generateQueryResolver(queryTypeName, queryField, resolverResourceId, dataSource, graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString((0, exports.getVTLGenerator)(dbType).generateIndexQueryRequestTemplate(config, ctx, modelName, queryField), `${queryTypeName}.${queryField}.req.vtl`), graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString((0, graphql_mapping_template_1.print)((0, graphql_mapping_template_1.compoundExpression)([
        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.ref)('ctx.error'), (0, graphql_mapping_template_1.raw)('$util.error($ctx.error.message, $ctx.error.type)')),
        (0, graphql_mapping_template_1.raw)('$util.toJson($ctx.result)'),
    ])), `${queryTypeName}.${queryField}.res.vtl`));
    resolver.addVtlFunctionToSlot('postAuth', graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString((0, exports.generatePostAuthExpression)(ctx.transformParameters.sandboxModeEnabled, ctx.synthParameters.enableIamAccess), `${queryTypeName}.${queryField}.{slotName}.{slotIndex}.res.vtl`));
    resolver.setScope(ctx.stackManager.getScopeFor(resolverResourceId, stackId));
    ctx.resolvers.addResolver(queryTypeName, queryField, resolver);
    if (!isDynamoDB) {
        const modelFieldMap = ctx.resourceHelper.getModelFieldMap((_a = object === null || object === void 0 ? void 0 : object.name) === null || _a === void 0 ? void 0 : _a.value);
        if (!modelFieldMap.getMappedFields().length) {
            return;
        }
        modelFieldMap.addResolverReference({ typeName: queryTypeName, fieldName: queryField, isList: false });
    }
};
exports.makeQueryResolver = makeQueryResolver;
const validateIndexArgumentSnippet = (config, keyOperation) => {
    const { name, sortKeyFields } = config;
    if (sortKeyFields.length < 2) {
        return '';
    }
    return (0, graphql_mapping_template_1.printBlock)(`Validate ${keyOperation} mutation for @index '${name}'`)((0, graphql_mapping_template_1.compoundExpression)([
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(graphql_transformer_common_1.ResourceConstants.SNIPPETS.HasSeenSomeKeyArg), (0, graphql_mapping_template_1.bool)(false)),
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('keyFieldNames'), (0, graphql_mapping_template_1.list)(sortKeyFields.map((f) => (0, graphql_mapping_template_1.str)(f)))),
        (0, graphql_mapping_template_1.forEach)((0, graphql_mapping_template_1.ref)('keyFieldName'), (0, graphql_mapping_template_1.ref)('keyFieldNames'), [
            (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.raw)('$mergedValues.containsKey("$keyFieldName")'), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(graphql_transformer_common_1.ResourceConstants.SNIPPETS.HasSeenSomeKeyArg), (0, graphql_mapping_template_1.bool)(true)), true),
        ]),
        (0, graphql_mapping_template_1.forEach)((0, graphql_mapping_template_1.ref)('keyFieldName'), (0, graphql_mapping_template_1.ref)('keyFieldNames'), [
            (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.raw)(`$${graphql_transformer_common_1.ResourceConstants.SNIPPETS.HasSeenSomeKeyArg} && !$mergedValues.containsKey("$keyFieldName")`), (0, graphql_mapping_template_1.raw)(`$util.error("When ${keyOperation.replace(/.$/, 'ing')} any part of the composite sort key for @index '${name}',` +
                " you must provide all fields for the key. Missing key: '$keyFieldName'.\")")),
        ]),
    ]));
};
const mergeInputsAndDefaultsSnippet = () => {
    return (0, graphql_mapping_template_1.printBlock)('Merge default values and inputs')((0, graphql_model_transformer_1.generateApplyDefaultsToInputTemplate)('mergedValues'));
};
exports.mergeInputsAndDefaultsSnippet = mergeInputsAndDefaultsSnippet;
const addIndexToResolverSlot = (resolver, lines, isSync = false) => {
    const res = resolver;
    resolver.addVtlFunctionToSlot('preAuth', graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(`${lines.join('\n')}\n${!isSync ? '{}' : ''}`, `${res.typeName}.${res.fieldName}.{slotName}.{slotIndex}.req.vtl`));
};
exports.addIndexToResolverSlot = addIndexToResolverSlot;
const makeSyncResolver = (name, config, ctx, syncResolver, resolverMap) => {
    if (!ctx.isProjectUsingDataStore())
        return;
    if (resolverMap.has(syncResolver)) {
        const prevSnippet = resolverMap.get(syncResolver);
        resolverMap.set(syncResolver, joinSnippets([prevSnippet, (0, graphql_mapping_template_1.print)(setSyncQueryMapSnippet(name, config))]));
    }
    else {
        resolverMap.set(syncResolver, (0, graphql_mapping_template_1.print)(setSyncQueryMapSnippet(name, config)));
    }
};
const joinSnippets = (lines) => {
    return lines.join('\n');
};
const setSyncQueryMapSnippet = (name, config) => {
    const { field, sortKeyFields } = config;
    const expressions = [];
    const keys = [field.name.value, ...(sortKeyFields !== null && sortKeyFields !== void 0 ? sortKeyFields : [])];
    expressions.push((0, graphql_mapping_template_1.raw)(`$util.qr($QueryMap.put('${keys.join('+')}' , '${name}'))`), (0, graphql_mapping_template_1.raw)(`$util.qr($PkMap.put('${field.name.value}' , '${name}'))`), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('SkMap.put'), (0, graphql_mapping_template_1.str)(name), (0, graphql_mapping_template_1.list)(sortKeyFields.map(graphql_mapping_template_1.str)))));
    return (0, graphql_mapping_template_1.block)('Set query expression for @key', expressions);
};
const constructSyncVTL = (syncVTLContent, resolver) => {
    const checks = [
        (0, graphql_mapping_template_1.print)(generateSyncResolverInit()),
        syncVTLContent,
        (0, graphql_mapping_template_1.print)(setSyncQueryFilterSnippet()),
        (0, graphql_mapping_template_1.print)(setSyncKeyExpressionForHashKey(graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelQueryExpression)),
        (0, graphql_mapping_template_1.print)(setSyncKeyExpressionForRangeKey(graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelQueryExpression)),
        (0, graphql_mapping_template_1.print)(makeSyncQueryResolver()),
    ];
    (0, exports.addIndexToResolverSlot)(resolver, checks, true);
};
exports.constructSyncVTL = constructSyncVTL;
const setSyncQueryFilterSnippet = () => {
    const expressions = [];
    expressions.push((0, graphql_mapping_template_1.compoundExpression)([
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('filterArgsMap'), (0, graphql_mapping_template_1.ref)('ctx.args.filter.get("and")')),
        generateDeltaTableTTLCheck('isLastSyncInDeltaTTLWindow', 'ctx.args.lastSync'),
        (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.raw)('!$util.isNullOrEmpty($filterArgsMap) && !$isLastSyncInDeltaTTLWindow'), (0, graphql_mapping_template_1.compoundExpression)([
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('json'), (0, graphql_mapping_template_1.raw)('$filterArgsMap')),
            (0, graphql_mapping_template_1.forEach)((0, graphql_mapping_template_1.ref)('item'), (0, graphql_mapping_template_1.ref)('json'), [
                (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('ind'), (0, graphql_mapping_template_1.ref)('foreach.index')),
                (0, graphql_mapping_template_1.forEach)((0, graphql_mapping_template_1.ref)('entry'), (0, graphql_mapping_template_1.ref)('item.entrySet()'), [
                    (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.raw)('$ind == 0 && !$util.isNullOrEmpty($entry.value.eq) && !$util.isNullOrEmpty($PkMap.get($entry.key))'), (0, graphql_mapping_template_1.compoundExpression)([
                        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('pk'), (0, graphql_mapping_template_1.ref)('entry.key')),
                        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('scan'), (0, graphql_mapping_template_1.bool)(false)),
                        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('queryRequestVariables.partitionKey'), (0, graphql_mapping_template_1.ref)('pk')),
                        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('queryRequestVariables.sortKeys'), (0, graphql_mapping_template_1.ref)('SkMap.get($PkMap.get($pk))')),
                        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('queryRequestVariables.partitionKeyFilter'), (0, graphql_mapping_template_1.obj)({})),
                        (0, graphql_mapping_template_1.raw)("$util.qr($queryRequestVariables.partitionKeyFilter.put($pk, {'eq': $entry.value.eq}))"),
                        (0, graphql_mapping_template_1.raw)('$util.qr($ctx.args.put($pk,$entry.value.eq))'),
                        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('index'), (0, graphql_mapping_template_1.ref)('PkMap.get($pk)')),
                    ])),
                    (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.raw)('$ind == 1 && !$util.isNullOrEmpty($pk) && !$util.isNullOrEmpty($QueryMap.get("${pk}+$entry.key"))'), (0, graphql_mapping_template_1.compoundExpression)([
                        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('sk'), (0, graphql_mapping_template_1.ref)('entry.key')),
                        (0, graphql_mapping_template_1.raw)('$util.qr($ctx.args.put($sk,$entry.value))'),
                        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('index'), (0, graphql_mapping_template_1.ref)('QueryMap.get("${pk}+$sk")')),
                    ]), (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.raw)('$ind > 0'), (0, graphql_mapping_template_1.qref)('$filterMap.put($entry.key,$entry.value)'))),
                ]),
            ]),
        ]), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('filterMap'), (0, graphql_mapping_template_1.raw)('$ctx.args.filter'))),
    ]));
    return (0, graphql_mapping_template_1.block)('Set query expression for @key', expressions);
};
const generateDeltaTableTTLCheck = (deltaTTLCheckRefName, lastSyncRefName) => {
    return (0, graphql_mapping_template_1.compoundExpression)([
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(deltaTTLCheckRefName), (0, graphql_mapping_template_1.bool)(false)),
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('minLastSync'), (0, graphql_mapping_template_1.raw)('$util.time.nowEpochMilliSeconds() - $ctx.stash.deltaSyncTableTtl * 60 * 1000')),
        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.and)([
            (0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)(lastSyncRefName))),
            (0, graphql_mapping_template_1.notEquals)((0, graphql_mapping_template_1.ref)(lastSyncRefName), (0, graphql_mapping_template_1.int)(0)),
            (0, graphql_mapping_template_1.raw)(`$minLastSync <= $${lastSyncRefName}`),
        ]), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(deltaTTLCheckRefName), (0, graphql_mapping_template_1.bool)(true))),
    ]);
};
const setSyncKeyExpressionForHashKey = (queryExprReference) => {
    const expressions = [];
    expressions.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelQueryExpression), (0, graphql_mapping_template_1.obj)({})), (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.raw)('!$util.isNull($pk)'), (0, graphql_mapping_template_1.compoundExpression)([
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${queryExprReference}.expression`), (0, graphql_mapping_template_1.str)('#pk = :pk')),
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${queryExprReference}.expressionNames`), (0, graphql_mapping_template_1.obj)({ '#pk': (0, graphql_mapping_template_1.str)('$pk') })),
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${queryExprReference}.expressionValues`), (0, graphql_mapping_template_1.obj)({ ':pk': (0, graphql_mapping_template_1.ref)('util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.get($pk)))') })),
    ])));
    return (0, graphql_mapping_template_1.block)('Set Primary Key initialization @key', expressions);
};
const setSyncKeyExpressionForRangeKey = (queryExprReference) => {
    return (0, graphql_mapping_template_1.block)('Applying Key Condition', [
        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.raw)('!$util.isNull($ctx.args.get($sk)) && !$util.isNull($ctx.args.get($sk).beginsWith)'), (0, graphql_mapping_template_1.compoundExpression)([
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${queryExprReference}.expression`), (0, graphql_mapping_template_1.raw)(`"$${queryExprReference}.expression AND begins_with(#sortKey, :sortKey)"`)),
            (0, graphql_mapping_template_1.qref)(`$${queryExprReference}.expressionNames.put("#sortKey", $sk)`),
            (0, graphql_mapping_template_1.qref)(`$${queryExprReference}.expressionValues.put(":sortKey", $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.get($sk).beginsWith)))`),
        ])),
        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.raw)('!$util.isNull($ctx.args.get($sk)) && !$util.isNull($ctx.args.get($sk).between)'), (0, graphql_mapping_template_1.compoundExpression)([
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${queryExprReference}.expression`), (0, graphql_mapping_template_1.raw)(`"$${queryExprReference}.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1"`)),
            (0, graphql_mapping_template_1.qref)(`$${queryExprReference}.expressionNames.put("#sortKey", $sk)`),
            (0, graphql_mapping_template_1.qref)(`$${queryExprReference}.expressionValues.put(":sortKey", $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.get($sk).between[0])))`),
            (0, graphql_mapping_template_1.qref)(`$${queryExprReference}.expressionValues.put(":sortKey", $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.get($sk).between[1])))`),
        ])),
        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.raw)('!$util.isNull($ctx.args.get($sk)) && !$util.isNull($ctx.args.get($sk).eq)'), (0, graphql_mapping_template_1.compoundExpression)([
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${queryExprReference}.expression`), (0, graphql_mapping_template_1.raw)(`"$${queryExprReference}.expression AND #sortKey = :sortKey"`)),
            (0, graphql_mapping_template_1.qref)(`$${queryExprReference}.expressionNames.put("#sortKey", $sk)`),
            (0, graphql_mapping_template_1.qref)(`$${queryExprReference}.expressionValues.put(":sortKey", $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.get($sk).eq)))`),
        ])),
        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.raw)('!$util.isNull($ctx.args.get($sk)) && !$util.isNull($ctx.args.get($sk).lt)'), (0, graphql_mapping_template_1.compoundExpression)([
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${queryExprReference}.expression`), (0, graphql_mapping_template_1.raw)(`"$${queryExprReference}.expression AND #sortKey < :sortKey"`)),
            (0, graphql_mapping_template_1.qref)(`$${queryExprReference}.expressionNames.put("#sortKey", $sk)`),
            (0, graphql_mapping_template_1.qref)(`$${queryExprReference}.expressionValues.put(":sortKey", $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.get($sk).lt)))`),
        ])),
        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.raw)('!$util.isNull($ctx.args.get($sk)) && !$util.isNull($ctx.args.get($sk).le)'), (0, graphql_mapping_template_1.compoundExpression)([
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${queryExprReference}.expression`), (0, graphql_mapping_template_1.raw)(`"$${queryExprReference}.expression AND #sortKey <= :sortKey"`)),
            (0, graphql_mapping_template_1.qref)(`$${queryExprReference}.expressionNames.put("#sortKey", $sk)`),
            (0, graphql_mapping_template_1.qref)(`$${queryExprReference}.expressionValues.put(":sortKey", $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.get($sk).le)))`),
        ])),
        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.raw)('!$util.isNull($ctx.args.get($sk)) && !$util.isNull($ctx.args.get($sk).gt)'), (0, graphql_mapping_template_1.compoundExpression)([
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${queryExprReference}.expression`), (0, graphql_mapping_template_1.raw)(`"$${queryExprReference}.expression AND #sortKey > :sortKey"`)),
            (0, graphql_mapping_template_1.qref)(`$${queryExprReference}.expressionNames.put("#sortKey", $sk)`),
            (0, graphql_mapping_template_1.qref)(`$${queryExprReference}.expressionValues.put(":sortKey", $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.get($sk).gt)))`),
        ])),
        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.raw)('!$util.isNull($ctx.args.get($sk)) && !$util.isNull($ctx.args.get($sk).ge)'), (0, graphql_mapping_template_1.compoundExpression)([
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${queryExprReference}.expression`), (0, graphql_mapping_template_1.raw)(`"$${queryExprReference}.expression AND #sortKey >= :sortKey"`)),
            (0, graphql_mapping_template_1.qref)(`$${queryExprReference}.expressionNames.put("#sortKey", $sk)`),
            (0, graphql_mapping_template_1.qref)(`$${queryExprReference}.expressionValues.put(":sortKey", $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.get($sk).ge)))`),
        ])),
    ]);
};
const makeSyncQueryResolver = () => {
    const requestVariable = 'ctx.stash.QueryRequest';
    const queryRequestVariables = 'ctx.stash.QueryRequestVariables';
    const expressions = [];
    expressions.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.raw)('!$scan'), (0, graphql_mapping_template_1.compoundExpression)([
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('limit'), (0, graphql_mapping_template_1.ref)(`util.defaultIfNull($context.args.limit, ${graphql_transformer_common_1.ResourceConstants.DEFAULT_PAGE_LIMIT})`)),
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(queryRequestVariables), (0, graphql_mapping_template_1.ref)('queryRequestVariables')),
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(requestVariable), (0, graphql_mapping_template_1.obj)({
            version: (0, graphql_mapping_template_1.str)(graphql_mapping_template_1.RESOLVER_VERSION_ID),
            operation: (0, graphql_mapping_template_1.str)('Sync'),
            limit: (0, graphql_mapping_template_1.ref)('limit'),
            lastSync: (0, graphql_mapping_template_1.ref)('util.defaultIfNull($ctx.args.lastSync, null)'),
            query: (0, graphql_mapping_template_1.ref)(graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelQueryExpression),
        })),
        (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.raw)(`!$util.isNull($ctx.args.sortDirection)
                    && $ctx.args.sortDirection == "DESC"`), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${requestVariable}.scanIndexForward`), (0, graphql_mapping_template_1.bool)(false)), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${requestVariable}.scanIndexForward`), (0, graphql_mapping_template_1.bool)(true))),
        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.ref)('context.args.nextToken'), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${requestVariable}.nextToken`), (0, graphql_mapping_template_1.ref)('context.args.nextToken')), true),
        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.and)([(0, graphql_mapping_template_1.raw)('!$util.isNullOrEmpty($filterMap)'), (0, graphql_mapping_template_1.notEquals)((0, graphql_mapping_template_1.toJson)((0, graphql_mapping_template_1.ref)('filterMap')), (0, graphql_mapping_template_1.toJson)((0, graphql_mapping_template_1.obj)({})))]), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${requestVariable}.filter`), (0, graphql_mapping_template_1.ref)('filterMap'))),
        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.raw)('$index != "dbTable"'), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${requestVariable}.index`), (0, graphql_mapping_template_1.ref)('index'))),
    ])), (0, graphql_mapping_template_1.raw)('$util.toJson({})'));
    return (0, graphql_mapping_template_1.block)(' Set query expression for @key', expressions);
};
const generateSyncResolverInit = () => {
    const expressions = [];
    const requestVariable = 'ctx.stash.QueryRequest';
    expressions.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('index'), (0, graphql_mapping_template_1.str)('')), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('scan'), (0, graphql_mapping_template_1.bool)(true)), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('filterMap'), (0, graphql_mapping_template_1.obj)({})), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('QueryMap'), (0, graphql_mapping_template_1.obj)({})), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('PkMap'), (0, graphql_mapping_template_1.obj)({})), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('SkMap'), (0, graphql_mapping_template_1.obj)({})), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('filterArgsMap'), (0, graphql_mapping_template_1.obj)({})), (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.ref)(requestVariable), (0, graphql_mapping_template_1.raw)('#return')), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('queryRequestVariables'), (0, graphql_mapping_template_1.obj)({})));
    return (0, graphql_mapping_template_1.block)('Set map initialization for @key', expressions);
};
const generatePostAuthExpression = (isSandboxModeEnabled, genericIamAccessEnabled) => {
    const expressions = [];
    if (isSandboxModeEnabled) {
        expressions.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.authType')), (0, graphql_mapping_template_1.str)(API_KEY)), (0, graphql_mapping_template_1.ret)((0, graphql_mapping_template_1.toJson)((0, graphql_mapping_template_1.obj)({})))));
    }
    if (genericIamAccessEnabled) {
        const isNonCognitoIAMPrincipal = (0, graphql_mapping_template_1.and)([
            (0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('util.authType()'), (0, graphql_mapping_template_1.str)(IAM_AUTH_TYPE)),
            (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)('ctx.identity.cognitoIdentityPoolId')),
            (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)('ctx.identity.cognitoIdentityId')),
        ]);
        expressions.push((0, graphql_mapping_template_1.iff)(isNonCognitoIAMPrincipal, (0, graphql_mapping_template_1.ret)((0, graphql_mapping_template_1.toJson)((0, graphql_mapping_template_1.obj)({})))));
    }
    expressions.push((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.unauthorized')));
    return (0, graphql_mapping_template_1.printBlock)(`Sandbox Mode ${isSandboxModeEnabled ? 'Enabled' : 'Disabled'}, IAM Access ${genericIamAccessEnabled ? 'Enabled' : 'Disabled'}`)((0, graphql_mapping_template_1.compoundExpression)([(0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)('ctx.stash.get("hasAuth")')), (0, graphql_mapping_template_1.compoundExpression)(expressions)), (0, graphql_mapping_template_1.toJson)((0, graphql_mapping_template_1.obj)({}))]));
};
exports.generatePostAuthExpression = generatePostAuthExpression;
const getVTLGenerator = (dbType) => {
    switch (dbType) {
        case graphql_transformer_core_1.DDB_DB_TYPE:
            return new generators_1.DynamoDBIndexVTLGenerator();
        case graphql_transformer_core_1.MYSQL_DB_TYPE:
            return new generators_1.RDSIndexVTLGenerator();
        case graphql_transformer_core_1.POSTGRES_DB_TYPE:
            return new generators_1.RDSIndexVTLGenerator();
        default:
            throw new Error(`Unknown database type ${dbType}`);
    }
};
exports.getVTLGenerator = getVTLGenerator;
//# sourceMappingURL=resolvers.js.map