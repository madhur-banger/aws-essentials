"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RDSIndexVTLGenerator = void 0;
const graphql_mapping_template_1 = require("graphql-mapping-template");
const resolvers_1 = require("../resolvers");
class RDSIndexVTLGenerator {
    constructor() {
        this.generatePrimaryKeyVTL = (config, ctx, resolverMap) => {
            this.updateResolvers(config, ctx, resolverMap);
        };
        this.updateResolvers = (config, ctx, resolverMap) => {
            const getResolver = (0, resolvers_1.getResolverObject)(config, ctx, 'get');
            const listResolver = (0, resolvers_1.getResolverObject)(config, ctx, 'list');
            const createResolver = (0, resolvers_1.getResolverObject)(config, ctx, 'create');
            const updateResolver = (0, resolvers_1.getResolverObject)(config, ctx, 'update');
            const deleteResolver = (0, resolvers_1.getResolverObject)(config, ctx, 'delete');
            const primaryKeySnippet = this.setPrimaryKeySnippet(config);
            if (getResolver) {
                (0, resolvers_1.addIndexToResolverSlot)(getResolver, [primaryKeySnippet]);
            }
            if (listResolver) {
                const sortDirectionValidation = (0, graphql_mapping_template_1.printBlock)('Validate the sort direction input')((0, graphql_mapping_template_1.compoundExpression)((0, resolvers_1.validateSortDirectionInput)(config, true)));
                (0, resolvers_1.addIndexToResolverSlot)(listResolver, [primaryKeySnippet, sortDirectionValidation]);
            }
            if (createResolver) {
                (0, resolvers_1.addIndexToResolverSlot)(createResolver, [primaryKeySnippet]);
            }
            if (updateResolver) {
                (0, resolvers_1.addIndexToResolverSlot)(updateResolver, [primaryKeySnippet]);
            }
            if (deleteResolver) {
                (0, resolvers_1.addIndexToResolverSlot)(deleteResolver, [primaryKeySnippet]);
            }
        };
        this.setPrimaryKeySnippet = (config) => {
            const expressions = [(0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('keys'), (0, graphql_mapping_template_1.list)([])), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('keys.add'), (0, graphql_mapping_template_1.str)(config.field.name.value)))];
            config.sortKeyFields.map((field) => {
                expressions.push((0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('keys.add'), (0, graphql_mapping_template_1.str)(field))));
            });
            expressions.push((0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.stash.put'), (0, graphql_mapping_template_1.str)('keys'), (0, graphql_mapping_template_1.ref)('keys'))));
            return (0, graphql_mapping_template_1.printBlock)('Set the primary key information in metadata')((0, graphql_mapping_template_1.compoundExpression)(expressions));
        };
    }
    generateIndexQueryRequestTemplate(config, ctx, tableName, operationName) {
        const mappedTableName = ctx.resourceHelper.getModelNameMapping(tableName);
        return (0, graphql_mapping_template_1.printBlock)('Invoke RDS Lambda data source')((0, graphql_mapping_template_1.compoundExpression)([
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('lambdaInput'), (0, graphql_mapping_template_1.obj)({})),
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('lambdaInput.args'), (0, graphql_mapping_template_1.obj)({})),
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('lambdaInput.table'), (0, graphql_mapping_template_1.str)(mappedTableName)),
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('lambdaInput.operation'), (0, graphql_mapping_template_1.str)('INDEX')),
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('lambdaInput.operationName'), (0, graphql_mapping_template_1.str)(operationName)),
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('lambdaInput.args.metadata'), (0, graphql_mapping_template_1.obj)({})),
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('lambdaInput.args.metadata.keys'), (0, graphql_mapping_template_1.list)([])),
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('lambdaInput.args.metadata.fieldMap'), (0, graphql_mapping_template_1.obj)({})),
            (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('lambdaInput.args.metadata.fieldMap.putAll'), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.defaultIfNull'), (0, graphql_mapping_template_1.ref)('context.stash.fieldMap'), (0, graphql_mapping_template_1.obj)({})))),
            (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('lambdaInput.args.metadata.keys.addAll'), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.defaultIfNull'), (0, graphql_mapping_template_1.ref)('ctx.stash.keys'), (0, graphql_mapping_template_1.list)([])))),
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('lambdaInput.args.input'), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.defaultIfNull'), (0, graphql_mapping_template_1.ref)('ctx.stash.defaultValues'), (0, graphql_mapping_template_1.obj)({}))),
            (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('lambdaInput.args.input.putAll'), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.defaultIfNull'), (0, graphql_mapping_template_1.ref)('context.arguments'), (0, graphql_mapping_template_1.obj)({})))),
            (0, graphql_mapping_template_1.obj)({
                version: (0, graphql_mapping_template_1.str)('2018-05-29'),
                operation: (0, graphql_mapping_template_1.str)('Invoke'),
                payload: (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.toJson'), (0, graphql_mapping_template_1.ref)('lambdaInput')),
            }),
        ]));
    }
}
exports.RDSIndexVTLGenerator = RDSIndexVTLGenerator;
//# sourceMappingURL=rds-vtl-generator.js.map