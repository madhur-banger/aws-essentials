"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMappingLambda = void 0;
const path = __importStar(require("path"));
const lambda = __importStar(require("aws-cdk-lib/aws-lambda"));
const iam = __importStar(require("aws-cdk-lib/aws-iam"));
const cdk = __importStar(require("aws-cdk-lib"));
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const createMappingLambda = (host, stackManager) => {
    const baseName = 'MapsToFieldMapping';
    const lambdaDataSourceName = `${baseName}LambdaDataSource`;
    const existingLambdaDataSource = host.getDataSource(lambdaDataSourceName);
    if (existingLambdaDataSource) {
        return existingLambdaDataSource;
    }
    const stack = stackManager.createStack(`${baseName}Stack`);
    const roleName = `${baseName}LambdaRole`;
    const role = new iam.Role(stack, roleName, {
        assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),
    });
    (0, graphql_transformer_core_1.setResourceName)(role, { name: roleName, setOnDefaultChild: true });
    const funcLogicalId = `${baseName}LambdaFunction`;
    const lambdaFunc = host.addLambdaFunction(funcLogicalId, `functions/${funcLogicalId}.zip`, 'index.handler', path.join(__dirname, 'assets', 'mapping-lambda.zip'), lambda.Runtime.NODEJS_18_X, undefined, role, undefined, cdk.Duration.seconds(30), stack);
    role.attachInlinePolicy(new iam.Policy(stack, `${baseName}CloudWatchLogAccess`, {
        statements: [
            new iam.PolicyStatement({
                actions: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents'],
                effect: iam.Effect.ALLOW,
                resources: [
                    cdk.Fn.sub(`arn:aws:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/\${funcName}:log-stream:*`, {
                        funcName: lambdaFunc.functionName,
                    }),
                ],
            }),
        ],
    }));
    const lambdaDataSource = host.addLambdaDataSource(lambdaDataSourceName, lambdaFunc, undefined, stack);
    return lambdaDataSource;
};
exports.createMappingLambda = createMappingLambda;
//# sourceMappingURL=field-mapping-lambda.js.map