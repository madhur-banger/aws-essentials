"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.attachFilterAndConditionInputMappingSlot = exports.attachResponseMappingSlot = exports.attachFieldMappingSlot = exports.attachInputMappingSlot = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const graphql_mapping_template_1 = require("graphql-mapping-template");
const graphql_transformer_common_1 = require("graphql-transformer-common");
const attachInputMappingSlot = ({ resolver, resolverTypeName, resolverFieldName, fieldMap }) => {
    resolver.addVtlFunctionToSlot('preUpdate', graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString((0, graphql_mapping_template_1.print)((0, graphql_mapping_template_1.compoundExpression)([createMultiRemapExpression('ctx.args.input', fieldMap, 'CURR_TO_ORIG'), (0, graphql_mapping_template_1.toJson)((0, graphql_mapping_template_1.raw)('{}'))])), `${resolverTypeName}.${resolverFieldName}.{slotName}.{slotIndex}.req.vtl`));
};
exports.attachInputMappingSlot = attachInputMappingSlot;
const attachFieldMappingSlot = ({ resolver, resolverTypeName, resolverFieldName, fieldMap }) => {
    resolver.addVtlFunctionToSlot('preAuth', graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString((0, graphql_mapping_template_1.print)((0, graphql_mapping_template_1.compoundExpression)([createFieldMapExpression(fieldMap), (0, graphql_mapping_template_1.toJson)((0, graphql_mapping_template_1.raw)('{}'))])), `${resolverTypeName}.${resolverFieldName}.{slotName}.{slotIndex}.req.vtl`));
};
exports.attachFieldMappingSlot = attachFieldMappingSlot;
const attachResponseMappingSlot = ({ slotName, resolver, resolverFieldName, resolverTypeName, fieldMap, isList, }) => {
    resolver.addVtlFunctionToSlot(slotName, undefined, graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString((0, graphql_mapping_template_1.print)((0, graphql_mapping_template_1.compoundExpression)([
        isList
            ? createListRemapExpression('ctx.prev.result.items', fieldMap, 'ORIG_TO_CURR')
            : createMultiRemapExpression('ctx.prev.result', fieldMap, 'ORIG_TO_CURR'),
        (0, graphql_mapping_template_1.toJson)((0, graphql_mapping_template_1.ref)('ctx.prev.result')),
    ])), `${resolverTypeName}.${resolverFieldName}.{slotName}.{slotIndex}.res.vtl`));
};
exports.attachResponseMappingSlot = attachResponseMappingSlot;
const attachFilterAndConditionInputMappingSlot = ({ slotName, resolver, resolverTypeName, resolverFieldName, fieldMap, dataSource, }) => {
    const fieldMapVtl = fieldMap.reduce((acc, { originalFieldName, currentFieldName }) => {
        acc[currentFieldName] = originalFieldName;
        return acc;
    }, {});
    const fieldMapRef = (0, graphql_mapping_template_1.ref)('fieldMap');
    resolver.addVtlFunctionToSlot(slotName, graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString((0, graphql_mapping_template_1.print)((0, graphql_mapping_template_1.compoundExpression)([
        (0, graphql_mapping_template_1.set)(fieldMapRef, (0, graphql_mapping_template_1.raw)(JSON.stringify(fieldMapVtl))),
        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.or)([(0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), fieldMapRef), (0, graphql_mapping_template_1.raw)('$fieldMap.keySet().size() <= 0')]), (0, graphql_mapping_template_1.ret)((0, graphql_mapping_template_1.ref)('ctx.args'))),
        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.and)([
            (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)('ctx.args.filter')),
            (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)('ctx.args.condition')),
            (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)('ctx.args.sort')),
            (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)('ctx.args.aggregates')),
        ]), (0, graphql_mapping_template_1.ret)((0, graphql_mapping_template_1.ref)('ctx.args'))),
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('invoke'), (0, graphql_mapping_template_1.obj)({
            operation: (0, graphql_mapping_template_1.str)('Invoke'),
            payload: (0, graphql_mapping_template_1.obj)({
                args: (0, graphql_mapping_template_1.ref)('ctx.args'),
                fieldMap: fieldMapRef,
            }),
        })),
        (0, graphql_mapping_template_1.toJson)((0, graphql_mapping_template_1.ref)('invoke')),
    ])), `${resolverTypeName}.${resolverFieldName}.{slotName}.{slotIndex}.req.vtl`), graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString((0, graphql_mapping_template_1.print)((0, graphql_mapping_template_1.compoundExpression)([
        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.ref)('ctx.error'), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.error'), (0, graphql_mapping_template_1.ref)('ctx.error.message'), (0, graphql_mapping_template_1.ref)('ctx.error.type'))),
        (0, graphql_transformer_common_1.setTransformedArgs)((0, graphql_mapping_template_1.ref)('ctx.result')),
        (0, graphql_mapping_template_1.toJson)((0, graphql_mapping_template_1.raw)('{}')),
    ])), `${resolverTypeName}.${resolverFieldName}.{slotName}.{slotIndex}.res.vtl`), dataSource);
};
exports.attachFilterAndConditionInputMappingSlot = attachFilterAndConditionInputMappingSlot;
const createListRemapExpression = (resultListName, fieldMap, direction) => (0, graphql_mapping_template_1.forEach)((0, graphql_mapping_template_1.ref)('item'), (0, graphql_mapping_template_1.ref)(resultListName), [createMultiRemapExpression('item', fieldMap, direction)]);
const createMultiRemapExpression = (vtlMapName, fieldMap, direction) => {
    const expressions = [];
    fieldMap.forEach(({ originalFieldName, currentFieldName }) => {
        if (direction === 'ORIG_TO_CURR') {
            expressions.push(createRemapExpression(vtlMapName, originalFieldName, currentFieldName));
        }
        else {
            expressions.push(createRemapExpression(vtlMapName, currentFieldName, originalFieldName));
        }
    });
    return (0, graphql_mapping_template_1.compoundExpression)(expressions);
};
const createRemapExpression = (vtlMapName, sourceAttrName, destAttrName) => (0, graphql_mapping_template_1.compoundExpression)([
    (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`${vtlMapName}.put`), (0, graphql_mapping_template_1.str)(destAttrName), (0, graphql_mapping_template_1.ref)(`${vtlMapName}.${sourceAttrName}`))),
    (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`${vtlMapName}.remove`), (0, graphql_mapping_template_1.str)(sourceAttrName))),
]);
const createFieldMapExpression = (fieldMap) => {
    const fieldMapRef = (0, graphql_mapping_template_1.ref)('fieldMap');
    const fieldMapVtl = fieldMap.reduce((acc, { originalFieldName, currentFieldName }) => {
        acc[currentFieldName] = originalFieldName;
        return acc;
    }, {});
    return (0, graphql_mapping_template_1.compoundExpression)([(0, graphql_mapping_template_1.set)(fieldMapRef, (0, graphql_mapping_template_1.raw)(JSON.stringify(fieldMapVtl))), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('ctx.stash.fieldMap'), fieldMapRef)]);
};
//# sourceMappingURL=field-mapping-resolvers.js.map