import { AppSyncAuthConfiguration, TransformerPluginProvider, TransformerLog, NestedStackProvider, AssetProvider, SynthParameters, TransformParameterProvider } from '@aws-amplify/graphql-transformer-interfaces';
import type { DataSourceStrategiesProvider, RDSLayerMappingProvider, RDSSNSTopicMappingProvider, TransformParameters } from '@aws-amplify/graphql-transformer-interfaces';
import { GraphQLTransform, ResolverConfig, UserDefinedSlot } from '@aws-amplify/graphql-transformer-core';
import { Construct } from 'constructs';
import { IFunction } from 'aws-cdk-lib/aws-lambda';
export type TransformerFactoryArgs = {
    storageConfig?: any;
    customTransformers?: TransformerPluginProvider[];
    functionNameMap?: Record<string, IFunction>;
};
export type TransformConfig = {
    transformersFactoryArgs: TransformerFactoryArgs;
    resolverConfig?: ResolverConfig;
    authConfig?: AppSyncAuthConfiguration;
    userDefinedSlots?: Record<string, UserDefinedSlot[]>;
    stackMapping?: Record<string, string>;
    transformParameters: TransformParameters;
};
export declare const constructTransformerChain: (options?: TransformerFactoryArgs) => TransformerPluginProvider[];
export declare const constructTransform: (config: TransformConfig) => GraphQLTransform;
export type ExecuteTransformConfig = TransformConfig & DataSourceStrategiesProvider & RDSLayerMappingProvider & RDSSNSTopicMappingProvider & {
    schema: string;
    printTransformerLog?: (log: TransformerLog) => void;
    scope: Construct;
    nestedStackProvider: NestedStackProvider;
    parameterProvider?: TransformParameterProvider;
    assetProvider: AssetProvider;
    synthParameters: SynthParameters;
};
export declare const defaultPrintTransformerLog: (log: TransformerLog) => void;
export declare const executeTransform: (config: ExecuteTransformConfig) => void;
//# sourceMappingURL=graphql-transformer.d.ts.map