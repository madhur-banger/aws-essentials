import { ModelDirectiveConfiguration } from '@aws-amplify/graphql-model-transformer';
import { QueryFieldType, MutationFieldType, TransformerTransformSchemaStepContextProvider, TransformerContextProvider } from '@aws-amplify/graphql-transformer-interfaces';
import type { TransformParameters } from '@aws-amplify/graphql-transformer-interfaces';
import { ObjectTypeDefinitionNode, FieldDefinitionNode, DirectiveNode } from 'graphql';
import { RelationalPrimaryMapConfig, SearchableConfig } from './definitions';
import { RoleDefinition } from './role-definition';
export declare const collectFieldNames: (object: ObjectTypeDefinitionNode) => Array<string>;
export declare const fieldIsList: (fields: ReadonlyArray<FieldDefinitionNode>, fieldName: string) => boolean;
export declare const getModelConfig: (directive: DirectiveNode, typeName: string, transformParameters: TransformParameters, isDataStoreEnabled?: boolean) => ModelDirectiveConfiguration;
export declare const getSearchableConfig: (directive: DirectiveNode, typeName: string, transformParameters: TransformParameters) => SearchableConfig | null;
export declare const getRelationalPrimaryMap: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, field: FieldDefinitionNode, relatedModel: ObjectTypeDefinitionNode) => RelationalPrimaryMapConfig;
export declare const hasRelationalDirective: (field: FieldDefinitionNode) => boolean;
export declare const getPartitionKey: (ks: any) => string;
export declare const extendTypeWithDirectives: (ctx: TransformerTransformSchemaStepContextProvider, typeName: string, directives: Array<DirectiveNode>) => void;
export declare const addDirectivesToField: (ctx: TransformerTransformSchemaStepContextProvider, typeName: string, fieldName: string, directives: Array<DirectiveNode>) => void;
export declare const addSubscriptionArguments: (ctx: TransformerTransformSchemaStepContextProvider, operationName: string, subscriptionRoles: Array<RoleDefinition>) => void;
export declare const addDirectivesToOperation: (ctx: TransformerTransformSchemaStepContextProvider, typeName: string, operationName: string, directives: Array<DirectiveNode>) => void;
export declare const getQueryFieldNames: (modelDirectiveConfig: ModelDirectiveConfiguration) => Set<{
    fieldName: string;
    typeName: string;
    type: QueryFieldType;
}>;
export declare const getMutationFieldNames: (modelDirectiveConfig: ModelDirectiveConfiguration) => Set<{
    fieldName: string;
    typeName: string;
    type: MutationFieldType;
}>;
export declare const getSubscriptionFieldNames: (modelDirectiveConfig: ModelDirectiveConfiguration) => Set<{
    fieldName: string;
    typeName: string;
}>;
//# sourceMappingURL=schema.d.ts.map