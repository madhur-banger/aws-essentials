"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAuthExpressionForRelationQuery = exports.generateAuthExpressionForQueries = void 0;
const graphql_mapping_template_1 = require("graphql-mapping-template");
const utils_1 = require("../../../utils");
const common_1 = require("../../common");
const helpers_1 = require("./helpers");
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const generateStaticRoleExpression = (roles) => {
    const staticRoleExpression = [];
    const privateRoleIdx = roles.findIndex((r) => r.strategy === 'private');
    if (privateRoleIdx > -1) {
        staticRoleExpression.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)));
        roles.splice(privateRoleIdx, 1);
    }
    if (roles.length > 0) {
        staticRoleExpression.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG)), (0, graphql_mapping_template_1.compoundExpression)([
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('staticGroupRoles'), (0, graphql_mapping_template_1.raw)(JSON.stringify(roles.map((r) => ({ claim: r.claim, entity: r.entity }))))),
            (0, graphql_mapping_template_1.forEach)((0, graphql_mapping_template_1.ref)('groupRole'), (0, graphql_mapping_template_1.ref)('staticGroupRoles'), [
                (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('groupsInToken'), (0, helpers_1.getIdentityClaimExp)((0, graphql_mapping_template_1.ref)('groupRole.claim'), (0, graphql_mapping_template_1.list)([]))),
                (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('groupsInToken.contains'), (0, graphql_mapping_template_1.ref)('groupRole.entity')), (0, graphql_mapping_template_1.compoundExpression)([(0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)), (0, graphql_mapping_template_1.raw)('#break')])),
            ]),
        ])));
    }
    return staticRoleExpression;
};
const generateAuthOnRelationalModelQueryExpression = (roles, primaryFieldMap) => {
    const modelQueryExpression = new Array();
    const primaryRoles = roles.filter((r) => primaryFieldMap.has(r.entity));
    if (primaryRoles.length > 0) {
        primaryRoles.forEach((role, idx) => {
            const { claim, field } = primaryFieldMap.get(role.entity);
            modelQueryExpression.push((0, helpers_1.generateOwnerClaimExpression)(role.claim, `primaryRole${idx}`), (0, graphql_mapping_template_1.iff)((0, helpers_1.generateInvalidClaimsCondition)(role.claim, `primaryRole${idx}`), (0, graphql_mapping_template_1.compoundExpression)([
                (0, helpers_1.generateOwnerMultiClaimExpression)(role.claim, `primaryRole${idx}`),
                (0, helpers_1.generateOwnerClaimListExpression)(role.claim, `ownerClaimsList${idx}`),
                (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.and)([
                    (0, graphql_mapping_template_1.parens)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(`util.isNull($ctx.${claim}.${field})`))),
                    (0, graphql_mapping_template_1.parens)((0, graphql_mapping_template_1.or)([
                        (0, graphql_mapping_template_1.parens)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)(`ctx.${claim}.${field}`), (0, graphql_mapping_template_1.ref)(`primaryRole${idx}`))),
                        (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`ownerClaimsList${idx}.contains`), (0, graphql_mapping_template_1.ref)(`ctx.${claim}.${field}`)),
                    ])),
                ]), (0, graphql_mapping_template_1.compoundExpression)([
                    (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)),
                    (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.stash.put'), (0, graphql_mapping_template_1.str)('authFilter'), (0, graphql_mapping_template_1.nul)())),
                ]), (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.and)([(0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG)), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)('ctx.stash.authFilter'))]), (0, graphql_mapping_template_1.compoundExpression)([
                    (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)(claim === 'source' ? (0, graphql_mapping_template_1.ref)(`ctx.stash.connectionAttributes.put`) : (0, graphql_mapping_template_1.ref)(`ctx.${claim}.put`), (0, graphql_mapping_template_1.str)(field), (0, graphql_mapping_template_1.ref)(`primaryRole${idx}`))),
                    (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)),
                ]))),
            ])));
        });
        return [(0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG)), (0, graphql_mapping_template_1.compoundExpression)(modelQueryExpression))];
    }
    return modelQueryExpression;
};
const generateAuthOnModelQueryExpression = (roles, primaryFields, isIndexQuery = false, primaryKey = undefined, sortKeyFields) => {
    const modelQueryExpression = new Array();
    const primaryRoles = roles.filter((r) => primaryFields.includes(r.entity));
    if (primaryRoles.length > 0) {
        if (isIndexQuery) {
            primaryRoles.forEach((role, idx) => {
                const claims = role.claim.split(utils_1.IDENTITY_CLAIM_DELIMITER);
                const hasMultiClaims = claims.length > 1;
                modelQueryExpression.push((0, helpers_1.generateOwnerClaimExpression)(role.claim, `${role.entity}Claim`), (0, graphql_mapping_template_1.iff)((0, helpers_1.generateInvalidClaimsCondition)(role.claim, `${role.entity}Claim`), (0, graphql_mapping_template_1.compoundExpression)([
                    (0, helpers_1.generateOwnerMultiClaimExpression)(role.claim, `${role.entity}Claim`),
                    (0, helpers_1.generateOwnerClaimListExpression)(role.claim, `ownerClaimsList${idx}`),
                    (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isString'), (0, graphql_mapping_template_1.ref)(`${role.entity}Claim`)), (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isList'), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.parseJson'), (0, graphql_mapping_template_1.ref)(`${role.entity}Claim`))), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${role.entity}Claim`), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.parseJson'), (0, graphql_mapping_template_1.ref)(`${role.entity}Claim`))), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${role.entity}Claim`), (0, graphql_mapping_template_1.list)([(0, graphql_mapping_template_1.ref)(`${role.entity}Claim`)])))),
                    (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`ownerClaimsList${idx}.addAll`), (0, graphql_mapping_template_1.ref)(`${role.entity}Claim`))),
                    (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(`util.isNull($ctx.args.${role.entity})`)), (0, graphql_mapping_template_1.compoundExpression)([
                        (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.ref)(`util.isString($ctx.args.${role.entity})`), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${role.entity}Condition`), (0, graphql_mapping_template_1.parens)((0, graphql_mapping_template_1.or)([
                            (0, graphql_mapping_template_1.parens)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)(`${role.entity}Claim`), (0, graphql_mapping_template_1.ref)(`ctx.args.${role.entity}`))),
                            (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`ownerClaimsList${idx}.contains`), (0, graphql_mapping_template_1.ref)(`ctx.args.${role.entity}`)),
                        ]))), (0, graphql_mapping_template_1.compoundExpression)([
                            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${role.entity}Condition`), (0, graphql_mapping_template_1.parens)((0, graphql_mapping_template_1.or)([
                                (0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)(`${role.entity}Claim`), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.defaultIfNull'), (0, graphql_mapping_template_1.raw)(`$ctx.args.${role.entity}.get("eq")`), (0, graphql_mapping_template_1.nul)())),
                                (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`ownerClaimsList${idx}.contains`), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.defaultIfNull'), (0, graphql_mapping_template_1.raw)(`$ctx.args.${role.entity}.get("eq")`), (0, graphql_mapping_template_1.nul)())),
                            ]))),
                            (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(`${role.entity}Condition`)), (0, graphql_mapping_template_1.compoundExpression)([
                                (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('entityValues'), (0, graphql_mapping_template_1.raw)('0')),
                                (0, graphql_mapping_template_1.forEach)((0, graphql_mapping_template_1.ref)(`argEntity`), (0, graphql_mapping_template_1.ref)(`ctx.args.${role.entity}.get("eq")`), [
                                    (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`ownerClaimsList${idx}.contains`), (0, graphql_mapping_template_1.ref)('argEntity')), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('entityValues'), (0, graphql_mapping_template_1.raw)('$entityValues + 1'))),
                                ]),
                                (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('entityValues'), (0, graphql_mapping_template_1.ref)(`ctx.args.${role.entity}.get("eq").size()`)), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${role.entity}Condition`), (0, graphql_mapping_template_1.bool)(true))),
                            ])),
                        ])),
                        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.ref)(`${role.entity}Condition`), (0, graphql_mapping_template_1.compoundExpression)([
                            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)),
                            (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.stash.put'), (0, graphql_mapping_template_1.str)('authFilter'), (0, graphql_mapping_template_1.nul)())),
                        ])),
                    ]), hasMultiClaims
                        ? (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('primaryFieldMap.put'), (0, graphql_mapping_template_1.str)(role.entity), (0, graphql_mapping_template_1.ref)(`ownerClaimsList${idx}`)))
                        : (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('primaryFieldMap.put'), (0, graphql_mapping_template_1.str)(role.entity), (0, graphql_mapping_template_1.ref)(`${role.entity}Claim`)))),
                ])));
            });
            modelQueryExpression.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.and)([
                (0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG)),
                (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)('ctx.stash.authFilter')),
                (0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)('primaryFieldMap.isEmpty()')),
            ]), (0, graphql_mapping_template_1.compoundExpression)([
                (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('sortKeyFields'), (0, graphql_mapping_template_1.list)(sortKeyFields.map((sk) => (0, graphql_mapping_template_1.str)(sk)))),
                (0, graphql_mapping_template_1.forEach)((0, graphql_mapping_template_1.ref)('entry'), (0, graphql_mapping_template_1.ref)('primaryFieldMap.entrySet()'), [
                    (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('sortKeyFields.contains'), (0, graphql_mapping_template_1.ref)('entry.key')), (0, graphql_mapping_template_1.compoundExpression)([
                        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('entryVal'), (0, graphql_mapping_template_1.ref)('entry.value')),
                        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('lastIdx'), (0, graphql_mapping_template_1.ref)('entryVal.size() - 1')),
                        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('lastItem'), (0, graphql_mapping_template_1.ref)('entryVal.get($lastIdx)')),
                        (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.args.put'), (0, graphql_mapping_template_1.ref)('entry.key'), (0, graphql_mapping_template_1.obj)({ eq: (0, graphql_mapping_template_1.ref)('lastItem') }))),
                    ]), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.args.put'), (0, graphql_mapping_template_1.ref)('entry.key'), (0, graphql_mapping_template_1.ref)('entry.value')))),
                    (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)),
                ]),
            ])));
        }
        else {
            primaryRoles.forEach((role, idx) => {
                const claims = role.claim.split(utils_1.IDENTITY_CLAIM_DELIMITER);
                const hasMultiClaims = claims.length > 1;
                modelQueryExpression.push((0, helpers_1.generateOwnerClaimExpression)(role.claim, `${role.entity}Claim`), (0, graphql_mapping_template_1.iff)((0, helpers_1.generateInvalidClaimsCondition)(role.claim, `${role.entity}Claim`), (0, graphql_mapping_template_1.compoundExpression)([
                    (0, helpers_1.generateOwnerMultiClaimExpression)(role.claim, `${role.entity}Claim`),
                    (0, helpers_1.generateOwnerClaimListExpression)(role.claim, `ownerClaimsList${idx}`),
                    (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isString'), (0, graphql_mapping_template_1.ref)(`${role.entity}Claim`)), (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isList'), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.parseJson'), (0, graphql_mapping_template_1.ref)(`${role.entity}Claim`))), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${role.entity}Claim`), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.parseJson'), (0, graphql_mapping_template_1.ref)(`${role.entity}Claim`))), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${role.entity}Claim`), (0, graphql_mapping_template_1.list)([(0, graphql_mapping_template_1.ref)(`${role.entity}Claim`)])))),
                    (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`ownerClaimsList${idx}.addAll`), (0, graphql_mapping_template_1.ref)(`${role.entity}Claim`))),
                    (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(`util.isNull($ctx.args.${role.entity})`)), (0, graphql_mapping_template_1.compoundExpression)([
                        (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.ref)(`util.isString($ctx.args.${role.entity})`), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${role.entity}Condition`), (0, graphql_mapping_template_1.parens)((0, graphql_mapping_template_1.or)([
                            (0, graphql_mapping_template_1.parens)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)(`${role.entity}Claim`), (0, graphql_mapping_template_1.ref)(`ctx.args.${role.entity}`))),
                            (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`ownerClaimsList${idx}.contains`), (0, graphql_mapping_template_1.ref)(`ctx.args.${role.entity}`)),
                        ]))), (0, graphql_mapping_template_1.compoundExpression)([
                            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${role.entity}Condition`), (0, graphql_mapping_template_1.parens)((0, graphql_mapping_template_1.or)([
                                (0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)(`${role.entity}Claim`), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.defaultIfNull'), (0, graphql_mapping_template_1.raw)(`$ctx.args.${role.entity}.get("eq")`), (0, graphql_mapping_template_1.nul)())),
                                (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`ownerClaimsList${idx}.contains`), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.defaultIfNull'), (0, graphql_mapping_template_1.raw)(`$ctx.args.${role.entity}.get("eq")`), (0, graphql_mapping_template_1.nul)())),
                            ]))),
                            (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(`${role.entity}Condition`)), (0, graphql_mapping_template_1.compoundExpression)([
                                (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('entityValues'), (0, graphql_mapping_template_1.raw)('0')),
                                (0, graphql_mapping_template_1.forEach)((0, graphql_mapping_template_1.ref)(`argEntity`), (0, graphql_mapping_template_1.ref)(`ctx.args.${role.entity}.get("eq")`), [
                                    (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`ownerClaimsList${idx}.contains`), (0, graphql_mapping_template_1.ref)('argEntity')), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('entityValues'), (0, graphql_mapping_template_1.raw)('$entityValues + 1'))),
                                ]),
                                (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('entityValues'), (0, graphql_mapping_template_1.ref)(`ctx.args.${role.entity}.get("eq").size()`)), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`${role.entity}Condition`), (0, graphql_mapping_template_1.bool)(true))),
                            ])),
                        ])),
                        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.ref)(`${role.entity}Condition`), (0, graphql_mapping_template_1.compoundExpression)([
                            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)),
                            (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.stash.put'), (0, graphql_mapping_template_1.str)('authFilter'), (0, graphql_mapping_template_1.nul)())),
                        ])),
                    ]), hasMultiClaims
                        ? (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('primaryFieldMap.put'), (0, graphql_mapping_template_1.str)(role.entity), (0, graphql_mapping_template_1.ref)(`ownerClaimsList${idx}`)))
                        : (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('primaryFieldMap.put'), (0, graphql_mapping_template_1.str)(role.entity), (0, graphql_mapping_template_1.ref)(`${role.entity}Claim`)))),
                ])));
            });
            modelQueryExpression.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.and)([(0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG)), (0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)('primaryFieldMap.isEmpty()'))]), (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)(`ctx.args.${primaryKey}`)), (0, graphql_mapping_template_1.compoundExpression)([
                (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('authFilter'), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.defaultIfNull'), (0, graphql_mapping_template_1.ref)('ctx.stash.get("authFilter").get("or")'), (0, graphql_mapping_template_1.list)([]))),
                (0, graphql_mapping_template_1.forEach)((0, graphql_mapping_template_1.ref)('entry'), (0, graphql_mapping_template_1.ref)('primaryFieldMap.entrySet()'), [
                    (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('filterMap'), (0, graphql_mapping_template_1.obj)({})),
                    (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isList'), (0, graphql_mapping_template_1.ref)('entry.value')), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('filterMap.put'), (0, graphql_mapping_template_1.ref)('entry.key'), (0, graphql_mapping_template_1.raw)('{ "in": $entry.value }'))), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('filterMap.put'), (0, graphql_mapping_template_1.ref)('entry.key'), (0, graphql_mapping_template_1.raw)('{ "eq": $entry.value }')))),
                    (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('authFilter.add'), (0, graphql_mapping_template_1.ref)('filterMap'))),
                ]),
                (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.stash.put'), (0, graphql_mapping_template_1.str)('authFilter'), (0, graphql_mapping_template_1.raw)('{ "or": $authFilter }'))),
            ]), (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)('ctx.stash.authFilter')), (0, graphql_mapping_template_1.compoundExpression)([
                (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('modelQueryExpression'), (0, graphql_mapping_template_1.ref)('ctx.stash.modelQueryExpression')),
                (0, graphql_mapping_template_1.forEach)((0, graphql_mapping_template_1.ref)('entry'), (0, graphql_mapping_template_1.ref)('primaryFieldMap.entrySet()'), [
                    (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('modelQueryExpression.expression'), (0, graphql_mapping_template_1.str)('${modelQueryExpression.expression} AND #${entry.key} = :${entry.key}')),
                    (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.ref)('modelQueryExpression.expressionNames.put("#${entry.key}", $entry.key)')),
                    (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isList'), (0, graphql_mapping_template_1.ref)('entry.value')), (0, graphql_mapping_template_1.compoundExpression)([
                        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('lastClaim'), (0, graphql_mapping_template_1.raw)('$entry.value.size() - 1')),
                        (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.ref)('modelQueryExpression.expressionValues.put(":${entry.key}", $util.dynamodb.toDynamoDB($entry.value[$lastClaim]))')),
                    ]), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.ref)('modelQueryExpression.expressionValues.put(":${entry.key}", $util.dynamodb.toDynamoDB($entry.value))'))),
                ]),
                (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.stash.put'), (0, graphql_mapping_template_1.str)('modelQueryExpression'), (0, graphql_mapping_template_1.ref)('modelQueryExpression'))),
                (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)),
            ])))));
        }
        return modelQueryExpression;
    }
    return [];
};
const generateAuthFilter = (roles, fields) => {
    const authCollectionExp = new Array();
    const groupMap = new Map();
    const groupContainsExpression = new Array();
    if (!(roles.length > 0))
        return [];
    roles.forEach((role, idx) => {
        const entityIsList = (0, utils_1.fieldIsList)(fields, role.entity);
        if (role.strategy === 'owner') {
            const claims = role.claim.split(utils_1.IDENTITY_CLAIM_DELIMITER);
            const hasMultiClaims = claims.length > 1;
            const ownerCondition = entityIsList ? 'contains' : 'eq';
            if (hasMultiClaims) {
                authCollectionExp.push(...[
                    (0, helpers_1.generateOwnerClaimExpression)(role.claim, `ownerClaim${idx}`),
                    (0, graphql_mapping_template_1.iff)((0, helpers_1.generateInvalidClaimsCondition)(role.claim, `ownerClaim${idx}`), (0, graphql_mapping_template_1.compoundExpression)([
                        (0, helpers_1.generateOwnerMultiClaimExpression)(role.claim, `ownerClaim${idx}`),
                        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)(`ownerClaim${idx}`))), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('authFilter.add'), (0, graphql_mapping_template_1.raw)(`{"${role.entity}": { "${ownerCondition}": $ownerClaim${idx} }}`)))),
                    ])),
                ]);
                claims.forEach((claim, secIdx) => {
                    authCollectionExp.push(...[
                        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`role${idx}_${secIdx}`), (0, helpers_1.getOwnerClaim)(claim)),
                        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)(`role${idx}_${secIdx}`))), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('authFilter.add'), (0, graphql_mapping_template_1.raw)(`{"${role.entity}": { "${ownerCondition}": $role${idx}_${secIdx} }}`)))),
                    ]);
                });
            }
            else {
                authCollectionExp.push(...[
                    (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`role${idx}`), (0, helpers_1.getOwnerClaim)(role.claim)),
                    (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)(`role${idx}`))), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('authFilter.add'), (0, graphql_mapping_template_1.raw)(`{"${role.entity}": { "${ownerCondition}": $role${idx} }}`)))),
                ]);
            }
        }
        else if (role.strategy === 'groups') {
            if (entityIsList) {
                if (groupMap.has(role.claim)) {
                    groupMap.get(role.claim).push(role.entity);
                }
                else {
                    groupMap.set(role.claim, [role.entity]);
                }
            }
            else {
                authCollectionExp.push(...[
                    (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`role${idx}`), (0, helpers_1.getIdentityClaimExp)((0, graphql_mapping_template_1.str)(role.claim), (0, graphql_mapping_template_1.list)([]))),
                    (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isString'), (0, graphql_mapping_template_1.ref)(`role${idx}`)), (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isList'), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.parseJson'), (0, graphql_mapping_template_1.ref)(`role${idx}`))), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`role${idx}`), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.parseJson'), (0, graphql_mapping_template_1.ref)(`role${idx}`))), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`role${idx}`), (0, graphql_mapping_template_1.list)([(0, graphql_mapping_template_1.ref)(`role${idx}`)])))),
                    (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`role${idx}.isEmpty`))), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('authFilter.add'), (0, graphql_mapping_template_1.raw)(`{ "${role.entity}": { "in": $role${idx} } }`)))),
                ]);
            }
        }
    });
    groupMap.forEach((fieldList, groupClaim) => {
        groupContainsExpression.push((0, graphql_mapping_template_1.forEach)((0, graphql_mapping_template_1.ref)('group'), (0, graphql_mapping_template_1.ref)(`util.defaultIfNull($ctx.identity.claims.get("${groupClaim}"), [])`), fieldList.map((field) => (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('group.isEmpty'))), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('authFilter.add'), (0, graphql_mapping_template_1.raw)(`{"${field}": { "contains": $group }}`)))))));
    });
    return [
        (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG)), (0, graphql_mapping_template_1.compoundExpression)([
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('authFilter'), (0, graphql_mapping_template_1.list)([])),
            ...authCollectionExp,
            ...groupContainsExpression,
            (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('authFilter.isEmpty'))), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.stash.put'), (0, graphql_mapping_template_1.str)('authFilter'), (0, graphql_mapping_template_1.raw)('{ "or": $authFilter }')))),
        ])),
    ];
};
const generateAuthExpressionForQueries = (ctx, providers, roles, fields, def, indexName = undefined) => {
    const { cognitoStaticRoles, cognitoDynamicRoles, oidcStaticRoles, oidcDynamicRoles, apiKeyRoles, iamRoles, lambdaRoles } = (0, utils_1.splitRoles)(roles);
    const isIndexQuery = !!indexName;
    const { keySchema, primaryKey } = getKeySchemaAndPartitionKey(ctx, def, indexName);
    const primaryFields = keySchema.map((att) => att.attributeName);
    const sortKeyFields = keySchema.filter((att) => att.keyType === 'RANGE').map((att) => att.attributeName);
    const getNonPrimaryFieldRoles = (rolesToFilter) => rolesToFilter.filter((role) => !primaryFields.includes(role.entity));
    const totalAuthExpressions = [
        common_1.setHasAuthExpression,
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(false)),
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('primaryFieldMap'), (0, graphql_mapping_template_1.obj)({})),
    ];
    if (providers.hasApiKey) {
        totalAuthExpressions.push((0, helpers_1.apiKeyExpression)(apiKeyRoles));
    }
    if (providers.hasLambda) {
        totalAuthExpressions.push((0, helpers_1.lambdaExpression)(lambdaRoles));
    }
    if (providers.hasIAM) {
        totalAuthExpressions.push((0, helpers_1.iamExpression)({
            roles: iamRoles,
            adminRolesEnabled: providers.hasAdminRolesEnabled,
            hasIdentityPoolId: providers.hasIdentityPoolId,
            genericIamAccessEnabled: providers.genericIamAccessEnabled,
        }));
    }
    if (providers.hasUserPools) {
        totalAuthExpressions.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('util.authType()'), (0, graphql_mapping_template_1.str)(utils_1.COGNITO_AUTH_TYPE)), (0, graphql_mapping_template_1.compoundExpression)([
            ...generateStaticRoleExpression(cognitoStaticRoles),
            ...generateAuthFilter(getNonPrimaryFieldRoles(cognitoDynamicRoles), fields),
            ...generateAuthOnModelQueryExpression(cognitoDynamicRoles, primaryFields, isIndexQuery, primaryKey, sortKeyFields),
        ])));
    }
    if (providers.hasOIDC) {
        totalAuthExpressions.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('util.authType()'), (0, graphql_mapping_template_1.str)(utils_1.OIDC_AUTH_TYPE)), (0, graphql_mapping_template_1.compoundExpression)([
            ...generateStaticRoleExpression(oidcStaticRoles),
            ...generateAuthFilter(getNonPrimaryFieldRoles(oidcDynamicRoles), fields),
            ...generateAuthOnModelQueryExpression(oidcDynamicRoles, primaryFields, isIndexQuery, primaryKey, sortKeyFields),
        ])));
    }
    totalAuthExpressions.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.and)([(0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG)), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)('ctx.stash.authFilter'))]), (0, graphql_mapping_template_1.ref)('util.unauthorized()')));
    return (0, graphql_mapping_template_1.printBlock)('Authorization Steps')((0, graphql_mapping_template_1.compoundExpression)([...totalAuthExpressions, helpers_1.emptyPayload]));
};
exports.generateAuthExpressionForQueries = generateAuthExpressionForQueries;
const getKeySchemaAndPartitionKey = (ctx, def, indexName = undefined) => {
    let keySchema;
    let partitionKey;
    const table = (0, graphql_transformer_core_1.getTable)(ctx, def);
    try {
        if (indexName) {
            keySchema = (0, graphql_transformer_core_1.getKeySchema)(table, indexName);
        }
        else {
            keySchema = table.keySchema;
            partitionKey = (0, utils_1.getPartitionKey)(table.keySchema);
        }
    }
    catch (err) {
        throw new graphql_transformer_core_1.InvalidDirectiveError(`Could not fetch keySchema for ${def.name.value}.`);
    }
    return {
        keySchema,
        primaryKey: partitionKey,
    };
};
const generateAuthExpressionForRelationQuery = (ctx, def, field, relatedModelObject, providers, roles, fields) => {
    const { cognitoStaticRoles, cognitoDynamicRoles, oidcStaticRoles, oidcDynamicRoles, apiKeyRoles, iamRoles, lambdaRoles } = (0, utils_1.splitRoles)(roles);
    const primaryFieldMap = (0, utils_1.getRelationalPrimaryMap)(ctx, def, field, relatedModelObject);
    const getNonPrimaryFieldRoles = (rolesToFilter) => rolesToFilter.filter((role) => !primaryFieldMap.has(role.entity));
    const totalAuthExpressions = [common_1.setHasAuthExpression, (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(false))];
    if (providers.hasApiKey) {
        totalAuthExpressions.push((0, helpers_1.apiKeyExpression)(apiKeyRoles));
    }
    if (providers.hasLambda) {
        totalAuthExpressions.push((0, helpers_1.lambdaExpression)(lambdaRoles));
    }
    if (providers.hasIAM) {
        totalAuthExpressions.push((0, helpers_1.iamExpression)({
            roles: iamRoles,
            adminRolesEnabled: providers.hasAdminRolesEnabled,
            hasIdentityPoolId: providers.hasIdentityPoolId,
            genericIamAccessEnabled: providers.genericIamAccessEnabled,
        }));
    }
    if (providers.hasUserPools) {
        totalAuthExpressions.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('util.authType()'), (0, graphql_mapping_template_1.str)(utils_1.COGNITO_AUTH_TYPE)), (0, graphql_mapping_template_1.compoundExpression)([
            ...generateStaticRoleExpression(cognitoStaticRoles),
            ...generateAuthFilter(getNonPrimaryFieldRoles(cognitoDynamicRoles), fields),
            ...generateAuthOnRelationalModelQueryExpression(cognitoDynamicRoles, primaryFieldMap),
        ])));
    }
    if (providers.hasOIDC) {
        totalAuthExpressions.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('util.authType()'), (0, graphql_mapping_template_1.str)(utils_1.OIDC_AUTH_TYPE)), (0, graphql_mapping_template_1.compoundExpression)([
            ...generateStaticRoleExpression(oidcStaticRoles),
            ...generateAuthFilter(getNonPrimaryFieldRoles(oidcDynamicRoles), fields),
            ...generateAuthOnRelationalModelQueryExpression(oidcDynamicRoles, primaryFieldMap),
        ])));
    }
    totalAuthExpressions.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.and)([(0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG)), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)('ctx.stash.authFilter'))]), (0, graphql_mapping_template_1.ref)('util.unauthorized()')));
    return (0, graphql_mapping_template_1.printBlock)('Authorization Steps')((0, graphql_mapping_template_1.compoundExpression)([...totalAuthExpressions, helpers_1.emptyPayload]));
};
exports.generateAuthExpressionForRelationQuery = generateAuthExpressionForRelationQuery;
//# sourceMappingURL=query.js.map