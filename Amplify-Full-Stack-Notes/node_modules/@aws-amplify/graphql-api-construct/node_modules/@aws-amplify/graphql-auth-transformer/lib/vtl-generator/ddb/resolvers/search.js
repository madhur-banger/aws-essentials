"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAuthExpressionForSearchQueries = void 0;
const graphql_mapping_template_1 = require("graphql-mapping-template");
const utils_1 = require("../../../utils");
const common_1 = require("../../common");
const helpers_1 = require("./helpers");
const allowedAggFieldsList = 'allowedAggFields';
const aggFieldsFilterMap = 'aggFieldsFilterMap';
const totalFields = 'totalFields';
const apiKeyExpression = (roles) => {
    const expression = Array();
    if (roles.length === 0) {
        expression.push((0, graphql_mapping_template_1.ref)('util.unauthorized()'));
    }
    else if (roles[0].allowedFields) {
        expression.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`${allowedAggFieldsList}.addAll`), (0, graphql_mapping_template_1.raw)(JSON.stringify(roles[0].allowedFields)))));
    }
    else {
        expression.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(allowedAggFieldsList), (0, graphql_mapping_template_1.ref)(totalFields)));
    }
    return (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('util.authType()'), (0, graphql_mapping_template_1.str)(utils_1.API_KEY_AUTH_TYPE)), (0, graphql_mapping_template_1.compoundExpression)(expression));
};
const lambdaExpression = (roles) => {
    const expression = Array();
    if (roles.length === 0) {
        expression.push((0, graphql_mapping_template_1.ref)('util.unauthorized()'));
    }
    else if (roles[0].allowedFields) {
        expression.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`${allowedAggFieldsList}.addAll`), (0, graphql_mapping_template_1.raw)(JSON.stringify(roles[0].allowedFields)))));
    }
    else {
        expression.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(allowedAggFieldsList), (0, graphql_mapping_template_1.ref)(totalFields)));
    }
    return (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('util.authType()'), (0, graphql_mapping_template_1.str)(utils_1.LAMBDA_AUTH_TYPE)), (0, graphql_mapping_template_1.compoundExpression)(expression));
};
const iamExpression = (roles, hasAdminRolesEnabled = false, hasIdentityPoolId, genericIamAccessEnabled) => {
    const expression = new Array();
    if (hasAdminRolesEnabled) {
        const adminCheckExpression = (0, graphql_mapping_template_1.compoundExpression)([
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(allowedAggFieldsList), (0, graphql_mapping_template_1.ref)(totalFields)),
            (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.stash.put'), (0, graphql_mapping_template_1.str)(allowedAggFieldsList), (0, graphql_mapping_template_1.ref)(allowedAggFieldsList))),
        ]);
        expression.push((0, helpers_1.iamAdminRoleCheckExpression)(undefined, adminCheckExpression));
    }
    if (roles.length === 0) {
        expression.push((0, graphql_mapping_template_1.ref)('util.unauthorized()'));
    }
    else {
        roles.forEach((role) => {
            const exp = [(0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true))];
            if (role.allowedFields) {
                exp.push((0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`${allowedAggFieldsList}.addAll`), (0, graphql_mapping_template_1.raw)(JSON.stringify(role.allowedFields)))));
            }
            else {
                exp.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(allowedAggFieldsList), (0, graphql_mapping_template_1.ref)(totalFields)));
            }
            expression.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG)), (0, helpers_1.iamCheck)(role.claim, (0, graphql_mapping_template_1.compoundExpression)(exp), hasIdentityPoolId)));
        });
    }
    return (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('util.authType()'), (0, graphql_mapping_template_1.str)(utils_1.IAM_AUTH_TYPE)), (0, helpers_1.generateIAMAccessCheck)(genericIamAccessEnabled, (0, graphql_mapping_template_1.compoundExpression)(expression)));
};
const generateStaticRoleExpression = (roles) => {
    const staticRoleExpression = [];
    const privateRoleIdx = roles.findIndex((r) => r.strategy === 'private');
    if (privateRoleIdx > -1) {
        if (roles[privateRoleIdx].allowedFields) {
            staticRoleExpression.push((0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`${allowedAggFieldsList}.addAll`), (0, graphql_mapping_template_1.raw)(JSON.stringify(roles[privateRoleIdx].allowedFields)))));
        }
        else {
            staticRoleExpression.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(allowedAggFieldsList), (0, graphql_mapping_template_1.ref)(totalFields)));
        }
        staticRoleExpression.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)));
        roles.splice(privateRoleIdx, 1);
    }
    if (roles.length > 0) {
        staticRoleExpression.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG)), (0, graphql_mapping_template_1.compoundExpression)([
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('staticGroupRoles'), (0, graphql_mapping_template_1.raw)(JSON.stringify(roles.map((r) => ({ claim: r.claim, entity: r.entity, ...(r.allowedFields ? { allowedFields: r.allowedFields } : {}) }))))),
            (0, graphql_mapping_template_1.forEach)((0, graphql_mapping_template_1.ref)('groupRole'), (0, graphql_mapping_template_1.ref)('staticGroupRoles'), [
                (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('groupsInToken'), (0, helpers_1.getIdentityClaimExp)((0, graphql_mapping_template_1.ref)('groupRole.claim'), (0, graphql_mapping_template_1.list)([]))),
                (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('groupsInToken.contains'), (0, graphql_mapping_template_1.ref)('groupRole.entity')), (0, graphql_mapping_template_1.compoundExpression)([
                    (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)),
                    (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)('groupRole.allowedFields')), (0, graphql_mapping_template_1.compoundExpression)([(0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(allowedAggFieldsList), (0, graphql_mapping_template_1.ref)(totalFields)), (0, graphql_mapping_template_1.raw)('#break')]), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`${allowedAggFieldsList}.addAll`), (0, graphql_mapping_template_1.ref)('groupRole.allowedFields')))),
                ])),
            ]),
        ])));
    }
    return staticRoleExpression;
};
const generateAuthFilter = (roles, fields, allowedAggFields) => {
    const filterExpression = new Array();
    const aggFieldMap = {};
    if (!(roles.length > 0))
        return [];
    const authFilterConditionsRefName = 'authFilterConditions';
    filterExpression.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(authFilterConditionsRefName), (0, graphql_mapping_template_1.list)([])));
    roles.forEach((role, idx) => {
        const entityIsList = (0, utils_1.fieldIsList)(fields, role.entity);
        const roleKey = entityIsList ? role.entity : `${role.entity}.keyword`;
        if (role.strategy === 'owner') {
            filterExpression.push((0, helpers_1.generateOwnerClaimExpression)(role.claim, `ownerClaim${idx}`), (0, graphql_mapping_template_1.iff)((0, helpers_1.generateInvalidClaimsCondition)(role.claim, `ownerClaim${idx}`), (0, graphql_mapping_template_1.compoundExpression)([
                (0, helpers_1.generateOwnerMultiClaimExpression)(role.claim, `ownerClaim${idx}`),
                (0, helpers_1.generateOwnerClaimListExpression)(role.claim, `ownerClaimsList${idx}`),
                (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`ownerClaimsList${idx}.add`), (0, graphql_mapping_template_1.ref)(`ownerClaim${idx}`))),
                (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`owner${idx}`), (0, graphql_mapping_template_1.obj)({
                    terms_set: (0, graphql_mapping_template_1.obj)({
                        [roleKey]: (0, graphql_mapping_template_1.obj)({
                            terms: (0, graphql_mapping_template_1.ref)(`ownerClaimsList${idx}`),
                            minimum_should_match_script: (0, graphql_mapping_template_1.obj)({ source: (0, graphql_mapping_template_1.str)('1') }),
                        }),
                    }),
                })),
                (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`${authFilterConditionsRefName}.add`), (0, graphql_mapping_template_1.ref)(`owner${idx}`))),
            ])));
            if (role.allowedFields) {
                role.allowedFields.forEach((field) => {
                    var _a;
                    if (!allowedAggFields.includes(field)) {
                        aggFieldMap[field] = [...((_a = aggFieldMap[field]) !== null && _a !== void 0 ? _a : []), `$owner${idx}`];
                    }
                });
            }
        }
        else if (role.strategy === 'groups') {
            filterExpression.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`groupClaim${idx}`), (0, helpers_1.getIdentityClaimExp)((0, graphql_mapping_template_1.str)(role.claim), (0, graphql_mapping_template_1.list)([]))), (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.raw)(`$groupClaim${idx}.isEmpty()`)), (0, graphql_mapping_template_1.compoundExpression)([
                (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`group${idx}`), (0, graphql_mapping_template_1.obj)({
                    terms_set: (0, graphql_mapping_template_1.obj)({
                        [roleKey]: (0, graphql_mapping_template_1.obj)({
                            terms: (0, graphql_mapping_template_1.ref)(`groupClaim${idx}`),
                            minimum_should_match_script: (0, graphql_mapping_template_1.obj)({ source: (0, graphql_mapping_template_1.str)('1') }),
                        }),
                    }),
                })),
                (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`${authFilterConditionsRefName}.add`), (0, graphql_mapping_template_1.ref)(`group${idx}`))),
            ])));
            if (role.allowedFields) {
                role.allowedFields.forEach((field) => {
                    var _a;
                    if (!allowedAggFields.includes(field)) {
                        aggFieldMap[field] = [...((_a = aggFieldMap[field]) !== null && _a !== void 0 ? _a : []), `$group${idx}`];
                    }
                });
            }
        }
    });
    filterExpression.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.and)([(0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG)), (0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.raw)(`$${authFilterConditionsRefName}.isEmpty()`))]), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.stash.put'), (0, graphql_mapping_template_1.str)('authFilter'), (0, graphql_mapping_template_1.obj)({ bool: (0, graphql_mapping_template_1.obj)({ should: (0, graphql_mapping_template_1.ref)(authFilterConditionsRefName) }) })))));
    if (Object.keys(aggFieldMap).length > 0) {
        filterExpression.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.notEquals)((0, graphql_mapping_template_1.ref)(`${allowedAggFieldsList}.size()`), (0, graphql_mapping_template_1.ref)(`${totalFields}.size()`)), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.stash.put'), (0, graphql_mapping_template_1.str)(aggFieldsFilterMap), (0, graphql_mapping_template_1.raw)(JSON.stringify(aggFieldMap).replace(/"\$(.*?)"/g, '$$$1'))))));
    }
    return filterExpression;
};
const generateAuthExpressionForSearchQueries = (providers, roles, fields, allowedAggFields) => {
    const { cognitoStaticRoles, cognitoDynamicRoles, oidcStaticRoles, oidcDynamicRoles, apiKeyRoles, iamRoles, lambdaRoles } = (0, utils_1.splitRoles)(roles);
    const totalAuthExpressions = [
        common_1.setHasAuthExpression,
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(false)),
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(totalFields), (0, graphql_mapping_template_1.raw)(JSON.stringify(fields.map((f) => f.name.value)))),
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(allowedAggFieldsList), (0, graphql_mapping_template_1.raw)(JSON.stringify(allowedAggFields))),
    ];
    if (providers.hasApiKey) {
        totalAuthExpressions.push(apiKeyExpression(apiKeyRoles));
    }
    if (providers.hasLambda) {
        totalAuthExpressions.push(lambdaExpression(lambdaRoles));
    }
    if (providers.hasIAM) {
        totalAuthExpressions.push(iamExpression(iamRoles, providers.hasAdminRolesEnabled, providers.hasIdentityPoolId, providers.genericIamAccessEnabled));
    }
    if (providers.hasUserPools) {
        totalAuthExpressions.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('util.authType()'), (0, graphql_mapping_template_1.str)(utils_1.COGNITO_AUTH_TYPE)), (0, graphql_mapping_template_1.compoundExpression)([
            ...generateStaticRoleExpression(cognitoStaticRoles),
            ...generateAuthFilter(cognitoDynamicRoles, fields, allowedAggFields),
        ])));
    }
    if (providers.hasOIDC) {
        totalAuthExpressions.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('util.authType()'), (0, graphql_mapping_template_1.str)(utils_1.OIDC_AUTH_TYPE)), (0, graphql_mapping_template_1.compoundExpression)([
            ...generateStaticRoleExpression(oidcStaticRoles),
            ...generateAuthFilter(oidcDynamicRoles, fields, allowedAggFields),
        ])));
    }
    totalAuthExpressions.push((0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.stash.put'), (0, graphql_mapping_template_1.str)(allowedAggFieldsList), (0, graphql_mapping_template_1.ref)(allowedAggFieldsList))), (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.and)([(0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG)), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)('ctx.stash.authFilter'))]), (0, graphql_mapping_template_1.ref)('util.unauthorized()')));
    return (0, graphql_mapping_template_1.printBlock)('Authorization Steps')((0, graphql_mapping_template_1.compoundExpression)([...totalAuthExpressions, helpers_1.emptyPayload]));
};
exports.generateAuthExpressionForSearchQueries = generateAuthExpressionForSearchQueries;
//# sourceMappingURL=search.js.map