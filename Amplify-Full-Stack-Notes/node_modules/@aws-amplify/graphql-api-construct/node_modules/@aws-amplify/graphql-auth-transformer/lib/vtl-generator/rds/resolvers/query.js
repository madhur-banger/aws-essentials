"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAuthExpressionForRelationQuery = exports.generateFieldAuthResponse = exports.generateAuthExpressionForField = exports.generateAuthExpressionForQueries = void 0;
const graphql_mapping_template_1 = require("graphql-mapping-template");
const graphql_model_transformer_1 = require("@aws-amplify/graphql-model-transformer");
const common_1 = require("./common");
const generateAuthExpressionForQueries = (ctx, providers, roles, fields, def, indexName) => {
    const expressions = [];
    expressions.push((0, graphql_mapping_template_1.compoundExpression)((0, common_1.generateAuthRulesFromRoles)(roles, fields, providers.hasIdentityPoolId, true)));
    expressions.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('authResult'), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.authRules.queryAuth'), (0, graphql_mapping_template_1.ref)('authRules'))));
    expressions.push((0, common_1.validateAuthResult)());
    expressions.push((0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.stash.put'), (0, graphql_mapping_template_1.str)('authRules'), (0, graphql_mapping_template_1.ref)('authRules'))));
    expressions.push((0, common_1.constructAuthFilter)(), common_1.emptyPayload);
    return (0, graphql_mapping_template_1.printBlock)('Authorization rules')((0, common_1.generateIAMAccessCheck)(providers.genericIamAccessEnabled, (0, graphql_mapping_template_1.compoundExpression)(expressions)));
};
exports.generateAuthExpressionForQueries = generateAuthExpressionForQueries;
const generateAuthExpressionForField = (providers, roles, fields, fieldName = undefined) => {
    const expressions = [];
    expressions.push((0, graphql_mapping_template_1.compoundExpression)((0, common_1.generateAuthRulesFromRoles)(roles, fields, providers.hasIdentityPoolId, true)));
    expressions.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('authResult'), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.authRules.validateUsingSource'), (0, graphql_mapping_template_1.ref)('authRules'), (0, graphql_mapping_template_1.ref)('ctx.source'))));
    expressions.push((0, graphql_mapping_template_1.compoundExpression)([(0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)('authResult')), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.unauthorized')))]));
    expressions.push(common_1.emptyPayload);
    return (0, graphql_mapping_template_1.printBlock)('Authorization rules')((0, common_1.generateIAMAccessCheck)(providers.genericIamAccessEnabled, (0, graphql_mapping_template_1.compoundExpression)(expressions)));
};
exports.generateAuthExpressionForField = generateAuthExpressionForField;
const generateFieldAuthResponse = (operation, fieldName, subscriptionsEnabled) => {
    if (subscriptionsEnabled) {
        return (0, graphql_mapping_template_1.printBlock)('Checking for allowed operations which can return this field')((0, graphql_mapping_template_1.compoundExpression)([
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('operation'), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.defaultIfNull'), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.source.get'), (0, graphql_mapping_template_1.str)(graphql_model_transformer_1.OPERATION_KEY)), (0, graphql_mapping_template_1.nul)())),
            (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('operation'), (0, graphql_mapping_template_1.str)(operation)), (0, graphql_mapping_template_1.toJson)((0, graphql_mapping_template_1.nul)()), (0, graphql_mapping_template_1.toJson)((0, graphql_mapping_template_1.ref)(`context.source["${fieldName}"]`))),
        ]));
    }
    return (0, graphql_mapping_template_1.printBlock)('Return Source Field')((0, graphql_mapping_template_1.toJson)((0, graphql_mapping_template_1.ref)(`context.source["${fieldName}"]`)));
};
exports.generateFieldAuthResponse = generateFieldAuthResponse;
const generateAuthExpressionForRelationQuery = (ctx, def, field, relatedModelObject, providers, roles, fields) => {
    const expressions = [];
    expressions.push((0, graphql_mapping_template_1.compoundExpression)((0, common_1.generateAuthRulesFromRoles)(roles, fields, providers.hasIdentityPoolId, true)));
    expressions.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('authResult'), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.authRules.queryAuth'), (0, graphql_mapping_template_1.ref)('authRules'))));
    expressions.push((0, common_1.validateAuthResult)(), (0, common_1.constructAuthFilter)(), common_1.emptyPayload);
    return (0, graphql_mapping_template_1.printBlock)('Authorization rules')((0, common_1.generateIAMAccessCheck)(providers.genericIamAccessEnabled, (0, graphql_mapping_template_1.compoundExpression)(expressions)));
};
exports.generateAuthExpressionForRelationQuery = generateAuthExpressionForRelationQuery;
//# sourceMappingURL=query.js.map