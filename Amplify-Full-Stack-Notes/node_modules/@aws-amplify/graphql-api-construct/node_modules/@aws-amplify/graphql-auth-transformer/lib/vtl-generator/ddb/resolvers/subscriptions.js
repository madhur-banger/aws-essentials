"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAuthExpressionForSubscriptions = void 0;
const graphql_mapping_template_1 = require("graphql-mapping-template");
const utils_1 = require("../../../utils");
const common_1 = require("../../common");
const helpers_1 = require("./helpers");
const HAS_VALID_OWNER_ARGUMENT_FLAG = 'hasValidOwnerArgument';
const IS_OWNER_AUTH_AUTHORIZED_AND_NO_OTHER_FILTERS_FLAG = 'isOwnerAuthAuthorizedAndNoOtherFilters';
const IS_OWNER_OR_DYNAMIC_AUTH_AUTHORIZED_WITH_FILTERS_FLAG = 'isOwnerOrDynamicAuthAuthorizedWithFilters';
const FILTER_ARGS_SIZE_FLAG = 'filterArgsSize';
const dynamicRoleExpression = (roles) => {
    const dynamicExpression = new Array();
    const ownerExpression = new Array();
    const groupExpression = new Array();
    roles.forEach((role, idx) => {
        if (role.strategy === 'owner') {
            const ownerClaimRef = (0, helpers_1.getOwnerClaimReference)(role.claim, `ownerClaim${idx}`);
            ownerExpression.push((0, helpers_1.generateOwnerClaimExpression)(role.claim, `ownerClaim${idx}`), (0, graphql_mapping_template_1.iff)((0, helpers_1.generateInvalidClaimsCondition)(role.claim, `ownerClaim${idx}`), (0, graphql_mapping_template_1.compoundExpression)([
                (0, helpers_1.generateOwnerMultiClaimExpression)(role.claim, `ownerClaim${idx}`),
                (0, helpers_1.generateOwnerClaimListExpression)(role.claim, `ownerClaimsList${idx}`),
                (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('authOwnerRuntimeFilter.add'), (0, graphql_mapping_template_1.raw)(`{ "${role.entity}": { "${role.isEntityList ? 'contains' : 'eq'}": $${ownerClaimRef} } }`))),
                (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`ownerEntity${idx}`), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.defaultIfNull'), (0, graphql_mapping_template_1.ref)(`ctx.args.${role.entity}`), (0, graphql_mapping_template_1.nul)())),
                (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.and)([(0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG)), (0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNullOrEmpty'), (0, graphql_mapping_template_1.ref)(`ownerEntity${idx}`)))]), (0, graphql_mapping_template_1.compoundExpression)([
                    (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.or)([
                        (0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)(`ownerEntity${idx}`), (0, graphql_mapping_template_1.ref)(`ownerClaim${idx}`)),
                        (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`ownerClaimsList${idx}.contains`), (0, graphql_mapping_template_1.ref)(`ownerEntity${idx}`)),
                    ]), (0, graphql_mapping_template_1.compoundExpression)([(0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(HAS_VALID_OWNER_ARGUMENT_FLAG), (0, graphql_mapping_template_1.bool)(true))]), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.unauthorized'))),
                ])),
            ])));
        }
        else if (role.strategy === 'groups' && !role.static) {
            groupExpression.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`groupClaim${idx}`), (0, helpers_1.getIdentityClaimExp)((0, graphql_mapping_template_1.str)(role.claim), (0, graphql_mapping_template_1.list)([]))), (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isString'), (0, graphql_mapping_template_1.ref)(`groupClaim${idx}`)), (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isList'), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.parseJson'), (0, graphql_mapping_template_1.ref)(`groupClaim${idx}`))), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`groupClaim${idx}`), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.parseJson'), (0, graphql_mapping_template_1.ref)(`groupClaim${idx}`))), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`groupClaim${idx}`), (0, graphql_mapping_template_1.list)([(0, graphql_mapping_template_1.ref)(`groupClaim${idx}`)])))), (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNullOrEmpty'), (0, graphql_mapping_template_1.ref)(`groupClaim${idx}`))), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('authGroupRuntimeFilter.add'), (0, graphql_mapping_template_1.raw)(`{ "${role.entity}": { "${role.isEntityList ? 'containsAny' : 'in'}": $groupClaim${idx} } }`)))));
        }
    });
    dynamicExpression.push(...combineAuthExpressionAndFilter(ownerExpression, groupExpression));
    return dynamicExpression;
};
const combineAuthExpressionAndFilter = (ownerExpression, groupExpression) => [
    (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(HAS_VALID_OWNER_ARGUMENT_FLAG), (0, graphql_mapping_template_1.bool)(false)),
    (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('authRuntimeFilter'), (0, graphql_mapping_template_1.list)([])),
    (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('authOwnerRuntimeFilter'), (0, graphql_mapping_template_1.list)([])),
    (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('authGroupRuntimeFilter'), (0, graphql_mapping_template_1.list)([])),
    ...(ownerExpression.length > 0 ? ownerExpression : []),
    ...(groupExpression.length > 0 ? groupExpression : []),
    (0, graphql_mapping_template_1.comment)('Apply dynamic roles auth if not previously authorized by static groups and owner argument'),
    (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.raw)('$authOwnerRuntimeFilter.size() > 0'), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('authRuntimeFilter.addAll'), (0, graphql_mapping_template_1.ref)('authOwnerRuntimeFilter')))),
    (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.raw)('$authGroupRuntimeFilter.size() > 0'), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('authRuntimeFilter.addAll'), (0, graphql_mapping_template_1.ref)('authGroupRuntimeFilter')))),
    (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(FILTER_ARGS_SIZE_FLAG), (0, graphql_mapping_template_1.int)(0)),
    (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNullOrEmpty'), (0, graphql_mapping_template_1.ref)('ctx.args.filter'))), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(FILTER_ARGS_SIZE_FLAG), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.args.filter.size')))),
    (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(IS_OWNER_AUTH_AUTHORIZED_AND_NO_OTHER_FILTERS_FLAG), (0, graphql_mapping_template_1.and)([
        (0, graphql_mapping_template_1.ref)(HAS_VALID_OWNER_ARGUMENT_FLAG),
        (0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('authRuntimeFilter.size')), (0, graphql_mapping_template_1.int)(1)),
        (0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)(FILTER_ARGS_SIZE_FLAG), (0, graphql_mapping_template_1.int)(0)),
    ])),
    (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(IS_OWNER_OR_DYNAMIC_AUTH_AUTHORIZED_WITH_FILTERS_FLAG), (0, graphql_mapping_template_1.and)([(0, graphql_mapping_template_1.parens)((0, graphql_mapping_template_1.or)([(0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG)), (0, graphql_mapping_template_1.ref)(HAS_VALID_OWNER_ARGUMENT_FLAG)])), (0, graphql_mapping_template_1.raw)('$authRuntimeFilter.size() > 0')])),
    (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.and)([(0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(IS_OWNER_AUTH_AUTHORIZED_AND_NO_OTHER_FILTERS_FLAG)), (0, graphql_mapping_template_1.ref)(IS_OWNER_OR_DYNAMIC_AUTH_AUTHORIZED_WITH_FILTERS_FLAG)]), (0, graphql_mapping_template_1.compoundExpression)([
        (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNullOrEmpty'), (0, graphql_mapping_template_1.ref)('ctx.args.filter')), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('ctx.args.filter'), (0, graphql_mapping_template_1.raw)('{ "or": $authRuntimeFilter }')), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('ctx.args.filter'), (0, graphql_mapping_template_1.raw)('{ "and": [ { "or": $authRuntimeFilter }, $ctx.args.filter ]}'))),
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)),
    ])),
];
const generateAuthExpressionForSubscriptions = (providers, roles) => {
    const { cognitoStaticRoles, cognitoDynamicRoles, oidcStaticRoles, oidcDynamicRoles, iamRoles, apiKeyRoles, lambdaRoles } = (0, utils_1.splitRoles)(roles);
    const totalAuthExpressions = [common_1.setHasAuthExpression, (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(false))];
    if (providers.hasApiKey) {
        totalAuthExpressions.push((0, helpers_1.apiKeyExpression)(apiKeyRoles));
    }
    if (providers.hasLambda) {
        totalAuthExpressions.push((0, helpers_1.lambdaExpression)(lambdaRoles));
    }
    if (providers.hasIAM) {
        totalAuthExpressions.push((0, helpers_1.iamExpression)({
            roles: iamRoles,
            adminRolesEnabled: providers.hasAdminRolesEnabled,
            hasIdentityPoolId: providers.hasIdentityPoolId,
            genericIamAccessEnabled: providers.genericIamAccessEnabled,
        }));
    }
    if (providers.hasUserPools) {
        totalAuthExpressions.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('util.authType()'), (0, graphql_mapping_template_1.str)(utils_1.COGNITO_AUTH_TYPE)), (0, graphql_mapping_template_1.compoundExpression)([...(0, helpers_1.generateStaticRoleExpression)(cognitoStaticRoles), ...dynamicRoleExpression(cognitoDynamicRoles)])));
    }
    if (providers.hasOIDC) {
        totalAuthExpressions.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('util.authType()'), (0, graphql_mapping_template_1.str)(utils_1.OIDC_AUTH_TYPE)), (0, graphql_mapping_template_1.compoundExpression)([...(0, helpers_1.generateStaticRoleExpression)(oidcStaticRoles), ...dynamicRoleExpression(oidcDynamicRoles)])));
    }
    totalAuthExpressions.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG)), (0, graphql_mapping_template_1.ref)('util.unauthorized()')));
    return (0, graphql_mapping_template_1.printBlock)('Authorization Steps')((0, graphql_mapping_template_1.compoundExpression)([...totalAuthExpressions, helpers_1.emptyPayload]));
};
exports.generateAuthExpressionForSubscriptions = generateAuthExpressionForSubscriptions;
//# sourceMappingURL=subscriptions.js.map