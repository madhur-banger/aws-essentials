import { TransformerAuthBase } from '@aws-amplify/graphql-transformer-core';
import { TransformerTransformSchemaStepContextProvider, TransformerContextProvider, TransformerSchemaVisitStepContextProvider, TransformerAuthProvider, TransformerBeforeStepContextProvider } from '@aws-amplify/graphql-transformer-interfaces';
import { DirectiveNode, FieldDefinitionNode, ObjectTypeDefinitionNode, InterfaceTypeDefinitionNode } from 'graphql';
import { AccessControlMatrix } from './accesscontrol';
import { RoleDefinition } from './utils';
import { AuthVTLGenerator } from './vtl-generator/vtl-generator';
export declare class AuthTransformer extends TransformerAuthBase implements TransformerAuthProvider {
    private configuredAuthProviders;
    private rules;
    private roleMap;
    private authModelConfig;
    private authNonModelConfig;
    private modelDirectiveConfig;
    private seenNonModelTypes;
    private generateIAMPolicyForUnauthRole;
    private generateIAMPolicyForAuthRole;
    private authPolicyResources;
    private unauthPolicyResources;
    constructor();
    before: (context: TransformerBeforeStepContextProvider) => void;
    object: (def: ObjectTypeDefinitionNode, directive: DirectiveNode, context: TransformerSchemaVisitStepContextProvider) => void;
    after: (context: TransformerContextProvider) => void;
    field: (parent: ObjectTypeDefinitionNode | InterfaceTypeDefinitionNode, field: FieldDefinitionNode, directive: DirectiveNode, context: TransformerSchemaVisitStepContextProvider) => void;
    addCustomOperationFieldsToAuthNonModelConfig: (ctx: TransformerTransformSchemaStepContextProvider) => void;
    transformSchema: (context: TransformerTransformSchemaStepContextProvider) => void;
    generateResolvers: (context: TransformerContextProvider) => void;
    removeAuthFieldsFromSubscriptionFilter: (context: TransformerTransformSchemaStepContextProvider) => void;
    addFieldResolverForDynamicAuth: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, typeName: string, fieldName: string) => void;
    protectSchemaOperations: (ctx: TransformerTransformSchemaStepContextProvider, def: ObjectTypeDefinitionNode, acm: AccessControlMatrix) => void;
    protectGetResolver: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, typeName: string, fieldName: string, acm: AccessControlMatrix) => void;
    protectListResolver: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, typeName: string, fieldName: string, acm: AccessControlMatrix, indexName?: string) => void;
    protectRelationalResolver: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, typeName: string, field: FieldDefinitionNode, fieldRoles: Array<string>, needsFieldResolver?: boolean) => void;
    protectSyncResolver: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, typeName: string, fieldName: string, acm: AccessControlMatrix) => void;
    protectSearchResolver: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, typeName: string, fieldName: string, acm: AccessControlMatrix) => void;
    protectFieldResolver: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, typeName: string, fieldName: string, roles: Array<string>) => void;
    protectCreateResolver: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, typeName: string, fieldName: string, acm: AccessControlMatrix) => void;
    protectUpdateResolver: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, typeName: string, fieldName: string, acm: AccessControlMatrix) => void;
    protectDeleteResolver: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, typeName: string, fieldName: string, acm: AccessControlMatrix) => void;
    protectSubscriptionResolver: (ctx: TransformerContextProvider, typeName: string, fieldName: string, subscriptionRoles: Array<RoleDefinition>, def: ObjectTypeDefinitionNode) => void;
    private convertRulesToRoles;
    private doesTypeHaveRulesForOperation;
    private getAuthProviders;
    getRelatedModelObject: (ctx: TransformerContextProvider, typeName: string) => ObjectTypeDefinitionNode;
    addFieldsToObject: (ctx: TransformerTransformSchemaStepContextProvider, modelName: string, ownerFields: Array<string>) => void;
    private propagateAuthDirectivesToNestedTypes;
    private getServiceDirectives;
    private generateIAMPolicies;
    private setAuthPolicyFlag;
    private setUnauthPolicyFlag;
    private addOperationToResourceReferences;
    private addTypeToResourceReferences;
    private addFieldToResourceReferences;
    addAutoGeneratedFields: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, allowedFields: string[], fields: readonly string[]) => string[];
    addAutoGeneratedRelationalFields: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, allowedFields: Set<string>, fields: readonly string[]) => void;
    addAutoGeneratedIndexFields: (definition: ObjectTypeDefinitionNode, allowedFields: Set<string>) => void;
    addAutoGeneratedHasManyFields: (ctx: TransformerContextProvider, typeDefinitions: ObjectTypeDefinitionNode[], def: ObjectTypeDefinitionNode, allowedFields: Set<string>) => void;
    addAutoGeneratedHasOneFields: (ctx: TransformerContextProvider, typeDefinitions: ObjectTypeDefinitionNode[], fields: readonly string[], def: ObjectTypeDefinitionNode, allowedFields: Set<string>) => void;
    addAutoGeneratedDataStoreFields: (ctx: TransformerContextProvider, allowedFields: Set<string>) => void;
    getVtlGenerator: (ctx: TransformerContextProvider, typename: string, field?: FieldDefinitionNode) => AuthVTLGenerator;
}
//# sourceMappingURL=graphql-auth-transformer.d.ts.map