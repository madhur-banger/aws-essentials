"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPolicyDocumentForManagedPolicy = void 0;
const cdk = __importStar(require("aws-cdk-lib"));
const createPolicyDocumentForManagedPolicy = (context, resources) => {
    const policyDocuments = new Array();
    let policyDocumentResources = new Array();
    let resourceSize = 0;
    const MAX_BUILT_SIZE_BYTES = 6000;
    const RESOURCE_OVERHEAD = 100;
    const createPolicyDocument = (newPolicyDocumentResources) => {
        return {
            Version: '2012-10-17',
            Statement: [
                {
                    Effect: 'Allow',
                    Action: ['appsync:GraphQL'],
                    Resource: newPolicyDocumentResources,
                },
            ],
        };
    };
    for (const resource of resources) {
        const [typeName, fieldName] = resource.split('/');
        if (fieldName !== 'null') {
            policyDocumentResources.push(cdk.Fn.sub('arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${apiId}/types/${typeName}/fields/${fieldName}', {
                apiId: context.api.apiId,
                typeName,
                fieldName,
            }).toString());
            resourceSize += RESOURCE_OVERHEAD + typeName.length + fieldName.length;
        }
        else {
            policyDocumentResources.push(cdk.Fn.sub('arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${apiId}/types/${typeName}/*', {
                apiId: context.api.apiId,
                typeName,
            }).toString());
            resourceSize += RESOURCE_OVERHEAD + typeName.length;
        }
        if (resourceSize > MAX_BUILT_SIZE_BYTES) {
            const policyDocument = createPolicyDocument(policyDocumentResources.slice(0, policyDocumentResources.length - 1));
            policyDocuments.push(policyDocument);
            policyDocumentResources = policyDocumentResources.slice(-1);
            resourceSize = 0;
        }
    }
    if (policyDocumentResources.length > 0) {
        policyDocuments.push(createPolicyDocument(policyDocumentResources));
    }
    return policyDocuments;
};
exports.createPolicyDocumentForManagedPolicy = createPolicyDocumentForManagedPolicy;
//# sourceMappingURL=iam.js.map