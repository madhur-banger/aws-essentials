"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ownerFieldCaseWarning = exports.ownerCanReassignWarning = exports.deprecatedIAMProviderWarning = exports.defaultIdentityClaimWarning = void 0;
const graphql_transformer_interfaces_1 = require("@aws-amplify/graphql-transformer-interfaces");
const defaultIdentityClaimWarning = (context, optionRules) => {
    const rules = optionRules || [];
    const usesDefaultIdentityClaim = rules.some((rule) => rule.allow === 'owner' && rule.identityClaim === undefined);
    if (usesDefaultIdentityClaim) {
        if (context.transformParameters.useSubUsernameForDefaultIdentityClaim)
            return;
        return (" WARNING: Amplify CLI will change the default identity claim from 'username' " +
            "to use 'sub::username'. To continue using only usernames, set 'identityClaim: \"username\"' on your " +
            "'owner' rules on your schema. The default will be officially switched with v9.0.0. To read " +
            'more: https://docs.amplify.aws/cli/migration/identity-claim-changes/');
    }
};
exports.defaultIdentityClaimWarning = defaultIdentityClaimWarning;
const deprecatedIAMProviderWarning = (rules) => {
    const hasDeprecatedIAMProvider = rules.some((rule) => rule.provider === 'iam');
    if (hasDeprecatedIAMProvider) {
        return ("WARNING: Schema is using an @auth directive with deprecated provider 'iam'." +
            " Replace 'iam' provider with 'identityPool' provider.");
    }
    return undefined;
};
exports.deprecatedIAMProviderWarning = deprecatedIAMProviderWarning;
const ownerCanReassignWarning = (authModelConfig) => {
    try {
        const ownerFieldRegExp = /(oidc|userPools):owner:(.*?):/;
        const modelsWithOwnersWhoCanEditOwnFields = Object.fromEntries([...authModelConfig.entries()]
            .map(([model, acm]) => {
            const ownersWhoCanEditOwnValues = [...acm.getAcmPerRole().entries()]
                .map(([role, acmMap]) => {
                const match = ownerFieldRegExp.exec(role);
                const ownerFieldOrNull = match && match.length === 3 ? match[2] : null;
                const canUpdateOwnOwnerField = ownerFieldOrNull && acmMap[ownerFieldOrNull] && acmMap[ownerFieldOrNull].update;
                const isImputedOwnerField = ownerFieldOrNull === 'owner' && !acmMap[ownerFieldOrNull];
                return [ownerFieldOrNull, canUpdateOwnOwnerField || isImputedOwnerField];
            })
                .filter(([_, canUpdateOwnOwnerField]) => canUpdateOwnOwnerField)
                .map(([role]) => role);
            return [model, ownersWhoCanEditOwnValues];
        })
            .filter(([_, ownersWhoCanEditOwnValues]) => ownersWhoCanEditOwnValues.length > 0));
        if (Object.keys(modelsWithOwnersWhoCanEditOwnFields).length === 0)
            return;
        const perModelWarning = Object.entries(modelsWithOwnersWhoCanEditOwnFields)
            .map(([model, roles]) => `${model}: [${roles.join(', ')}]`)
            .join(', ');
        return {
            level: graphql_transformer_interfaces_1.TransformerLogLevel.WARN,
            message: `WARNING: owners may reassign ownership for the following model(s) and role(s): ${perModelWarning}. ` +
                'If this is not intentional, you may want to apply field-level authorization rules to these fields. ' +
                'To read more: https://docs.amplify.aws/cli/graphql/authorization-rules/#per-user--owner-based-data-access.',
        };
    }
    catch (e) {
        return {
            level: graphql_transformer_interfaces_1.TransformerLogLevel.DEBUG,
            message: `Error caught while checking whether owners have reassign permissions: ${JSON.stringify(e)}`,
        };
    }
};
exports.ownerCanReassignWarning = ownerCanReassignWarning;
const ownerFieldCaseWarning = (ownerField, warningField, modelName) => {
    return (`WARNING: Schema field "${warningField}" and ownerField "${ownerField}" in type ${modelName} are getting added to your schema but could be referencing the same owner field. ` +
        'If this is not intentional, you may want to change one of the fields to the correct name.\n');
};
exports.ownerFieldCaseWarning = ownerFieldCaseWarning;
//# sourceMappingURL=warnings.js.map