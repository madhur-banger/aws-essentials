"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateFieldResolverForOwner = exports.getOwnerClaimReference = exports.addAllowedFieldsIfElse = exports.generatePopulateOwnerField = exports.generateInvalidClaimsCondition = exports.generateOwnerMultiClaimExpression = exports.generateOwnerClaimExpression = exports.generateOwnerClaimListExpression = exports.emptyPayload = exports.generateAuthRequestExpression = exports.iamAdminRoleCheckExpression = exports.generateIAMAccessCheck = exports.iamExpression = exports.lambdaExpression = exports.apiKeyExpression = exports.generateStaticRoleExpression = exports.responseCheckForErrors = exports.getOwnerClaim = exports.iamCheck = exports.getIdentityClaimExp = exports.getInputFields = void 0;
const graphql_mapping_template_1 = require("graphql-mapping-template");
const utils_1 = require("../../../utils");
const common_1 = require("../../common");
const getInputFields = () => (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('inputFields'), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.parseJson'), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.toJson'), (0, graphql_mapping_template_1.ref)('ctx.args.input.keySet()'))));
exports.getInputFields = getInputFields;
const getIdentityClaimExp = (value, defaultValueExp) => (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.defaultIfNull'), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.identity.claims.get'), value), defaultValueExp);
exports.getIdentityClaimExp = getIdentityClaimExp;
const iamCheck = (claim, exp, hasIdentityPoolId) => {
    let iamExp = (0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('ctx.identity.userArn'), (0, graphql_mapping_template_1.ref)(`ctx.stash.${claim}`));
    if (hasIdentityPoolId && claim === 'authRole') {
        iamExp = (0, graphql_mapping_template_1.or)([
            (0, graphql_mapping_template_1.parens)(iamExp),
            (0, graphql_mapping_template_1.parens)((0, graphql_mapping_template_1.and)([
                (0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('ctx.identity.cognitoIdentityPoolId'), (0, graphql_mapping_template_1.ref)('ctx.stash.identityPoolId')),
                (0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('ctx.identity.cognitoIdentityAuthType'), (0, graphql_mapping_template_1.str)('authenticated')),
            ])),
        ]);
    }
    return (0, graphql_mapping_template_1.iff)(iamExp, exp);
};
exports.iamCheck = iamCheck;
const getOwnerClaim = (ownerClaim) => {
    if (ownerClaim === 'username') {
        return (0, exports.getIdentityClaimExp)((0, graphql_mapping_template_1.str)(ownerClaim), (0, exports.getIdentityClaimExp)((0, graphql_mapping_template_1.str)(utils_1.DEFAULT_COGNITO_IDENTITY_CLAIM), (0, graphql_mapping_template_1.nul)()));
    }
    return (0, exports.getIdentityClaimExp)((0, graphql_mapping_template_1.str)(ownerClaim), (0, graphql_mapping_template_1.nul)());
};
exports.getOwnerClaim = getOwnerClaim;
const responseCheckForErrors = () => (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.ref)('ctx.error'), (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.error'), (0, graphql_mapping_template_1.ref)('ctx.error.message'), (0, graphql_mapping_template_1.ref)('ctx.error.type')));
exports.responseCheckForErrors = responseCheckForErrors;
const generateStaticRoleExpression = (roles) => {
    const staticRoleExpression = [];
    const privateRoleIdx = roles.findIndex((r) => r.strategy === 'private');
    if (privateRoleIdx > -1) {
        staticRoleExpression.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)));
        roles.splice(privateRoleIdx, 1);
    }
    if (roles.length > 0) {
        staticRoleExpression.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG)), (0, graphql_mapping_template_1.compoundExpression)([
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('staticGroupRoles'), (0, graphql_mapping_template_1.raw)(JSON.stringify(roles.map((r) => ({ claim: r.claim, entity: r.entity }))))),
            (0, graphql_mapping_template_1.forEach)((0, graphql_mapping_template_1.ref)('groupRole'), (0, graphql_mapping_template_1.ref)('staticGroupRoles'), [
                (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('groupsInToken'), (0, exports.getIdentityClaimExp)((0, graphql_mapping_template_1.ref)('groupRole.claim'), (0, graphql_mapping_template_1.list)([]))),
                (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('groupsInToken.contains'), (0, graphql_mapping_template_1.ref)('groupRole.entity')), (0, graphql_mapping_template_1.compoundExpression)([(0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)), (0, graphql_mapping_template_1.raw)('#break')])),
            ]),
        ])));
    }
    return staticRoleExpression;
};
exports.generateStaticRoleExpression = generateStaticRoleExpression;
const apiKeyExpression = (roles) => (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('util.authType()'), (0, graphql_mapping_template_1.str)(utils_1.API_KEY_AUTH_TYPE)), (0, graphql_mapping_template_1.compoundExpression)([...(roles.length > 0 ? [(0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true))] : [])]));
exports.apiKeyExpression = apiKeyExpression;
const lambdaExpression = (roles) => (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('util.authType()'), (0, graphql_mapping_template_1.str)(utils_1.LAMBDA_AUTH_TYPE)), (0, graphql_mapping_template_1.compoundExpression)([...(roles.length > 0 ? [(0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true))] : [])]));
exports.lambdaExpression = lambdaExpression;
const iamExpression = (options) => {
    const expression = new Array();
    if (options.adminRolesEnabled) {
        expression.push((0, exports.iamAdminRoleCheckExpression)(options.fieldName));
    }
    if (options.roles.length > 0) {
        options.roles.forEach((role) => {
            expression.push((0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG)), (0, exports.iamCheck)(role.claim, (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)), options.hasIdentityPoolId)));
        });
    }
    else {
        expression.push((0, graphql_mapping_template_1.ref)('util.unauthorized()'));
    }
    return (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.equals)((0, graphql_mapping_template_1.ref)('util.authType()'), (0, graphql_mapping_template_1.str)(utils_1.IAM_AUTH_TYPE)), (0, exports.generateIAMAccessCheck)(options.genericIamAccessEnabled, (0, graphql_mapping_template_1.compoundExpression)(expression)));
};
exports.iamExpression = iamExpression;
const generateIAMAccessCheck = (enableIamAccess, expression) => {
    if (!enableIamAccess) {
        return expression;
    }
    return (0, graphql_mapping_template_1.ifElse)(common_1.isNonCognitoIAMPrincipal, (0, graphql_mapping_template_1.compoundExpression)([common_1.setHasAuthExpression, (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true))]), expression);
};
exports.generateIAMAccessCheck = generateIAMAccessCheck;
const iamAdminRoleCheckExpression = (fieldName, adminCheckExpression) => {
    const returnStatement = fieldName ? (0, graphql_mapping_template_1.raw)(`#return($context.source.${fieldName})`) : (0, graphql_mapping_template_1.raw)('#return($util.toJson({}))');
    const fullReturnExpression = adminCheckExpression ? (0, graphql_mapping_template_1.compoundExpression)([adminCheckExpression, returnStatement]) : returnStatement;
    return (0, graphql_mapping_template_1.compoundExpression)([
        (0, graphql_mapping_template_1.forEach)((0, graphql_mapping_template_1.ref)('adminRole'), (0, graphql_mapping_template_1.ref)('ctx.stash.adminRoles'), [
            (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.and)([
                (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.identity.userArn.contains'), (0, graphql_mapping_template_1.ref)('adminRole')),
                (0, graphql_mapping_template_1.notEquals)((0, graphql_mapping_template_1.ref)('ctx.identity.userArn'), (0, graphql_mapping_template_1.ref)('ctx.stash.authRole')),
                (0, graphql_mapping_template_1.notEquals)((0, graphql_mapping_template_1.ref)('ctx.identity.userArn'), (0, graphql_mapping_template_1.ref)('ctx.stash.unauthRole')),
            ]), fullReturnExpression),
        ]),
    ]);
};
exports.iamAdminRoleCheckExpression = iamAdminRoleCheckExpression;
const generateAuthRequestExpression = () => {
    const statements = [
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('GetRequest'), (0, graphql_mapping_template_1.obj)({ version: (0, graphql_mapping_template_1.str)('2018-05-29'), operation: (0, graphql_mapping_template_1.str)('GetItem') })),
        (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.ref)('ctx.stash.metadata.modelObjectKey'), (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('key'), (0, graphql_mapping_template_1.ref)('ctx.stash.metadata.modelObjectKey')), (0, graphql_mapping_template_1.compoundExpression)([(0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('key'), (0, graphql_mapping_template_1.obj)({ id: (0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.dynamodb.toDynamoDB'), (0, graphql_mapping_template_1.ref)('ctx.args.input.id')) }))])),
        (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('GetRequest.put'), (0, graphql_mapping_template_1.str)('key'), (0, graphql_mapping_template_1.ref)('key'))),
        (0, graphql_mapping_template_1.toJson)((0, graphql_mapping_template_1.ref)('GetRequest')),
    ];
    return (0, graphql_mapping_template_1.printBlock)('Get Request template')((0, graphql_mapping_template_1.compoundExpression)(statements));
};
exports.generateAuthRequestExpression = generateAuthRequestExpression;
exports.emptyPayload = (0, graphql_mapping_template_1.toJson)((0, graphql_mapping_template_1.raw)(JSON.stringify({ version: '2018-05-29', payload: {} })));
const generateOwnerClaimListExpression = (claim, refName) => {
    const claims = claim.split(utils_1.IDENTITY_CLAIM_DELIMITER);
    if (claims.length <= 1) {
        return (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(refName), (0, graphql_mapping_template_1.list)([]));
    }
    return (0, graphql_mapping_template_1.compoundExpression)([
        (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(refName), (0, graphql_mapping_template_1.list)([])),
        (0, graphql_mapping_template_1.compoundExpression)(claims.map((c) => (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`${refName}.add`), (0, exports.getOwnerClaim)(c))))),
    ]);
};
exports.generateOwnerClaimListExpression = generateOwnerClaimListExpression;
const generateOwnerClaimExpression = (ownerClaim, refName) => {
    const expressions = [];
    const identityClaims = ownerClaim.split(utils_1.IDENTITY_CLAIM_DELIMITER);
    const hasMultiIdentityClaims = identityClaims.length > 1;
    if (hasMultiIdentityClaims) {
        identityClaims.forEach((claim, idx) => {
            expressions.push();
            if (idx === 0) {
                expressions.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(refName), (0, exports.getOwnerClaim)(claim)));
            }
            else {
                expressions.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(`currentClaim${idx}`), (0, exports.getOwnerClaim)(claim)));
            }
        });
    }
    else {
        expressions.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(refName), (0, exports.getOwnerClaim)(ownerClaim)));
    }
    return (0, graphql_mapping_template_1.compoundExpression)(expressions);
};
exports.generateOwnerClaimExpression = generateOwnerClaimExpression;
const generateOwnerMultiClaimExpression = (ownerClaim, refName) => {
    const identityClaims = ownerClaim.split(utils_1.IDENTITY_CLAIM_DELIMITER);
    const hasMultiIdentityClaims = identityClaims.length > 1;
    if (hasMultiIdentityClaims) {
        const additionalClaims = [...Array(identityClaims.length).keys()].splice(1).map((idx) => `$currentClaim${idx}`);
        return (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(refName), (0, graphql_mapping_template_1.raw)(`"$${[refName, ...additionalClaims].join(utils_1.IDENTITY_CLAIM_DELIMITER)}"`));
    }
};
exports.generateOwnerMultiClaimExpression = generateOwnerMultiClaimExpression;
const generateInvalidClaimsCondition = (ownerClaim, refName) => {
    const identityClaims = ownerClaim.split(utils_1.IDENTITY_CLAIM_DELIMITER);
    const hasMultiIdentityClaims = identityClaims.length > 1;
    const ownerClaimCheck = (0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)(refName)));
    if (!hasMultiIdentityClaims) {
        return ownerClaimCheck;
    }
    const additionalClaimsChecks = [...Array(identityClaims.length).keys()]
        .splice(1)
        .map((idx) => (0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isNull'), (0, graphql_mapping_template_1.ref)(`currentClaim${idx}`))));
    return (0, graphql_mapping_template_1.and)([ownerClaimCheck, ...additionalClaimsChecks]);
};
exports.generateInvalidClaimsCondition = generateInvalidClaimsCondition;
const generatePopulateOwnerField = (claimRef, ownerEntity, entityRef, entityIsList, checkIfAuthorized, allowedFieldsKey, allowedFieldsCondition) => {
    const conditionsToCheck = new Array();
    if (checkIfAuthorized) {
        conditionsToCheck.push((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG));
    }
    conditionsToCheck.push((0, graphql_mapping_template_1.ref)('util.isNull($' + `${entityRef})`));
    conditionsToCheck.push((0, graphql_mapping_template_1.not)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.args.input.containsKey'), (0, graphql_mapping_template_1.str)(ownerEntity))));
    const populateOwnerFieldExprs = new Array();
    populateOwnerFieldExprs.push((0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.args.input.put'), (0, graphql_mapping_template_1.str)(ownerEntity), entityIsList ? (0, graphql_mapping_template_1.list)([(0, graphql_mapping_template_1.ref)(claimRef)]) : (0, graphql_mapping_template_1.ref)(claimRef))));
    if (allowedFieldsKey && allowedFieldsCondition) {
        populateOwnerFieldExprs.push((0, exports.addAllowedFieldsIfElse)(allowedFieldsKey, allowedFieldsCondition));
    }
    return (0, graphql_mapping_template_1.compoundExpression)([(0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.and)(conditionsToCheck), (0, graphql_mapping_template_1.compoundExpression)(populateOwnerFieldExprs))]);
};
exports.generatePopulateOwnerField = generatePopulateOwnerField;
const addAllowedFieldsIfElse = (allowedFieldsKey, condition, breakLoop = false) => (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.ref)(condition), (0, graphql_mapping_template_1.compoundExpression)([(0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(utils_1.IS_AUTHORIZED_FLAG), (0, graphql_mapping_template_1.bool)(true)), ...(breakLoop ? [(0, graphql_mapping_template_1.raw)('#break')] : [])]), (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`${utils_1.ALLOWED_FIELDS}.addAll`), (0, graphql_mapping_template_1.ref)(allowedFieldsKey))));
exports.addAllowedFieldsIfElse = addAllowedFieldsIfElse;
const getOwnerClaimReference = (ownerClaim, refName) => {
    const expressions = [];
    const identityClaims = ownerClaim.split(utils_1.IDENTITY_CLAIM_DELIMITER);
    const hasMultiIdentityClaims = identityClaims.length > 1;
    let ownerRef = refName;
    if (hasMultiIdentityClaims) {
        identityClaims.forEach((_, idx) => {
            expressions.push();
            if (idx > 0) {
                ownerRef = `currentClaim${idx}`;
            }
        });
    }
    return ownerRef;
};
exports.getOwnerClaimReference = getOwnerClaimReference;
const generateFieldResolverForOwner = (entity) => {
    const expressions = [
        (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('util.isList'), (0, graphql_mapping_template_1.ref)(`ctx.source.${entity}`)), (0, graphql_mapping_template_1.compoundExpression)([
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('ownerEntitiesList'), (0, graphql_mapping_template_1.list)([])),
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)(entity), (0, graphql_mapping_template_1.ref)(`ctx.source.${entity}`)),
            (0, graphql_mapping_template_1.forEach)((0, graphql_mapping_template_1.ref)('entities'), (0, graphql_mapping_template_1.ref)(entity), [
                (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('ownerEntities'), (0, graphql_mapping_template_1.ref)(`entities.split("${utils_1.IDENTITY_CLAIM_DELIMITER}")`)),
                (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('ownerEntitiesLastIdx'), (0, graphql_mapping_template_1.raw)('$ownerEntities.size() - 1')),
                (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('ownerEntitiesLast'), (0, graphql_mapping_template_1.ref)('ownerEntities[$ownerEntitiesLastIdx]')),
                (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ownerEntitiesList.add'), (0, graphql_mapping_template_1.ref)('ownerEntitiesLast'))),
            ]),
            (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)(`ctx.source.${entity}.put`), (0, graphql_mapping_template_1.ref)('ownerEntitiesList'))),
            (0, graphql_mapping_template_1.toJson)((0, graphql_mapping_template_1.ref)('ownerEntitiesList')),
        ]), (0, graphql_mapping_template_1.compoundExpression)([
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('ownerEntities'), (0, graphql_mapping_template_1.ref)(`ctx.source.${entity}.split("${utils_1.IDENTITY_CLAIM_DELIMITER}")`)),
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('ownerEntitiesLastIdx'), (0, graphql_mapping_template_1.raw)('$ownerEntities.size() - 1')),
            (0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('ownerEntitiesLast'), (0, graphql_mapping_template_1.ref)('ownerEntities[$ownerEntitiesLastIdx]')),
            (0, graphql_mapping_template_1.qref)((0, graphql_mapping_template_1.methodCall)((0, graphql_mapping_template_1.ref)('ctx.source.put'), (0, graphql_mapping_template_1.str)(entity), (0, graphql_mapping_template_1.ref)('ownerEntitiesLast'))),
            (0, graphql_mapping_template_1.toJson)((0, graphql_mapping_template_1.ref)(`ctx.source.${entity}`)),
        ])),
    ];
    return (0, graphql_mapping_template_1.printBlock)('Parse owner field auth for Get')((0, graphql_mapping_template_1.compoundExpression)(expressions));
};
exports.generateFieldResolverForOwner = generateFieldResolverForOwner;
//# sourceMappingURL=helpers.js.map