"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SerializableError = void 0;
const path_1 = __importDefault(require("path"));
/**
 * Wrapper around Error for serialization for usage metrics
 */
class SerializableError {
    name;
    message;
    details;
    trace;
    stackTraceRegex = /^\s*at (?:((?:\[object object\])?[^\\/]+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i;
    arnRegex = /arn:[a-z0-9][-.a-z0-9]{0,62}:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}/g;
    /**
     * constructor for SerializableError
     */
    constructor(error) {
        this.name =
            'code' in error && error.code
                ? this.sanitize(error.code)
                : error.name;
        this.message = this.sanitize(error.message);
        this.details =
            'details' in error ? this.sanitize(error.details) : undefined;
        this.trace = this.extractStackTrace(error);
    }
    extractStackTrace = (error) => {
        const result = [];
        if (error.stack) {
            const stack = error.stack.split('\n');
            stack.forEach((line) => {
                const match = this.stackTraceRegex.exec(line);
                if (match) {
                    const [, methodName, file, lineNumber, columnNumber] = match;
                    result.push({
                        methodName,
                        file,
                        lineNumber,
                        columnNumber,
                    });
                }
            });
            const processedPaths = this.processPaths(result.map((trace) => trace.file));
            result.forEach((trace, index) => {
                trace.file = processedPaths[index];
            });
        }
        return result;
    };
    processPaths = (paths) => {
        return paths.map((tracePath) => {
            if (path_1.default.isAbsolute(tracePath)) {
                return path_1.default.relative(process.cwd(), tracePath);
            }
            return tracePath;
        });
    };
    removeARN = (str) => {
        return str?.replace(this.arnRegex, '<escaped ARN>') ?? '';
    };
    sanitize = (str) => {
        return this.removeARN(str)?.replaceAll(/["‚ùå]/g, '');
    };
}
exports.SerializableError = SerializableError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXphYmxlX2Vycm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VzYWdlLWRhdGEvc2VyaWFsaXphYmxlX2Vycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGdEQUF3QjtBQUV4Qjs7R0FFRztBQUNILE1BQWEsaUJBQWlCO0lBQzVCLElBQUksQ0FBUztJQUNiLE9BQU8sQ0FBUztJQUNoQixPQUFPLENBQVU7SUFDakIsS0FBSyxDQUFXO0lBRVIsZUFBZSxHQUNyQiwrRkFBK0YsQ0FBQztJQUMxRixRQUFRLEdBQ2Qsb0pBQW9KLENBQUM7SUFFdko7O09BRUc7SUFDSCxZQUFZLEtBQVk7UUFDdEIsSUFBSSxDQUFDLElBQUk7WUFDUCxNQUFNLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJO2dCQUMzQixDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBYyxDQUFDO2dCQUNyQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxPQUFPO1lBQ1YsU0FBUyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDMUUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVPLGlCQUFpQixHQUFHLENBQUMsS0FBWSxFQUFXLEVBQUU7UUFDcEQsTUFBTSxNQUFNLEdBQVksRUFBRSxDQUFDO1FBQzNCLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtZQUNmLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3RDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDckIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzlDLElBQUksS0FBSyxFQUFFO29CQUNULE1BQU0sQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFlBQVksQ0FBQyxHQUFHLEtBQUssQ0FBQztvQkFDN0QsTUFBTSxDQUFDLElBQUksQ0FBQzt3QkFDVixVQUFVO3dCQUNWLElBQUk7d0JBQ0osVUFBVTt3QkFDVixZQUFZO3FCQUNiLENBQUMsQ0FBQztpQkFDSjtZQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FDdEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUNsQyxDQUFDO1lBQ0YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtnQkFDOUIsS0FBSyxDQUFDLElBQUksR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDckMsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUMsQ0FBQztJQUVNLFlBQVksR0FBRyxDQUFDLEtBQWUsRUFBWSxFQUFFO1FBQ25ELE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQzdCLElBQUksY0FBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRTtnQkFDOUIsT0FBTyxjQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQzthQUNoRDtZQUNELE9BQU8sU0FBUyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBRU0sU0FBUyxHQUFHLENBQUMsR0FBWSxFQUFVLEVBQUU7UUFDM0MsT0FBTyxHQUFHLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVELENBQUMsQ0FBQztJQUVNLFFBQVEsR0FBRyxDQUFDLEdBQVcsRUFBRSxFQUFFO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3RELENBQUMsQ0FBQztDQUNIO0FBbkVELDhDQW1FQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG4vKipcbiAqIFdyYXBwZXIgYXJvdW5kIEVycm9yIGZvciBzZXJpYWxpemF0aW9uIGZvciB1c2FnZSBtZXRyaWNzXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXJpYWxpemFibGVFcnJvciB7XG4gIG5hbWU6IHN0cmluZztcbiAgbWVzc2FnZTogc3RyaW5nO1xuICBkZXRhaWxzPzogc3RyaW5nO1xuICB0cmFjZT86IFRyYWNlW107XG5cbiAgcHJpdmF0ZSBzdGFja1RyYWNlUmVnZXggPVxuICAgIC9eXFxzKmF0ICg/OigoPzpcXFtvYmplY3Qgb2JqZWN0XFxdKT9bXlxcXFwvXSsoPzogXFxbYXMgXFxTK1xcXSk/KSApP1xcKD8oLio/KTooXFxkKykoPzo6KFxcZCspKT9cXCk/XFxzKiQvaTtcbiAgcHJpdmF0ZSBhcm5SZWdleCA9XG4gICAgL2FybjpbYS16MC05XVstLmEtejAtOV17MCw2Mn06W0EtWmEtejAtOV1bQS1aYS16MC05Xy8uLV17MCw2Mn06W0EtWmEtejAtOV8vLi1dezAsNjN9OltBLVphLXowLTlfLy4tXXswLDYzfTpbQS1aYS16MC05XVtBLVphLXowLTk6Xy8rPSxALi1dezAsMTAyM30vZztcblxuICAvKipcbiAgICogY29uc3RydWN0b3IgZm9yIFNlcmlhbGl6YWJsZUVycm9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlcnJvcjogRXJyb3IpIHtcbiAgICB0aGlzLm5hbWUgPVxuICAgICAgJ2NvZGUnIGluIGVycm9yICYmIGVycm9yLmNvZGVcbiAgICAgICAgPyB0aGlzLnNhbml0aXplKGVycm9yLmNvZGUgYXMgc3RyaW5nKVxuICAgICAgICA6IGVycm9yLm5hbWU7XG4gICAgdGhpcy5tZXNzYWdlID0gdGhpcy5zYW5pdGl6ZShlcnJvci5tZXNzYWdlKTtcbiAgICB0aGlzLmRldGFpbHMgPVxuICAgICAgJ2RldGFpbHMnIGluIGVycm9yID8gdGhpcy5zYW5pdGl6ZShlcnJvci5kZXRhaWxzIGFzIHN0cmluZykgOiB1bmRlZmluZWQ7XG4gICAgdGhpcy50cmFjZSA9IHRoaXMuZXh0cmFjdFN0YWNrVHJhY2UoZXJyb3IpO1xuICB9XG5cbiAgcHJpdmF0ZSBleHRyYWN0U3RhY2tUcmFjZSA9IChlcnJvcjogRXJyb3IpOiBUcmFjZVtdID0+IHtcbiAgICBjb25zdCByZXN1bHQ6IFRyYWNlW10gPSBbXTtcbiAgICBpZiAoZXJyb3Iuc3RhY2spIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gZXJyb3Iuc3RhY2suc3BsaXQoJ1xcbicpO1xuICAgICAgc3RhY2suZm9yRWFjaCgobGluZSkgPT4ge1xuICAgICAgICBjb25zdCBtYXRjaCA9IHRoaXMuc3RhY2tUcmFjZVJlZ2V4LmV4ZWMobGluZSk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIGNvbnN0IFssIG1ldGhvZE5hbWUsIGZpbGUsIGxpbmVOdW1iZXIsIGNvbHVtbk51bWJlcl0gPSBtYXRjaDtcbiAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICBtZXRob2ROYW1lLFxuICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgIGxpbmVOdW1iZXIsXG4gICAgICAgICAgICBjb2x1bW5OdW1iZXIsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY29uc3QgcHJvY2Vzc2VkUGF0aHMgPSB0aGlzLnByb2Nlc3NQYXRocyhcbiAgICAgICAgcmVzdWx0Lm1hcCgodHJhY2UpID0+IHRyYWNlLmZpbGUpXG4gICAgICApO1xuICAgICAgcmVzdWx0LmZvckVhY2goKHRyYWNlLCBpbmRleCkgPT4ge1xuICAgICAgICB0cmFjZS5maWxlID0gcHJvY2Vzc2VkUGF0aHNbaW5kZXhdO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgcHJpdmF0ZSBwcm9jZXNzUGF0aHMgPSAocGF0aHM6IHN0cmluZ1tdKTogc3RyaW5nW10gPT4ge1xuICAgIHJldHVybiBwYXRocy5tYXAoKHRyYWNlUGF0aCkgPT4ge1xuICAgICAgaWYgKHBhdGguaXNBYnNvbHV0ZSh0cmFjZVBhdGgpKSB7XG4gICAgICAgIHJldHVybiBwYXRoLnJlbGF0aXZlKHByb2Nlc3MuY3dkKCksIHRyYWNlUGF0aCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJhY2VQYXRoO1xuICAgIH0pO1xuICB9O1xuXG4gIHByaXZhdGUgcmVtb3ZlQVJOID0gKHN0cj86IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgcmV0dXJuIHN0cj8ucmVwbGFjZSh0aGlzLmFyblJlZ2V4LCAnPGVzY2FwZWQgQVJOPicpID8/ICcnO1xuICB9O1xuXG4gIHByaXZhdGUgc2FuaXRpemUgPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gdGhpcy5yZW1vdmVBUk4oc3RyKT8ucmVwbGFjZUFsbCgvW1wi4p2MXS9nLCAnJyk7XG4gIH07XG59XG5cbnR5cGUgVHJhY2UgPSB7XG4gIG1ldGhvZE5hbWU6IHN0cmluZztcbiAgZmlsZTogc3RyaW5nO1xuICBsaW5lTnVtYmVyOiBzdHJpbmc7XG4gIGNvbHVtbk51bWJlcjogc3RyaW5nO1xufTtcbiJdfQ==