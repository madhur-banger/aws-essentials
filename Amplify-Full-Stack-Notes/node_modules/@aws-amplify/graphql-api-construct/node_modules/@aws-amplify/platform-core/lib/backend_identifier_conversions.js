"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackendIdentifierConversions = void 0;
const crypto_1 = require("crypto");
const STACK_NAME_LENGTH_LIMIT = 128;
const AMPLIFY_PREFIX = 'amplify';
const HASH_LENGTH = 10;
const NUM_DASHES = 4;
/**
 * Provides static methods for converting BackendIdentifier to/from a stack name string
 */
class BackendIdentifierConversions {
    /**
     * Convert a stack name to a BackendIdentifier
     *
     * If the stack name is ambiguous, undefined is returned
     */
    // It's fine to ignore the rule here because the anti-static rule is to ban the static function which should use constructor
    // eslint-disable-next-line no-restricted-syntax
    static fromStackName(stackName) {
        if (!stackName) {
            return;
        }
        const parts = stackName.split('-');
        if (parts.length !== 5) {
            return;
        }
        const [prefix, namespace, instance, type, hash] = parts;
        if (prefix !== AMPLIFY_PREFIX) {
            return;
        }
        if (type !== 'sandbox' && type !== 'branch') {
            return;
        }
        return {
            namespace,
            name: instance,
            type: type,
            hash,
        };
    }
    /**
     * Convert a BackendIdentifier to a stack name.
     *
     * !!!DANGER!!!
     * !!!DO NOT CHANGE THIS UNLESS YOU ARE 100% SURE YOU UNDERSTAND THE CONSEQUENCES!!!
     *
     * Changing this method will change how stack names are generated which could be a massive breaking change for existing Amplify stacks.
     */
    // It's fine to ignore the rule here because the anti-static rule is to ban the static function which should use constructor
    // eslint-disable-next-line no-restricted-syntax
    static toStackName(backendId) {
        const hash = getHash(backendId);
        // only take the first 50 chars here to make sure there is room in the stack name for the namespace as well
        const name = sanitizeChars(backendId.name).slice(0, 50);
        const namespaceMaxLength = STACK_NAME_LENGTH_LIMIT -
            AMPLIFY_PREFIX.length -
            backendId.type.length -
            name.length -
            NUM_DASHES -
            HASH_LENGTH;
        const namespace = sanitizeChars(backendId.namespace).slice(0, namespaceMaxLength - 1);
        return ['amplify', namespace, name, backendId.type, hash].join('-');
    }
}
exports.BackendIdentifierConversions = BackendIdentifierConversions;
/**
 * Gets a stable hash from the namespace and name in the backendId.
 *
 * If the backendId already includes a hash, this hash is returned as-is.
 *
 * !!!DANGER!!!
 * !!!DO NOT CHANGE THIS UNLESS YOU ARE 100% SURE YOU UNDERSTAND THE CONSEQUENCES!!!
 *
 * Changing this hash algorithm will change how stack names are generated which would be a massive breaking change for existing Amplify stacks.
 */
const getHash = (backendId) => backendId.hash ??
    // md5 would be sufficient here because this hash does not need to be cryptographically secure, but this ensures that we don't get unnecessarily flagged by some security scanner
    (0, crypto_1.createHash)('sha512')
        .update(backendId.namespace)
        .update(backendId.name)
        .digest('hex')
        .slice(0, HASH_LENGTH);
/**
 * Remove all non-alphanumeric characters from the input string
 */
const sanitizeChars = (str) => {
    return str.replace(/[^A-Za-z0-9]/g, '');
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9pZGVudGlmaWVyX2NvbnZlcnNpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2JhY2tlbmRfaWRlbnRpZmllcl9jb252ZXJzaW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtQ0FBb0M7QUFFcEMsTUFBTSx1QkFBdUIsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxjQUFjLEdBQUcsU0FBUyxDQUFDO0FBQ2pDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUN2QixNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUM7QUFFckI7O0dBRUc7QUFDSCxNQUFhLDRCQUE0QjtJQUN2Qzs7OztPQUlHO0lBQ0gsNEhBQTRIO0lBQzVILGdEQUFnRDtJQUNoRCxNQUFNLENBQUMsYUFBYSxDQUFDLFNBQWtCO1FBQ3JDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxPQUFPO1NBQ1I7UUFDRCxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDdEIsT0FBTztTQUNSO1FBQ0QsTUFBTSxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDeEQsSUFBSSxNQUFNLEtBQUssY0FBYyxFQUFFO1lBQzdCLE9BQU87U0FDUjtRQUNELElBQUksSUFBSSxLQUFLLFNBQVMsSUFBSSxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQzNDLE9BQU87U0FDUjtRQUVELE9BQU87WUFDTCxTQUFTO1lBQ1QsSUFBSSxFQUFFLFFBQVE7WUFDZCxJQUFJLEVBQUUsSUFBNEI7WUFDbEMsSUFBSTtTQUNMLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILDRIQUE0SDtJQUM1SCxnREFBZ0Q7SUFDaEQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUE0QjtRQUM3QyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFaEMsMkdBQTJHO1FBQzNHLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUV4RCxNQUFNLGtCQUFrQixHQUN0Qix1QkFBdUI7WUFDdkIsY0FBYyxDQUFDLE1BQU07WUFDckIsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNO1lBQ3JCLElBQUksQ0FBQyxNQUFNO1lBQ1gsVUFBVTtZQUNWLFdBQVcsQ0FBQztRQUVkLE1BQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUN4RCxDQUFDLEVBQ0Qsa0JBQWtCLEdBQUcsQ0FBQyxDQUN2QixDQUFDO1FBRUYsT0FBTyxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7Q0FDRjtBQS9ERCxvRUErREM7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFNLE9BQU8sR0FBRyxDQUFDLFNBQTRCLEVBQVUsRUFBRSxDQUN2RCxTQUFTLENBQUMsSUFBSTtJQUNkLGlMQUFpTDtJQUNqTCxJQUFBLG1CQUFVLEVBQUMsUUFBUSxDQUFDO1NBQ2pCLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO1NBQzNCLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO1NBQ3RCLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDYixLQUFLLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBRTNCOztHQUVHO0FBQ0gsTUFBTSxhQUFhLEdBQUcsQ0FBQyxHQUFXLEVBQVUsRUFBRTtJQUM1QyxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhY2tlbmRJZGVudGlmaWVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVIYXNoIH0gZnJvbSAnY3J5cHRvJztcblxuY29uc3QgU1RBQ0tfTkFNRV9MRU5HVEhfTElNSVQgPSAxMjg7XG5jb25zdCBBTVBMSUZZX1BSRUZJWCA9ICdhbXBsaWZ5JztcbmNvbnN0IEhBU0hfTEVOR1RIID0gMTA7XG5jb25zdCBOVU1fREFTSEVTID0gNDtcblxuLyoqXG4gKiBQcm92aWRlcyBzdGF0aWMgbWV0aG9kcyBmb3IgY29udmVydGluZyBCYWNrZW5kSWRlbnRpZmllciB0by9mcm9tIGEgc3RhY2sgbmFtZSBzdHJpbmdcbiAqL1xuZXhwb3J0IGNsYXNzIEJhY2tlbmRJZGVudGlmaWVyQ29udmVyc2lvbnMge1xuICAvKipcbiAgICogQ29udmVydCBhIHN0YWNrIG5hbWUgdG8gYSBCYWNrZW5kSWRlbnRpZmllclxuICAgKlxuICAgKiBJZiB0aGUgc3RhY2sgbmFtZSBpcyBhbWJpZ3VvdXMsIHVuZGVmaW5lZCBpcyByZXR1cm5lZFxuICAgKi9cbiAgLy8gSXQncyBmaW5lIHRvIGlnbm9yZSB0aGUgcnVsZSBoZXJlIGJlY2F1c2UgdGhlIGFudGktc3RhdGljIHJ1bGUgaXMgdG8gYmFuIHRoZSBzdGF0aWMgZnVuY3Rpb24gd2hpY2ggc2hvdWxkIHVzZSBjb25zdHJ1Y3RvclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgc3RhdGljIGZyb21TdGFja05hbWUoc3RhY2tOYW1lPzogc3RyaW5nKTogQmFja2VuZElkZW50aWZpZXIgfCB1bmRlZmluZWQge1xuICAgIGlmICghc3RhY2tOYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHBhcnRzID0gc3RhY2tOYW1lLnNwbGl0KCctJyk7XG4gICAgaWYgKHBhcnRzLmxlbmd0aCAhPT0gNSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBbcHJlZml4LCBuYW1lc3BhY2UsIGluc3RhbmNlLCB0eXBlLCBoYXNoXSA9IHBhcnRzO1xuICAgIGlmIChwcmVmaXggIT09IEFNUExJRllfUFJFRklYKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlICE9PSAnc2FuZGJveCcgJiYgdHlwZSAhPT0gJ2JyYW5jaCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbmFtZXNwYWNlLFxuICAgICAgbmFtZTogaW5zdGFuY2UsXG4gICAgICB0eXBlOiB0eXBlIGFzICdzYW5kYm94JyB8ICdicmFuY2gnLFxuICAgICAgaGFzaCxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgYSBCYWNrZW5kSWRlbnRpZmllciB0byBhIHN0YWNrIG5hbWUuXG4gICAqXG4gICAqICEhIURBTkdFUiEhIVxuICAgKiAhISFETyBOT1QgQ0hBTkdFIFRISVMgVU5MRVNTIFlPVSBBUkUgMTAwJSBTVVJFIFlPVSBVTkRFUlNUQU5EIFRIRSBDT05TRVFVRU5DRVMhISFcbiAgICpcbiAgICogQ2hhbmdpbmcgdGhpcyBtZXRob2Qgd2lsbCBjaGFuZ2UgaG93IHN0YWNrIG5hbWVzIGFyZSBnZW5lcmF0ZWQgd2hpY2ggY291bGQgYmUgYSBtYXNzaXZlIGJyZWFraW5nIGNoYW5nZSBmb3IgZXhpc3RpbmcgQW1wbGlmeSBzdGFja3MuXG4gICAqL1xuICAvLyBJdCdzIGZpbmUgdG8gaWdub3JlIHRoZSBydWxlIGhlcmUgYmVjYXVzZSB0aGUgYW50aS1zdGF0aWMgcnVsZSBpcyB0byBiYW4gdGhlIHN0YXRpYyBmdW5jdGlvbiB3aGljaCBzaG91bGQgdXNlIGNvbnN0cnVjdG9yXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICBzdGF0aWMgdG9TdGFja05hbWUoYmFja2VuZElkOiBCYWNrZW5kSWRlbnRpZmllcik6IHN0cmluZyB7XG4gICAgY29uc3QgaGFzaCA9IGdldEhhc2goYmFja2VuZElkKTtcblxuICAgIC8vIG9ubHkgdGFrZSB0aGUgZmlyc3QgNTAgY2hhcnMgaGVyZSB0byBtYWtlIHN1cmUgdGhlcmUgaXMgcm9vbSBpbiB0aGUgc3RhY2sgbmFtZSBmb3IgdGhlIG5hbWVzcGFjZSBhcyB3ZWxsXG4gICAgY29uc3QgbmFtZSA9IHNhbml0aXplQ2hhcnMoYmFja2VuZElkLm5hbWUpLnNsaWNlKDAsIDUwKTtcblxuICAgIGNvbnN0IG5hbWVzcGFjZU1heExlbmd0aCA9XG4gICAgICBTVEFDS19OQU1FX0xFTkdUSF9MSU1JVCAtXG4gICAgICBBTVBMSUZZX1BSRUZJWC5sZW5ndGggLVxuICAgICAgYmFja2VuZElkLnR5cGUubGVuZ3RoIC1cbiAgICAgIG5hbWUubGVuZ3RoIC1cbiAgICAgIE5VTV9EQVNIRVMgLVxuICAgICAgSEFTSF9MRU5HVEg7XG5cbiAgICBjb25zdCBuYW1lc3BhY2UgPSBzYW5pdGl6ZUNoYXJzKGJhY2tlbmRJZC5uYW1lc3BhY2UpLnNsaWNlKFxuICAgICAgMCxcbiAgICAgIG5hbWVzcGFjZU1heExlbmd0aCAtIDFcbiAgICApO1xuXG4gICAgcmV0dXJuIFsnYW1wbGlmeScsIG5hbWVzcGFjZSwgbmFtZSwgYmFja2VuZElkLnR5cGUsIGhhc2hdLmpvaW4oJy0nKTtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgYSBzdGFibGUgaGFzaCBmcm9tIHRoZSBuYW1lc3BhY2UgYW5kIG5hbWUgaW4gdGhlIGJhY2tlbmRJZC5cbiAqXG4gKiBJZiB0aGUgYmFja2VuZElkIGFscmVhZHkgaW5jbHVkZXMgYSBoYXNoLCB0aGlzIGhhc2ggaXMgcmV0dXJuZWQgYXMtaXMuXG4gKlxuICogISEhREFOR0VSISEhXG4gKiAhISFETyBOT1QgQ0hBTkdFIFRISVMgVU5MRVNTIFlPVSBBUkUgMTAwJSBTVVJFIFlPVSBVTkRFUlNUQU5EIFRIRSBDT05TRVFVRU5DRVMhISFcbiAqXG4gKiBDaGFuZ2luZyB0aGlzIGhhc2ggYWxnb3JpdGhtIHdpbGwgY2hhbmdlIGhvdyBzdGFjayBuYW1lcyBhcmUgZ2VuZXJhdGVkIHdoaWNoIHdvdWxkIGJlIGEgbWFzc2l2ZSBicmVha2luZyBjaGFuZ2UgZm9yIGV4aXN0aW5nIEFtcGxpZnkgc3RhY2tzLlxuICovXG5jb25zdCBnZXRIYXNoID0gKGJhY2tlbmRJZDogQmFja2VuZElkZW50aWZpZXIpOiBzdHJpbmcgPT5cbiAgYmFja2VuZElkLmhhc2ggPz9cbiAgLy8gbWQ1IHdvdWxkIGJlIHN1ZmZpY2llbnQgaGVyZSBiZWNhdXNlIHRoaXMgaGFzaCBkb2VzIG5vdCBuZWVkIHRvIGJlIGNyeXB0b2dyYXBoaWNhbGx5IHNlY3VyZSwgYnV0IHRoaXMgZW5zdXJlcyB0aGF0IHdlIGRvbid0IGdldCB1bm5lY2Vzc2FyaWx5IGZsYWdnZWQgYnkgc29tZSBzZWN1cml0eSBzY2FubmVyXG4gIGNyZWF0ZUhhc2goJ3NoYTUxMicpXG4gICAgLnVwZGF0ZShiYWNrZW5kSWQubmFtZXNwYWNlKVxuICAgIC51cGRhdGUoYmFja2VuZElkLm5hbWUpXG4gICAgLmRpZ2VzdCgnaGV4JylcbiAgICAuc2xpY2UoMCwgSEFTSF9MRU5HVEgpO1xuXG4vKipcbiAqIFJlbW92ZSBhbGwgbm9uLWFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzIGZyb20gdGhlIGlucHV0IHN0cmluZ1xuICovXG5jb25zdCBzYW5pdGl6ZUNoYXJzID0gKHN0cjogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bXkEtWmEtejAtOV0vZywgJycpO1xufTtcbiJdfQ==