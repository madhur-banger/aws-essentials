"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilePathExtractor = void 0;
const node_url_1 = require("node:url");
/**
 * Regex that pulls out the path from a stack trace line. Works for both unix and windows paths and cjs and esm loaders
 *
 * For ESM loaders in TS files or CJS loaders
 * The line is something like "at SymbolName (/some/path/to/project/root/backend/auth.ts:3:21)"
 * or on Windows "at SymbolName (C:\some\path\to\project\root\backend\auth.ts:3:21)"
 *
 * For ESM loaders in JS files
 * The line is something like "at file:///some/path/to/project/root/backend/auth.ts:14:28"
 * or on Windows " at file:///C:\some\path\to\project\root\backend\auth.ts:3:21"
 *
 * This regex pulls out the file path into the "filepath" named matching group
 * In the above examples that would be "/some/path/to/project/root/backend/auth.ts" or "C:\some\path\to\project\root\backend\auth.ts"
 *
 * Instead of combining both matches with single regex, we create two to keep it simple and manageable.
 *
 */
const extractFilePathFromStackTraceLineRegexes = [
    /\((?<filepath>(\w:)?[^:]*)[:\d]*\)/,
    /at (?<filepath>.*\.\w[^:\d]*)[:\d]*/,
];
/**
 * Extracts a file path from a given stack trace line
 */
class FilePathExtractor {
    stackTraceLine;
    /**
     * Constructor for FilePathExtractor
     */
    constructor(stackTraceLine) {
        this.stackTraceLine = stackTraceLine;
    }
    extract = () => {
        for (const regex of extractFilePathFromStackTraceLineRegexes) {
            const match = this.stackTraceLine.match(regex);
            if (match?.groups?.filepath) {
                return this.standardizePath(match?.groups?.filepath);
            }
        }
        return undefined;
    };
    // The input can be either a file path or a file URL. If it's a file URL, convert it to the path.
    standardizePath = (maybeUrl) => {
        try {
            const url = new URL(maybeUrl);
            if (url.protocol === 'file:') {
                return (0, node_url_1.fileURLToPath)(url);
            }
            return maybeUrl;
        }
        catch {
            return maybeUrl;
        }
    };
}
exports.FilePathExtractor = FilePathExtractor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmFjdF9maWxlX3BhdGhfZnJvbV9zdGFja190cmFjZV9saW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2V4dHJhY3RfZmlsZV9wYXRoX2Zyb21fc3RhY2tfdHJhY2VfbGluZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1Q0FBeUM7QUFFekM7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFDSCxNQUFNLHdDQUF3QyxHQUFHO0lBQy9DLG9DQUFvQztJQUNwQyxxQ0FBcUM7Q0FDdEMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBYSxpQkFBaUI7SUFJQztJQUg3Qjs7T0FFRztJQUNILFlBQTZCLGNBQXNCO1FBQXRCLG1CQUFjLEdBQWQsY0FBYyxDQUFRO0lBQUcsQ0FBQztJQUV2RCxPQUFPLEdBQUcsR0FBRyxFQUFFO1FBQ2IsS0FBSyxNQUFNLEtBQUssSUFBSSx3Q0FBd0MsRUFBRTtZQUM1RCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvQyxJQUFJLEtBQUssRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFO2dCQUMzQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQzthQUN0RDtTQUNGO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQyxDQUFDO0lBRUYsaUdBQWlHO0lBQ3pGLGVBQWUsR0FBRyxDQUFDLFFBQWdCLEVBQVUsRUFBRTtRQUNyRCxJQUFJO1lBQ0YsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDOUIsSUFBSSxHQUFHLENBQUMsUUFBUSxLQUFLLE9BQU8sRUFBRTtnQkFDNUIsT0FBTyxJQUFBLHdCQUFhLEVBQUMsR0FBRyxDQUFDLENBQUM7YUFDM0I7WUFDRCxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUFDLE1BQU07WUFDTixPQUFPLFFBQVEsQ0FBQztTQUNqQjtJQUNILENBQUMsQ0FBQztDQUNIO0FBNUJELDhDQTRCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICdub2RlOnVybCc7XG5cbi8qKlxuICogUmVnZXggdGhhdCBwdWxscyBvdXQgdGhlIHBhdGggZnJvbSBhIHN0YWNrIHRyYWNlIGxpbmUuIFdvcmtzIGZvciBib3RoIHVuaXggYW5kIHdpbmRvd3MgcGF0aHMgYW5kIGNqcyBhbmQgZXNtIGxvYWRlcnNcbiAqXG4gKiBGb3IgRVNNIGxvYWRlcnMgaW4gVFMgZmlsZXMgb3IgQ0pTIGxvYWRlcnNcbiAqIFRoZSBsaW5lIGlzIHNvbWV0aGluZyBsaWtlIFwiYXQgU3ltYm9sTmFtZSAoL3NvbWUvcGF0aC90by9wcm9qZWN0L3Jvb3QvYmFja2VuZC9hdXRoLnRzOjM6MjEpXCJcbiAqIG9yIG9uIFdpbmRvd3MgXCJhdCBTeW1ib2xOYW1lIChDOlxcc29tZVxccGF0aFxcdG9cXHByb2plY3RcXHJvb3RcXGJhY2tlbmRcXGF1dGgudHM6MzoyMSlcIlxuICpcbiAqIEZvciBFU00gbG9hZGVycyBpbiBKUyBmaWxlc1xuICogVGhlIGxpbmUgaXMgc29tZXRoaW5nIGxpa2UgXCJhdCBmaWxlOi8vL3NvbWUvcGF0aC90by9wcm9qZWN0L3Jvb3QvYmFja2VuZC9hdXRoLnRzOjE0OjI4XCJcbiAqIG9yIG9uIFdpbmRvd3MgXCIgYXQgZmlsZTovLy9DOlxcc29tZVxccGF0aFxcdG9cXHByb2plY3RcXHJvb3RcXGJhY2tlbmRcXGF1dGgudHM6MzoyMVwiXG4gKlxuICogVGhpcyByZWdleCBwdWxscyBvdXQgdGhlIGZpbGUgcGF0aCBpbnRvIHRoZSBcImZpbGVwYXRoXCIgbmFtZWQgbWF0Y2hpbmcgZ3JvdXBcbiAqIEluIHRoZSBhYm92ZSBleGFtcGxlcyB0aGF0IHdvdWxkIGJlIFwiL3NvbWUvcGF0aC90by9wcm9qZWN0L3Jvb3QvYmFja2VuZC9hdXRoLnRzXCIgb3IgXCJDOlxcc29tZVxccGF0aFxcdG9cXHByb2plY3RcXHJvb3RcXGJhY2tlbmRcXGF1dGgudHNcIlxuICpcbiAqIEluc3RlYWQgb2YgY29tYmluaW5nIGJvdGggbWF0Y2hlcyB3aXRoIHNpbmdsZSByZWdleCwgd2UgY3JlYXRlIHR3byB0byBrZWVwIGl0IHNpbXBsZSBhbmQgbWFuYWdlYWJsZS5cbiAqXG4gKi9cbmNvbnN0IGV4dHJhY3RGaWxlUGF0aEZyb21TdGFja1RyYWNlTGluZVJlZ2V4ZXMgPSBbXG4gIC9cXCgoPzxmaWxlcGF0aD4oXFx3Oik/W146XSopWzpcXGRdKlxcKS8sXG4gIC9hdCAoPzxmaWxlcGF0aD4uKlxcLlxcd1teOlxcZF0qKVs6XFxkXSovLFxuXTtcblxuLyoqXG4gKiBFeHRyYWN0cyBhIGZpbGUgcGF0aCBmcm9tIGEgZ2l2ZW4gc3RhY2sgdHJhY2UgbGluZVxuICovXG5leHBvcnQgY2xhc3MgRmlsZVBhdGhFeHRyYWN0b3Ige1xuICAvKipcbiAgICogQ29uc3RydWN0b3IgZm9yIEZpbGVQYXRoRXh0cmFjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHN0YWNrVHJhY2VMaW5lOiBzdHJpbmcpIHt9XG5cbiAgZXh0cmFjdCA9ICgpID0+IHtcbiAgICBmb3IgKGNvbnN0IHJlZ2V4IG9mIGV4dHJhY3RGaWxlUGF0aEZyb21TdGFja1RyYWNlTGluZVJlZ2V4ZXMpIHtcbiAgICAgIGNvbnN0IG1hdGNoID0gdGhpcy5zdGFja1RyYWNlTGluZS5tYXRjaChyZWdleCk7XG4gICAgICBpZiAobWF0Y2g/Lmdyb3Vwcz8uZmlsZXBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhbmRhcmRpemVQYXRoKG1hdGNoPy5ncm91cHM/LmZpbGVwYXRoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICAvLyBUaGUgaW5wdXQgY2FuIGJlIGVpdGhlciBhIGZpbGUgcGF0aCBvciBhIGZpbGUgVVJMLiBJZiBpdCdzIGEgZmlsZSBVUkwsIGNvbnZlcnQgaXQgdG8gdGhlIHBhdGguXG4gIHByaXZhdGUgc3RhbmRhcmRpemVQYXRoID0gKG1heWJlVXJsOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKG1heWJlVXJsKTtcbiAgICAgIGlmICh1cmwucHJvdG9jb2wgPT09ICdmaWxlOicpIHtcbiAgICAgICAgcmV0dXJuIGZpbGVVUkxUb1BhdGgodXJsKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXliZVVybDtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBtYXliZVVybDtcbiAgICB9XG4gIH07XG59XG4iXX0=