import z from 'zod';
/**
 * return the package json
 */
export declare class PackageJsonReader {
    read: (absolutePackageJsonPath: string) => PackageJson;
    /**
     * Returns the contents of the package.json file in process.cwd()
     *
     * If no package.json file exists, or the content does not pass validation, an error is thrown
     */
    readFromCwd: () => PackageJson;
}
/**
 * Type for package.json content.
 *
 * Add additional validation if there are other fields we need to read
 */
export declare const packageJsonSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    version: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"module">, z.ZodLiteral<"commonjs">]>>;
}, "strip", z.ZodTypeAny, {
    name?: string | undefined;
    type?: "module" | "commonjs" | undefined;
    version?: string | undefined;
}, {
    name?: string | undefined;
    type?: "module" | "commonjs" | undefined;
    version?: string | undefined;
}>;
export type PackageJson = z.infer<typeof packageJsonSchema>;
//# sourceMappingURL=package_json_reader.d.ts.map