"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.packageJsonSchema = exports.PackageJsonReader = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const zod_1 = __importDefault(require("zod"));
const errors_1 = require("./errors");
/**
 * return the package json
 */
class PackageJsonReader {
    read = (absolutePackageJsonPath) => {
        if (!fs_1.default.existsSync(absolutePackageJsonPath)) {
            throw new errors_1.AmplifyUserError('InvalidPackageJsonError', {
                message: `Could not find a package.json file at ${absolutePackageJsonPath}`,
                resolution: `Ensure that ${absolutePackageJsonPath} exists and is a valid JSON file`,
            });
        }
        let jsonParsedValue;
        try {
            jsonParsedValue = JSON.parse(
            // we have to use sync fs methods here because this is also used during cdk synth
            fs_1.default.readFileSync(absolutePackageJsonPath, 'utf-8'));
        }
        catch (err) {
            throw new errors_1.AmplifyUserError('InvalidPackageJsonError', {
                message: `Could not parse the contents of ${absolutePackageJsonPath}`,
                resolution: `Ensure that ${absolutePackageJsonPath} exists and is a valid JSON file`,
            }, err);
        }
        return exports.packageJsonSchema.parse(jsonParsedValue);
    };
    /**
     * Returns the contents of the package.json file in process.cwd()
     *
     * If no package.json file exists, or the content does not pass validation, an error is thrown
     */
    readFromCwd = () => {
        return this.read(path_1.default.resolve(process.cwd(), 'package.json'));
    };
}
exports.PackageJsonReader = PackageJsonReader;
/**
 * Type for package.json content.
 *
 * Add additional validation if there are other fields we need to read
 */
exports.packageJsonSchema = zod_1.default.object({
    name: zod_1.default.string().optional(),
    version: zod_1.default.string().optional(),
    type: zod_1.default.union([zod_1.default.literal('module'), zod_1.default.literal('commonjs')]).optional(),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFja2FnZV9qc29uX3JlYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9wYWNrYWdlX2pzb25fcmVhZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDRDQUFvQjtBQUNwQixnREFBd0I7QUFDeEIsOENBQW9CO0FBQ3BCLHFDQUE0QztBQUU1Qzs7R0FFRztBQUNILE1BQWEsaUJBQWlCO0lBQzVCLElBQUksR0FBRyxDQUFDLHVCQUErQixFQUFlLEVBQUU7UUFDdEQsSUFBSSxDQUFDLFlBQUUsQ0FBQyxVQUFVLENBQUMsdUJBQXVCLENBQUMsRUFBRTtZQUMzQyxNQUFNLElBQUkseUJBQWdCLENBQUMseUJBQXlCLEVBQUU7Z0JBQ3BELE9BQU8sRUFBRSx5Q0FBeUMsdUJBQXVCLEVBQUU7Z0JBQzNFLFVBQVUsRUFBRSxlQUFlLHVCQUF1QixrQ0FBa0M7YUFDckYsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxJQUFJLGVBQXdDLENBQUM7UUFDN0MsSUFBSTtZQUNGLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSztZQUMxQixpRkFBaUY7WUFDakYsWUFBRSxDQUFDLFlBQVksQ0FBQyx1QkFBdUIsRUFBRSxPQUFPLENBQUMsQ0FDbEQsQ0FBQztTQUNIO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixNQUFNLElBQUkseUJBQWdCLENBQ3hCLHlCQUF5QixFQUN6QjtnQkFDRSxPQUFPLEVBQUUsbUNBQW1DLHVCQUF1QixFQUFFO2dCQUNyRSxVQUFVLEVBQUUsZUFBZSx1QkFBdUIsa0NBQWtDO2FBQ3JGLEVBQ0QsR0FBWSxDQUNiLENBQUM7U0FDSDtRQUNELE9BQU8seUJBQWlCLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ2xELENBQUMsQ0FBQztJQUVGOzs7O09BSUc7SUFDSCxXQUFXLEdBQUcsR0FBZ0IsRUFBRTtRQUM5QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDLENBQUM7Q0FDSDtBQW5DRCw4Q0FtQ0M7QUFFRDs7OztHQUlHO0FBQ1UsUUFBQSxpQkFBaUIsR0FBRyxhQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3hDLElBQUksRUFBRSxhQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQzNCLE9BQU8sRUFBRSxhQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQzlCLElBQUksRUFBRSxhQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsYUFBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxhQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUU7Q0FDdkUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHogZnJvbSAnem9kJztcbmltcG9ydCB7IEFtcGxpZnlVc2VyRXJyb3IgfSBmcm9tICcuL2Vycm9ycyc7XG5cbi8qKlxuICogcmV0dXJuIHRoZSBwYWNrYWdlIGpzb25cbiAqL1xuZXhwb3J0IGNsYXNzIFBhY2thZ2VKc29uUmVhZGVyIHtcbiAgcmVhZCA9IChhYnNvbHV0ZVBhY2thZ2VKc29uUGF0aDogc3RyaW5nKTogUGFja2FnZUpzb24gPT4ge1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhhYnNvbHV0ZVBhY2thZ2VKc29uUGF0aCkpIHtcbiAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKCdJbnZhbGlkUGFja2FnZUpzb25FcnJvcicsIHtcbiAgICAgICAgbWVzc2FnZTogYENvdWxkIG5vdCBmaW5kIGEgcGFja2FnZS5qc29uIGZpbGUgYXQgJHthYnNvbHV0ZVBhY2thZ2VKc29uUGF0aH1gLFxuICAgICAgICByZXNvbHV0aW9uOiBgRW5zdXJlIHRoYXQgJHthYnNvbHV0ZVBhY2thZ2VKc29uUGF0aH0gZXhpc3RzIGFuZCBpcyBhIHZhbGlkIEpTT04gZmlsZWAsXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IGpzb25QYXJzZWRWYWx1ZTogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gICAgdHJ5IHtcbiAgICAgIGpzb25QYXJzZWRWYWx1ZSA9IEpTT04ucGFyc2UoXG4gICAgICAgIC8vIHdlIGhhdmUgdG8gdXNlIHN5bmMgZnMgbWV0aG9kcyBoZXJlIGJlY2F1c2UgdGhpcyBpcyBhbHNvIHVzZWQgZHVyaW5nIGNkayBzeW50aFxuICAgICAgICBmcy5yZWFkRmlsZVN5bmMoYWJzb2x1dGVQYWNrYWdlSnNvblBhdGgsICd1dGYtOCcpXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICdJbnZhbGlkUGFja2FnZUpzb25FcnJvcicsXG4gICAgICAgIHtcbiAgICAgICAgICBtZXNzYWdlOiBgQ291bGQgbm90IHBhcnNlIHRoZSBjb250ZW50cyBvZiAke2Fic29sdXRlUGFja2FnZUpzb25QYXRofWAsXG4gICAgICAgICAgcmVzb2x1dGlvbjogYEVuc3VyZSB0aGF0ICR7YWJzb2x1dGVQYWNrYWdlSnNvblBhdGh9IGV4aXN0cyBhbmQgaXMgYSB2YWxpZCBKU09OIGZpbGVgLFxuICAgICAgICB9LFxuICAgICAgICBlcnIgYXMgRXJyb3JcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBwYWNrYWdlSnNvblNjaGVtYS5wYXJzZShqc29uUGFyc2VkVmFsdWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjb250ZW50cyBvZiB0aGUgcGFja2FnZS5qc29uIGZpbGUgaW4gcHJvY2Vzcy5jd2QoKVxuICAgKlxuICAgKiBJZiBubyBwYWNrYWdlLmpzb24gZmlsZSBleGlzdHMsIG9yIHRoZSBjb250ZW50IGRvZXMgbm90IHBhc3MgdmFsaWRhdGlvbiwgYW4gZXJyb3IgaXMgdGhyb3duXG4gICAqL1xuICByZWFkRnJvbUN3ZCA9ICgpOiBQYWNrYWdlSnNvbiA9PiB7XG4gICAgcmV0dXJuIHRoaXMucmVhZChwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgJ3BhY2thZ2UuanNvbicpKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBUeXBlIGZvciBwYWNrYWdlLmpzb24gY29udGVudC5cbiAqXG4gKiBBZGQgYWRkaXRpb25hbCB2YWxpZGF0aW9uIGlmIHRoZXJlIGFyZSBvdGhlciBmaWVsZHMgd2UgbmVlZCB0byByZWFkXG4gKi9cbmV4cG9ydCBjb25zdCBwYWNrYWdlSnNvblNjaGVtYSA9IHoub2JqZWN0KHtcbiAgbmFtZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICB2ZXJzaW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIHR5cGU6IHoudW5pb24oW3oubGl0ZXJhbCgnbW9kdWxlJyksIHoubGl0ZXJhbCgnY29tbW9uanMnKV0pLm9wdGlvbmFsKCksXG59KTtcblxuZXhwb3J0IHR5cGUgUGFja2FnZUpzb24gPSB6LmluZmVyPHR5cGVvZiBwYWNrYWdlSnNvblNjaGVtYT47XG4iXX0=