"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stripDirectives = void 0;
const graphql_1 = require("graphql");
function stripDirectives(doc, except = []) {
    const definitions = [];
    for (const def of doc.definitions) {
        switch (def.kind) {
            case graphql_1.Kind.OBJECT_TYPE_DEFINITION:
                definitions.push(stripObjectDirectives(def));
                break;
            case graphql_1.Kind.INTERFACE_TYPE_DEFINITION:
                definitions.push(stripInterfaceDirectives(def));
                break;
            case graphql_1.Kind.UNION_TYPE_DEFINITION:
                definitions.push(stripUnionDirectives(def));
                break;
            case graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION:
                definitions.push(stripInputObjectDirectives(def));
                break;
            case graphql_1.Kind.ENUM_TYPE_DEFINITION:
                definitions.push(stripEnumDirectives(def));
                break;
            case graphql_1.Kind.SCALAR_TYPE_DEFINITION:
                definitions.push(stripScalarDirectives(def));
                break;
            default:
        }
    }
    function excepted(dir) {
        return Boolean(except.find((f) => dir.name.value === f));
    }
    function stripObjectDirectives(node) {
        var _a;
        const fields = node.fields ? node.fields.map(stripFieldDirectives) : node.fields;
        return {
            ...node,
            fields,
            directives: (_a = node.directives) === null || _a === void 0 ? void 0 : _a.filter(excepted),
        };
    }
    function stripInterfaceDirectives(node) {
        var _a;
        const fields = node.fields ? node.fields.map(stripFieldDirectives) : node.fields;
        return {
            ...node,
            fields,
            directives: (_a = node.directives) === null || _a === void 0 ? void 0 : _a.filter(excepted),
        };
    }
    function stripFieldDirectives(node) {
        var _a;
        const args = node.arguments ? node.arguments.map(stripArgumentDirectives) : node.arguments;
        return {
            ...node,
            arguments: args,
            directives: (_a = node.directives) === null || _a === void 0 ? void 0 : _a.filter(excepted),
        };
    }
    function stripArgumentDirectives(node) {
        var _a;
        return {
            ...node,
            directives: (_a = node.directives) === null || _a === void 0 ? void 0 : _a.filter(excepted),
        };
    }
    function stripUnionDirectives(node) {
        var _a;
        return {
            ...node,
            directives: (_a = node.directives) === null || _a === void 0 ? void 0 : _a.filter(excepted),
        };
    }
    function stripScalarDirectives(node) {
        var _a;
        return {
            ...node,
            directives: (_a = node.directives) === null || _a === void 0 ? void 0 : _a.filter(excepted),
        };
    }
    function stripInputObjectDirectives(node) {
        var _a;
        const fields = node.fields ? node.fields.map(stripArgumentDirectives) : node.fields;
        return {
            ...node,
            fields,
            directives: (_a = node.directives) === null || _a === void 0 ? void 0 : _a.filter(excepted),
        };
    }
    function stripEnumDirectives(node) {
        var _a;
        const values = node.values ? node.values.map(stripEnumValueDirectives) : node.values;
        return {
            ...node,
            values,
            directives: (_a = node.directives) === null || _a === void 0 ? void 0 : _a.filter(excepted),
        };
    }
    function stripEnumValueDirectives(node) {
        var _a;
        return {
            ...node,
            directives: (_a = node.directives) === null || _a === void 0 ? void 0 : _a.filter(excepted),
        };
    }
    return {
        kind: graphql_1.Kind.DOCUMENT,
        definitions,
    };
}
exports.stripDirectives = stripDirectives;
//# sourceMappingURL=strip-directives.js.map