"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphQlQueryFactory = void 0;
/**
 * A factory that creates GraphQl queries from tool configuration.
 */
class GraphQlQueryFactory {
    constructor() {
        this.createQuery = (toolDefinition) => {
            const { graphqlRequestInputDescriptor } = toolDefinition;
            const { selectionSet, queryName } = graphqlRequestInputDescriptor;
            const [topLevelQueryArgs, queryArgs] = this.createQueryArgs(toolDefinition);
            const fieldSelection = selectionSet.length > 0 ? ` { ${selectionSet} }` : '';
            const query = `
    query ToolQuery${topLevelQueryArgs} {
      ${queryName}${queryArgs}${fieldSelection}
    }
  `;
            return query;
        };
        this.createQueryArgs = (toolDefinition) => {
            const { inputSchema } = toolDefinition;
            if (!(inputSchema === null || inputSchema === void 0 ? void 0 : inputSchema.json)) {
                return ['', ''];
            }
            const { properties } = inputSchema.json;
            // The conversation resolver should not pass an empty object as input,
            // but we're defensively checking for it here anyway because if `properties: {}`
            // is passed, it will generate invalid GraphQL. e.g.
            // Valid:
            // query ToolQuery {
            //   exampleQuery
            // }
            //
            // Invalid:
            // query ToolQuery {
            //   exampleQuery()
            // }
            if (!properties || Object.keys(properties).length === 0) {
                return ['', ''];
            }
            const { propertyTypes } = toolDefinition.graphqlRequestInputDescriptor;
            const propertyNames = Object.keys(properties);
            const topLevelQueryArgs = propertyNames
                .map((name) => `$${name}: ${propertyTypes[name]}`)
                .join(', ');
            const queryArgs = propertyNames
                .map((name) => `${name}: $${name}`)
                .join(', ');
            return [`(${topLevelQueryArgs})`, `(${queryArgs})`];
        };
    }
}
exports.GraphQlQueryFactory = GraphQlQueryFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhxbF9xdWVyeV9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbnZlcnNhdGlvbi9ydW50aW1lL2V2ZW50LXRvb2xzLXByb3ZpZGVyL2dyYXBocWxfcXVlcnlfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFPQTs7R0FFRztBQUNILE1BQWEsbUJBQW1CO0lBQWhDO1FBQ0UsZ0JBQVcsR0FBRyxDQUNaLGNBQXNELEVBQzlDLEVBQUU7WUFDVixNQUFNLEVBQUUsNkJBQTZCLEVBQUUsR0FBRyxjQUFjLENBQUM7WUFDekQsTUFBTSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsR0FBRyw2QkFBNkIsQ0FBQztZQUNsRSxNQUFNLENBQUMsaUJBQWlCLEVBQUUsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUM1RSxNQUFNLGNBQWMsR0FDbEIsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sWUFBWSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUN4RCxNQUFNLEtBQUssR0FBRztxQkFDRyxpQkFBaUI7UUFDOUIsU0FBUyxHQUFHLFNBQVMsR0FBRyxjQUFjOztHQUUzQyxDQUFDO1lBRUEsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDLENBQUM7UUFFTSxvQkFBZSxHQUFHLENBQ3hCLGNBQXNELEVBQ3BDLEVBQUU7WUFDcEIsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLGNBQWMsQ0FBQztZQUN2QyxJQUFJLENBQUMsQ0FBQSxXQUFXLGFBQVgsV0FBVyx1QkFBWCxXQUFXLENBQUUsSUFBSSxDQUFBLEVBQUU7Z0JBQ3RCLE9BQU8sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7YUFDakI7WUFFRCxNQUFNLEVBQUUsVUFBVSxFQUFFLEdBQUcsV0FBVyxDQUFDLElBQXVCLENBQUM7WUFFM0Qsc0VBQXNFO1lBQ3RFLGdGQUFnRjtZQUNoRixvREFBb0Q7WUFDcEQsU0FBUztZQUNULG9CQUFvQjtZQUNwQixpQkFBaUI7WUFDakIsSUFBSTtZQUNKLEVBQUU7WUFDRixXQUFXO1lBQ1gsb0JBQW9CO1lBQ3BCLG1CQUFtQjtZQUNuQixJQUFJO1lBQ0osSUFBSSxDQUFDLFVBQVUsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ3ZELE9BQU8sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7YUFDakI7WUFDRCxNQUFNLEVBQUUsYUFBYSxFQUFFLEdBQUcsY0FBYyxDQUFDLDZCQUE2QixDQUFDO1lBQ3ZFLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFFOUMsTUFBTSxpQkFBaUIsR0FBRyxhQUFhO2lCQUNwQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSSxLQUFLLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO2lCQUNqRCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFZCxNQUFNLFNBQVMsR0FBRyxhQUFhO2lCQUM1QixHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxNQUFNLElBQUksRUFBRSxDQUFDO2lCQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFZCxPQUFPLENBQUMsSUFBSSxpQkFBaUIsR0FBRyxFQUFFLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUM7SUFDSixDQUFDO0NBQUE7QUF4REQsa0RBd0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udmVyc2F0aW9uVHVybkV2ZW50VG9vbENvbmZpZ3VyYXRpb24gfSBmcm9tICcuL3R5cGVzJztcblxudHlwZSBJbnB1dFNjaGVtYUpzb24gPSB7XG4gIHByb3BlcnRpZXM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICByZXF1aXJlZDogc3RyaW5nW107XG59O1xuXG4vKipcbiAqIEEgZmFjdG9yeSB0aGF0IGNyZWF0ZXMgR3JhcGhRbCBxdWVyaWVzIGZyb20gdG9vbCBjb25maWd1cmF0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgR3JhcGhRbFF1ZXJ5RmFjdG9yeSB7XG4gIGNyZWF0ZVF1ZXJ5ID0gKFxuICAgIHRvb2xEZWZpbml0aW9uOiBDb252ZXJzYXRpb25UdXJuRXZlbnRUb29sQ29uZmlndXJhdGlvblxuICApOiBzdHJpbmcgPT4ge1xuICAgIGNvbnN0IHsgZ3JhcGhxbFJlcXVlc3RJbnB1dERlc2NyaXB0b3IgfSA9IHRvb2xEZWZpbml0aW9uO1xuICAgIGNvbnN0IHsgc2VsZWN0aW9uU2V0LCBxdWVyeU5hbWUgfSA9IGdyYXBocWxSZXF1ZXN0SW5wdXREZXNjcmlwdG9yO1xuICAgIGNvbnN0IFt0b3BMZXZlbFF1ZXJ5QXJncywgcXVlcnlBcmdzXSA9IHRoaXMuY3JlYXRlUXVlcnlBcmdzKHRvb2xEZWZpbml0aW9uKTtcbiAgICBjb25zdCBmaWVsZFNlbGVjdGlvbiA9XG4gICAgICBzZWxlY3Rpb25TZXQubGVuZ3RoID4gMCA/IGAgeyAke3NlbGVjdGlvblNldH0gfWAgOiAnJztcbiAgICBjb25zdCBxdWVyeSA9IGBcbiAgICBxdWVyeSBUb29sUXVlcnkke3RvcExldmVsUXVlcnlBcmdzfSB7XG4gICAgICAke3F1ZXJ5TmFtZX0ke3F1ZXJ5QXJnc30ke2ZpZWxkU2VsZWN0aW9ufVxuICAgIH1cbiAgYDtcblxuICAgIHJldHVybiBxdWVyeTtcbiAgfTtcblxuICBwcml2YXRlIGNyZWF0ZVF1ZXJ5QXJncyA9IChcbiAgICB0b29sRGVmaW5pdGlvbjogQ29udmVyc2F0aW9uVHVybkV2ZW50VG9vbENvbmZpZ3VyYXRpb25cbiAgKTogW3N0cmluZywgc3RyaW5nXSA9PiB7XG4gICAgY29uc3QgeyBpbnB1dFNjaGVtYSB9ID0gdG9vbERlZmluaXRpb247XG4gICAgaWYgKCFpbnB1dFNjaGVtYT8uanNvbikge1xuICAgICAgcmV0dXJuIFsnJywgJyddO1xuICAgIH1cblxuICAgIGNvbnN0IHsgcHJvcGVydGllcyB9ID0gaW5wdXRTY2hlbWEuanNvbiBhcyBJbnB1dFNjaGVtYUpzb247XG5cbiAgICAvLyBUaGUgY29udmVyc2F0aW9uIHJlc29sdmVyIHNob3VsZCBub3QgcGFzcyBhbiBlbXB0eSBvYmplY3QgYXMgaW5wdXQsXG4gICAgLy8gYnV0IHdlJ3JlIGRlZmVuc2l2ZWx5IGNoZWNraW5nIGZvciBpdCBoZXJlIGFueXdheSBiZWNhdXNlIGlmIGBwcm9wZXJ0aWVzOiB7fWBcbiAgICAvLyBpcyBwYXNzZWQsIGl0IHdpbGwgZ2VuZXJhdGUgaW52YWxpZCBHcmFwaFFMLiBlLmcuXG4gICAgLy8gVmFsaWQ6XG4gICAgLy8gcXVlcnkgVG9vbFF1ZXJ5IHtcbiAgICAvLyAgIGV4YW1wbGVRdWVyeVxuICAgIC8vIH1cbiAgICAvL1xuICAgIC8vIEludmFsaWQ6XG4gICAgLy8gcXVlcnkgVG9vbFF1ZXJ5IHtcbiAgICAvLyAgIGV4YW1wbGVRdWVyeSgpXG4gICAgLy8gfVxuICAgIGlmICghcHJvcGVydGllcyB8fCBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBbJycsICcnXTtcbiAgICB9XG4gICAgY29uc3QgeyBwcm9wZXJ0eVR5cGVzIH0gPSB0b29sRGVmaW5pdGlvbi5ncmFwaHFsUmVxdWVzdElucHV0RGVzY3JpcHRvcjtcbiAgICBjb25zdCBwcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmtleXMocHJvcGVydGllcyk7XG5cbiAgICBjb25zdCB0b3BMZXZlbFF1ZXJ5QXJncyA9IHByb3BlcnR5TmFtZXNcbiAgICAgIC5tYXAoKG5hbWUpID0+IGAkJHtuYW1lfTogJHtwcm9wZXJ0eVR5cGVzW25hbWVdfWApXG4gICAgICAuam9pbignLCAnKTtcblxuICAgIGNvbnN0IHF1ZXJ5QXJncyA9IHByb3BlcnR5TmFtZXNcbiAgICAgIC5tYXAoKG5hbWUpID0+IGAke25hbWV9OiAkJHtuYW1lfWApXG4gICAgICAuam9pbignLCAnKTtcblxuICAgIHJldHVybiBbYCgke3RvcExldmVsUXVlcnlBcmdzfSlgLCBgKCR7cXVlcnlBcmdzfSlgXTtcbiAgfTtcbn1cbiJdfQ==