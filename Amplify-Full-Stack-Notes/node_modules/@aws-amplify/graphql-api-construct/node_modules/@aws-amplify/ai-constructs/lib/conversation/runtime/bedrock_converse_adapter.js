"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BedrockConverseAdapter = void 0;
const client_bedrock_runtime_1 = require("@aws-sdk/client-bedrock-runtime");
const event_tools_provider_1 = require("./event-tools-provider");
const conversation_message_history_retriever_1 = require("./conversation_message_history_retriever");
/**
 * This class is responsible for interacting with Bedrock Converse API
 * in order to produce final response that can be sent back to caller.
 */
class BedrockConverseAdapter {
    /**
     * Creates Bedrock Converse Adapter.
     */
    constructor(event, additionalTools, bedrockClient = new client_bedrock_runtime_1.BedrockRuntimeClient({ region: event.modelConfiguration.region }), eventToolsProvider = new event_tools_provider_1.ConversationTurnEventToolsProvider(event), messageHistoryRetriever = new conversation_message_history_retriever_1.ConversationMessageHistoryRetriever(event)) {
        var _a, _b;
        this.event = event;
        this.bedrockClient = bedrockClient;
        this.messageHistoryRetriever = messageHistoryRetriever;
        this.executableToolByName = new Map();
        this.clientToolByName = new Map();
        this.askBedrock = async () => {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            const { modelId, systemPrompt, inferenceConfiguration } = this.event.modelConfiguration;
            const messages = await this.getEventMessagesAsBedrockMessages();
            let bedrockResponse;
            do {
                const toolConfig = this.createToolConfiguration();
                const converseCommandInput = {
                    modelId,
                    messages: [...messages],
                    system: [{ text: systemPrompt }],
                    inferenceConfig: inferenceConfiguration,
                    toolConfig,
                };
                bedrockResponse = await this.bedrockClient.send(new client_bedrock_runtime_1.ConverseCommand(converseCommandInput));
                if ((_a = bedrockResponse.output) === null || _a === void 0 ? void 0 : _a.message) {
                    messages.push((_b = bedrockResponse.output) === null || _b === void 0 ? void 0 : _b.message);
                }
                if (bedrockResponse.stopReason === 'tool_use') {
                    const responseContentBlocks = (_e = (_d = (_c = bedrockResponse.output) === null || _c === void 0 ? void 0 : _c.message) === null || _d === void 0 ? void 0 : _d.content) !== null && _e !== void 0 ? _e : [];
                    const toolUseBlocks = responseContentBlocks.filter((block) => 'toolUse' in block);
                    const clientToolUseBlocks = responseContentBlocks.filter((block) => {
                        var _a, _b;
                        return ((_a = block.toolUse) === null || _a === void 0 ? void 0 : _a.name) &&
                            this.clientToolByName.has((_b = block.toolUse) === null || _b === void 0 ? void 0 : _b.name);
                    });
                    if (clientToolUseBlocks.length > 0) {
                        // For now if any of client tools is used we ignore executable tools
                        // and propagate result back to client.
                        return clientToolUseBlocks;
                    }
                    for (const responseContentBlock of toolUseBlocks) {
                        const toolUseBlock = responseContentBlock;
                        const toolMessage = await this.executeTool(toolUseBlock);
                        messages.push(toolMessage);
                    }
                }
            } while (bedrockResponse.stopReason === 'tool_use');
            return (_h = (_g = (_f = bedrockResponse.output) === null || _f === void 0 ? void 0 : _f.message) === null || _g === void 0 ? void 0 : _g.content) !== null && _h !== void 0 ? _h : [];
        };
        /**
         * Maps event messages to Bedrock types.
         * 1. Makes a copy so that we don't mutate event.
         * 2. Decodes Base64 encoded images.
         */
        this.getEventMessagesAsBedrockMessages = async () => {
            var _a, _b;
            const messages = [];
            const eventMessages = await this.messageHistoryRetriever.getMessageHistory();
            for (const message of eventMessages) {
                const messageContent = [];
                for (const contentElement of message.content) {
                    if (typeof ((_b = (_a = contentElement.image) === null || _a === void 0 ? void 0 : _a.source) === null || _b === void 0 ? void 0 : _b.bytes) === 'string') {
                        messageContent.push({
                            image: {
                                format: contentElement.image.format,
                                source: {
                                    bytes: Buffer.from(contentElement.image.source.bytes, 'base64'),
                                },
                            },
                        });
                    }
                    else {
                        // Otherwise type conforms to Bedrock's type and it's safe to cast.
                        messageContent.push(contentElement);
                    }
                }
                messages.push({
                    role: message.role,
                    content: messageContent,
                });
            }
            return messages;
        };
        this.createToolConfiguration = () => {
            if (this.allTools.length === 0) {
                return undefined;
            }
            return {
                tools: this.allTools.map((t) => {
                    return {
                        toolSpec: {
                            name: t.name,
                            description: t.description,
                            inputSchema: t.inputSchema,
                        },
                    };
                }),
            };
        };
        this.executeTool = async (toolUseBlock) => {
            if (!toolUseBlock.toolUse.name) {
                throw Error('Bedrock tool use response is missing a tool name');
            }
            const tool = this.executableToolByName.get(toolUseBlock.toolUse.name);
            if (!tool) {
                throw Error(`Bedrock tool use response contains unknown tool '${toolUseBlock.toolUse.name}'`);
            }
            try {
                const toolResponse = await tool.execute(toolUseBlock.toolUse.input);
                return {
                    role: 'user',
                    content: [
                        {
                            toolResult: {
                                toolUseId: toolUseBlock.toolUse.toolUseId,
                                content: [toolResponse],
                                status: 'success',
                            },
                        },
                    ],
                };
            }
            catch (e) {
                if (e instanceof Error) {
                    return {
                        role: 'user',
                        content: [
                            {
                                toolResult: {
                                    toolUseId: toolUseBlock.toolUse.toolUseId,
                                    content: [{ text: e.toString() }],
                                    status: 'error',
                                },
                            },
                        ],
                    };
                }
                return {
                    role: 'user',
                    content: [
                        {
                            toolResult: {
                                toolUseId: toolUseBlock.toolUse.toolUseId,
                                content: [{ text: 'unknown error occurred' }],
                                status: 'error',
                            },
                        },
                    ],
                };
            }
        };
        this.executableTools = [
            ...eventToolsProvider.getEventTools(),
            ...additionalTools,
        ];
        this.clientTools = (_b = (_a = this.event.toolsConfiguration) === null || _a === void 0 ? void 0 : _a.clientTools) !== null && _b !== void 0 ? _b : [];
        this.allTools = [...this.executableTools, ...this.clientTools];
        const duplicateTools = new Set();
        this.executableTools.forEach((t) => {
            if (this.executableToolByName.has(t.name)) {
                duplicateTools.add(t.name);
            }
            this.executableToolByName.set(t.name, t);
        });
        this.clientTools.forEach((t) => {
            if (this.executableToolByName.has(t.name)) {
                duplicateTools.add(t.name);
            }
            if (this.clientToolByName.has(t.name)) {
                duplicateTools.add(t.name);
            }
            this.clientToolByName.set(t.name, t);
        });
        if (duplicateTools.size > 0) {
            throw new Error(`Tools must have unique names. Duplicate tools: ${[
                ...duplicateTools,
            ].join(', ')}.`);
        }
    }
}
exports.BedrockConverseAdapter = BedrockConverseAdapter;
//# sourceMappingURL=data:application/json;base64,