import * as bedrock from '@aws-sdk/client-bedrock-runtime';
import * as smithy from '@smithy/types';
export type ToolInputSchema = bedrock.ToolInputSchema;
export type ToolResultContentBlock = bedrock.ToolResultContentBlock;
export type ToolExecutionInput = smithy.DocumentType;
export type ConversationMessage = {
    role: 'user' | 'assistant';
    content: Array<ConversationMessageContentBlock>;
};
export type ConversationMessageContentBlock = bedrock.ContentBlock | {
    image: Omit<bedrock.ImageBlock, 'source'> & {
        source: {
            bytes: string;
        };
    };
};
export type ToolDefinition = {
    name: string;
    description: string;
    inputSchema: ToolInputSchema;
};
export type ConversationTurnEvent = {
    conversationId: string;
    currentMessageId: string;
    responseMutation: {
        name: string;
        inputTypeName: string;
        selectionSet: string;
    };
    graphqlApiEndpoint: string;
    modelConfiguration: {
        modelId: string;
        systemPrompt: string;
        region?: string;
        inferenceConfiguration?: {
            maxTokens?: number;
            temperature?: number;
            topP?: number;
        };
    };
    request: {
        headers: {
            authorization: string;
        };
    };
    /**
     * @deprecated This field is going to be removed in upcoming releases.
     */
    messages?: Array<ConversationMessage>;
    messageHistoryQuery: {
        getQueryName: string;
        getQueryInputTypeName: string;
        listQueryName: string;
        listQueryInputTypeName: string;
        listQueryLimit?: number;
    };
    toolsConfiguration?: {
        dataTools?: Array<ToolDefinition & {
            graphqlRequestInputDescriptor: {
                queryName: string;
                selectionSet: string;
                propertyTypes: Record<string, string>;
            };
        }>;
        clientTools?: Array<ToolDefinition>;
    };
};
export type ExecutableTool = ToolDefinition & {
    execute: (input: ToolExecutionInput | undefined) => Promise<ToolResultContentBlock>;
};
//# sourceMappingURL=types.d.ts.map