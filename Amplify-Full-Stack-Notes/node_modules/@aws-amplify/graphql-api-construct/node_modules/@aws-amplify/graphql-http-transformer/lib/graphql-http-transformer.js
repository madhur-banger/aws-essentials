"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpTransformer = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const graphql_directives_1 = require("@aws-amplify/graphql-directives");
const aws_appsync_1 = require("aws-cdk-lib/aws-appsync");
const cdk = __importStar(require("aws-cdk-lib"));
const graphql_1 = require("graphql");
const graphql_transformer_common_1 = require("graphql-transformer-common");
const graphql_mapping_template_1 = require("graphql-mapping-template");
const SPLIT_URL_REGEX = /(http(s)?:\/\/|www\.)|(\/.*)/g;
const URL_REGEX = /(http(s)?:\/\/)|(\/.*)/g;
const VALID_PROTOCOLS_REGEX = /^http(s)?:\/\//;
const HTTP_DIRECTIVE_STACK = 'HttpStack';
const RESOLVER_VERSION = '2018-05-29';
class HttpTransformer extends graphql_transformer_core_1.TransformerPluginBase {
    constructor() {
        super('amplify-http-transformer', graphql_directives_1.HttpDirective.definition);
        this.directiveList = [];
        this.field = (parent, definition, directive, context) => {
            var _a, _b;
            const directiveWrapped = new graphql_transformer_core_1.DirectiveWrapper(directive);
            const args = directiveWrapped.getArguments({
                method: 'GET',
                path: '',
                origin: '',
                queryAndBodyArgs: definition.arguments,
                resolverTypeName: parent.name.value,
                resolverFieldName: definition.name.value,
                supportsBody: false,
            }, (0, graphql_transformer_core_1.generateGetArgumentsInput)(context.transformParameters));
            if (!VALID_PROTOCOLS_REGEX.test(args.url)) {
                throw new graphql_transformer_core_1.TransformerContractError(`@http directive at location ${(_a = directive === null || directive === void 0 ? void 0 : directive.loc) === null || _a === void 0 ? void 0 : _a.start} requires a url parameter that begins with http:// or https://.`);
            }
            args.origin = args.url.replace(URL_REGEX, '$1');
            args.path = (_b = args.url.split(SPLIT_URL_REGEX).slice(-2, -1)[0]) !== null && _b !== void 0 ? _b : '/';
            args.supportsBody = args.method === 'POST' || args.method === 'PUT' || args.method === 'PATCH';
            if (!args.headers) {
                args.headers = [];
            }
            else if (!Array.isArray(args.headers)) {
                args.headers = [args.headers];
            }
            const newFieldArgsArray = [];
            let params = args.path.match(/:\w+/g);
            if (params) {
                const paramsMap = params.map((p) => p.replace(':', ''));
                args.queryAndBodyArgs = args.queryAndBodyArgs.filter((arg) => {
                    return (0, graphql_transformer_common_1.isScalar)(arg.type) && !paramsMap.includes(arg.name.value);
                });
                args.path = args.path.replace(/:\w+/g, (str) => {
                    return `\$\{ctx.args.params.${str.replace(':', '')}\}`;
                });
                const urlParamInputObject = makeUrlParamInputObject(args, paramsMap);
                context.output.addInput(urlParamInputObject);
                newFieldArgsArray.push(makeHttpArgument('params', urlParamInputObject, true));
            }
            if (args.queryAndBodyArgs.length > 0) {
                const name = graphql_transformer_common_1.ModelResourceIDs.HttpQueryInputObjectName(parent.name.value, definition.name.value);
                const queryInputObject = makeHttpInputObject(name, args.queryAndBodyArgs, args.method !== 'GET');
                const makeNonNull = queryInputObject.fields.filter((a) => a.type.kind === graphql_1.Kind.NON_NULL_TYPE).length > 0;
                context.output.addInput(queryInputObject);
                newFieldArgsArray.push(makeHttpArgument('query', queryInputObject, makeNonNull));
                if (args.supportsBody) {
                    const name = graphql_transformer_common_1.ModelResourceIDs.HttpBodyInputObjectName(parent.name.value, definition.name.value);
                    const bodyInputObject = makeHttpInputObject(name, args.queryAndBodyArgs, true);
                    context.output.addInput(bodyInputObject);
                    newFieldArgsArray.push(makeHttpArgument('body', bodyInputObject, makeNonNull));
                }
            }
            if (newFieldArgsArray.length > 0) {
                const updatedField = {
                    ...definition,
                    arguments: newFieldArgsArray,
                };
                const mostRecentParent = context.output.getType(parent.name.value);
                let updatedFieldsInParent = mostRecentParent.fields.filter((f) => f.name.value !== definition.name.value);
                updatedFieldsInParent.push(updatedField);
                const updatedParentType = {
                    ...mostRecentParent,
                    fields: updatedFieldsInParent,
                };
                context.output.putType(updatedParentType);
            }
            this.directiveList.push(args);
        };
        this.generateResolvers = (context) => {
            if (this.directiveList.length === 0) {
                return;
            }
            const stack = context.stackManager.createStack(HTTP_DIRECTIVE_STACK);
            const env = context.synthParameters.amplifyEnvironmentName;
            const region = stack.region;
            stack.templateOptions.templateFormatVersion = '2010-09-09';
            stack.templateOptions.description = 'An auto-generated nested stack for the @http directive.';
            this.directiveList.forEach((directive) => {
                const dataSourceId = graphql_transformer_common_1.HttpResourceIDs.HttpDataSourceID(directive.origin);
                if (context.api.host.getDataSource(dataSourceId) === undefined) {
                    context.api.host.addHttpDataSource(dataSourceId, replaceEnvAndRegion(env, region, directive.origin), {}, stack);
                }
                createResolver(stack, dataSourceId, context, directive);
            });
        };
    }
}
exports.HttpTransformer = HttpTransformer;
function createResolver(stack, dataSourceId, context, config) {
    const env = context.synthParameters.amplifyEnvironmentName;
    const region = stack.region;
    const { method, supportsBody } = config;
    const reqCompoundExpr = [];
    const requestParams = { headers: (0, graphql_mapping_template_1.ref)('util.toJson($headers)') };
    const parsedHeaders = config.headers.map((header) => (0, graphql_mapping_template_1.qref)(`$headers.put("${header.key}", "${header.value}")`));
    if (method !== 'DELETE') {
        requestParams.query = (0, graphql_mapping_template_1.ref)('util.toJson($ctx.args.query)');
    }
    if (supportsBody) {
        const nonNullArgs = config.queryAndBodyArgs.filter((arg) => arg.type.kind === graphql_1.Kind.NON_NULL_TYPE);
        requestParams.body = (0, graphql_mapping_template_1.ref)('util.toJson($ctx.args.body)');
        if (nonNullArgs.length > 0) {
            reqCompoundExpr.push((0, graphql_mapping_template_1.compoundExpression)([
                (0, graphql_mapping_template_1.comment)('START: Manually checking that all non-null arguments are provided either in the query or the body'),
                (0, graphql_mapping_template_1.iff)((0, graphql_mapping_template_1.or)(nonNullArgs.map((arg) => {
                    const name = arg.name.value;
                    return (0, graphql_mapping_template_1.parens)((0, graphql_mapping_template_1.and)([(0, graphql_mapping_template_1.raw)(`!$ctx.args.body.${name}`), (0, graphql_mapping_template_1.raw)(`!$ctx.args.query.${name}`)]));
                })), (0, graphql_mapping_template_1.ref)('util.error("An argument you marked as Non-Null is not present in the query nor the body of your request."))')),
                (0, graphql_mapping_template_1.comment)('END: Manually checking that all non-null arguments are provided either in the query or the body'),
            ]));
        }
    }
    reqCompoundExpr.push((0, graphql_mapping_template_1.set)((0, graphql_mapping_template_1.ref)('headers'), (0, graphql_mapping_template_1.ref)('utils.http.copyHeaders($ctx.request.headers)')), (0, graphql_mapping_template_1.qref)('$headers.put("accept-encoding", "application/json")'));
    if (supportsBody) {
        reqCompoundExpr.push((0, graphql_mapping_template_1.qref)('$headers.put("Content-Type", "application/json")'));
    }
    reqCompoundExpr.push(...parsedHeaders, (0, graphql_mapping_template_1.obj)({
        version: (0, graphql_mapping_template_1.str)(RESOLVER_VERSION),
        method: (0, graphql_mapping_template_1.str)(method),
        resourcePath: (0, graphql_mapping_template_1.str)(config.path),
        params: (0, graphql_mapping_template_1.obj)(requestParams),
    }));
    const requestTemplate = [
        (0, graphql_mapping_template_1.qref)(`$ctx.stash.put("typeName", "${config.resolverTypeName}")`),
        (0, graphql_mapping_template_1.qref)(`$ctx.stash.put("fieldName", "${config.resolverFieldName}")`),
    ];
    const authModes = [context.authConfig.defaultAuthentication, ...(context.authConfig.additionalAuthenticationProviders || [])].map((mode) => mode === null || mode === void 0 ? void 0 : mode.authenticationType);
    if (authModes.includes(aws_appsync_1.AuthorizationType.IAM)) {
        const authRole = context.synthParameters.authenticatedUserRoleName;
        const unauthRole = context.synthParameters.unauthenticatedUserRoleName;
        const account = cdk.Stack.of(context.stackManager.scope).account;
        requestTemplate.push((0, graphql_mapping_template_1.qref)(`$ctx.stash.put("authRole", "arn:aws:sts::${account}:assumed-role/${authRole}/CognitoIdentityCredentials")`), (0, graphql_mapping_template_1.qref)(`$ctx.stash.put("unauthRole", "arn:aws:sts::${account}:assumed-role/${unauthRole}/CognitoIdentityCredentials")`));
    }
    requestTemplate.push((0, graphql_mapping_template_1.obj)({}));
    const functionId = `${dataSourceId}${config.resolverTypeName}${config.resolverFieldName}Function`;
    const functionRequestTemplateString = replaceEnvAndRegion(env, region, (0, graphql_mapping_template_1.printBlock)('Create request')((0, graphql_mapping_template_1.compoundExpression)(reqCompoundExpr)));
    const functionRequestMappingTemplate = cdk.Token.isUnresolved(functionRequestTemplateString)
        ? graphql_transformer_core_1.MappingTemplate.inlineTemplateFromString(functionRequestTemplateString)
        : graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(functionRequestTemplateString, `${config.resolverTypeName}.${config.resolverFieldName}.DataResolver.req.vtl`);
    const appsyncFunction = context.api.host.addAppSyncVtlRuntimeFunction(functionId, functionRequestMappingTemplate, graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString((0, graphql_mapping_template_1.printBlock)('Process response')((0, graphql_mapping_template_1.ifElse)(supportsBody ? (0, graphql_mapping_template_1.raw)('$ctx.result.statusCode == 200 || $ctx.result.statusCode == 201') : (0, graphql_mapping_template_1.raw)('$ctx.result.statusCode == 200'), (0, graphql_mapping_template_1.ifElse)((0, graphql_mapping_template_1.ref)('ctx.result.headers.get("Content-Type").toLowerCase().contains("xml")'), (0, graphql_mapping_template_1.ref)('utils.xml.toJsonString($ctx.result.body)'), (0, graphql_mapping_template_1.ref)('ctx.result.body')), (0, graphql_mapping_template_1.ref)('util.qr($util.appendError($ctx.result.body, $ctx.result.statusCode))'))), `${config.resolverTypeName}.${config.resolverFieldName}.DataResolver.res.vtl`), dataSourceId, stack);
    return context.api.host.addVtlRuntimeResolver(config.resolverTypeName, config.resolverFieldName, graphql_transformer_core_1.MappingTemplate.inlineTemplateFromString((0, graphql_mapping_template_1.printBlock)('Stash resolver specific context.')((0, graphql_mapping_template_1.compoundExpression)(requestTemplate))), graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString('$util.toJson($ctx.prev.result)', `${config.resolverTypeName}.${config.resolverFieldName}.res.vtl`), undefined, undefined, [appsyncFunction.functionId], stack);
}
function replaceEnvAndRegion(env, region, value) {
    const vars = {};
    if (value.includes('${env}')) {
        vars.env = env;
    }
    if (value.includes('${aws_region}')) {
        vars.aws_region = region;
    }
    if (Object.keys(vars).length === 0) {
        return value;
    }
    return cdk.Fn.sub(value, vars);
}
function makeUrlParamInputObject(directive, urlParams) {
    return {
        kind: 'InputObjectTypeDefinition',
        name: {
            kind: 'Name',
            value: graphql_transformer_common_1.ModelResourceIDs.UrlParamsInputObjectName(directive.resolverTypeName, directive.resolverFieldName),
        },
        fields: urlParams.map((param) => {
            return (0, graphql_transformer_common_1.makeInputValueDefinition)(param, (0, graphql_transformer_common_1.makeNonNullType)((0, graphql_transformer_common_1.makeNamedType)('String')));
        }),
        directives: [],
    };
}
function makeHttpArgument(name, inputType, makeNonNull) {
    const type = makeNonNull ? (0, graphql_transformer_common_1.makeNonNullType)((0, graphql_transformer_common_1.makeNamedType)(inputType.name.value)) : (0, graphql_transformer_common_1.makeNamedType)(inputType.name.value);
    return (0, graphql_transformer_common_1.makeInputValueDefinition)(name, type);
}
function makeHttpInputObject(name, argArray, makeNonNull) {
    const fields = makeNonNull
        ? argArray.map((arg) => {
            return {
                ...arg,
                type: (0, graphql_transformer_common_1.unwrapNonNull)(arg.type),
            };
        })
        : argArray;
    return {
        kind: 'InputObjectTypeDefinition',
        name: {
            kind: 'Name',
            value: name,
        },
        fields,
        directives: [],
    };
}
//# sourceMappingURL=graphql-http-transformer.js.map