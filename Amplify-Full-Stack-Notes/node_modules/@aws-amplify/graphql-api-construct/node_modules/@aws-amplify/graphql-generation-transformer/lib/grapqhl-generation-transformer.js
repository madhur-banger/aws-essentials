"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenerationTransformer = void 0;
const graphql_directives_1 = require("@aws-amplify/graphql-directives");
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const graphql_transformer_common_1 = require("graphql-transformer-common");
const tools_1 = require("./utils/tools");
const invoke_bedrock_1 = require("./resolvers/invoke-bedrock");
const iam = __importStar(require("aws-cdk-lib/aws-iam"));
const validation_1 = require("./validation");
const graphql_transformer_common_2 = require("graphql-transformer-common");
class GenerationTransformer extends graphql_transformer_core_1.TransformerPluginBase {
    constructor() {
        super('amplify-generation-transformer', graphql_directives_1.GenerationDirective.definition);
        this.directives = [];
        this.field = (parent, definition, directive, context) => {
            const directiveWrapped = new graphql_transformer_core_1.DirectiveWrapper(directive);
            const config = directiveWrapped.getArguments({
                parent,
                directive,
                field: definition,
                inferenceConfiguration: {},
            }, (0, graphql_transformer_core_1.generateGetArgumentsInput)(context.transformParameters));
            (0, validation_1.validate)(config, context);
            this.directives.push(config);
        };
        this.generateResolvers = (ctx) => {
            if (this.directives.length === 0)
                return;
            this.directives.forEach((directive) => {
                const { parent, field } = directive;
                const fieldName = field.name.value;
                const parentName = parent.name.value;
                const directiveWithToolConfig = {
                    ...directive,
                    toolConfig: (0, tools_1.createResponseTypeTool)(field, ctx),
                };
                const stackName = this.bedrockDataSourceName(fieldName) + 'Stack';
                const stack = this.createStack(ctx, stackName);
                const resolverResourceId = graphql_transformer_common_1.ResolverResourceIDs.ResolverResourceID(parentName, fieldName);
                const httpDataSourceId = graphql_transformer_common_1.HttpResourceIDs.HttpDataSourceID(this.bedrockDataSourceName(fieldName));
                const dataSource = this.createBedrockDataSource(ctx, directive, stack.region, stackName, httpDataSourceId);
                const invokeBedrockFunction = (0, invoke_bedrock_1.createInvokeBedrockResolverFunction)(directiveWithToolConfig);
                this.createPipelineResolver(ctx, parentName, fieldName, resolverResourceId, invokeBedrockFunction, dataSource);
            });
        };
    }
    createStack(ctx, stackName) {
        const stack = ctx.stackManager.createStack(stackName);
        stack.templateOptions.templateFormatVersion = '2010-09-09';
        stack.templateOptions.description = 'An auto-generated nested stack for the @generation directive.';
        return stack;
    }
    createPipelineResolver(ctx, parentName, fieldName, resolverResourceId, invokeBedrockFunction, dataSource) {
        const conversationPipelineResolver = new graphql_transformer_core_1.TransformerResolver(parentName, fieldName, resolverResourceId, { codeMappingTemplate: invokeBedrockFunction }, ['auth'], [], dataSource, graphql_transformer_core_1.APPSYNC_JS_RUNTIME);
        ctx.resolvers.addResolver(parentName, fieldName, conversationPipelineResolver);
    }
    createBedrockDataSource(ctx, directive, region, stackName, httpDataSourceId) {
        const { field: { name: { value: fieldName }, }, aiModel, } = directive;
        const bedrockUrl = `https://bedrock-runtime.${region}.amazonaws.com`;
        const dataSourceScope = ctx.stackManager.getScopeFor(httpDataSourceId, stackName);
        const dataSource = ctx.api.host.addHttpDataSource(httpDataSourceId, bedrockUrl, {
            authorizationConfig: {
                signingRegion: region,
                signingServiceName: 'bedrock',
            },
        }, dataSourceScope);
        const roleLogicalId = this.bedrockDataSourceName(fieldName) + 'IAMRole';
        const roleName = ctx.resourceHelper.generateIAMRoleName(roleLogicalId);
        const role = this.createBedrockDataSourceRole(dataSourceScope, roleLogicalId, roleName, region, aiModel);
        dataSource.ds.serviceRoleArn = role.roleArn;
        return dataSource;
    }
    createBedrockDataSourceRole(dataSourceScope, roleLogicalId, roleName, region, bedrockModelId) {
        return new iam.Role(dataSourceScope, roleLogicalId, {
            roleName,
            assumedBy: new iam.ServicePrincipal('appsync.amazonaws.com'),
            inlinePolicies: {
                BedrockRuntimeAccess: new iam.PolicyDocument({
                    statements: [
                        new iam.PolicyStatement({
                            effect: iam.Effect.ALLOW,
                            actions: ['bedrock:InvokeModel'],
                            resources: [`arn:aws:bedrock:${region}::foundation-model/${bedrockModelId}`],
                        }),
                    ],
                }),
            },
        });
    }
    bedrockDataSourceName(fieldName) {
        return `GenerationBedrockDataSource${(0, graphql_transformer_common_2.toUpper)(fieldName)}`;
    }
}
exports.GenerationTransformer = GenerationTransformer;
//# sourceMappingURL=grapqhl-generation-transformer.js.map