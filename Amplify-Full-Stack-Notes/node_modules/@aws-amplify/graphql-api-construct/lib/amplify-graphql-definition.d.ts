import { IAmplifyGraphqlDefinition } from './types';
import { ModelDataSourceStrategy } from './model-datasource-strategy-types';
export declare const DEFAULT_MODEL_DATA_SOURCE_STRATEGY: ModelDataSourceStrategy;
/**
 * Class exposing utilities to produce IAmplifyGraphqlDefinition objects given various inputs.
 */
export declare class AmplifyGraphqlDefinition {
    /**
     * Produce a schema definition from a string input.
     * @param schema the graphql input as a string
     * @param dataSourceStrategy the provisioning definition for datasources that resolve `@model`s and custom SQL statements in this schema.
     * The DynamoDB from CloudFormation will be used by default.
     * @returns a fully formed amplify graphql definition
     */
    static fromString(schema: string, dataSourceStrategy?: ModelDataSourceStrategy): IAmplifyGraphqlDefinition;
    /**
     * Convert one or more appsync SchemaFile objects into an Amplify Graphql Schema, binding them to a DynamoDB data source.
     * @param filePaths one or more paths to the graphql files to process
     * @returns a fully formed amplify graphql definition, whose models will be resolved by DynamoDB tables created during deployment.
     */
    static fromFiles(...filePaths: string[]): IAmplifyGraphqlDefinition;
    /**
     * Convert one or more appsync SchemaFile objects into an Amplify Graphql Schema
     * @param filePaths one or more paths to the graphql files to process
     * @param dataSourceStrategy the provisioning definition for datasources that resolve `@model`s in this schema. The DynamoDB from
     * CloudFormation will be used by default.
     * @returns a fully formed amplify graphql definition
     */
    static fromFilesAndStrategy(filePaths: string | string[], dataSourceStrategy?: ModelDataSourceStrategy): IAmplifyGraphqlDefinition;
    /**
     * Combines multiple IAmplifyGraphqlDefinitions into a single definition.
     * @param definitions the definitions to combine
     */
    static combine(definitions: IAmplifyGraphqlDefinition[]): IAmplifyGraphqlDefinition;
}
