"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SQLLambdaModelDataSourceStrategyFactory = exports.isSqlModelDataSourceSsmDbConnectionStringConfig = exports.isSqlModelDataSourceSecretsManagerDbConnectionConfig = exports.isSqlModelDataSourceSsmDbConnectionConfig = exports.isSqlModelDataSourceDbConnectionConfig = exports.isSQLLambdaModelDataSourceStrategy = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs = require("fs");
const path = require("path");
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
/**
 * Type predicate that returns true if the object is a SQLLambdaModelDataSourceStrategy.
 * @param obj the object to inspect
 * @returns true if the object is shaped like a SQLLambdaModelDataSourceStrategy
 */
const isSQLLambdaModelDataSourceStrategy = (obj) => {
    return ((typeof obj === 'object' || typeof obj === 'function') &&
        typeof obj.name === 'string' &&
        typeof obj.dbType === 'string' &&
        (0, graphql_transformer_core_1.isSqlDbType)(obj.dbType) &&
        (0, exports.isSqlModelDataSourceDbConnectionConfig)(obj.dbConnectionConfig));
};
exports.isSQLLambdaModelDataSourceStrategy = isSQLLambdaModelDataSourceStrategy;
/**
 * Type predicate that returns true if the object is a SqlModelDataSourceDbConnectionConfig.
 * @param obj the object to inspect
 * @returns true if the object is shaped like a SqlModelDataSourceDbConnectionConfig
 */
const isSqlModelDataSourceDbConnectionConfig = (obj) => {
    return ((0, exports.isSqlModelDataSourceSsmDbConnectionConfig)(obj) ||
        (0, exports.isSqlModelDataSourceSecretsManagerDbConnectionConfig)(obj) ||
        (0, exports.isSqlModelDataSourceSsmDbConnectionStringConfig)(obj));
};
exports.isSqlModelDataSourceDbConnectionConfig = isSqlModelDataSourceDbConnectionConfig;
/**
 * Type predicate that returns true if the object is a SqlModelDataSourceSsmDbConnectionConfig.
 * @param obj the object to inspect
 * @returns true if the object is shaped like a SqlModelDataSourceSsmDbConnectionConfig
 */
const isSqlModelDataSourceSsmDbConnectionConfig = (obj) => {
    return ((typeof obj === 'object' || typeof obj === 'function') &&
        typeof obj.hostnameSsmPath === 'string' &&
        typeof obj.portSsmPath === 'string' &&
        typeof obj.usernameSsmPath === 'string' &&
        typeof obj.passwordSsmPath === 'string' &&
        typeof obj.databaseNameSsmPath === 'string');
};
exports.isSqlModelDataSourceSsmDbConnectionConfig = isSqlModelDataSourceSsmDbConnectionConfig;
/**
 * Type predicate that returns true if the object is a SqlModelDataSourceSecretsManagerDbConnectionConfig.
 * @param obj the object to inspect
 * @returns true if the object is shaped like a SqlModelDataSourceSecretsManagerDbConnectionConfig
 */
const isSqlModelDataSourceSecretsManagerDbConnectionConfig = (obj) => {
    return ((typeof obj === 'object' || typeof obj === 'function') &&
        typeof obj.secretArn === 'string' &&
        typeof obj.port === 'number' &&
        typeof obj.databaseName === 'string' &&
        typeof obj.hostname == 'string');
};
exports.isSqlModelDataSourceSecretsManagerDbConnectionConfig = isSqlModelDataSourceSecretsManagerDbConnectionConfig;
/**
 * Type predicate that returns true if the object is a SqlModelDataSourceSsmDbConnectionStringConfig.
 * @param obj the object to inspect
 * @returns true if the object is shaped like a SqlModelDataSourceSsmDbConnectionStringConfig
 */
const isSqlModelDataSourceSsmDbConnectionStringConfig = (obj) => {
    return ((typeof obj === 'object' || typeof obj === 'function') &&
        (typeof obj.connectionUriSsmPath === 'string' || Array.isArray(obj.connectionUriSsmPath)));
};
exports.isSqlModelDataSourceSsmDbConnectionStringConfig = isSqlModelDataSourceSsmDbConnectionStringConfig;
/**
 * Class exposing utilities to produce SQLLambdaModelDataSourceStrategy objects given various inputs.
 */
class SQLLambdaModelDataSourceStrategyFactory {
    /**
     * Creates a SQLLambdaModelDataSourceStrategy where the binding's `customSqlStatements` are populated from `sqlFiles`. The key
     * of the `customSqlStatements` record is the file's base name (that is, the name of the file minus the directory and extension).
     * @param sqlFiles the list of files to load SQL statements from.
     * @param options the remaining SQLLambdaModelDataSourceStrategy options.
     */
    static fromCustomSqlFiles(sqlFiles, options) {
        const customSqlStatements = sqlFiles.reduce((acc, filePath) => {
            const basename = path.parse(filePath).name;
            acc[basename] = fs.readFileSync(filePath, 'utf8');
            return acc;
        }, {});
        return {
            customSqlStatements,
            ...options,
        };
    }
}
exports.SQLLambdaModelDataSourceStrategyFactory = SQLLambdaModelDataSourceStrategyFactory;
_a = JSII_RTTI_SYMBOL_1;
SQLLambdaModelDataSourceStrategyFactory[_a] = { fqn: "@aws-amplify/graphql-api-construct.SQLLambdaModelDataSourceStrategyFactory", version: "1.15.0" };
//# sourceMappingURL=data:application/json;base64,