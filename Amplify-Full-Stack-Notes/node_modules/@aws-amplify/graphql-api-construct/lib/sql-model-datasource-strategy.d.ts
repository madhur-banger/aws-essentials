import { SQLLambdaModelDataSourceStrategy, SqlModelDataSourceDbConnectionConfig, SqlModelDataSourceSsmDbConnectionConfig, SqlModelDataSourceSecretsManagerDbConnectionConfig, SqlModelDataSourceSsmDbConnectionStringConfig } from './model-datasource-strategy-types';
/**
 * Type predicate that returns true if the object is a SQLLambdaModelDataSourceStrategy.
 * @param obj the object to inspect
 * @returns true if the object is shaped like a SQLLambdaModelDataSourceStrategy
 */
export declare const isSQLLambdaModelDataSourceStrategy: (obj: any) => obj is SQLLambdaModelDataSourceStrategy;
/**
 * Type predicate that returns true if the object is a SqlModelDataSourceDbConnectionConfig.
 * @param obj the object to inspect
 * @returns true if the object is shaped like a SqlModelDataSourceDbConnectionConfig
 */
export declare const isSqlModelDataSourceDbConnectionConfig: (obj: any) => obj is SqlModelDataSourceDbConnectionConfig;
/**
 * Type predicate that returns true if the object is a SqlModelDataSourceSsmDbConnectionConfig.
 * @param obj the object to inspect
 * @returns true if the object is shaped like a SqlModelDataSourceSsmDbConnectionConfig
 */
export declare const isSqlModelDataSourceSsmDbConnectionConfig: (obj: any) => obj is SqlModelDataSourceSsmDbConnectionConfig;
/**
 * Type predicate that returns true if the object is a SqlModelDataSourceSecretsManagerDbConnectionConfig.
 * @param obj the object to inspect
 * @returns true if the object is shaped like a SqlModelDataSourceSecretsManagerDbConnectionConfig
 */
export declare const isSqlModelDataSourceSecretsManagerDbConnectionConfig: (obj: any) => obj is SqlModelDataSourceSecretsManagerDbConnectionConfig;
/**
 * Type predicate that returns true if the object is a SqlModelDataSourceSsmDbConnectionStringConfig.
 * @param obj the object to inspect
 * @returns true if the object is shaped like a SqlModelDataSourceSsmDbConnectionStringConfig
 */
export declare const isSqlModelDataSourceSsmDbConnectionStringConfig: (obj: any) => obj is SqlModelDataSourceSsmDbConnectionStringConfig;
/**
 * Class exposing utilities to produce SQLLambdaModelDataSourceStrategy objects given various inputs.
 */
export declare class SQLLambdaModelDataSourceStrategyFactory {
    /**
     * Creates a SQLLambdaModelDataSourceStrategy where the binding's `customSqlStatements` are populated from `sqlFiles`. The key
     * of the `customSqlStatements` record is the file's base name (that is, the name of the file minus the directory and extension).
     * @param sqlFiles the list of files to load SQL statements from.
     * @param options the remaining SQLLambdaModelDataSourceStrategy options.
     */
    static fromCustomSqlFiles(sqlFiles: string[], options: Exclude<SQLLambdaModelDataSourceStrategy, 'customSqlStatements'>): SQLLambdaModelDataSourceStrategy;
}
