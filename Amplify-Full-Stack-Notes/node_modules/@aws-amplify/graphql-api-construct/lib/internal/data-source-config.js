"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateDataSourceStrategy = exports.schemaByMergingDefinitions = exports.getDataSourceStrategiesProvider = exports.constructCustomSqlDataSourceStrategies = void 0;
const graphql_1 = require("graphql");
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const graphql_transformer_interfaces_1 = require("@aws-amplify/graphql-transformer-interfaces");
const aws_cdk_lib_1 = require("aws-cdk-lib");
/**
 * Creates an interface flavor of customSqlDataSourceStrategies from a factory method's schema and data source. Internally, this function
 * scans the fields of `Query` and `Mutation` looking for fields annotated with the `@sql` directive and designates the specified
 * dataSourceStrategy to fulfill those custom queries.
 *
 * Note that we do not scan for `Subscription` fields: `@sql` directives are not allowed on those, and it wouldn't make sense to do so
 * anyway, since subscriptions are processed from an incoming Mutation, not as the result of a direct datasource access.
 */
const constructCustomSqlDataSourceStrategies = (schema, dataSourceStrategy) => {
    if (!(0, graphql_transformer_core_1.isSqlStrategy)(dataSourceStrategy)) {
        return [];
    }
    const parsedSchema = (0, graphql_1.parse)(schema);
    const queryNode = parsedSchema.definitions.find(graphql_transformer_core_1.isQueryNode);
    const mutationNode = parsedSchema.definitions.find(graphql_transformer_core_1.isMutationNode);
    if (!queryNode && !mutationNode) {
        return [];
    }
    const customSqlDataSourceStrategies = [];
    if (queryNode) {
        const fields = (0, graphql_transformer_core_1.fieldsWithSqlDirective)(queryNode);
        for (const field of fields) {
            customSqlDataSourceStrategies.push({
                typeName: 'Query',
                fieldName: field.name.value,
                strategy: dataSourceStrategy,
            });
        }
    }
    if (mutationNode) {
        const fields = (0, graphql_transformer_core_1.fieldsWithSqlDirective)(mutationNode);
        for (const field of fields) {
            customSqlDataSourceStrategies.push({
                typeName: 'Mutation',
                fieldName: field.name.value,
                strategy: dataSourceStrategy,
            });
        }
    }
    return customSqlDataSourceStrategies;
};
exports.constructCustomSqlDataSourceStrategies = constructCustomSqlDataSourceStrategies;
/**
 * Extracts the data source provider from the definition. This jumps through some hoops to avoid changing the public interface. If we decide
 * to change the public interface to simplify the structure, then this process gets a lot simpler.
 */
const getDataSourceStrategiesProvider = (definition) => {
    const provider = {
        // We can directly use the interface strategies, even though the SQL strategies have the customSqlStatements field that is unused by the
        // transformer flavor of this type
        dataSourceStrategies: definition.dataSourceStrategies,
        sqlDirectiveDataSourceStrategies: [],
    };
    // We'll collect all the custom SQL statements from the definition into a single map, and use that to make our
    // SqlDirectiveDataSourceStrategies
    const customSqlStatements = {};
    const constructSqlStrategies = definition.customSqlDataSourceStrategies ?? [];
    // Note that we're relying on the `customSqlStatements` object reference to stay the same throughout this loop. Don't reassign it, or the
    // collected sqlDirectiveStrategies will break
    constructSqlStrategies.forEach((sqlStrategy) => {
        if (sqlStrategy.strategy.customSqlStatements) {
            Object.assign(customSqlStatements, sqlStrategy.strategy.customSqlStatements);
        }
        provider.sqlDirectiveDataSourceStrategies.push({
            typeName: sqlStrategy.typeName,
            fieldName: sqlStrategy.fieldName,
            strategy: sqlStrategy.strategy,
            customSqlStatements,
        });
    });
    return provider;
};
exports.getDataSourceStrategiesProvider = getDataSourceStrategiesProvider;
/**
 * Creates a new schema by merging the individual schemas contained in the definitions, combining fields of the Query and Mutation types in
 * individual definitions into a single combined definition. Adding directives to `Query` and `Mutation` types participating in a
 * combination is not supported (the behavior is undefined whether those directives are migrated).
 */
const schemaByMergingDefinitions = (definitions) => {
    const schema = definitions.map((def) => def.schema).join('\n');
    const parsedSchema = (0, graphql_1.parse)(schema);
    // We store the Query & Mutation definitions separately. Since the interfaces are readonly, we'll have to re-compose the types after we've
    // collected all the fields
    const queryAndMutationDefinitions = {};
    // Throws if the field has already been encountered
    const validateField = (typeName, fieldName) => {
        const fields = queryAndMutationDefinitions[typeName]?.fields;
        if (!fields) {
            return;
        }
        if (fields.find((field) => field.name.value === fieldName)) {
            throw new Error(`The custom ${typeName} field '${fieldName}' was found in multiple definitions, but a field name cannot be shared between definitions.`);
        }
    };
    // Transform the schema by reducing Mutation & Query types:
    // - Collect Mutation and Query definitions
    // - Alter the parsed schema by filtering out Mutation & Query types
    // - Add the combined Mutation & Query definitions to the filtered schema
    parsedSchema.definitions.filter(graphql_transformer_core_1.isBuiltInGraphqlNode).forEach((def) => {
        const typeName = def.name.value;
        if (!queryAndMutationDefinitions[typeName]) {
            queryAndMutationDefinitions[typeName] = {
                node: def,
                // `ObjectTypeDefinitionNode.fields` is a ReadonlyArray; so we have to create a new mutable array to collect all the fields
                fields: [...(def.fields ?? [])],
            };
            return;
        }
        (def.fields ?? []).forEach((field) => {
            validateField(typeName, field.name.value);
        });
        queryAndMutationDefinitions[typeName].fields = [...queryAndMutationDefinitions[typeName].fields, ...(def.fields ?? [])];
    });
    // Gather the collected Query & Mutation fields into <=2 new definitions
    const combinedDefinitions = Object.values(queryAndMutationDefinitions)
        .sort((a, b) => a.node.name.value.localeCompare(b.node.name.value))
        .reduce((acc, cur) => {
        const definitionNode = {
            ...cur.node,
            fields: cur.fields,
        };
        return [...acc, definitionNode];
    }, []);
    // Filter out the old Query & Mutation definitions
    const filteredDefinitions = parsedSchema.definitions.filter((def) => !(0, graphql_transformer_core_1.isBuiltInGraphqlNode)(def));
    // Compose the new schema by appending the collected definitions to the filtered definitions. This means that every query will be
    // rewritten such that the Mutation and Query types appear at the end of the schema.
    const newSchema = {
        ...parsedSchema,
        definitions: [...filteredDefinitions, ...combinedDefinitions],
    };
    const combinedSchemaString = (0, graphql_1.print)(newSchema);
    return combinedSchemaString;
};
exports.schemaByMergingDefinitions = schemaByMergingDefinitions;
/*
 * Validates the user input for the dataSourceStrategy. This is a no-op for DynamoDB strategies for now.
 * @param strategy user provided model data source strategy
 * @returns validates and throws an error if the strategy is invalid
 */
const validateDataSourceStrategy = (strategy) => {
    if (!(0, graphql_transformer_core_1.isSqlStrategy)(strategy)) {
        return;
    }
    const dbConnectionConfig = strategy.dbConnectionConfig;
    if ((0, graphql_transformer_interfaces_1.isSqlModelDataSourceSsmDbConnectionConfig)(dbConnectionConfig) ||
        (0, graphql_transformer_interfaces_1.isSqlModelDataSourceSsmDbConnectionStringConfig)(dbConnectionConfig)) {
        const ssmPaths = Object.values(dbConnectionConfig).filter((value) => typeof value === 'string');
        if ((0, graphql_transformer_interfaces_1.isSqlModelDataSourceSsmDbConnectionStringConfig)(dbConnectionConfig)) {
            const hasMultipleSSMPaths = Array.isArray(dbConnectionConfig?.connectionUriSsmPath);
            if (hasMultipleSSMPaths) {
                if (dbConnectionConfig?.connectionUriSsmPath?.length < 1) {
                    throw new Error(`Invalid data source strategy "${strategy.name}". connectionUriSsmPath must be a string or non-empty array.`);
                }
                ssmPaths.push(...dbConnectionConfig.connectionUriSsmPath);
            }
        }
        const invalidSSMPaths = ssmPaths.filter((value) => !isValidSSMPath(value));
        if (invalidSSMPaths.length > 0) {
            throw new Error(`Invalid data source strategy "${strategy.name}". Following SSM paths must start with '/' in dbConnectionConfig: ${invalidSSMPaths.join(', ')}.`);
        }
    }
    else if ((0, graphql_transformer_interfaces_1.isSqlModelDataSourceSecretsManagerDbConnectionConfig)(dbConnectionConfig)) {
        if (!aws_cdk_lib_1.Token.isUnresolved(dbConnectionConfig.secretArn)) {
            try {
                const arnComponents = aws_cdk_lib_1.Arn.split(dbConnectionConfig.secretArn, aws_cdk_lib_1.ArnFormat.COLON_RESOURCE_NAME);
                if (arnComponents.service !== 'secretsmanager' || arnComponents.resource !== 'secret') {
                    // error message does not matter because it inside try/catch
                    throw new Error();
                }
            }
            catch {
                throw new Error(`Invalid data source strategy "${strategy.name}". The value of secretArn is not a valid Secrets Manager ARN.`);
            }
        }
        if (dbConnectionConfig.keyArn && !aws_cdk_lib_1.Token.isUnresolved(dbConnectionConfig.keyArn)) {
            try {
                const arnComponents = aws_cdk_lib_1.Arn.split(dbConnectionConfig.keyArn, aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME);
                if (arnComponents.service !== 'kms' || arnComponents.resource !== 'key') {
                    // error message does not matter because it inside try/catch
                    throw new Error();
                }
            }
            catch {
                throw new Error(`Invalid data source strategy "${strategy.name}". The value of keyArn is not a valid KMS ARN.`);
            }
        }
    }
    else {
        throw new Error(`Invalid data source strategy "${strategy.name}". dbConnectionConfig does not include SSM paths or Secret ARN.`);
    }
};
exports.validateDataSourceStrategy = validateDataSourceStrategy;
const isValidSSMPath = (path) => {
    return path.startsWith('/');
};
//# sourceMappingURL=data:application/json;base64,