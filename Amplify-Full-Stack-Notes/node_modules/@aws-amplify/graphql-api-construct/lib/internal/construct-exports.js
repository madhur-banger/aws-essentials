"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGeneratedFunctionSlots = exports.getGeneratedResources = void 0;
const aws_appsync_1 = require("aws-cdk-lib/aws-appsync");
const aws_dynamodb_1 = require("aws-cdk-lib/aws-dynamodb");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const amplify_dynamodb_table_wrapper_1 = require("../amplify-dynamodb-table-wrapper");
const construct_tree_1 = require("./construct-tree");
/**
 * Check if a resource is implementing table interface
 * The required properties need to be present in the input
 * https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_dynamodb.ITable.html#properties
 * @param table table resource
 * @returns whether the resource is a ITable or not
 */
const isITable = (table) => {
    return 'env' in table && 'node' in table && 'stack' in table && 'tableArn' in table && 'tableName' in table;
};
/**
 * Everything below here is intended to help us gather the
 * output values and render out the L1 resources for access.
 *
 * This is done by recursing along the construct tree, and classifying the generated resources.
 *
 * @param scope root to search for generated resource against
 * @returns a mapping of L1 and L2 constructs generated by the Graphql Transformer.
 */
const getGeneratedResources = (scope) => {
    let cfnGraphqlApi;
    let cfnGraphqlSchema;
    let cfnApiKey;
    const cfnResolvers = {};
    const cfnFunctionConfigurations = {};
    const cfnDataSources = {};
    const tables = {};
    const cfnTables = {};
    const amplifyDynamoDbTables = {};
    const roles = {};
    const cfnRoles = {};
    const functions = {};
    const cfnFunctions = {};
    const additionalCfnResources = {};
    const classifyConstruct = (currentScope) => {
        if (currentScope instanceof aws_appsync_1.CfnGraphQLApi) {
            cfnGraphqlApi = currentScope;
            return;
        }
        if (currentScope instanceof aws_appsync_1.CfnGraphQLSchema) {
            cfnGraphqlSchema = currentScope;
            return;
        }
        if (currentScope instanceof aws_appsync_1.CfnApiKey) {
            cfnApiKey = currentScope;
            return;
        }
        // Retrieve reference name for indexed resources, and bail if none is found.
        const resourceName = (0, graphql_transformer_core_1.getResourceName)(currentScope);
        if (!resourceName)
            return;
        if (currentScope instanceof aws_appsync_1.CfnDataSource) {
            cfnDataSources[resourceName] = currentScope;
            return;
        }
        if (currentScope instanceof aws_appsync_1.CfnResolver) {
            cfnResolvers[resourceName] = currentScope;
            return;
        }
        if (currentScope instanceof aws_appsync_1.CfnFunctionConfiguration) {
            cfnFunctionConfigurations[resourceName] = currentScope;
            return;
        }
        if (currentScope instanceof aws_dynamodb_1.Table || isITable(currentScope)) {
            tables[resourceName] = currentScope;
            return;
        }
        if (currentScope instanceof aws_dynamodb_1.CfnTable) {
            cfnTables[resourceName] = currentScope;
            return;
        }
        if (amplify_dynamodb_table_wrapper_1.AmplifyDynamoDbTableWrapper.isAmplifyDynamoDbTableResource(currentScope)) {
            amplifyDynamoDbTables[resourceName] = new amplify_dynamodb_table_wrapper_1.AmplifyDynamoDbTableWrapper(currentScope);
            return;
        }
        if (currentScope instanceof aws_iam_1.Role) {
            roles[resourceName] = currentScope;
            return;
        }
        if (currentScope instanceof aws_iam_1.CfnRole) {
            cfnRoles[resourceName] = currentScope;
            return;
        }
        if (currentScope instanceof aws_lambda_1.Function) {
            functions[resourceName] = currentScope;
            return;
        }
        if (currentScope instanceof aws_lambda_1.CfnFunction) {
            cfnFunctions[resourceName] = currentScope;
            return;
        }
        if (currentScope instanceof aws_cdk_lib_1.CfnResource) {
            additionalCfnResources[resourceName] = currentScope;
            return;
        }
    };
    scope.node.children.forEach((child) => (0, construct_tree_1.walkAndProcessNodes)(child, classifyConstruct));
    if (!cfnGraphqlApi) {
        throw new Error('Expected to find AWS::AppSync::GraphQLApi in the generated resource scope.');
    }
    if (!cfnGraphqlSchema) {
        throw new Error('Expected to find AWS::AppSync::GraphQLSchema in the generated resource scope.');
    }
    const nestedStacks = Object.fromEntries(scope.node.children.filter(aws_cdk_lib_1.NestedStack.isNestedStack).map((nestedStack) => [nestedStack.node.id, nestedStack]));
    const proxiedApiAttributes = graphqlApiAttributesFromCfnGraphQLApi(cfnGraphqlApi);
    return {
        graphqlApi: aws_appsync_1.GraphqlApi.fromGraphqlApiAttributes(scope, 'L2GraphqlApi', proxiedApiAttributes),
        tables,
        roles,
        functions,
        nestedStacks,
        cfnResources: {
            cfnGraphqlApi,
            cfnGraphqlSchema,
            cfnApiKey,
            cfnResolvers,
            cfnFunctionConfigurations,
            cfnDataSources,
            cfnTables,
            amplifyDynamoDbTables,
            cfnRoles,
            cfnFunctions,
            additionalCfnResources,
        },
    };
};
exports.getGeneratedResources = getGeneratedResources;
/**
 * Creates a set of L2 {@link GraphqlApiAttributes} from a CfnGraphqlApi L1 construct. Allows for getGeneratedResources to easily pass
 * attributes of the CfnGraphqlApi to the `resources` member. Without this the `resources.graphqlApi` member has no properties except for
 * the API ID.
 */
const graphqlApiAttributesFromCfnGraphQLApi = (cfnGraphqlApi) => {
    const visiblityStruct = {};
    if (typeof cfnGraphqlApi.visibility === 'string') {
        switch (cfnGraphqlApi.visibility) {
            case 'GLOBAL':
                visiblityStruct.visibility = aws_appsync_1.Visibility.GLOBAL;
                break;
            case 'PRIVATE':
                visiblityStruct.visibility = aws_appsync_1.Visibility.PRIVATE;
                break;
            default:
                console.warn(`Unsupported AppSync API Visibility setting: ${cfnGraphqlApi.visibility}`);
        }
    }
    const proxiedApiAttributes = {
        graphqlApiId: cfnGraphqlApi.attrApiId,
        graphqlApiArn: cfnGraphqlApi.attrArn,
        graphQLEndpointArn: cfnGraphqlApi.attrGraphQlEndpointArn,
        ...visiblityStruct,
        modes: authenticationTypesFromCfnGraphQLApi(cfnGraphqlApi),
    };
    return proxiedApiAttributes;
};
const authenticationTypesFromCfnGraphQLApi = (cfnGraphqlApi) => {
    const additionalAuthenticationProviders = cfnGraphqlApi.additionalAuthenticationProviders;
    if (!additionalAuthenticationProviders) {
        return [];
    }
    // If this is a deploy-time value rather than an array, we can't convert accurately.
    if ((0, aws_cdk_lib_1.isResolvableObject)(additionalAuthenticationProviders)) {
        return [];
    }
    const unfilteredAuthorizationTypes = additionalAuthenticationProviders
        .filter((additionalAuthProvider) => !(0, aws_cdk_lib_1.isResolvableObject)(additionalAuthProvider))
        .map((provider) => provider.authenticationType)
        .map(l2AuthorizationTypeFromL1AuthenticationProvider);
    const authorizationTypes = unfilteredAuthorizationTypes.filter((type) => typeof type !== 'undefined');
    const defaultAuthorizationType = l2AuthorizationTypeFromL1AuthenticationProvider(cfnGraphqlApi.authenticationType);
    if (defaultAuthorizationType) {
        authorizationTypes.push(defaultAuthorizationType);
    }
    return authorizationTypes;
};
const l2AuthorizationTypeFromL1AuthenticationProvider = (authenticationType) => {
    switch (authenticationType) {
        case 'API_KEY':
            return aws_appsync_1.AuthorizationType.API_KEY;
        case 'AWS_IAM':
            return aws_appsync_1.AuthorizationType.IAM;
        case 'OPENID_CONNECT':
            return aws_appsync_1.AuthorizationType.OIDC;
        case 'AMAZON_COGNITO_USER_POOLS':
            return aws_appsync_1.AuthorizationType.USER_POOL;
        case 'AWS_LAMBDA':
            return aws_appsync_1.AuthorizationType.LAMBDA;
        default:
            console.warn(`Unrecognized Authentication type ${authenticationType}`);
            return undefined;
    }
};
/**
 * Get the function slots generated by the Graphql transform operation, adhering to the FunctionSlot interface.
 * @param generatedResolvers the resolvers generated by the transformer to spit back out.
 * @returns the list of generated function slots in the transformer, in order to facilitate overrides.
 */
const getGeneratedFunctionSlots = (generatedResolvers) => Object.entries(generatedResolvers)
    .filter(([name]) => name.split('.').length === 6)
    .map(([name, resolverCode]) => {
    const [typeName, fieldName, slotName, slotIndex, templateType] = name.split('.');
    return {
        typeName,
        fieldName,
        slotName,
        slotIndex: Number.parseInt(slotIndex, 10),
        function: {
            // TODO: this should consolidate req/req values back together
            ...(templateType === 'req' ? { requestMappingTemplate: resolverCode } : {}),
            ...(templateType === 'res' ? { responseMappingTemplate: resolverCode } : {}),
        },
    };
});
exports.getGeneratedFunctionSlots = getGeneratedFunctionSlots;
//# sourceMappingURL=data:application/json;base64,