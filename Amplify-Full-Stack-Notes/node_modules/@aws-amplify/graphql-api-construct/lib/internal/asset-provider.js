"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetProvider = void 0;
const fs = require("fs");
const path = require("path");
const cdk = require("aws-cdk-lib");
const aws_s3_assets_1 = require("aws-cdk-lib/aws-s3-assets");
const TEMP_PREFIX = 'transformer-assets';
const FUNCTION_PREFIX = 'functions';
const RESOLVER_PREFIX = 'resolvers';
/**
 * The asset provider bridges the gap between creation of file assets in the transformer (which provide a name+contents tuple)
 * with the path method which is used in CDK.
 * The CDK S3 asset require the contents to be written to the file system first.
 * The asset provider writes to a temporary directory before creating the CDK S3 asset.
 *
 */
class AssetProvider {
    constructor(scope) {
        this.resolverAssets = {};
        this.tempAssetDir = cdk.FileSystem.mkdtemp(`${TEMP_PREFIX}-${scope.node.addr}`);
    }
    /**
     * Creates a new CDK S3 asset. The file contents in assetProps is first stored in a temporary file that is referenced by the CDK S3 asset.
     * @param assetScope the parent of the asset
     * @param assetId unique ID for CDK S3 asset
     * @param assetProps name and contents of file to be added to CDK S3 asset
     * @returns the CDK S3 asset
     */
    provide(assetScope, assetId, assetProps) {
        return new aws_s3_assets_1.Asset(assetScope, assetId, { path: this.addAsset(assetProps.fileName, assetProps.fileContent) });
    }
    addAsset(fileName, contents) {
        this.trackResolverAsset(fileName, contents);
        const writableContents = this.isContentsAReference(fileName) ? this.dereferenceContents(contents) : contents;
        const filePath = path.join(this.tempAssetDir, fileName);
        const fileDirName = path.dirname(filePath);
        if (!fs.existsSync(fileDirName)) {
            fs.mkdirSync(fileDirName, { recursive: true });
        }
        fs.writeFileSync(filePath, writableContents);
        return filePath;
    }
    isContentsAReference(fileName) {
        return fileName.startsWith(FUNCTION_PREFIX);
    }
    dereferenceContents(contents) {
        return fs.readFileSync(contents);
    }
    trackResolverAsset(fileName, contents) {
        if (fileName.startsWith(RESOLVER_PREFIX)) {
            const resolverFileName = fileName.split('/')[1];
            this.resolverAssets[resolverFileName] = contents;
        }
    }
}
exports.AssetProvider = AssetProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW50ZXJuYWwvYXNzZXQtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUU3QixtQ0FBbUM7QUFDbkMsNkRBQWtEO0FBR2xELE1BQU0sV0FBVyxHQUFHLG9CQUFvQixDQUFDO0FBQ3pDLE1BQU0sZUFBZSxHQUFHLFdBQVcsQ0FBQztBQUNwQyxNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUM7QUFFcEM7Ozs7OztHQU1HO0FBQ0gsTUFBYSxhQUFhO0lBSXhCLFlBQVksS0FBZ0I7UUFGWixtQkFBYyxHQUEyQixFQUFFLENBQUM7UUFHMUQsSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLFdBQVcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLE9BQU8sQ0FBQyxVQUFxQixFQUFFLE9BQWUsRUFBRSxVQUFzQjtRQUMzRSxPQUFPLElBQUkscUJBQUssQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlHLENBQUM7SUFFTyxRQUFRLENBQUMsUUFBZ0IsRUFBRSxRQUFnQjtRQUNqRCxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztRQUM3RyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDeEQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO1lBQ2hDLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDakQsQ0FBQztRQUNELEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFDN0MsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVPLG9CQUFvQixDQUFDLFFBQWdCO1FBQzNDLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRU8sbUJBQW1CLENBQUMsUUFBZ0I7UUFDMUMsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxRQUFnQixFQUFFLFFBQWdCO1FBQzNELElBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDO1lBQ3pDLE1BQU0sZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoRCxJQUFJLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsUUFBUSxDQUFDO1FBQ25ELENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUE3Q0Qsc0NBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IEFzc2V0IH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLXMzLWFzc2V0cyc7XG5pbXBvcnQgeyBBc3NldFByb3BzLCBTM0Fzc2V0LCBBc3NldFByb3ZpZGVyIGFzIEFzc2V0UHJvdmlkZXJJbnRlcmZhY2UgfSBmcm9tICdAYXdzLWFtcGxpZnkvZ3JhcGhxbC10cmFuc2Zvcm1lci1pbnRlcmZhY2VzJztcblxuY29uc3QgVEVNUF9QUkVGSVggPSAndHJhbnNmb3JtZXItYXNzZXRzJztcbmNvbnN0IEZVTkNUSU9OX1BSRUZJWCA9ICdmdW5jdGlvbnMnO1xuY29uc3QgUkVTT0xWRVJfUFJFRklYID0gJ3Jlc29sdmVycyc7XG5cbi8qKlxuICogVGhlIGFzc2V0IHByb3ZpZGVyIGJyaWRnZXMgdGhlIGdhcCBiZXR3ZWVuIGNyZWF0aW9uIG9mIGZpbGUgYXNzZXRzIGluIHRoZSB0cmFuc2Zvcm1lciAod2hpY2ggcHJvdmlkZSBhIG5hbWUrY29udGVudHMgdHVwbGUpXG4gKiB3aXRoIHRoZSBwYXRoIG1ldGhvZCB3aGljaCBpcyB1c2VkIGluIENESy5cbiAqIFRoZSBDREsgUzMgYXNzZXQgcmVxdWlyZSB0aGUgY29udGVudHMgdG8gYmUgd3JpdHRlbiB0byB0aGUgZmlsZSBzeXN0ZW0gZmlyc3QuXG4gKiBUaGUgYXNzZXQgcHJvdmlkZXIgd3JpdGVzIHRvIGEgdGVtcG9yYXJ5IGRpcmVjdG9yeSBiZWZvcmUgY3JlYXRpbmcgdGhlIENESyBTMyBhc3NldC5cbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBBc3NldFByb3ZpZGVyIGltcGxlbWVudHMgQXNzZXRQcm92aWRlckludGVyZmFjZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgdGVtcEFzc2V0RGlyOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSByZXNvbHZlckFzc2V0czogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QpIHtcbiAgICB0aGlzLnRlbXBBc3NldERpciA9IGNkay5GaWxlU3lzdGVtLm1rZHRlbXAoYCR7VEVNUF9QUkVGSVh9LSR7c2NvcGUubm9kZS5hZGRyfWApO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgQ0RLIFMzIGFzc2V0LiBUaGUgZmlsZSBjb250ZW50cyBpbiBhc3NldFByb3BzIGlzIGZpcnN0IHN0b3JlZCBpbiBhIHRlbXBvcmFyeSBmaWxlIHRoYXQgaXMgcmVmZXJlbmNlZCBieSB0aGUgQ0RLIFMzIGFzc2V0LlxuICAgKiBAcGFyYW0gYXNzZXRTY29wZSB0aGUgcGFyZW50IG9mIHRoZSBhc3NldFxuICAgKiBAcGFyYW0gYXNzZXRJZCB1bmlxdWUgSUQgZm9yIENESyBTMyBhc3NldFxuICAgKiBAcGFyYW0gYXNzZXRQcm9wcyBuYW1lIGFuZCBjb250ZW50cyBvZiBmaWxlIHRvIGJlIGFkZGVkIHRvIENESyBTMyBhc3NldFxuICAgKiBAcmV0dXJucyB0aGUgQ0RLIFMzIGFzc2V0XG4gICAqL1xuICBwdWJsaWMgcHJvdmlkZShhc3NldFNjb3BlOiBDb25zdHJ1Y3QsIGFzc2V0SWQ6IHN0cmluZywgYXNzZXRQcm9wczogQXNzZXRQcm9wcyk6IFMzQXNzZXQge1xuICAgIHJldHVybiBuZXcgQXNzZXQoYXNzZXRTY29wZSwgYXNzZXRJZCwgeyBwYXRoOiB0aGlzLmFkZEFzc2V0KGFzc2V0UHJvcHMuZmlsZU5hbWUsIGFzc2V0UHJvcHMuZmlsZUNvbnRlbnQpIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRBc3NldChmaWxlTmFtZTogc3RyaW5nLCBjb250ZW50czogc3RyaW5nKTogc3RyaW5nIHtcbiAgICB0aGlzLnRyYWNrUmVzb2x2ZXJBc3NldChmaWxlTmFtZSwgY29udGVudHMpO1xuICAgIGNvbnN0IHdyaXRhYmxlQ29udGVudHMgPSB0aGlzLmlzQ29udGVudHNBUmVmZXJlbmNlKGZpbGVOYW1lKSA/IHRoaXMuZGVyZWZlcmVuY2VDb250ZW50cyhjb250ZW50cykgOiBjb250ZW50cztcbiAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbih0aGlzLnRlbXBBc3NldERpciwgZmlsZU5hbWUpO1xuICAgIGNvbnN0IGZpbGVEaXJOYW1lID0gcGF0aC5kaXJuYW1lKGZpbGVQYXRoKTtcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZmlsZURpck5hbWUpKSB7XG4gICAgICBmcy5ta2RpclN5bmMoZmlsZURpck5hbWUsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgIH1cbiAgICBmcy53cml0ZUZpbGVTeW5jKGZpbGVQYXRoLCB3cml0YWJsZUNvbnRlbnRzKTtcbiAgICByZXR1cm4gZmlsZVBhdGg7XG4gIH1cblxuICBwcml2YXRlIGlzQ29udGVudHNBUmVmZXJlbmNlKGZpbGVOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmlsZU5hbWUuc3RhcnRzV2l0aChGVU5DVElPTl9QUkVGSVgpO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXJlZmVyZW5jZUNvbnRlbnRzKGNvbnRlbnRzOiBzdHJpbmcpOiBCdWZmZXIge1xuICAgIHJldHVybiBmcy5yZWFkRmlsZVN5bmMoY29udGVudHMpO1xuICB9XG5cbiAgcHJpdmF0ZSB0cmFja1Jlc29sdmVyQXNzZXQoZmlsZU5hbWU6IHN0cmluZywgY29udGVudHM6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmIChmaWxlTmFtZS5zdGFydHNXaXRoKFJFU09MVkVSX1BSRUZJWCkpIHtcbiAgICAgIGNvbnN0IHJlc29sdmVyRmlsZU5hbWUgPSBmaWxlTmFtZS5zcGxpdCgnLycpWzFdO1xuICAgICAgdGhpcy5yZXNvbHZlckFzc2V0c1tyZXNvbHZlckZpbGVOYW1lXSA9IGNvbnRlbnRzO1xuICAgIH1cbiAgfVxufVxuIl19