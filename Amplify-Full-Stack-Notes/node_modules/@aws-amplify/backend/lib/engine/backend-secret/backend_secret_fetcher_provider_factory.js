import { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs';
import { Duration } from 'aws-cdk-lib';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as path from 'path';
import { Runtime as LambdaRuntime } from 'aws-cdk-lib/aws-lambda';
import { Provider } from 'aws-cdk-lib/custom-resources';
import { fileURLToPath } from 'node:url';
import { ParameterPathConversions } from '@aws-amplify/platform-core';
const filename = fileURLToPath(import.meta.url);
const dirname = path.dirname(filename);
const resourcesRoot = path.normalize(path.join(dirname, 'lambda'));
const backendSecretLambdaFilePath = path.join(resourcesRoot, 'backend_secret_fetcher.js');
/**
 * The factory to create secret-fetcher provider.
 */
export class BackendSecretFetcherProviderFactory {
    /**
     * Returns a resource provider if it exists in the input scope. Otherwise,
     * creates a new provider.
     */
    getOrCreateInstance = (scope, providerId, backendIdentifier) => {
        const provider = scope.node.tryFindChild(providerId);
        if (provider) {
            return provider;
        }
        const secretLambda = new NodejsFunction(scope, `${providerId}Lambda`, {
            runtime: LambdaRuntime.NODEJS_18_X,
            timeout: Duration.seconds(10),
            entry: backendSecretLambdaFilePath,
            handler: 'handler',
        });
        const backendParameterPrefix = ParameterPathConversions.toParameterPrefix(backendIdentifier);
        const sharedParameterPrefix = ParameterPathConversions.toParameterPrefix(backendIdentifier.namespace);
        secretLambda.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: ['ssm:GetParameter'],
            resources: [
                `arn:aws:ssm:*:*:parameter${backendParameterPrefix}/*`,
                `arn:aws:ssm:*:*:parameter${sharedParameterPrefix}/*`,
            ],
        }));
        return new Provider(scope, providerId, {
            onEventHandler: secretLambda,
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9zZWNyZXRfZmV0Y2hlcl9wcm92aWRlcl9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2VuZ2luZS9iYWNrZW5kLXNlY3JldC9iYWNrZW5kX3NlY3JldF9mZXRjaGVyX3Byb3ZpZGVyX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxLQUFLLEdBQUcsTUFBTSxxQkFBcUIsQ0FBQztBQUMzQyxPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUUsT0FBTyxJQUFJLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXpDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXRFLE1BQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdkMsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ25FLE1BQU0sMkJBQTJCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FDM0MsYUFBYSxFQUNiLDJCQUEyQixDQUM1QixDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sbUNBQW1DO0lBQzlDOzs7T0FHRztJQUNILG1CQUFtQixHQUFHLENBQ3BCLEtBQWdCLEVBQ2hCLFVBQWtCLEVBQ2xCLGlCQUFvQyxFQUNwQyxFQUFFO1FBQ0YsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFhLENBQUM7UUFDakUsSUFBSSxRQUFRLEVBQUU7WUFDWixPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUVELE1BQU0sWUFBWSxHQUFHLElBQUksY0FBYyxDQUFDLEtBQUssRUFBRSxHQUFHLFVBQVUsUUFBUSxFQUFFO1lBQ3BFLE9BQU8sRUFBRSxhQUFhLENBQUMsV0FBVztZQUNsQyxPQUFPLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDN0IsS0FBSyxFQUFFLDJCQUEyQjtZQUNsQyxPQUFPLEVBQUUsU0FBUztTQUNuQixDQUFDLENBQUM7UUFFSCxNQUFNLHNCQUFzQixHQUMxQix3QkFBd0IsQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0scUJBQXFCLEdBQUcsd0JBQXdCLENBQUMsaUJBQWlCLENBQ3RFLGlCQUFpQixDQUFDLFNBQVMsQ0FDNUIsQ0FBQztRQUVGLFlBQVksQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQzlDLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQztZQUN0QixNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLO1lBQ3hCLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixDQUFDO1lBQzdCLFNBQVMsRUFBRTtnQkFDVCw0QkFBNEIsc0JBQXNCLElBQUk7Z0JBQ3RELDRCQUE0QixxQkFBcUIsSUFBSTthQUN0RDtTQUNGLENBQUMsQ0FDSCxDQUFDO1FBRUYsT0FBTyxJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFO1lBQ3JDLGNBQWMsRUFBRSxZQUFZO1NBQzdCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBOb2RlanNGdW5jdGlvbiB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEtbm9kZWpzJztcbmltcG9ydCB7IER1cmF0aW9uIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgaWFtIGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IFJ1bnRpbWUgYXMgTGFtYmRhUnVudGltZSB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdhd3MtY2RrLWxpYi9jdXN0b20tcmVzb3VyY2VzJztcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICdub2RlOnVybCc7XG5pbXBvcnQgeyBCYWNrZW5kSWRlbnRpZmllciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgUGFyYW1ldGVyUGF0aENvbnZlcnNpb25zIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuXG5jb25zdCBmaWxlbmFtZSA9IGZpbGVVUkxUb1BhdGgoaW1wb3J0Lm1ldGEudXJsKTtcbmNvbnN0IGRpcm5hbWUgPSBwYXRoLmRpcm5hbWUoZmlsZW5hbWUpO1xuY29uc3QgcmVzb3VyY2VzUm9vdCA9IHBhdGgubm9ybWFsaXplKHBhdGguam9pbihkaXJuYW1lLCAnbGFtYmRhJykpO1xuY29uc3QgYmFja2VuZFNlY3JldExhbWJkYUZpbGVQYXRoID0gcGF0aC5qb2luKFxuICByZXNvdXJjZXNSb290LFxuICAnYmFja2VuZF9zZWNyZXRfZmV0Y2hlci5qcydcbik7XG5cbi8qKlxuICogVGhlIGZhY3RvcnkgdG8gY3JlYXRlIHNlY3JldC1mZXRjaGVyIHByb3ZpZGVyLlxuICovXG5leHBvcnQgY2xhc3MgQmFja2VuZFNlY3JldEZldGNoZXJQcm92aWRlckZhY3Rvcnkge1xuICAvKipcbiAgICogUmV0dXJucyBhIHJlc291cmNlIHByb3ZpZGVyIGlmIGl0IGV4aXN0cyBpbiB0aGUgaW5wdXQgc2NvcGUuIE90aGVyd2lzZSxcbiAgICogY3JlYXRlcyBhIG5ldyBwcm92aWRlci5cbiAgICovXG4gIGdldE9yQ3JlYXRlSW5zdGFuY2UgPSAoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBwcm92aWRlcklkOiBzdHJpbmcsXG4gICAgYmFja2VuZElkZW50aWZpZXI6IEJhY2tlbmRJZGVudGlmaWVyXG4gICkgPT4ge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gc2NvcGUubm9kZS50cnlGaW5kQ2hpbGQocHJvdmlkZXJJZCkgYXMgUHJvdmlkZXI7XG4gICAgaWYgKHByb3ZpZGVyKSB7XG4gICAgICByZXR1cm4gcHJvdmlkZXI7XG4gICAgfVxuXG4gICAgY29uc3Qgc2VjcmV0TGFtYmRhID0gbmV3IE5vZGVqc0Z1bmN0aW9uKHNjb3BlLCBgJHtwcm92aWRlcklkfUxhbWJkYWAsIHtcbiAgICAgIHJ1bnRpbWU6IExhbWJkYVJ1bnRpbWUuTk9ERUpTXzE4X1gsXG4gICAgICB0aW1lb3V0OiBEdXJhdGlvbi5zZWNvbmRzKDEwKSxcbiAgICAgIGVudHJ5OiBiYWNrZW5kU2VjcmV0TGFtYmRhRmlsZVBhdGgsXG4gICAgICBoYW5kbGVyOiAnaGFuZGxlcicsXG4gICAgfSk7XG5cbiAgICBjb25zdCBiYWNrZW5kUGFyYW1ldGVyUHJlZml4ID1cbiAgICAgIFBhcmFtZXRlclBhdGhDb252ZXJzaW9ucy50b1BhcmFtZXRlclByZWZpeChiYWNrZW5kSWRlbnRpZmllcik7XG4gICAgY29uc3Qgc2hhcmVkUGFyYW1ldGVyUHJlZml4ID0gUGFyYW1ldGVyUGF0aENvbnZlcnNpb25zLnRvUGFyYW1ldGVyUHJlZml4KFxuICAgICAgYmFja2VuZElkZW50aWZpZXIubmFtZXNwYWNlXG4gICAgKTtcblxuICAgIHNlY3JldExhbWJkYS5ncmFudFByaW5jaXBhbC5hZGRUb1ByaW5jaXBhbFBvbGljeShcbiAgICAgIG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgZWZmZWN0OiBpYW0uRWZmZWN0LkFMTE9XLFxuICAgICAgICBhY3Rpb25zOiBbJ3NzbTpHZXRQYXJhbWV0ZXInXSxcbiAgICAgICAgcmVzb3VyY2VzOiBbXG4gICAgICAgICAgYGFybjphd3M6c3NtOio6KjpwYXJhbWV0ZXIke2JhY2tlbmRQYXJhbWV0ZXJQcmVmaXh9LypgLFxuICAgICAgICAgIGBhcm46YXdzOnNzbToqOio6cGFyYW1ldGVyJHtzaGFyZWRQYXJhbWV0ZXJQcmVmaXh9LypgLFxuICAgICAgICBdLFxuICAgICAgfSlcbiAgICApO1xuXG4gICAgcmV0dXJuIG5ldyBQcm92aWRlcihzY29wZSwgcHJvdmlkZXJJZCwge1xuICAgICAgb25FdmVudEhhbmRsZXI6IHNlY3JldExhbWJkYSxcbiAgICB9KTtcbiAgfTtcbn1cbiJdfQ==