import { getSecretClient, } from '@aws-amplify/backend-secret';
import { randomUUID } from 'node:crypto';
const secretClient = getSecretClient();
/**
 * Entry point for the lambda-backend custom resource to retrieve a backend secret.
 */
export const handler = async (event) => {
    console.info(`Received '${event.RequestType}' event`);
    const physicalId = event.RequestType === 'Create' ? randomUUID() : event.PhysicalResourceId;
    let data = undefined;
    if (event.RequestType === 'Update' || event.RequestType === 'Create') {
        const val = await handleCreateUpdateEvent(secretClient, event);
        data = {
            secretValue: val,
        };
    }
    return {
        RequestId: event.RequestId,
        LogicalResourceId: event.LogicalResourceId,
        PhysicalResourceId: physicalId,
        Data: data,
        StackId: event.StackId,
        NoEcho: true,
        Status: 'SUCCESS',
    };
};
/**
 * Handles create/update event for the secret custom resource.
 */
export const handleCreateUpdateEvent = async (secretClient, event) => {
    const props = event.ResourceProperties;
    let secret;
    try {
        const resp = await secretClient.getSecret({
            namespace: props.namespace,
            name: props.name,
            type: props.type,
        }, {
            name: props.secretName,
        });
        secret = resp?.value;
    }
    catch (err) {
        const secretErr = err;
        if (secretErr.httpStatusCode && secretErr.httpStatusCode >= 500) {
            throw new Error(`Failed to retrieve backend secret '${props.secretName}' for '${props.namespace}/${props.name}'. Reason: ${JSON.stringify(err)}`);
        }
    }
    // if the secret is not available in branch path, try retrieving it at the app-level.
    if (!secret) {
        try {
            const resp = await secretClient.getSecret(props.namespace, {
                name: props.secretName,
            });
            secret = resp?.value;
        }
        catch (err) {
            throw new Error(`Failed to retrieve backend secret '${props.secretName}' for '${props.namespace}'. Reason: ${JSON.stringify(err)}`);
        }
    }
    if (!secret) {
        throw new Error(`Unable to find backend secret for backend '${props.namespace}', branch '${props.name}', name '${props.secretName}'`);
    }
    return secret;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9zZWNyZXRfZmV0Y2hlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9lbmdpbmUvYmFja2VuZC1zZWNyZXQvbGFtYmRhL2JhY2tlbmRfc2VjcmV0X2ZldGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUdMLGVBQWUsR0FDaEIsTUFBTSw2QkFBNkIsQ0FBQztBQUNyQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3pDLE1BQU0sWUFBWSxHQUFHLGVBQWUsRUFBRSxDQUFDO0FBRXZDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFDMUIsS0FBd0MsRUFDYyxFQUFFO0lBQ3hELE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxLQUFLLENBQUMsV0FBVyxTQUFTLENBQUMsQ0FBQztJQUV0RCxNQUFNLFVBQVUsR0FDZCxLQUFLLENBQUMsV0FBVyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztJQUMzRSxJQUFJLElBQUksR0FBd0MsU0FBUyxDQUFDO0lBQzFELElBQUksS0FBSyxDQUFDLFdBQVcsS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLFdBQVcsS0FBSyxRQUFRLEVBQUU7UUFDcEUsTUFBTSxHQUFHLEdBQUcsTUFBTSx1QkFBdUIsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0QsSUFBSSxHQUFHO1lBQ0wsV0FBVyxFQUFFLEdBQUc7U0FDakIsQ0FBQztLQUNIO0lBRUQsT0FBTztRQUNMLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztRQUMxQixpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1FBQzFDLGtCQUFrQixFQUFFLFVBQVU7UUFDOUIsSUFBSSxFQUFFLElBQUk7UUFDVixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87UUFDdEIsTUFBTSxFQUFFLElBQUk7UUFDWixNQUFNLEVBQUUsU0FBUztLQUM2QixDQUFDO0FBQ25ELENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsS0FBSyxFQUMxQyxZQUEwQixFQUMxQixLQUF3QyxFQUN2QixFQUFFO0lBQ25CLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxrQkFBb0QsQ0FBQztJQUN6RSxJQUFJLE1BQTBCLENBQUM7SUFFL0IsSUFBSTtRQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sWUFBWSxDQUFDLFNBQVMsQ0FDdkM7WUFDRSxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1lBQ2hCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtTQUNqQixFQUNEO1lBQ0UsSUFBSSxFQUFFLEtBQUssQ0FBQyxVQUFVO1NBQ3ZCLENBQ0YsQ0FBQztRQUNGLE1BQU0sR0FBRyxJQUFJLEVBQUUsS0FBSyxDQUFDO0tBQ3RCO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWixNQUFNLFNBQVMsR0FBRyxHQUFrQixDQUFDO1FBQ3JDLElBQUksU0FBUyxDQUFDLGNBQWMsSUFBSSxTQUFTLENBQUMsY0FBYyxJQUFJLEdBQUcsRUFBRTtZQUMvRCxNQUFNLElBQUksS0FBSyxDQUNiLHNDQUFzQyxLQUFLLENBQUMsVUFBVSxVQUNwRCxLQUFLLENBQUMsU0FDUixJQUFJLEtBQUssQ0FBQyxJQUFJLGNBQWMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUNsRCxDQUFDO1NBQ0g7S0FDRjtJQUVELHFGQUFxRjtJQUNyRixJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ1gsSUFBSTtZQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sWUFBWSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFO2dCQUN6RCxJQUFJLEVBQUUsS0FBSyxDQUFDLFVBQVU7YUFDdkIsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxHQUFHLElBQUksRUFBRSxLQUFLLENBQUM7U0FDdEI7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLE1BQU0sSUFBSSxLQUFLLENBQ2Isc0NBQXNDLEtBQUssQ0FBQyxVQUFVLFVBQ3BELEtBQUssQ0FBQyxTQUNSLGNBQWMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUNwQyxDQUFDO1NBQ0g7S0FDRjtJQUVELElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDWCxNQUFNLElBQUksS0FBSyxDQUNiLDhDQUE4QyxLQUFLLENBQUMsU0FBUyxjQUFjLEtBQUssQ0FBQyxJQUFJLFlBQVksS0FBSyxDQUFDLFVBQVUsR0FBRyxDQUNySCxDQUFDO0tBQ0g7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlRXZlbnQsXG4gIENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VTdWNjZXNzUmVzcG9uc2UsXG59IGZyb20gJ2F3cy1sYW1iZGEnO1xuaW1wb3J0IHtcbiAgU2VjcmV0Q2xpZW50LFxuICBTZWNyZXRFcnJvcixcbiAgZ2V0U2VjcmV0Q2xpZW50LFxufSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1zZWNyZXQnO1xuaW1wb3J0IHsgcmFuZG9tVVVJRCB9IGZyb20gJ25vZGU6Y3J5cHRvJztcbmltcG9ydCB7IFNlY3JldFJlc291cmNlUHJvcHMgfSBmcm9tICcuL2JhY2tlbmRfc2VjcmV0X2ZldGNoZXJfdHlwZXMuanMnO1xuXG5jb25zdCBzZWNyZXRDbGllbnQgPSBnZXRTZWNyZXRDbGllbnQoKTtcblxuLyoqXG4gKiBFbnRyeSBwb2ludCBmb3IgdGhlIGxhbWJkYS1iYWNrZW5kIGN1c3RvbSByZXNvdXJjZSB0byByZXRyaWV2ZSBhIGJhY2tlbmQgc2VjcmV0LlxuICovXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChcbiAgZXZlbnQ6IENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VFdmVudFxuKTogUHJvbWlzZTxDbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlU3VjY2Vzc1Jlc3BvbnNlPiA9PiB7XG4gIGNvbnNvbGUuaW5mbyhgUmVjZWl2ZWQgJyR7ZXZlbnQuUmVxdWVzdFR5cGV9JyBldmVudGApO1xuXG4gIGNvbnN0IHBoeXNpY2FsSWQgPVxuICAgIGV2ZW50LlJlcXVlc3RUeXBlID09PSAnQ3JlYXRlJyA/IHJhbmRvbVVVSUQoKSA6IGV2ZW50LlBoeXNpY2FsUmVzb3VyY2VJZDtcbiAgbGV0IGRhdGE6IHsgc2VjcmV0VmFsdWU6IHN0cmluZyB9IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICBpZiAoZXZlbnQuUmVxdWVzdFR5cGUgPT09ICdVcGRhdGUnIHx8IGV2ZW50LlJlcXVlc3RUeXBlID09PSAnQ3JlYXRlJykge1xuICAgIGNvbnN0IHZhbCA9IGF3YWl0IGhhbmRsZUNyZWF0ZVVwZGF0ZUV2ZW50KHNlY3JldENsaWVudCwgZXZlbnQpO1xuICAgIGRhdGEgPSB7XG4gICAgICBzZWNyZXRWYWx1ZTogdmFsLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFJlcXVlc3RJZDogZXZlbnQuUmVxdWVzdElkLFxuICAgIExvZ2ljYWxSZXNvdXJjZUlkOiBldmVudC5Mb2dpY2FsUmVzb3VyY2VJZCxcbiAgICBQaHlzaWNhbFJlc291cmNlSWQ6IHBoeXNpY2FsSWQsXG4gICAgRGF0YTogZGF0YSxcbiAgICBTdGFja0lkOiBldmVudC5TdGFja0lkLFxuICAgIE5vRWNobzogdHJ1ZSxcbiAgICBTdGF0dXM6ICdTVUNDRVNTJyxcbiAgfSBhcyBDbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlU3VjY2Vzc1Jlc3BvbnNlO1xufTtcblxuLyoqXG4gKiBIYW5kbGVzIGNyZWF0ZS91cGRhdGUgZXZlbnQgZm9yIHRoZSBzZWNyZXQgY3VzdG9tIHJlc291cmNlLlxuICovXG5leHBvcnQgY29uc3QgaGFuZGxlQ3JlYXRlVXBkYXRlRXZlbnQgPSBhc3luYyAoXG4gIHNlY3JldENsaWVudDogU2VjcmV0Q2xpZW50LFxuICBldmVudDogQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZUV2ZW50XG4pOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICBjb25zdCBwcm9wcyA9IGV2ZW50LlJlc291cmNlUHJvcGVydGllcyBhcyB1bmtub3duIGFzIFNlY3JldFJlc291cmNlUHJvcHM7XG4gIGxldCBzZWNyZXQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGNvbnN0IHJlc3AgPSBhd2FpdCBzZWNyZXRDbGllbnQuZ2V0U2VjcmV0KFxuICAgICAge1xuICAgICAgICBuYW1lc3BhY2U6IHByb3BzLm5hbWVzcGFjZSxcbiAgICAgICAgbmFtZTogcHJvcHMubmFtZSxcbiAgICAgICAgdHlwZTogcHJvcHMudHlwZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IHByb3BzLnNlY3JldE5hbWUsXG4gICAgICB9XG4gICAgKTtcbiAgICBzZWNyZXQgPSByZXNwPy52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc3Qgc2VjcmV0RXJyID0gZXJyIGFzIFNlY3JldEVycm9yO1xuICAgIGlmIChzZWNyZXRFcnIuaHR0cFN0YXR1c0NvZGUgJiYgc2VjcmV0RXJyLmh0dHBTdGF0dXNDb2RlID49IDUwMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRmFpbGVkIHRvIHJldHJpZXZlIGJhY2tlbmQgc2VjcmV0ICcke3Byb3BzLnNlY3JldE5hbWV9JyBmb3IgJyR7XG4gICAgICAgICAgcHJvcHMubmFtZXNwYWNlXG4gICAgICAgIH0vJHtwcm9wcy5uYW1lfScuIFJlYXNvbjogJHtKU09OLnN0cmluZ2lmeShlcnIpfWBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHNlY3JldCBpcyBub3QgYXZhaWxhYmxlIGluIGJyYW5jaCBwYXRoLCB0cnkgcmV0cmlldmluZyBpdCBhdCB0aGUgYXBwLWxldmVsLlxuICBpZiAoIXNlY3JldCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwID0gYXdhaXQgc2VjcmV0Q2xpZW50LmdldFNlY3JldChwcm9wcy5uYW1lc3BhY2UsIHtcbiAgICAgICAgbmFtZTogcHJvcHMuc2VjcmV0TmFtZSxcbiAgICAgIH0pO1xuICAgICAgc2VjcmV0ID0gcmVzcD8udmFsdWU7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBGYWlsZWQgdG8gcmV0cmlldmUgYmFja2VuZCBzZWNyZXQgJyR7cHJvcHMuc2VjcmV0TmFtZX0nIGZvciAnJHtcbiAgICAgICAgICBwcm9wcy5uYW1lc3BhY2VcbiAgICAgICAgfScuIFJlYXNvbjogJHtKU09OLnN0cmluZ2lmeShlcnIpfWBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzZWNyZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgVW5hYmxlIHRvIGZpbmQgYmFja2VuZCBzZWNyZXQgZm9yIGJhY2tlbmQgJyR7cHJvcHMubmFtZXNwYWNlfScsIGJyYW5jaCAnJHtwcm9wcy5uYW1lfScsIG5hbWUgJyR7cHJvcHMuc2VjcmV0TmFtZX0nYFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gc2VjcmV0O1xufTtcbiJdfQ==