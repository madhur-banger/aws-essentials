import { CustomResource } from 'aws-cdk-lib';
/**
 * Resource provider ID for the backend secret resource.
 */
export const SECRET_RESOURCE_PROVIDER_ID = 'SecretFetcherResourceProvider';
/**
 * Type of the backend custom CFN resource.
 */
const SECRET_RESOURCE_TYPE = `Custom::SecretFetcherResource`;
/**
 * The factory to create backend secret-fetcher resource.
 */
export class BackendSecretFetcherFactory {
    secretProviderFactory;
    /**
     * Creates a backend secret-fetcher resource factory.
     */
    constructor(secretProviderFactory) {
        this.secretProviderFactory = secretProviderFactory;
    }
    /**
     * Returns a resource if it exists in the input scope. Otherwise,
     * creates a new one.
     */
    getOrCreate = (scope, secretName, backendIdentifier) => {
        const secretResourceId = `${secretName}SecretFetcherResource`;
        const existingResource = scope.node.tryFindChild(secretResourceId);
        if (existingResource) {
            return existingResource;
        }
        const provider = this.secretProviderFactory.getOrCreateInstance(scope, SECRET_RESOURCE_PROVIDER_ID, backendIdentifier);
        // Sandbox deployment passes down the secret's last updated timestamp to
        // trigger secret update. It is to optimize sandbox deployment time by
        // leveraging cdk hotswap.
        const secretLastUpdated = scope.node.tryGetContext('secretLastUpdated') ?? Date.now();
        const customResourceProps = {
            namespace: backendIdentifier.namespace,
            name: backendIdentifier.name,
            type: backendIdentifier.type,
            secretName: secretName,
        };
        return new CustomResource(scope, secretResourceId, {
            serviceToken: provider.serviceToken,
            properties: {
                ...customResourceProps,
                secretLastUpdated, // this property is only to trigger resource update event.
            },
            resourceType: SECRET_RESOURCE_TYPE,
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9zZWNyZXRfZmV0Y2hlcl9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2VuZ2luZS9iYWNrZW5kLXNlY3JldC9iYWNrZW5kX3NlY3JldF9mZXRjaGVyX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUk3Qzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLCtCQUErQixDQUFDO0FBRTNFOztHQUVHO0FBQ0gsTUFBTSxvQkFBb0IsR0FBRywrQkFBK0IsQ0FBQztBQUU3RDs7R0FFRztBQUNILE1BQU0sT0FBTywyQkFBMkI7SUFLbkI7SUFKbkI7O09BRUc7SUFDSCxZQUNtQixxQkFBMEQ7UUFBMUQsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFxQztJQUMxRSxDQUFDO0lBRUo7OztPQUdHO0lBQ0gsV0FBVyxHQUFHLENBQ1osS0FBZ0IsRUFDaEIsVUFBa0IsRUFDbEIsaUJBQW9DLEVBQ3BCLEVBQUU7UUFDbEIsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLFVBQVUsdUJBQXVCLENBQUM7UUFDOUQsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FDOUMsZ0JBQWdCLENBQ0MsQ0FBQztRQUVwQixJQUFJLGdCQUFnQixFQUFFO1lBQ3BCLE9BQU8sZ0JBQWdCLENBQUM7U0FDekI7UUFFRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsbUJBQW1CLENBQzdELEtBQUssRUFDTCwyQkFBMkIsRUFDM0IsaUJBQWlCLENBQ2xCLENBQUM7UUFFRix3RUFBd0U7UUFDeEUsc0VBQXNFO1FBQ3RFLDBCQUEwQjtRQUMxQixNQUFNLGlCQUFpQixHQUNyQixLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUU5RCxNQUFNLG1CQUFtQixHQUF3QjtZQUMvQyxTQUFTLEVBQUUsaUJBQWlCLENBQUMsU0FBUztZQUN0QyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtZQUM1QixJQUFJLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtZQUM1QixVQUFVLEVBQUUsVUFBVTtTQUN2QixDQUFDO1FBRUYsT0FBTyxJQUFJLGNBQWMsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLEVBQUU7WUFDakQsWUFBWSxFQUFFLFFBQVEsQ0FBQyxZQUFZO1lBQ25DLFVBQVUsRUFBRTtnQkFDVixHQUFHLG1CQUFtQjtnQkFDdEIsaUJBQWlCLEVBQUUsMERBQTBEO2FBQzlFO1lBQ0QsWUFBWSxFQUFFLG9CQUFvQjtTQUNuQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQmFja2VuZFNlY3JldEZldGNoZXJQcm92aWRlckZhY3RvcnkgfSBmcm9tICcuL2JhY2tlbmRfc2VjcmV0X2ZldGNoZXJfcHJvdmlkZXJfZmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBDdXN0b21SZXNvdXJjZSB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IEJhY2tlbmRJZGVudGlmaWVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgeyBTZWNyZXRSZXNvdXJjZVByb3BzIH0gZnJvbSAnLi9sYW1iZGEvYmFja2VuZF9zZWNyZXRfZmV0Y2hlcl90eXBlcy5qcyc7XG5cbi8qKlxuICogUmVzb3VyY2UgcHJvdmlkZXIgSUQgZm9yIHRoZSBiYWNrZW5kIHNlY3JldCByZXNvdXJjZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFNFQ1JFVF9SRVNPVVJDRV9QUk9WSURFUl9JRCA9ICdTZWNyZXRGZXRjaGVyUmVzb3VyY2VQcm92aWRlcic7XG5cbi8qKlxuICogVHlwZSBvZiB0aGUgYmFja2VuZCBjdXN0b20gQ0ZOIHJlc291cmNlLlxuICovXG5jb25zdCBTRUNSRVRfUkVTT1VSQ0VfVFlQRSA9IGBDdXN0b206OlNlY3JldEZldGNoZXJSZXNvdXJjZWA7XG5cbi8qKlxuICogVGhlIGZhY3RvcnkgdG8gY3JlYXRlIGJhY2tlbmQgc2VjcmV0LWZldGNoZXIgcmVzb3VyY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYWNrZW5kU2VjcmV0RmV0Y2hlckZhY3Rvcnkge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIGJhY2tlbmQgc2VjcmV0LWZldGNoZXIgcmVzb3VyY2UgZmFjdG9yeS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2VjcmV0UHJvdmlkZXJGYWN0b3J5OiBCYWNrZW5kU2VjcmV0RmV0Y2hlclByb3ZpZGVyRmFjdG9yeVxuICApIHt9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSByZXNvdXJjZSBpZiBpdCBleGlzdHMgaW4gdGhlIGlucHV0IHNjb3BlLiBPdGhlcndpc2UsXG4gICAqIGNyZWF0ZXMgYSBuZXcgb25lLlxuICAgKi9cbiAgZ2V0T3JDcmVhdGUgPSAoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBzZWNyZXROYW1lOiBzdHJpbmcsXG4gICAgYmFja2VuZElkZW50aWZpZXI6IEJhY2tlbmRJZGVudGlmaWVyXG4gICk6IEN1c3RvbVJlc291cmNlID0+IHtcbiAgICBjb25zdCBzZWNyZXRSZXNvdXJjZUlkID0gYCR7c2VjcmV0TmFtZX1TZWNyZXRGZXRjaGVyUmVzb3VyY2VgO1xuICAgIGNvbnN0IGV4aXN0aW5nUmVzb3VyY2UgPSBzY29wZS5ub2RlLnRyeUZpbmRDaGlsZChcbiAgICAgIHNlY3JldFJlc291cmNlSWRcbiAgICApIGFzIEN1c3RvbVJlc291cmNlO1xuXG4gICAgaWYgKGV4aXN0aW5nUmVzb3VyY2UpIHtcbiAgICAgIHJldHVybiBleGlzdGluZ1Jlc291cmNlO1xuICAgIH1cblxuICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5zZWNyZXRQcm92aWRlckZhY3RvcnkuZ2V0T3JDcmVhdGVJbnN0YW5jZShcbiAgICAgIHNjb3BlLFxuICAgICAgU0VDUkVUX1JFU09VUkNFX1BST1ZJREVSX0lELFxuICAgICAgYmFja2VuZElkZW50aWZpZXJcbiAgICApO1xuXG4gICAgLy8gU2FuZGJveCBkZXBsb3ltZW50IHBhc3NlcyBkb3duIHRoZSBzZWNyZXQncyBsYXN0IHVwZGF0ZWQgdGltZXN0YW1wIHRvXG4gICAgLy8gdHJpZ2dlciBzZWNyZXQgdXBkYXRlLiBJdCBpcyB0byBvcHRpbWl6ZSBzYW5kYm94IGRlcGxveW1lbnQgdGltZSBieVxuICAgIC8vIGxldmVyYWdpbmcgY2RrIGhvdHN3YXAuXG4gICAgY29uc3Qgc2VjcmV0TGFzdFVwZGF0ZWQgPVxuICAgICAgc2NvcGUubm9kZS50cnlHZXRDb250ZXh0KCdzZWNyZXRMYXN0VXBkYXRlZCcpID8/IERhdGUubm93KCk7XG5cbiAgICBjb25zdCBjdXN0b21SZXNvdXJjZVByb3BzOiBTZWNyZXRSZXNvdXJjZVByb3BzID0ge1xuICAgICAgbmFtZXNwYWNlOiBiYWNrZW5kSWRlbnRpZmllci5uYW1lc3BhY2UsXG4gICAgICBuYW1lOiBiYWNrZW5kSWRlbnRpZmllci5uYW1lLFxuICAgICAgdHlwZTogYmFja2VuZElkZW50aWZpZXIudHlwZSxcbiAgICAgIHNlY3JldE5hbWU6IHNlY3JldE5hbWUsXG4gICAgfTtcblxuICAgIHJldHVybiBuZXcgQ3VzdG9tUmVzb3VyY2Uoc2NvcGUsIHNlY3JldFJlc291cmNlSWQsIHtcbiAgICAgIHNlcnZpY2VUb2tlbjogcHJvdmlkZXIuc2VydmljZVRva2VuLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAuLi5jdXN0b21SZXNvdXJjZVByb3BzLFxuICAgICAgICBzZWNyZXRMYXN0VXBkYXRlZCwgLy8gdGhpcyBwcm9wZXJ0eSBpcyBvbmx5IHRvIHRyaWdnZXIgcmVzb3VyY2UgdXBkYXRlIGV2ZW50LlxuICAgICAgfSxcbiAgICAgIHJlc291cmNlVHlwZTogU0VDUkVUX1JFU09VUkNFX1RZUEUsXG4gICAgfSk7XG4gIH07XG59XG4iXX0=