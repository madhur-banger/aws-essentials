"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import { SecretValue, aws_cognito as cognito } from 'aws-cdk-lib';\nimport { triggerEvents } from './trigger_events.js';\nimport { BackendOutputStorageStrategy } from '@aws-amplify/plugin-types';\nimport { AuthOutput } from '@aws-amplify/backend-output-schemas';\nimport {\n  NumberAttributeConstraints,\n  StandardAttributes,\n  StringAttributeConstraints,\n  UserPoolIdentityProviderSamlMetadata,\n  UserPoolSESOptions,\n} from 'aws-cdk-lib/aws-cognito';\nexport type VerificationEmailWithLink = {\n  /**\n   * The type of verification. Must be one of \"CODE\" or \"LINK\".\n   */\n  verificationEmailStyle?: 'LINK';\n  /**\n   * Customize your verification emails.\n   * Use the link parameter to inject verification links into the user verification email.\n   * You can customize the link text by providing a string, as shown in the example below.\n   * @example\n   * verificationEmailStyle: \"LINK\",\n   * verificationEmailBody: (createLink) => `Your verification link is ${createLink()}.`\n   * @example\n   * To customize the link text, you can provide custom link text to the .\n   * verificationEmailBody: (createLink) => `Your custom verification link is ${createLink('custom link text')}.`\n   */\n  verificationEmailBody?: (createLink: (text?: string) => string) => string;\n  /**\n   * The verification email subject.\n   */\n  verificationEmailSubject?: string;\n};\nexport type VerificationEmailWithCode = {\n  /**\n   * The type of verification. Must be one of \"CODE\" or \"LINK\".\n   */\n  verificationEmailStyle?: 'CODE';\n  /**\n   * Customize your verification emails.\n   * Use the code parameter to inject verification codes into the user verification email.\n   * @example\n   * verificationEmailStyle: \"CODE\",\n   * verificationEmailBody: (createCode) => `Your verification code is ${createCode()}.`\n   */\n  verificationEmailBody?: (createCode: () => string) => string;\n  /**\n   * The verification email subject.\n   */\n  verificationEmailSubject?: string;\n};\n/**\n * Email login settings object.\n */\nexport type EmailLoginSettings = (\n  | VerificationEmailWithLink\n  | VerificationEmailWithCode\n) & {\n  /**\n   * Customize the email invitation sent to users when an administrators signs them up.\n   */\n  userInvitation?: {\n    /**\n     * The template to the email subject that is sent to the user when an administrator signs them up to the user pool.\n     * @default 'Your temporary password'\n     */\n    emailSubject?: string;\n    /**\n     * The template to the email body that is sent to the user when an administrator signs them up to the user pool.\n     * @default (username, code) => 'Your username is {username()} and temporary password is {code()}.'\n     */\n    emailBody?: (username: () => string, code: () => string) => string;\n    /**\n     * The template to the SMS message that is sent to the user when an administrator signs them up to the user pool.\n     * @default (username, code) => 'Your username is {username()} and temporary password is {code()}.'\n     */\n    smsMessage?: (username: () => string, code: () => string) => string;\n  };\n};\n/**\n * Email login options.\n *\n * If true, email login will be enabled with default settings.\n * If settings are provided, email login will be enabled with the specified settings.\n */\nexport type EmailLogin = true | EmailLoginSettings;\n/**\n * Phone number login options.\n *\n * If true, phone number login will be enabled with default settings.\n * If settings are provided, phone number login will be enabled with the specified settings.\n */\nexport type PhoneNumberLogin =\n  | true\n  | {\n      /**\n       * The message template for the verification SMS sent to the user upon sign up.\n       * @default\n       * // If VerificationEmailStyle.LINK is chosen, verificationMessage will not be configured by default.\n       *\n       * // If VerificationEmailStyle.CODE is chosen, the default function will be as follows:\n       * (code) => `The verification code to your new account is ${createCode()}`\n       */\n      verificationMessage?: (createCode: () => string) => string;\n    };\n\n/**\n * If true, or if a settings object is provided, the MFA token is sent to the user via SMS to their verified phone numbers.\n * @see - https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-mfa-sms-text-message.html\n */\nexport type MFASmsSettings =\n  | boolean\n  | {\n      /**\n       * The SMS message template sent during MFA verification.\n       * Use the code parameter in the template where Cognito should insert the verification code.\n       * @default\n       * smsMessage: (createCode: string) => `Your authentication code is ${createCode()}.`\n       */\n      smsMessage: (createCode: () => string) => string;\n    };\n/**\n * If true, the MFA token is a time-based one time password that is generated by a hardware or software token\n * @see - https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-mfa-totp.html\n */\nexport type MFATotpSettings = boolean;\n/**\n * Configure the MFA types that users can use. At least one of totp or sms is required.\n */\nexport type MFASettings =\n  | {\n      totp?: MFATotpSettings;\n      sms: MFASmsSettings;\n    }\n  | { totp: MFATotpSettings; sms?: MFASmsSettings };\n\n/**\n * MFA configuration. MFA settings are required if the mode is either \"OPTIONAL\" or \"REQUIRED\"\n */\nexport type MFA =\n  | {\n      /**\n       * Configure whether users can or are required to use multifactor (MFA) to sign in.\n       * @default - 'OFF'\n       */\n      mode: 'OFF';\n    }\n  | ({\n      mode: 'OPTIONAL' | 'REQUIRED';\n    } & MFASettings);\n/**\n * Properties which all identity providers have\n */\nexport type IdentityProviderProps = {\n  /**\n   * Mapping attributes from the identity provider to standard and custom attributes of the user pool.\n   * @default - no attribute mapping\n   */\n  attributeMapping?: AttributeMapping;\n};\n/**\n * A wrapper for cognito.AttributeMapping that simplifies the way attribute mappings are declared by\n * using strings for attribute name instead of objects with an attributeName property.\n */\nexport type AttributeMapping = {\n  [K in keyof Omit<cognito.AttributeMapping, 'custom'>]: string;\n} & {\n  /**\n   * Specify custom attribute mapping here and mapping for any standard attributes not supported yet.\n   * @default - no custom attribute mapping\n   */\n  custom?: {\n    [key: string]: string;\n  };\n};\n/**\n * Google provider.\n */\nexport type GoogleProviderProps = Omit<\n  cognito.UserPoolIdentityProviderGoogleProps,\n  'userPool' | 'clientSecretValue' | 'clientSecret' | 'attributeMapping'\n> & {\n  /**\n   * The client secret to be accompanied with clientId for Google APIs to authenticate the client as SecretValue\n   * @see https://developers.google.com/identity/sign-in/web/sign-in\n   * @default none\n   */\n  clientSecret?: SecretValue;\n} & IdentityProviderProps;\n\n/**\n * Apple provider.\n */\nexport type AppleProviderProps = Omit<\n  cognito.UserPoolIdentityProviderAppleProps,\n  'userPool' | 'attributeMapping'\n> &\n  IdentityProviderProps;\n\n/**\n * Amazon provider.\n */\nexport type AmazonProviderProps = Omit<\n  cognito.UserPoolIdentityProviderAmazonProps,\n  'userPool' | 'attributeMapping'\n> &\n  IdentityProviderProps;\n\n/**\n * Facebook provider.\n */\nexport type FacebookProviderProps = Omit<\n  cognito.UserPoolIdentityProviderFacebookProps,\n  'userPool' | 'attributeMapping'\n> &\n  IdentityProviderProps;\n\n/**\n * OIDC provider.\n */\nexport type OidcProviderProps = Omit<\n  cognito.UserPoolIdentityProviderOidcProps,\n  'userPool' | 'attributeRequestMethod' | 'attributeMapping'\n> & {\n  /**\n   * The method to use to request attributes\n   * @default 'GET'\n   *\n   * For details about each option, see below.\n   *\n   * 'GET' - use GET\n   * 'POST' - use POST\n   */\n  readonly attributeRequestMethod?: 'GET' | 'POST';\n} & IdentityProviderProps;\n\n/**\n * SAML provider.\n */\nexport type SamlProviderProps = Omit<\n  cognito.UserPoolIdentityProviderSamlProps,\n  'userPool' | 'metadata' | 'attributeMapping'\n> & {\n  /**\n   * The SAML metadata.\n   */\n  metadata: Omit<UserPoolIdentityProviderSamlMetadata, 'metadataType'> & {\n    /**\n     * Metadata types that can be used for a SAML user pool identity provider.\n     * @example 'URL'\n     *\n     * For details about each option, see below.\n     *\n     * 'URL' - Metadata provided via a URL.\n     * 'FILE' - Metadata provided via the contents of a file.\n     */\n    metadataType: 'URL' | 'FILE';\n  };\n} & IdentityProviderProps;\n\n/**\n * External provider options.\n */\nexport type ExternalProviderOptions = {\n  /**\n   * Google OAuth Settings\n   */\n  google?: GoogleProviderProps;\n  /**\n   * Facebook OAuth Settings\n   */\n  facebook?: FacebookProviderProps;\n  /**\n   * LoginWithAmazon Settings\n   */\n  loginWithAmazon?: AmazonProviderProps;\n  /**\n   * SignInWithApple Settings\n   */\n  signInWithApple?: AppleProviderProps;\n  /**\n   * OIDC Settings\n   */\n  oidc?: OidcProviderProps[];\n  /**\n   * SAML Settings\n   */\n  saml?: SamlProviderProps;\n  /**\n   * OAuth scopes that will be allowed with the app client.\n   * @example ['PROFILE']\n   *\n   * For details about each scope, see below.\n   *\n   * 'PHONE' - Grants access to the 'phone_number' and 'phone_number_verified' claims.\n   * Automatically includes access to `OAuthScope.OPENID`.\n   *\n   * 'EMAIL' - Grants access to the 'email' and 'email_verified' claims.\n   * Automatically includes access to `OAuthScope.OPENID`.\n   *\n   * 'OPENID' - Returns all user attributes in the ID token that are readable by the client\n   *\n   * 'PROFILE' - Grants access to all user attributes that are readable by the client\n   * Automatically includes access to `OAuthScope.OPENID`.\n   *\n   * 'COGNITO_ADMIN' - Grants access to Amazon Cognito User Pool API operations that require access tokens,\n   * such as UpdateUserAttributes and VerifyUserAttribute.\n   */\n  scopes?: ('PHONE' | 'EMAIL' | 'OPENID' | 'PROFILE' | 'COGNITO_ADMIN')[];\n  /**\n   * List of allowed redirect URLs for the identity providers.\n   */\n  callbackUrls: string[];\n  /**\n   * You must provide a unique domain prefix for the Hosted UI that Cognito will use for external login providers.\n   * If you do not provide a domain prefix, it will not be configured, and some external login flows will not work.\n   *\n   * NOTE: If you need to update this in the future, you must first unset it, then deploy the change to remove the domain\n   * from the UserPool. After the domain has been removed, you can then provide a new value, and perform another deployment.\n   */\n  domainPrefix?: string;\n  /**\n   * List of allowed logout URLs for the identity providers.\n   */\n  logoutUrls: string[];\n};\n\n/**\n * Union type of all supported auth trigger events\n */\nexport type TriggerEvent = (typeof triggerEvents)[number];\n\n/**\n * CustomAttributeBase is a type that represents the base properties for a custom attribute\n */\nexport type CustomAttributeBase = {\n  /**\n   * @default {true}\n   */\n  mutable?: boolean;\n};\n/**\n * CustomAttributeString represents a custom attribute of type string.\n */\nexport type CustomAttributeString = CustomAttributeBase &\n  StringAttributeConstraints & {\n    dataType: 'String';\n  };\n/**\n * CustomAttributeNumber represents a custom attribute of type number.\n */\nexport type CustomAttributeNumber = CustomAttributeBase &\n  NumberAttributeConstraints & {\n    dataType: 'Number';\n  };\n/**\n * CustomAttributeBoolean represents a custom attribute of type boolean.\n */\nexport type CustomAttributeBoolean = CustomAttributeBase & {\n  dataType: 'Boolean';\n};\n/**\n * CustomAttributeDateTime represents a custom attribute of type dataTime.\n */\nexport type CustomAttributeDateTime = CustomAttributeBase & {\n  dataType: 'DateTime';\n};\n/**\n * CustomAttributes is a union type that represents all the different types of custom attributes.\n */\nexport type CustomAttribute =\n  | CustomAttributeString\n  | CustomAttributeNumber\n  | CustomAttributeBoolean\n  | CustomAttributeDateTime;\n/**\n * UserAttributes represents the combined attributes of a user, including\n * standard attributes and any number of custom attributes defined with a 'custom:' prefix.\n */\nexport type UserAttributes = StandardAttributes &\n  Record<`custom:${string}`, CustomAttribute>;\n\n/**\n * Input props for the AmplifyAuth construct\n */\nexport type AuthProps = {\n  /**\n   * Specify a name which will aid in generating resource names.\n   */\n  name?: string;\n  /**\n   * Specify how you would like users to log in. You can choose from email, phone, and even external providers such as LoginWithAmazon.\n   */\n  loginWith: {\n    /**\n     * Email login options.\n     *\n     * If true, email login will be enabled with default settings.\n     * If settings are provided, email login will be enabled with the specified settings.\n     */\n    email?: EmailLogin;\n    /**\n     * Phone number login options.\n     *\n     * If true, phone number login will be enabled with default settings.\n     * If settings are provided, phone number login will be enabled with the specified settings.\n     */\n    phone?: PhoneNumberLogin;\n    /**\n     * Configure OAuth, OIDC, and SAML login providers\n     */\n    externalProviders?: ExternalProviderOptions;\n  };\n  /**\n   * Configure sending behaviors for Emails or SMS messages sent from your auth resource\n   * @see https://docs.amplify.aws/react/build-a-backend/auth/customize-auth-lifecycle/email-customization/#custom-senders\n   */\n  senders?: {\n    /**\n     * Configure Cognito to send emails from SES\n     * SES configurations enable the use of customized email sender addresses and names\n     * @see https://docs.amplify.aws/react/build-a-backend/auth/moving-to-production/#email\n     */\n    email: Pick<UserPoolSESOptions, 'fromEmail' | 'fromName' | 'replyTo'>;\n  };\n  /**\n   * The set of attributes that are required for every user in the user pool. Read more on attributes here - https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html\n   * @default - email/phone will be added as required user attributes if they are included as login methods\n   */\n  userAttributes?: UserAttributes;\n  /**\n   * Configure whether users can or are required to use multifactor (MFA) to sign in.\n   */\n  multifactor?: MFA;\n  /**\n   * Determined how a user is able to recover their account by setting the account recovery setting.\n   *\n   * If no setting is provided, a default will be set based on the enabled login methods.\n   * When email and phone login methods are both enabled, email will be the default recovery method.\n   * If only email or phone are enabled, they will be the default recovery methods.\n   * @example\n   * \"EMAIL_ONLY\"\n   *\n   * For details about each option, see below.\n   *\n   * 'EMAIL_AND_PHONE_WITHOUT_MFA' - Email if available, otherwise phone, but does not allow a user to reset their password via phone if they are also using it for MFA\n   *\n   * 'PHONE_WITHOUT_MFA_AND_EMAIL' - Phone if available, otherwise email, but does not allow a user to reset their password via phone if they are also using it for MFA\n   *\n   * 'EMAIL_ONLY' - Email only\n   *\n   * 'PHONE_ONLY_WITHOUT_MFA' - Phone only, but does not allow a user to reset their password via phone if they are also using it for MFA\n   *\n   * 'PHONE_AND_EMAIL' - (Not Recommended) Phone if available, otherwise email, and do allow a user to reset their password via phone if they are also using it for MFA.\n   *\n   * 'NONE' - None – users will have to contact an administrator to reset their passwords\n   */\n  accountRecovery?: keyof typeof cognito.AccountRecovery;\n  /**\n   * Provide a list of user group names to create UserPoolGroups.\n   *\n   * Group precedence is determined by the ordering of the groups in the list.\n   * @example\n   * ['admins']\n   *\n   * Group roles will be generated without any permissions, but you can configure permissions by accessing the generated roles and attaching policies to them.\n   *\n   * auth.resources.groups['admins'].role.addToPrincipalPolicy(new PolicyStatement({...}))\n   */\n  groups?: string[];\n\n  /**\n   * @internal\n   */\n  outputStorageStrategy?: BackendOutputStorageStrategy<AuthOutput>;\n};\n"]}