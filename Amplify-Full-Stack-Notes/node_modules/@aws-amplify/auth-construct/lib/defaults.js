"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULTS = void 0;
/**
 * These are the Amplify provided default values for Auth.
 */
exports.DEFAULTS = {
    /**
     * Default Auth Props if customer does not provide any.
     */
    IF_NO_PROPS_PROVIDED: { loginWith: { email: true } },
    /**
     * Sign in case sensitivity
     */
    SIGN_IN_CASE_SENSITIVE: false,
    /**
     * Specifies if users can sign up on their own.
     * If set to false, users will not be able to register, and will require an admin to create
     * their account.
     */
    ALLOW_SELF_SIGN_UP: true,
    /**
     * Specifies whether the identity pool should support unauthenticated identities
     */
    ALLOW_UNAUTHENTICATED_IDENTITIES: true,
    /**
     * Specifies whether user existence errors should be shown.
     * Enabling this protects users as it does not allow attackers to know if users
     * are created in the backend.
     */
    PREVENT_USER_EXISTENCE_ERRORS: true,
    /**
     * Default password policy
     */
    PASSWORD_POLICY: {
        minLength: 8,
        requireLowercase: true,
        requireUppercase: true,
        requireDigits: true,
        requireSymbols: true,
    },
    /**
     * Specifies if SRP or custom logins should be enabled.
     */
    AUTH_FLOWS: {
        userSrp: true,
        custom: true,
    },
    /**
     * Default OAUTH flows for the UserPool
     */
    OAUTH_FLOWS: {
        authorizationCodeGrant: true,
        implicitCodeGrant: false,
    },
    /**
     * Specifies if attributes are required for signup/login, may depend on which settings are enabled.
     */
    IS_REQUIRED_ATTRIBUTE: {
        email: (emailEnabled) => emailEnabled ? { required: true, mutable: true } : undefined,
        phoneNumber: (phoneNumberEnabled) => phoneNumberEnabled ? { required: true, mutable: true } : undefined,
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZGVmYXVsdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUE7O0dBRUc7QUFDVSxRQUFBLFFBQVEsR0FBRztJQUN0Qjs7T0FFRztJQUNILG9CQUFvQixFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFlO0lBQ2pFOztPQUVHO0lBQ0gsc0JBQXNCLEVBQUUsS0FBSztJQUM3Qjs7OztPQUlHO0lBQ0gsa0JBQWtCLEVBQUUsSUFBSTtJQUN4Qjs7T0FFRztJQUNILGdDQUFnQyxFQUFFLElBQUk7SUFDdEM7Ozs7T0FJRztJQUNILDZCQUE2QixFQUFFLElBQUk7SUFDbkM7O09BRUc7SUFDSCxlQUFlLEVBQUU7UUFDZixTQUFTLEVBQUUsQ0FBQztRQUNaLGdCQUFnQixFQUFFLElBQUk7UUFDdEIsZ0JBQWdCLEVBQUUsSUFBSTtRQUN0QixhQUFhLEVBQUUsSUFBSTtRQUNuQixjQUFjLEVBQUUsSUFBSTtLQUNyQjtJQUNEOztPQUVHO0lBQ0gsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLElBQUk7UUFDYixNQUFNLEVBQUUsSUFBSTtLQUNiO0lBQ0Q7O09BRUc7SUFDSCxXQUFXLEVBQUU7UUFDWCxzQkFBc0IsRUFBRSxJQUFJO1FBQzVCLGlCQUFpQixFQUFFLEtBQUs7S0FDekI7SUFDRDs7T0FFRztJQUNILHFCQUFxQixFQUFFO1FBQ3JCLEtBQUssRUFBRSxDQUFDLFlBQXFCLEVBQUUsRUFBRSxDQUMvQixZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVM7UUFDOUQsV0FBVyxFQUFFLENBQUMsa0JBQTJCLEVBQUUsRUFBRSxDQUMzQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUztLQUNyRTtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdXRoUHJvcHMgfSBmcm9tICcuL3R5cGVzLmpzJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgdGhlIEFtcGxpZnkgcHJvdmlkZWQgZGVmYXVsdCB2YWx1ZXMgZm9yIEF1dGguXG4gKi9cbmV4cG9ydCBjb25zdCBERUZBVUxUUyA9IHtcbiAgLyoqXG4gICAqIERlZmF1bHQgQXV0aCBQcm9wcyBpZiBjdXN0b21lciBkb2VzIG5vdCBwcm92aWRlIGFueS5cbiAgICovXG4gIElGX05PX1BST1BTX1BST1ZJREVEOiB7IGxvZ2luV2l0aDogeyBlbWFpbDogdHJ1ZSB9IH0gYXMgQXV0aFByb3BzLFxuICAvKipcbiAgICogU2lnbiBpbiBjYXNlIHNlbnNpdGl2aXR5XG4gICAqL1xuICBTSUdOX0lOX0NBU0VfU0VOU0lUSVZFOiBmYWxzZSxcbiAgLyoqXG4gICAqIFNwZWNpZmllcyBpZiB1c2VycyBjYW4gc2lnbiB1cCBvbiB0aGVpciBvd24uXG4gICAqIElmIHNldCB0byBmYWxzZSwgdXNlcnMgd2lsbCBub3QgYmUgYWJsZSB0byByZWdpc3RlciwgYW5kIHdpbGwgcmVxdWlyZSBhbiBhZG1pbiB0byBjcmVhdGVcbiAgICogdGhlaXIgYWNjb3VudC5cbiAgICovXG4gIEFMTE9XX1NFTEZfU0lHTl9VUDogdHJ1ZSxcbiAgLyoqXG4gICAqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBpZGVudGl0eSBwb29sIHNob3VsZCBzdXBwb3J0IHVuYXV0aGVudGljYXRlZCBpZGVudGl0aWVzXG4gICAqL1xuICBBTExPV19VTkFVVEhFTlRJQ0FURURfSURFTlRJVElFUzogdHJ1ZSxcbiAgLyoqXG4gICAqIFNwZWNpZmllcyB3aGV0aGVyIHVzZXIgZXhpc3RlbmNlIGVycm9ycyBzaG91bGQgYmUgc2hvd24uXG4gICAqIEVuYWJsaW5nIHRoaXMgcHJvdGVjdHMgdXNlcnMgYXMgaXQgZG9lcyBub3QgYWxsb3cgYXR0YWNrZXJzIHRvIGtub3cgaWYgdXNlcnNcbiAgICogYXJlIGNyZWF0ZWQgaW4gdGhlIGJhY2tlbmQuXG4gICAqL1xuICBQUkVWRU5UX1VTRVJfRVhJU1RFTkNFX0VSUk9SUzogdHJ1ZSxcbiAgLyoqXG4gICAqIERlZmF1bHQgcGFzc3dvcmQgcG9saWN5XG4gICAqL1xuICBQQVNTV09SRF9QT0xJQ1k6IHtcbiAgICBtaW5MZW5ndGg6IDgsXG4gICAgcmVxdWlyZUxvd2VyY2FzZTogdHJ1ZSxcbiAgICByZXF1aXJlVXBwZXJjYXNlOiB0cnVlLFxuICAgIHJlcXVpcmVEaWdpdHM6IHRydWUsXG4gICAgcmVxdWlyZVN5bWJvbHM6IHRydWUsXG4gIH0sXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgaWYgU1JQIG9yIGN1c3RvbSBsb2dpbnMgc2hvdWxkIGJlIGVuYWJsZWQuXG4gICAqL1xuICBBVVRIX0ZMT1dTOiB7XG4gICAgdXNlclNycDogdHJ1ZSxcbiAgICBjdXN0b206IHRydWUsXG4gIH0sXG4gIC8qKlxuICAgKiBEZWZhdWx0IE9BVVRIIGZsb3dzIGZvciB0aGUgVXNlclBvb2xcbiAgICovXG4gIE9BVVRIX0ZMT1dTOiB7XG4gICAgYXV0aG9yaXphdGlvbkNvZGVHcmFudDogdHJ1ZSxcbiAgICBpbXBsaWNpdENvZGVHcmFudDogZmFsc2UsXG4gIH0sXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgaWYgYXR0cmlidXRlcyBhcmUgcmVxdWlyZWQgZm9yIHNpZ251cC9sb2dpbiwgbWF5IGRlcGVuZCBvbiB3aGljaCBzZXR0aW5ncyBhcmUgZW5hYmxlZC5cbiAgICovXG4gIElTX1JFUVVJUkVEX0FUVFJJQlVURToge1xuICAgIGVtYWlsOiAoZW1haWxFbmFibGVkOiBib29sZWFuKSA9PlxuICAgICAgZW1haWxFbmFibGVkID8geyByZXF1aXJlZDogdHJ1ZSwgbXV0YWJsZTogdHJ1ZSB9IDogdW5kZWZpbmVkLFxuICAgIHBob25lTnVtYmVyOiAocGhvbmVOdW1iZXJFbmFibGVkOiBib29sZWFuKSA9PlxuICAgICAgcGhvbmVOdW1iZXJFbmFibGVkID8geyByZXF1aXJlZDogdHJ1ZSwgbXV0YWJsZTogdHJ1ZSB9IDogdW5kZWZpbmVkLFxuICB9LFxufTtcbiJdfQ==