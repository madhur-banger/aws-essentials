import debounce from 'debounce-promise';
import { LogLevel } from '@aws-amplify/cli-core';
/**
 * Execute CDK commands.
 */
export class AmplifySandboxExecutor {
    backendDeployer;
    secretClient;
    printer;
    /**
     * Function that invokes the callback with debounce.
     * Debounce is needed in case multiple duplicate events are received.
     */
    invoke = debounce(async (callback) => await callback(), 100);
    /**
     * Creates an AmplifySandboxExecutor instance
     */
    constructor(backendDeployer, secretClient, printer) {
        this.backendDeployer = backendDeployer;
        this.secretClient = secretClient;
        this.printer = printer;
    }
    /**
     * Deploys sandbox
     */
    deploy = async (backendId, validateAppSourcesProvider, profile) => {
        this.printer.log('[Sandbox] Executing command `deploy`', LogLevel.DEBUG);
        const secretLastUpdated = await this.getSecretLastUpdated(backendId);
        return this.invoke(() => {
            // it's important to get information here so that information
            // doesn't get lost while debouncing
            const validateAppSources = validateAppSourcesProvider();
            return this.backendDeployer.deploy(backendId, {
                secretLastUpdated,
                validateAppSources,
                profile,
            });
        });
    };
    /**
     * Destroy sandbox. Do not swallow errors
     */
    destroy = (backendId, profile) => {
        this.printer.log('[Sandbox] Executing command `destroy`', LogLevel.DEBUG);
        return this.invoke(() => this.backendDeployer.destroy(backendId, {
            profile,
        }));
    };
    getSecretLastUpdated = async (backendId) => {
        const secrets = await this.secretClient.listSecrets(backendId);
        let latestTimestamp = -1;
        let secretLastUpdate;
        secrets.forEach((secret) => {
            if (!secret.lastUpdated) {
                return;
            }
            const curTimeStamp = secret.lastUpdated.getTime();
            if (curTimeStamp > 0 && curTimeStamp > latestTimestamp) {
                latestTimestamp = curTimeStamp;
                secretLastUpdate = secret.lastUpdated;
            }
        });
        return secretLastUpdate;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zYW5kYm94X2V4ZWN1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sUUFBUSxNQUFNLGtCQUFrQixDQUFDO0FBUXhDLE9BQU8sRUFBRSxRQUFRLEVBQVcsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRDs7R0FFRztBQUNILE1BQU0sT0FBTyxzQkFBc0I7SUFnQmQ7SUFDQTtJQUNBO0lBakJuQjs7O09BR0c7SUFDSyxNQUFNLEdBQUcsUUFBUSxDQUN2QixLQUFLLEVBQ0gsUUFBcUQsRUFDZCxFQUFFLENBQUMsTUFBTSxRQUFRLEVBQUUsRUFDNUQsR0FBRyxDQUNKLENBQUM7SUFFRjs7T0FFRztJQUNILFlBQ21CLGVBQWdDLEVBQ2hDLFlBQTBCLEVBQzFCLE9BQWdCO1FBRmhCLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUNoQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixZQUFPLEdBQVAsT0FBTyxDQUFTO0lBQ2hDLENBQUM7SUFFSjs7T0FFRztJQUNILE1BQU0sR0FBRyxLQUFLLEVBQ1osU0FBNEIsRUFDNUIsMEJBQXlDLEVBQ3pDLE9BQTJCLEVBQ0osRUFBRTtRQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQ0FBc0MsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekUsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVyRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ3RCLDZEQUE2RDtZQUM3RCxvQ0FBb0M7WUFDcEMsTUFBTSxrQkFBa0IsR0FBRywwQkFBMEIsRUFBRSxDQUFDO1lBQ3hELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO2dCQUM1QyxpQkFBaUI7Z0JBQ2pCLGtCQUFrQjtnQkFDbEIsT0FBTzthQUNSLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBRUY7O09BRUc7SUFDSCxPQUFPLEdBQUcsQ0FDUixTQUE0QixFQUM1QixPQUEyQixFQUNILEVBQUU7UUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUNBQXVDLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FDdEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFO1lBQ3RDLE9BQU87U0FDUixDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVNLG9CQUFvQixHQUFHLEtBQUssRUFDbEMsU0FBNEIsRUFDRCxFQUFFO1FBQzdCLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0QsSUFBSSxlQUFlLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDekIsSUFBSSxnQkFBa0MsQ0FBQztRQUV2QyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUU7Z0JBQ3ZCLE9BQU87YUFDUjtZQUNELE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDbEQsSUFBSSxZQUFZLEdBQUcsQ0FBQyxJQUFJLFlBQVksR0FBRyxlQUFlLEVBQUU7Z0JBQ3RELGVBQWUsR0FBRyxZQUFZLENBQUM7Z0JBQy9CLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7YUFDdkM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sZ0JBQWdCLENBQUM7SUFDMUIsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVib3VuY2UgZnJvbSAnZGVib3VuY2UtcHJvbWlzZSc7XG5pbXBvcnQgeyBCYWNrZW5kSWRlbnRpZmllciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHtcbiAgQmFja2VuZERlcGxveWVyLFxuICBEZXBsb3lSZXN1bHQsXG4gIERlc3Ryb3lSZXN1bHQsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLWRlcGxveWVyJztcbmltcG9ydCB7IFNlY3JldENsaWVudCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLXNlY3JldCc7XG5pbXBvcnQgeyBMb2dMZXZlbCwgUHJpbnRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5cbi8qKlxuICogRXhlY3V0ZSBDREsgY29tbWFuZHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBBbXBsaWZ5U2FuZGJveEV4ZWN1dG9yIHtcbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgY2FsbGJhY2sgd2l0aCBkZWJvdW5jZS5cbiAgICogRGVib3VuY2UgaXMgbmVlZGVkIGluIGNhc2UgbXVsdGlwbGUgZHVwbGljYXRlIGV2ZW50cyBhcmUgcmVjZWl2ZWQuXG4gICAqL1xuICBwcml2YXRlIGludm9rZSA9IGRlYm91bmNlKFxuICAgIGFzeW5jIChcbiAgICAgIGNhbGxiYWNrOiAoKSA9PiBQcm9taXNlPERlcGxveVJlc3VsdCB8IERlc3Ryb3lSZXN1bHQ+XG4gICAgKTogUHJvbWlzZTxEZXBsb3lSZXN1bHQgfCBEZXN0cm95UmVzdWx0PiA9PiBhd2FpdCBjYWxsYmFjaygpLFxuICAgIDEwMFxuICApO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIEFtcGxpZnlTYW5kYm94RXhlY3V0b3IgaW5zdGFuY2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYmFja2VuZERlcGxveWVyOiBCYWNrZW5kRGVwbG95ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBzZWNyZXRDbGllbnQ6IFNlY3JldENsaWVudCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByaW50ZXI6IFByaW50ZXJcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBEZXBsb3lzIHNhbmRib3hcbiAgICovXG4gIGRlcGxveSA9IGFzeW5jIChcbiAgICBiYWNrZW5kSWQ6IEJhY2tlbmRJZGVudGlmaWVyLFxuICAgIHZhbGlkYXRlQXBwU291cmNlc1Byb3ZpZGVyOiAoKSA9PiBib29sZWFuLFxuICAgIHByb2ZpbGU6IHN0cmluZyB8IHVuZGVmaW5lZFxuICApOiBQcm9taXNlPERlcGxveVJlc3VsdD4gPT4ge1xuICAgIHRoaXMucHJpbnRlci5sb2coJ1tTYW5kYm94XSBFeGVjdXRpbmcgY29tbWFuZCBgZGVwbG95YCcsIExvZ0xldmVsLkRFQlVHKTtcbiAgICBjb25zdCBzZWNyZXRMYXN0VXBkYXRlZCA9IGF3YWl0IHRoaXMuZ2V0U2VjcmV0TGFzdFVwZGF0ZWQoYmFja2VuZElkKTtcblxuICAgIHJldHVybiB0aGlzLmludm9rZSgoKSA9PiB7XG4gICAgICAvLyBpdCdzIGltcG9ydGFudCB0byBnZXQgaW5mb3JtYXRpb24gaGVyZSBzbyB0aGF0IGluZm9ybWF0aW9uXG4gICAgICAvLyBkb2Vzbid0IGdldCBsb3N0IHdoaWxlIGRlYm91bmNpbmdcbiAgICAgIGNvbnN0IHZhbGlkYXRlQXBwU291cmNlcyA9IHZhbGlkYXRlQXBwU291cmNlc1Byb3ZpZGVyKCk7XG4gICAgICByZXR1cm4gdGhpcy5iYWNrZW5kRGVwbG95ZXIuZGVwbG95KGJhY2tlbmRJZCwge1xuICAgICAgICBzZWNyZXRMYXN0VXBkYXRlZCxcbiAgICAgICAgdmFsaWRhdGVBcHBTb3VyY2VzLFxuICAgICAgICBwcm9maWxlLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIERlc3Ryb3kgc2FuZGJveC4gRG8gbm90IHN3YWxsb3cgZXJyb3JzXG4gICAqL1xuICBkZXN0cm95ID0gKFxuICAgIGJhY2tlbmRJZDogQmFja2VuZElkZW50aWZpZXIsXG4gICAgcHJvZmlsZTogc3RyaW5nIHwgdW5kZWZpbmVkXG4gICk6IFByb21pc2U8RGVzdHJveVJlc3VsdD4gPT4ge1xuICAgIHRoaXMucHJpbnRlci5sb2coJ1tTYW5kYm94XSBFeGVjdXRpbmcgY29tbWFuZCBgZGVzdHJveWAnLCBMb2dMZXZlbC5ERUJVRyk7XG4gICAgcmV0dXJuIHRoaXMuaW52b2tlKCgpID0+XG4gICAgICB0aGlzLmJhY2tlbmREZXBsb3llci5kZXN0cm95KGJhY2tlbmRJZCwge1xuICAgICAgICBwcm9maWxlLFxuICAgICAgfSlcbiAgICApO1xuICB9O1xuXG4gIHByaXZhdGUgZ2V0U2VjcmV0TGFzdFVwZGF0ZWQgPSBhc3luYyAoXG4gICAgYmFja2VuZElkOiBCYWNrZW5kSWRlbnRpZmllclxuICApOiBQcm9taXNlPERhdGUgfCB1bmRlZmluZWQ+ID0+IHtcbiAgICBjb25zdCBzZWNyZXRzID0gYXdhaXQgdGhpcy5zZWNyZXRDbGllbnQubGlzdFNlY3JldHMoYmFja2VuZElkKTtcbiAgICBsZXQgbGF0ZXN0VGltZXN0YW1wID0gLTE7XG4gICAgbGV0IHNlY3JldExhc3RVcGRhdGU6IERhdGUgfCB1bmRlZmluZWQ7XG5cbiAgICBzZWNyZXRzLmZvckVhY2goKHNlY3JldCkgPT4ge1xuICAgICAgaWYgKCFzZWNyZXQubGFzdFVwZGF0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgY3VyVGltZVN0YW1wID0gc2VjcmV0Lmxhc3RVcGRhdGVkLmdldFRpbWUoKTtcbiAgICAgIGlmIChjdXJUaW1lU3RhbXAgPiAwICYmIGN1clRpbWVTdGFtcCA+IGxhdGVzdFRpbWVzdGFtcCkge1xuICAgICAgICBsYXRlc3RUaW1lc3RhbXAgPSBjdXJUaW1lU3RhbXA7XG4gICAgICAgIHNlY3JldExhc3RVcGRhdGUgPSBzZWNyZXQubGFzdFVwZGF0ZWQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2VjcmV0TGFzdFVwZGF0ZTtcbiAgfTtcbn1cbiJdfQ==