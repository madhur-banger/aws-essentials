import { PackageManagerControllerFactory, } from '@aws-amplify/cli-core';
import { FileWatchingSandbox } from './file_watching_sandbox.js';
import { BackendDeployerFactory } from '@aws-amplify/backend-deployer';
import { AmplifySandboxExecutor } from './sandbox_executor.js';
import { SSMClient } from '@aws-sdk/client-ssm';
import { getSecretClientWithAmplifyErrorHandling } from '@aws-amplify/backend-secret';
import { CloudWatchLogsClient } from '@aws-sdk/client-cloudwatch-logs';
import { LambdaClient } from '@aws-sdk/client-lambda';
import { BackendOutputClientFactory } from '@aws-amplify/deployed-backend-client';
import { LambdaFunctionLogStreamer } from './lambda_function_log_streamer.js';
import { CloudWatchLogEventMonitor } from './cloudwatch_logs_monitor.js';
/**
 * Factory to create a new sandbox
 */
export class SandboxSingletonFactory {
    sandboxIdResolver;
    printer;
    format;
    instance;
    /**
     * sandboxIdResolver allows sandbox to lazily load the sandbox backend id on demand
     */
    constructor(sandboxIdResolver, printer, format) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.printer = printer;
        this.format = format;
    }
    /**
     * Returns a singleton instance of a Sandbox
     */
    getInstance = async () => {
        if (!this.instance) {
            const packageManagerControllerFactory = new PackageManagerControllerFactory(process.cwd(), this.printer);
            const backendDeployerFactory = new BackendDeployerFactory(packageManagerControllerFactory.getPackageManagerController(), this.format);
            this.instance = new FileWatchingSandbox(this.sandboxIdResolver, new AmplifySandboxExecutor(backendDeployerFactory.getInstance(), getSecretClientWithAmplifyErrorHandling(), this.printer), new SSMClient(), new LambdaFunctionLogStreamer(new LambdaClient(), new CloudWatchLogEventMonitor(new CloudWatchLogsClient()), BackendOutputClientFactory.getInstance(), this.printer), this.printer);
        }
        return this.instance;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zaW5nbGV0b25fZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zYW5kYm94X3NpbmdsZXRvbl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCwrQkFBK0IsR0FFaEMsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVqRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN2RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDaEQsT0FBTyxFQUFFLHVDQUF1QyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDdkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRXpFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHVCQUF1QjtJQU1mO0lBQ0E7SUFDQTtJQVBYLFFBQVEsQ0FBc0I7SUFDdEM7O09BRUc7SUFDSCxZQUNtQixpQkFBMkMsRUFDM0MsT0FBZ0IsRUFDaEIsTUFBYztRQUZkLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBMEI7UUFDM0MsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUNoQixXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQzlCLENBQUM7SUFFSjs7T0FFRztJQUNILFdBQVcsR0FBRyxLQUFLLElBQXNCLEVBQUU7UUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsTUFBTSwrQkFBK0IsR0FDbkMsSUFBSSwrQkFBK0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ25FLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxzQkFBc0IsQ0FDdkQsK0JBQStCLENBQUMsMkJBQTJCLEVBQUUsRUFDN0QsSUFBSSxDQUFDLE1BQU0sQ0FDWixDQUFDO1lBQ0YsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLG1CQUFtQixDQUNyQyxJQUFJLENBQUMsaUJBQWlCLEVBQ3RCLElBQUksc0JBQXNCLENBQ3hCLHNCQUFzQixDQUFDLFdBQVcsRUFBRSxFQUNwQyx1Q0FBdUMsRUFBRSxFQUN6QyxJQUFJLENBQUMsT0FBTyxDQUNiLEVBQ0QsSUFBSSxTQUFTLEVBQUUsRUFDZixJQUFJLHlCQUF5QixDQUMzQixJQUFJLFlBQVksRUFBRSxFQUNsQixJQUFJLHlCQUF5QixDQUFDLElBQUksb0JBQW9CLEVBQUUsQ0FBQyxFQUN6RCwwQkFBMEIsQ0FBQyxXQUFXLEVBQUUsRUFDeEMsSUFBSSxDQUFDLE9BQU8sQ0FDYixFQUNELElBQUksQ0FBQyxPQUFPLENBQ2IsQ0FBQztTQUNIO1FBQ0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRm9ybWF0LFxuICBQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXJGYWN0b3J5LFxuICBQcmludGVyLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuaW1wb3J0IHsgRmlsZVdhdGNoaW5nU2FuZGJveCB9IGZyb20gJy4vZmlsZV93YXRjaGluZ19zYW5kYm94LmpzJztcbmltcG9ydCB7IEJhY2tlbmRJZFNhbmRib3hSZXNvbHZlciwgU2FuZGJveCB9IGZyb20gJy4vc2FuZGJveC5qcyc7XG5pbXBvcnQgeyBCYWNrZW5kRGVwbG95ZXJGYWN0b3J5IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtZGVwbG95ZXInO1xuaW1wb3J0IHsgQW1wbGlmeVNhbmRib3hFeGVjdXRvciB9IGZyb20gJy4vc2FuZGJveF9leGVjdXRvci5qcyc7XG5pbXBvcnQgeyBTU01DbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtc3NtJztcbmltcG9ydCB7IGdldFNlY3JldENsaWVudFdpdGhBbXBsaWZ5RXJyb3JIYW5kbGluZyB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLXNlY3JldCc7XG5pbXBvcnQgeyBDbG91ZFdhdGNoTG9nc0NsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1jbG91ZHdhdGNoLWxvZ3MnO1xuaW1wb3J0IHsgTGFtYmRhQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWxhbWJkYSc7XG5pbXBvcnQgeyBCYWNrZW5kT3V0cHV0Q2xpZW50RmFjdG9yeSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9kZXBsb3llZC1iYWNrZW5kLWNsaWVudCc7XG5pbXBvcnQgeyBMYW1iZGFGdW5jdGlvbkxvZ1N0cmVhbWVyIH0gZnJvbSAnLi9sYW1iZGFfZnVuY3Rpb25fbG9nX3N0cmVhbWVyLmpzJztcbmltcG9ydCB7IENsb3VkV2F0Y2hMb2dFdmVudE1vbml0b3IgfSBmcm9tICcuL2Nsb3Vkd2F0Y2hfbG9nc19tb25pdG9yLmpzJztcblxuLyoqXG4gKiBGYWN0b3J5IHRvIGNyZWF0ZSBhIG5ldyBzYW5kYm94XG4gKi9cbmV4cG9ydCBjbGFzcyBTYW5kYm94U2luZ2xldG9uRmFjdG9yeSB7XG4gIHByaXZhdGUgaW5zdGFuY2U6IFNhbmRib3ggfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBzYW5kYm94SWRSZXNvbHZlciBhbGxvd3Mgc2FuZGJveCB0byBsYXppbHkgbG9hZCB0aGUgc2FuZGJveCBiYWNrZW5kIGlkIG9uIGRlbWFuZFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBzYW5kYm94SWRSZXNvbHZlcjogQmFja2VuZElkU2FuZGJveFJlc29sdmVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJpbnRlcjogUHJpbnRlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZvcm1hdDogRm9ybWF0XG4gICkge31cblxuICAvKipcbiAgICogUmV0dXJucyBhIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiBhIFNhbmRib3hcbiAgICovXG4gIGdldEluc3RhbmNlID0gYXN5bmMgKCk6IFByb21pc2U8U2FuZGJveD4gPT4ge1xuICAgIGlmICghdGhpcy5pbnN0YW5jZSkge1xuICAgICAgY29uc3QgcGFja2FnZU1hbmFnZXJDb250cm9sbGVyRmFjdG9yeSA9XG4gICAgICAgIG5ldyBQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXJGYWN0b3J5KHByb2Nlc3MuY3dkKCksIHRoaXMucHJpbnRlcik7XG4gICAgICBjb25zdCBiYWNrZW5kRGVwbG95ZXJGYWN0b3J5ID0gbmV3IEJhY2tlbmREZXBsb3llckZhY3RvcnkoXG4gICAgICAgIHBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3RvcnkuZ2V0UGFja2FnZU1hbmFnZXJDb250cm9sbGVyKCksXG4gICAgICAgIHRoaXMuZm9ybWF0XG4gICAgICApO1xuICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBGaWxlV2F0Y2hpbmdTYW5kYm94KFxuICAgICAgICB0aGlzLnNhbmRib3hJZFJlc29sdmVyLFxuICAgICAgICBuZXcgQW1wbGlmeVNhbmRib3hFeGVjdXRvcihcbiAgICAgICAgICBiYWNrZW5kRGVwbG95ZXJGYWN0b3J5LmdldEluc3RhbmNlKCksXG4gICAgICAgICAgZ2V0U2VjcmV0Q2xpZW50V2l0aEFtcGxpZnlFcnJvckhhbmRsaW5nKCksXG4gICAgICAgICAgdGhpcy5wcmludGVyXG4gICAgICAgICksXG4gICAgICAgIG5ldyBTU01DbGllbnQoKSxcbiAgICAgICAgbmV3IExhbWJkYUZ1bmN0aW9uTG9nU3RyZWFtZXIoXG4gICAgICAgICAgbmV3IExhbWJkYUNsaWVudCgpLFxuICAgICAgICAgIG5ldyBDbG91ZFdhdGNoTG9nRXZlbnRNb25pdG9yKG5ldyBDbG91ZFdhdGNoTG9nc0NsaWVudCgpKSxcbiAgICAgICAgICBCYWNrZW5kT3V0cHV0Q2xpZW50RmFjdG9yeS5nZXRJbnN0YW5jZSgpLFxuICAgICAgICAgIHRoaXMucHJpbnRlclxuICAgICAgICApLFxuICAgICAgICB0aGlzLnByaW50ZXJcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xuICB9O1xufVxuIl19