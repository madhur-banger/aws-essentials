/// <reference types="node" resolution-mode="require"/>
import { AmplifySandboxExecutor } from './sandbox_executor.js';
import { BackendIdSandboxResolver, Sandbox, SandboxDeleteOptions, SandboxEvents, SandboxOptions } from './sandbox.js';
import _open from 'open';
import EventEmitter from 'events';
import { SSMClient } from '@aws-sdk/client-ssm';
import { Printer } from '@aws-amplify/cli-core';
import { LambdaFunctionLogStreamer } from './lambda_function_log_streamer.js';
/**
 * CDK stores bootstrap version in parameter store. Example parameter name looks like /cdk-bootstrap/<qualifier>/version.
 * The default value for qualifier is hnb659fds, i.e. default parameter path is /cdk-bootstrap/hnb659fds/version.
 * The default qualifier is hardcoded value without any significance.
 * Ability to provide custom qualifier is intended for name isolation between automated tests of the CDK itself.
 * In order to use custom qualifier all stack synthesizers must be programmatically configured to use it.
 * That makes bootstraps with custom qualifier incompatible with Amplify Backend and we treat that setup as
 * not bootstrapped.
 * See: https://docs.aws.amazon.com/cdk/v2/guide/bootstrapping.html
 */
export declare const CDK_DEFAULT_BOOTSTRAP_VERSION_PARAMETER_NAME = "/cdk-bootstrap/hnb659fds/version";
export declare const CDK_MIN_BOOTSTRAP_VERSION = 6;
/**
 * Constructs Amplify Console bootstrap URL for a given region
 * @param region AWS region
 * @returns Amplify Console bootstrap URL
 */
export declare const getBootstrapUrl: (region: string) => string;
/**
 * Runs a file watcher and deploys
 */
export declare class FileWatchingSandbox extends EventEmitter implements Sandbox {
    private readonly backendIdSandboxResolver;
    private readonly executor;
    private readonly ssmClient;
    private readonly functionsLogStreamer;
    private readonly printer;
    private readonly open;
    private watcherSubscription;
    private outputFilesExcludedFromWatch;
    private filesChangesTracker;
    /**
     * Creates a watcher process for this instance
     */
    constructor(backendIdSandboxResolver: BackendIdSandboxResolver, executor: AmplifySandboxExecutor, ssmClient: SSMClient, functionsLogStreamer: LambdaFunctionLogStreamer, printer: Printer, open?: typeof _open);
    /**
     * @inheritdoc
     */
    emit(eventName: SandboxEvents, ...args: unknown[]): boolean;
    /**
     * @inheritdoc
     */
    on(eventName: SandboxEvents, listener: (...args: unknown[]) => void): this;
    /**
     * @inheritdoc
     */
    start: (options: SandboxOptions) => Promise<void>;
    /**
     * @inheritdoc
     */
    stop: () => Promise<void>;
    /**
     * @inheritdoc
     */
    delete: (options: SandboxDeleteOptions) => Promise<void>;
    private shouldValidateAppSources;
    private deploy;
    private reset;
    /**
     * Just a shorthand console log to indicate whenever watcher is going idle
     */
    private emitWatching;
    /**
     * Reads and parses .gitignore file and returns the list of paths
     */
    private getGitIgnoredPaths;
    /**
     * Checks if a given region has been bootstrapped with >= min version using CDK bootstrap version parameter
     * stored in parameter store.
     * @returns A Boolean that represents if region has been bootstrapped.
     */
    private isBootstrapped;
    /**
     * Generates a printable error message from the thrown error
     */
    private getErrorMessage;
    private handleUnsupportedDestructiveChanges;
    private printSandboxNameInfo;
}
//# sourceMappingURL=file_watching_sandbox.d.ts.map