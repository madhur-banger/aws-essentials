import { CloudWatchLogsClient } from '@aws-sdk/client-cloudwatch-logs';
/**
 * Monitors CloudWatch logs and stream it to stdout or a user provided file location
 * Consumers can activate and deactivate the monitor. The monitor on reactivation, starts
 * streaming from the last time it was deactivated to avoid missing any logs while the monitor
 * was deactivated.
 */
export declare class CloudWatchLogEventMonitor {
    readonly cloudWatchLogsClient: CloudWatchLogsClient;
    /**
     * Determines from what time the logs should be streamed
     */
    private startTime;
    /**
     * Collection of all LogGroups that need to be streamed
     */
    private readonly allLogGroups;
    private readonly logGroupEventDisplay;
    private active;
    private printer;
    private enableColors;
    /**
     * Initializes the start time to be `now`
     */
    constructor(cloudWatchLogsClient: CloudWatchLogsClient);
    /**
     * resume writing/printing events
     * If output location file is specified, the logs will be appended to that file.
     * If the file doesn't exist it will be created.
     * @param outputLocation file location
     */
    activate: (outputLocation?: string) => void;
    /**
     * Pause the monitor so no new events are read
     * use case for this is when we are in the middle of performing a deployment
     * and don't want to interweave all the logs together with the CFN
     * deployment logs
     *
     * Also resets the start time to be when the new deployment was triggered so that we
     * start streaming the logs from when it was deactivated.
     * and clears the list of tracked log groups
     */
    pause: () => void;
    /**
     * Adds CloudWatch log groups to read log events from.
     * Since we could be watching multiple logs groups we need a friendly
     * name for to associate the log group to make it easier
     * for the user to identify which log groups are being monitored
     * @param friendlyResourceName The friendly name of the resource that is being monitored
     * @param logGroupName The log group to read events from
     */
    addLogGroups: (friendlyResourceName: string, logGroupName: string) => void;
    /**
     * Pick the next color in the object `colors` in round robin fashion
     */
    private getNextColorForLogGroup;
    private scheduleNextTick;
    private tick;
    /**
     * Reads all new log events from a set of CloudWatch Log Groups in parallel
     */
    private readNewEvents;
    /**
     * Print out one CloudWatch event using the local printer.
     */
    private print;
    /**
     * Reads all new log events from a CloudWatch Log Group
     * starting at either the time the last deployment was triggered or
     * when the last event was read on the previous tick
     */
    private readEventsFromLogGroup;
}
//# sourceMappingURL=cloudwatch_logs_monitor.d.ts.map