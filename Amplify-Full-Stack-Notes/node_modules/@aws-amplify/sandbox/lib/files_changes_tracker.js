import { glob } from 'glob';
/**
 * This class accumulates information about files that have changed.
 */
export class FilesChangesTracker {
    snapshot;
    /**
     * Creates a new file changes tracker.
     */
    constructor(snapshot) {
        this.snapshot = snapshot;
    }
    trackFileChange = (path) => {
        this.snapshot.didAnyFileChangeSinceStart = true;
        if (path.endsWith('.ts') || path.endsWith('.tsx')) {
            this.snapshot.didAnyTypeScriptFileChangeSinceLastSnapshot = true;
        }
    };
    getAndResetSnapshot = () => {
        // shallow copy is ok for 1 dim data structure
        const currentSnapshot = { ...this.snapshot };
        this.resetSnapshot();
        return currentSnapshot;
    };
    resetSnapshot = () => {
        this.snapshot.didAnyTypeScriptFileChangeSinceLastSnapshot = false;
    };
}
/**
 * Creates a new instance of files changes tracker.
 */
export const createFilesChangesTracker = async (rootPath) => {
    const tsFiles = await glob('**/*.{ts,tsx}', {
        ignore: 'node_modules/**',
        cwd: rootPath,
    });
    return new FilesChangesTracker({
        didAnyFileChangeSinceStart: false,
        hadTypeScriptFilesAtStart: tsFiles.length > 0,
        didAnyTypeScriptFileChangeSinceLastSnapshot: false,
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXNfY2hhbmdlc190cmFja2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ZpbGVzX2NoYW5nZXNfdHJhY2tlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBUTVCOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG1CQUFtQjtJQUlEO0lBSDdCOztPQUVHO0lBQ0gsWUFBNkIsUUFBcUM7UUFBckMsYUFBUSxHQUFSLFFBQVEsQ0FBNkI7SUFBRyxDQUFDO0lBRXRFLGVBQWUsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFO1FBQ2pDLElBQUksQ0FBQyxRQUFRLENBQUMsMEJBQTBCLEdBQUcsSUFBSSxDQUFDO1FBQ2hELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2pELElBQUksQ0FBQyxRQUFRLENBQUMsMkNBQTJDLEdBQUcsSUFBSSxDQUFDO1NBQ2xFO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsbUJBQW1CLEdBQUcsR0FBZ0MsRUFBRTtRQUN0RCw4Q0FBOEM7UUFDOUMsTUFBTSxlQUFlLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM3QyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckIsT0FBTyxlQUFlLENBQUM7SUFDekIsQ0FBQyxDQUFDO0lBRU0sYUFBYSxHQUFHLEdBQUcsRUFBRTtRQUMzQixJQUFJLENBQUMsUUFBUSxDQUFDLDJDQUEyQyxHQUFHLEtBQUssQ0FBQztJQUNwRSxDQUFDLENBQUM7Q0FDSDtBQUVEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsS0FBSyxFQUM1QyxRQUFnQixFQUNjLEVBQUU7SUFDaEMsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsZUFBZSxFQUFFO1FBQzFDLE1BQU0sRUFBRSxpQkFBaUI7UUFDekIsR0FBRyxFQUFFLFFBQVE7S0FDZCxDQUFDLENBQUM7SUFDSCxPQUFPLElBQUksbUJBQW1CLENBQUM7UUFDN0IsMEJBQTBCLEVBQUUsS0FBSztRQUNqQyx5QkFBeUIsRUFBRSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUM7UUFDN0MsMkNBQTJDLEVBQUUsS0FBSztLQUNuRCxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnbG9iIH0gZnJvbSAnZ2xvYic7XG5cbmV4cG9ydCB0eXBlIEZpbGVzQ2hhbmdlc1RyYWNrZXJTbmFwc2hvdCA9IHtcbiAgaGFkVHlwZVNjcmlwdEZpbGVzQXRTdGFydDogYm9vbGVhbjtcbiAgZGlkQW55RmlsZUNoYW5nZVNpbmNlU3RhcnQ6IGJvb2xlYW47XG4gIGRpZEFueVR5cGVTY3JpcHRGaWxlQ2hhbmdlU2luY2VMYXN0U25hcHNob3Q6IGJvb2xlYW47XG59O1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgYWNjdW11bGF0ZXMgaW5mb3JtYXRpb24gYWJvdXQgZmlsZXMgdGhhdCBoYXZlIGNoYW5nZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBGaWxlc0NoYW5nZXNUcmFja2VyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgZmlsZSBjaGFuZ2VzIHRyYWNrZXIuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHNuYXBzaG90OiBGaWxlc0NoYW5nZXNUcmFja2VyU25hcHNob3QpIHt9XG5cbiAgdHJhY2tGaWxlQ2hhbmdlID0gKHBhdGg6IHN0cmluZykgPT4ge1xuICAgIHRoaXMuc25hcHNob3QuZGlkQW55RmlsZUNoYW5nZVNpbmNlU3RhcnQgPSB0cnVlO1xuICAgIGlmIChwYXRoLmVuZHNXaXRoKCcudHMnKSB8fCBwYXRoLmVuZHNXaXRoKCcudHN4JykpIHtcbiAgICAgIHRoaXMuc25hcHNob3QuZGlkQW55VHlwZVNjcmlwdEZpbGVDaGFuZ2VTaW5jZUxhc3RTbmFwc2hvdCA9IHRydWU7XG4gICAgfVxuICB9O1xuXG4gIGdldEFuZFJlc2V0U25hcHNob3QgPSAoKTogRmlsZXNDaGFuZ2VzVHJhY2tlclNuYXBzaG90ID0+IHtcbiAgICAvLyBzaGFsbG93IGNvcHkgaXMgb2sgZm9yIDEgZGltIGRhdGEgc3RydWN0dXJlXG4gICAgY29uc3QgY3VycmVudFNuYXBzaG90ID0geyAuLi50aGlzLnNuYXBzaG90IH07XG4gICAgdGhpcy5yZXNldFNuYXBzaG90KCk7XG4gICAgcmV0dXJuIGN1cnJlbnRTbmFwc2hvdDtcbiAgfTtcblxuICBwcml2YXRlIHJlc2V0U25hcHNob3QgPSAoKSA9PiB7XG4gICAgdGhpcy5zbmFwc2hvdC5kaWRBbnlUeXBlU2NyaXB0RmlsZUNoYW5nZVNpbmNlTGFzdFNuYXBzaG90ID0gZmFsc2U7XG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBmaWxlcyBjaGFuZ2VzIHRyYWNrZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVGaWxlc0NoYW5nZXNUcmFja2VyID0gYXN5bmMgKFxuICByb290UGF0aDogc3RyaW5nXG4pOiBQcm9taXNlPEZpbGVzQ2hhbmdlc1RyYWNrZXI+ID0+IHtcbiAgY29uc3QgdHNGaWxlcyA9IGF3YWl0IGdsb2IoJyoqLyoue3RzLHRzeH0nLCB7XG4gICAgaWdub3JlOiAnbm9kZV9tb2R1bGVzLyoqJyxcbiAgICBjd2Q6IHJvb3RQYXRoLFxuICB9KTtcbiAgcmV0dXJuIG5ldyBGaWxlc0NoYW5nZXNUcmFja2VyKHtcbiAgICBkaWRBbnlGaWxlQ2hhbmdlU2luY2VTdGFydDogZmFsc2UsXG4gICAgaGFkVHlwZVNjcmlwdEZpbGVzQXRTdGFydDogdHNGaWxlcy5sZW5ndGggPiAwLFxuICAgIGRpZEFueVR5cGVTY3JpcHRGaWxlQ2hhbmdlU2luY2VMYXN0U25hcHNob3Q6IGZhbHNlLFxuICB9KTtcbn07XG4iXX0=