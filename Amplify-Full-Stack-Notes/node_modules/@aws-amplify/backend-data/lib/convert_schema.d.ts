import type { DerivedCombinedSchema, DerivedModelSchema as DerivedDataSchema } from '@aws-amplify/data-schema-types';
import { type IAmplifyDataDefinition } from '@aws-amplify/data-construct';
import type { DataSchema, DataSchemaInput } from './types.js';
import type { BackendSecretResolver, StableBackendIdentifiers } from '@aws-amplify/plugin-types';
/**
 * Determine if the input schema is a derived typed schema object (data-schema), and perform type narrowing.
 * @param schema the schema that might be a derived model schema
 * @returns a boolean indicating whether the schema is a derived model schema, with type narrowing
 */
export declare const isDataSchema: (schema: DataSchema) => schema is DerivedDataSchema;
/**
 * Determine if the input schema is a collection of typed schemas, and perform type narrowing.
 * @param schema the schema that might be a collection of model schemas
 * @returns a boolean indicating whether the schema is a collection of derived model schema, with type narrowing
 */
export declare const isCombinedSchema: (schema: DataSchemaInput) => schema is DerivedCombinedSchema;
/**
 * Given an input schema type, produce the relevant CDK Graphql Def interface
 * @param schema TS schema builder definition or string GraphQL schema
 * @param backendSecretResolver secret resolver
 * @param stableBackendIdentifiers backend identifiers
 * @returns the cdk graphql definition interface
 */
export declare const convertSchemaToCDK: (schema: DataSchema, backendSecretResolver: BackendSecretResolver, stableBackendIdentifiers: StableBackendIdentifiers) => IAmplifyDataDefinition;
/**
 * Given an input list of CDK Graphql Def interface schemas, produce the relevant CDK Graphql Def interface
 * @param schemas the cdk graphql definition interfaces to combine
 * @returns the cdk graphql definition interface
 */
export declare const combineCDKSchemas: (schemas: IAmplifyDataDefinition[]) => IAmplifyDataDefinition;
//# sourceMappingURL=convert_schema.d.ts.map