import { Stack } from 'aws-cdk-lib';
import { Policy, PolicyStatement } from 'aws-cdk-lib/aws-iam';
/**
 * Generates policies for accessing an AppSync GraphQL API
 */
export class AppSyncPolicyGenerator {
    graphqlApi;
    stack;
    policyPrefix = 'GraphqlAccessPolicy';
    policyCount = 1;
    /**
     * Initialize with the GraphqlAPI that the policies will be scoped to
     */
    constructor(graphqlApi) {
        this.graphqlApi = graphqlApi;
        this.stack = Stack.of(graphqlApi);
    }
    /**
     * Generates a policy that grants GraphQL data-plane access to the provided actions
     *
     * The naming is a bit wonky here because the IAM action is always "appsync:GraphQL".
     * The input "action" maps to the "type" in the resource name part of the ARN which is "Query", "Mutation" or "Subscription"
     */
    generateGraphqlAccessPolicy(actions) {
        const resources = actions
            // convert from actions to GraphQL Type
            .map((action) => actionToTypeMap[action])
            // convert Type to resourceName
            .map((type) => [this.graphqlApi.arn, 'types', type, '*'].join('/'));
        return new Policy(this.stack, `${this.policyPrefix}${this.policyCount++}`, {
            statements: [
                new PolicyStatement({
                    actions: ['appsync:GraphQL'],
                    resources,
                }),
            ],
        });
    }
}
const actionToTypeMap = {
    query: 'Query',
    mutate: 'Mutation',
    listen: 'Subscription',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwX3N5bmNfcG9saWN5X2dlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHBfc3luY19wb2xpY3lfZ2VuZXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFcEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUk5RDs7R0FFRztBQUNILE1BQU0sT0FBTyxzQkFBc0I7SUFPSjtJQU5aLEtBQUssQ0FBUTtJQUNiLFlBQVksR0FBRyxxQkFBcUIsQ0FBQztJQUM5QyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCOztPQUVHO0lBQ0gsWUFBNkIsVUFBdUI7UUFBdkIsZUFBVSxHQUFWLFVBQVUsQ0FBYTtRQUNsRCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUNEOzs7OztPQUtHO0lBQ0gsMkJBQTJCLENBQUMsT0FBMkI7UUFDckQsTUFBTSxTQUFTLEdBQUcsT0FBTztZQUN2Qix1Q0FBdUM7YUFDdEMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDekMsK0JBQStCO2FBQzlCLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLEVBQUU7WUFDekUsVUFBVSxFQUFFO2dCQUNWLElBQUksZUFBZSxDQUFDO29CQUNsQixPQUFPLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztvQkFDNUIsU0FBUztpQkFDVixDQUFDO2FBQ0g7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLGVBQWUsR0FBcUM7SUFDeEQsS0FBSyxFQUFFLE9BQU87SUFDZCxNQUFNLEVBQUUsVUFBVTtJQUNsQixNQUFNLEVBQUUsY0FBYztDQUN2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhY2sgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBJR3JhcGhxbEFwaSB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1hcHBzeW5jJztcbmltcG9ydCB7IFBvbGljeSwgUG9saWN5U3RhdGVtZW50IH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5cbmV4cG9ydCB0eXBlIEFwcFN5bmNBcGlBY3Rpb24gPSAncXVlcnknIHwgJ211dGF0ZScgfCAnbGlzdGVuJztcblxuLyoqXG4gKiBHZW5lcmF0ZXMgcG9saWNpZXMgZm9yIGFjY2Vzc2luZyBhbiBBcHBTeW5jIEdyYXBoUUwgQVBJXG4gKi9cbmV4cG9ydCBjbGFzcyBBcHBTeW5jUG9saWN5R2VuZXJhdG9yIHtcbiAgcHJpdmF0ZSByZWFkb25seSBzdGFjazogU3RhY2s7XG4gIHByaXZhdGUgcmVhZG9ubHkgcG9saWN5UHJlZml4ID0gJ0dyYXBocWxBY2Nlc3NQb2xpY3knO1xuICBwcml2YXRlIHBvbGljeUNvdW50ID0gMTtcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgd2l0aCB0aGUgR3JhcGhxbEFQSSB0aGF0IHRoZSBwb2xpY2llcyB3aWxsIGJlIHNjb3BlZCB0b1xuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBncmFwaHFsQXBpOiBJR3JhcGhxbEFwaSkge1xuICAgIHRoaXMuc3RhY2sgPSBTdGFjay5vZihncmFwaHFsQXBpKTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgcG9saWN5IHRoYXQgZ3JhbnRzIEdyYXBoUUwgZGF0YS1wbGFuZSBhY2Nlc3MgdG8gdGhlIHByb3ZpZGVkIGFjdGlvbnNcbiAgICpcbiAgICogVGhlIG5hbWluZyBpcyBhIGJpdCB3b25reSBoZXJlIGJlY2F1c2UgdGhlIElBTSBhY3Rpb24gaXMgYWx3YXlzIFwiYXBwc3luYzpHcmFwaFFMXCIuXG4gICAqIFRoZSBpbnB1dCBcImFjdGlvblwiIG1hcHMgdG8gdGhlIFwidHlwZVwiIGluIHRoZSByZXNvdXJjZSBuYW1lIHBhcnQgb2YgdGhlIEFSTiB3aGljaCBpcyBcIlF1ZXJ5XCIsIFwiTXV0YXRpb25cIiBvciBcIlN1YnNjcmlwdGlvblwiXG4gICAqL1xuICBnZW5lcmF0ZUdyYXBocWxBY2Nlc3NQb2xpY3koYWN0aW9uczogQXBwU3luY0FwaUFjdGlvbltdKSB7XG4gICAgY29uc3QgcmVzb3VyY2VzID0gYWN0aW9uc1xuICAgICAgLy8gY29udmVydCBmcm9tIGFjdGlvbnMgdG8gR3JhcGhRTCBUeXBlXG4gICAgICAubWFwKChhY3Rpb24pID0+IGFjdGlvblRvVHlwZU1hcFthY3Rpb25dKVxuICAgICAgLy8gY29udmVydCBUeXBlIHRvIHJlc291cmNlTmFtZVxuICAgICAgLm1hcCgodHlwZSkgPT4gW3RoaXMuZ3JhcGhxbEFwaS5hcm4sICd0eXBlcycsIHR5cGUsICcqJ10uam9pbignLycpKTtcbiAgICByZXR1cm4gbmV3IFBvbGljeSh0aGlzLnN0YWNrLCBgJHt0aGlzLnBvbGljeVByZWZpeH0ke3RoaXMucG9saWN5Q291bnQrK31gLCB7XG4gICAgICBzdGF0ZW1lbnRzOiBbXG4gICAgICAgIG5ldyBQb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICAgIGFjdGlvbnM6IFsnYXBwc3luYzpHcmFwaFFMJ10sXG4gICAgICAgICAgcmVzb3VyY2VzLFxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgfSk7XG4gIH1cbn1cblxuY29uc3QgYWN0aW9uVG9UeXBlTWFwOiBSZWNvcmQ8QXBwU3luY0FwaUFjdGlvbiwgc3RyaW5nPiA9IHtcbiAgcXVlcnk6ICdRdWVyeScsXG4gIG11dGF0ZTogJ011dGF0aW9uJyxcbiAgbGlzdGVuOiAnU3Vic2NyaXB0aW9uJyxcbn07XG4iXX0=