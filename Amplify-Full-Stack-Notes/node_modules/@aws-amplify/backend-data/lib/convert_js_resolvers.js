import { CfnFunctionConfiguration, CfnResolver } from 'aws-cdk-lib/aws-appsync';
import { resolve } from 'path';
import { fileURLToPath } from 'node:url';
import { Asset } from 'aws-cdk-lib/aws-s3-assets';
import { resolveEntryPath } from './resolve_entry_path.js';
const APPSYNC_PIPELINE_RESOLVER = 'PIPELINE';
const APPSYNC_JS_RUNTIME_NAME = 'APPSYNC_JS';
const APPSYNC_JS_RUNTIME_VERSION = '1.0.0';
const JS_PIPELINE_RESOLVER_HANDLER = './assets/js_resolver_handler.js';
/**
 *
 * This returns the top-level passthrough resolver request/response handler (see: https://docs.aws.amazon.com/appsync/latest/devguide/resolver-reference-overview-js.html#anatomy-of-a-pipeline-resolver-js)
 * It's required for defining a pipeline resolver. The only purpose it serves is returning the output of the last function in the pipeline back to the client.
 *
 * Customer-provided handlers are added as a Functions list in `pipelineConfig.functions`
 */
const defaultJsResolverAsset = (scope) => {
    const resolvedTemplatePath = resolve(fileURLToPath(import.meta.url), '../../lib', JS_PIPELINE_RESOLVER_HANDLER);
    return new Asset(scope, 'default_js_resolver_handler_asset', {
        path: resolveEntryPath(resolvedTemplatePath),
    });
};
/**
 * Converts JS Resolver definition emitted by data-schema into AppSync pipeline
 * resolvers via L1 construct
 */
export const convertJsResolverDefinition = (scope, amplifyApi, jsResolvers) => {
    if (!jsResolvers || jsResolvers.length < 1) {
        return;
    }
    const jsResolverTemplateAsset = defaultJsResolverAsset(scope);
    for (const resolver of jsResolvers) {
        const functions = resolver.handlers.map((handler, idx) => {
            const fnName = `Fn_${resolver.typeName}_${resolver.fieldName}_${idx + 1}`;
            const s3AssetName = `${fnName}_asset`;
            const asset = new Asset(scope, s3AssetName, {
                path: resolveEntryPath(handler.entry),
            });
            const fn = new CfnFunctionConfiguration(scope, fnName, {
                apiId: amplifyApi.apiId,
                dataSourceName: handler.dataSource,
                name: fnName,
                codeS3Location: asset.s3ObjectUrl,
                runtime: {
                    name: APPSYNC_JS_RUNTIME_NAME,
                    runtimeVersion: APPSYNC_JS_RUNTIME_VERSION,
                },
            });
            fn.node.addDependency(amplifyApi);
            return fn.attrFunctionId;
        });
        const resolverName = `Resolver_${resolver.typeName}_${resolver.fieldName}`;
        new CfnResolver(scope, resolverName, {
            apiId: amplifyApi.apiId,
            fieldName: resolver.fieldName,
            typeName: resolver.typeName,
            kind: APPSYNC_PIPELINE_RESOLVER,
            codeS3Location: jsResolverTemplateAsset.s3ObjectUrl,
            runtime: {
                name: APPSYNC_JS_RUNTIME_NAME,
                runtimeVersion: APPSYNC_JS_RUNTIME_VERSION,
            },
            pipelineConfig: {
                functions,
            },
        }).node.addDependency(amplifyApi);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydF9qc19yZXNvbHZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY29udmVydF9qc19yZXNvbHZlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLHdCQUF3QixFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRWhGLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFM0QsTUFBTSx5QkFBeUIsR0FBRyxVQUFVLENBQUM7QUFDN0MsTUFBTSx1QkFBdUIsR0FBRyxZQUFZLENBQUM7QUFDN0MsTUFBTSwwQkFBMEIsR0FBRyxPQUFPLENBQUM7QUFDM0MsTUFBTSw0QkFBNEIsR0FBRyxpQ0FBaUMsQ0FBQztBQUV2RTs7Ozs7O0dBTUc7QUFDSCxNQUFNLHNCQUFzQixHQUFHLENBQUMsS0FBZ0IsRUFBUyxFQUFFO0lBQ3pELE1BQU0sb0JBQW9CLEdBQUcsT0FBTyxDQUNsQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFDOUIsV0FBVyxFQUNYLDRCQUE0QixDQUM3QixDQUFDO0lBRUYsT0FBTyxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUUsbUNBQW1DLEVBQUU7UUFDM0QsSUFBSSxFQUFFLGdCQUFnQixDQUFDLG9CQUFvQixDQUFDO0tBQzdDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLENBQ3pDLEtBQWdCLEVBQ2hCLFVBQXVCLEVBQ3ZCLFdBQXFDLEVBQy9CLEVBQUU7SUFDUixJQUFJLENBQUMsV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzFDLE9BQU87S0FDUjtJQUVELE1BQU0sdUJBQXVCLEdBQUcsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFOUQsS0FBSyxNQUFNLFFBQVEsSUFBSSxXQUFXLEVBQUU7UUFDbEMsTUFBTSxTQUFTLEdBQWEsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDakUsTUFBTSxNQUFNLEdBQUcsTUFBTSxRQUFRLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxTQUFTLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzFFLE1BQU0sV0FBVyxHQUFHLEdBQUcsTUFBTSxRQUFRLENBQUM7WUFFdEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRTtnQkFDMUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7YUFDdEMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxFQUFFLEdBQUcsSUFBSSx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO2dCQUNyRCxLQUFLLEVBQUUsVUFBVSxDQUFDLEtBQUs7Z0JBQ3ZCLGNBQWMsRUFBRSxPQUFPLENBQUMsVUFBVTtnQkFDbEMsSUFBSSxFQUFFLE1BQU07Z0JBQ1osY0FBYyxFQUFFLEtBQUssQ0FBQyxXQUFXO2dCQUNqQyxPQUFPLEVBQUU7b0JBQ1AsSUFBSSxFQUFFLHVCQUF1QjtvQkFDN0IsY0FBYyxFQUFFLDBCQUEwQjtpQkFDM0M7YUFDRixDQUFDLENBQUM7WUFDSCxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNsQyxPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLFlBQVksR0FBRyxZQUFZLFFBQVEsQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRTNFLElBQUksV0FBVyxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUU7WUFDbkMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxLQUFLO1lBQ3ZCLFNBQVMsRUFBRSxRQUFRLENBQUMsU0FBUztZQUM3QixRQUFRLEVBQUUsUUFBUSxDQUFDLFFBQVE7WUFDM0IsSUFBSSxFQUFFLHlCQUF5QjtZQUMvQixjQUFjLEVBQUUsdUJBQXVCLENBQUMsV0FBVztZQUNuRCxPQUFPLEVBQUU7Z0JBQ1AsSUFBSSxFQUFFLHVCQUF1QjtnQkFDN0IsY0FBYyxFQUFFLDBCQUEwQjthQUMzQztZQUNELGNBQWMsRUFBRTtnQkFDZCxTQUFTO2FBQ1Y7U0FDRixDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUNuQztBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQW1wbGlmeURhdGEgfSBmcm9tICdAYXdzLWFtcGxpZnkvZGF0YS1jb25zdHJ1Y3QnO1xuaW1wb3J0IHsgQ2ZuRnVuY3Rpb25Db25maWd1cmF0aW9uLCBDZm5SZXNvbHZlciB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1hcHBzeW5jJztcbmltcG9ydCB7IEpzUmVzb2x2ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvZGF0YS1zY2hlbWEtdHlwZXMnO1xuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ25vZGU6dXJsJztcbmltcG9ydCB7IEFzc2V0IH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLXMzLWFzc2V0cyc7XG5pbXBvcnQgeyByZXNvbHZlRW50cnlQYXRoIH0gZnJvbSAnLi9yZXNvbHZlX2VudHJ5X3BhdGguanMnO1xuXG5jb25zdCBBUFBTWU5DX1BJUEVMSU5FX1JFU09MVkVSID0gJ1BJUEVMSU5FJztcbmNvbnN0IEFQUFNZTkNfSlNfUlVOVElNRV9OQU1FID0gJ0FQUFNZTkNfSlMnO1xuY29uc3QgQVBQU1lOQ19KU19SVU5USU1FX1ZFUlNJT04gPSAnMS4wLjAnO1xuY29uc3QgSlNfUElQRUxJTkVfUkVTT0xWRVJfSEFORExFUiA9ICcuL2Fzc2V0cy9qc19yZXNvbHZlcl9oYW5kbGVyLmpzJztcblxuLyoqXG4gKlxuICogVGhpcyByZXR1cm5zIHRoZSB0b3AtbGV2ZWwgcGFzc3Rocm91Z2ggcmVzb2x2ZXIgcmVxdWVzdC9yZXNwb25zZSBoYW5kbGVyIChzZWU6IGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9hcHBzeW5jL2xhdGVzdC9kZXZndWlkZS9yZXNvbHZlci1yZWZlcmVuY2Utb3ZlcnZpZXctanMuaHRtbCNhbmF0b215LW9mLWEtcGlwZWxpbmUtcmVzb2x2ZXItanMpXG4gKiBJdCdzIHJlcXVpcmVkIGZvciBkZWZpbmluZyBhIHBpcGVsaW5lIHJlc29sdmVyLiBUaGUgb25seSBwdXJwb3NlIGl0IHNlcnZlcyBpcyByZXR1cm5pbmcgdGhlIG91dHB1dCBvZiB0aGUgbGFzdCBmdW5jdGlvbiBpbiB0aGUgcGlwZWxpbmUgYmFjayB0byB0aGUgY2xpZW50LlxuICpcbiAqIEN1c3RvbWVyLXByb3ZpZGVkIGhhbmRsZXJzIGFyZSBhZGRlZCBhcyBhIEZ1bmN0aW9ucyBsaXN0IGluIGBwaXBlbGluZUNvbmZpZy5mdW5jdGlvbnNgXG4gKi9cbmNvbnN0IGRlZmF1bHRKc1Jlc29sdmVyQXNzZXQgPSAoc2NvcGU6IENvbnN0cnVjdCk6IEFzc2V0ID0+IHtcbiAgY29uc3QgcmVzb2x2ZWRUZW1wbGF0ZVBhdGggPSByZXNvbHZlKFxuICAgIGZpbGVVUkxUb1BhdGgoaW1wb3J0Lm1ldGEudXJsKSxcbiAgICAnLi4vLi4vbGliJyxcbiAgICBKU19QSVBFTElORV9SRVNPTFZFUl9IQU5ETEVSXG4gICk7XG5cbiAgcmV0dXJuIG5ldyBBc3NldChzY29wZSwgJ2RlZmF1bHRfanNfcmVzb2x2ZXJfaGFuZGxlcl9hc3NldCcsIHtcbiAgICBwYXRoOiByZXNvbHZlRW50cnlQYXRoKHJlc29sdmVkVGVtcGxhdGVQYXRoKSxcbiAgfSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIEpTIFJlc29sdmVyIGRlZmluaXRpb24gZW1pdHRlZCBieSBkYXRhLXNjaGVtYSBpbnRvIEFwcFN5bmMgcGlwZWxpbmVcbiAqIHJlc29sdmVycyB2aWEgTDEgY29uc3RydWN0XG4gKi9cbmV4cG9ydCBjb25zdCBjb252ZXJ0SnNSZXNvbHZlckRlZmluaXRpb24gPSAoXG4gIHNjb3BlOiBDb25zdHJ1Y3QsXG4gIGFtcGxpZnlBcGk6IEFtcGxpZnlEYXRhLFxuICBqc1Jlc29sdmVyczogSnNSZXNvbHZlcltdIHwgdW5kZWZpbmVkXG4pOiB2b2lkID0+IHtcbiAgaWYgKCFqc1Jlc29sdmVycyB8fCBqc1Jlc29sdmVycy5sZW5ndGggPCAxKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QganNSZXNvbHZlclRlbXBsYXRlQXNzZXQgPSBkZWZhdWx0SnNSZXNvbHZlckFzc2V0KHNjb3BlKTtcblxuICBmb3IgKGNvbnN0IHJlc29sdmVyIG9mIGpzUmVzb2x2ZXJzKSB7XG4gICAgY29uc3QgZnVuY3Rpb25zOiBzdHJpbmdbXSA9IHJlc29sdmVyLmhhbmRsZXJzLm1hcCgoaGFuZGxlciwgaWR4KSA9PiB7XG4gICAgICBjb25zdCBmbk5hbWUgPSBgRm5fJHtyZXNvbHZlci50eXBlTmFtZX1fJHtyZXNvbHZlci5maWVsZE5hbWV9XyR7aWR4ICsgMX1gO1xuICAgICAgY29uc3QgczNBc3NldE5hbWUgPSBgJHtmbk5hbWV9X2Fzc2V0YDtcblxuICAgICAgY29uc3QgYXNzZXQgPSBuZXcgQXNzZXQoc2NvcGUsIHMzQXNzZXROYW1lLCB7XG4gICAgICAgIHBhdGg6IHJlc29sdmVFbnRyeVBhdGgoaGFuZGxlci5lbnRyeSksXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgZm4gPSBuZXcgQ2ZuRnVuY3Rpb25Db25maWd1cmF0aW9uKHNjb3BlLCBmbk5hbWUsIHtcbiAgICAgICAgYXBpSWQ6IGFtcGxpZnlBcGkuYXBpSWQsXG4gICAgICAgIGRhdGFTb3VyY2VOYW1lOiBoYW5kbGVyLmRhdGFTb3VyY2UsXG4gICAgICAgIG5hbWU6IGZuTmFtZSxcbiAgICAgICAgY29kZVMzTG9jYXRpb246IGFzc2V0LnMzT2JqZWN0VXJsLFxuICAgICAgICBydW50aW1lOiB7XG4gICAgICAgICAgbmFtZTogQVBQU1lOQ19KU19SVU5USU1FX05BTUUsXG4gICAgICAgICAgcnVudGltZVZlcnNpb246IEFQUFNZTkNfSlNfUlVOVElNRV9WRVJTSU9OLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBmbi5ub2RlLmFkZERlcGVuZGVuY3koYW1wbGlmeUFwaSk7XG4gICAgICByZXR1cm4gZm4uYXR0ckZ1bmN0aW9uSWQ7XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXNvbHZlck5hbWUgPSBgUmVzb2x2ZXJfJHtyZXNvbHZlci50eXBlTmFtZX1fJHtyZXNvbHZlci5maWVsZE5hbWV9YDtcblxuICAgIG5ldyBDZm5SZXNvbHZlcihzY29wZSwgcmVzb2x2ZXJOYW1lLCB7XG4gICAgICBhcGlJZDogYW1wbGlmeUFwaS5hcGlJZCxcbiAgICAgIGZpZWxkTmFtZTogcmVzb2x2ZXIuZmllbGROYW1lLFxuICAgICAgdHlwZU5hbWU6IHJlc29sdmVyLnR5cGVOYW1lLFxuICAgICAga2luZDogQVBQU1lOQ19QSVBFTElORV9SRVNPTFZFUixcbiAgICAgIGNvZGVTM0xvY2F0aW9uOiBqc1Jlc29sdmVyVGVtcGxhdGVBc3NldC5zM09iamVjdFVybCxcbiAgICAgIHJ1bnRpbWU6IHtcbiAgICAgICAgbmFtZTogQVBQU1lOQ19KU19SVU5USU1FX05BTUUsXG4gICAgICAgIHJ1bnRpbWVWZXJzaW9uOiBBUFBTWU5DX0pTX1JVTlRJTUVfVkVSU0lPTixcbiAgICAgIH0sXG4gICAgICBwaXBlbGluZUNvbmZpZzoge1xuICAgICAgICBmdW5jdGlvbnMsXG4gICAgICB9LFxuICAgIH0pLm5vZGUuYWRkRGVwZW5kZW5jeShhbXBsaWZ5QXBpKTtcbiAgfVxufTtcbiJdfQ==