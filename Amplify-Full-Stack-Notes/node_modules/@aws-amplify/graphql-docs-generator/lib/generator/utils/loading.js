"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildSchema = void 0;
const graphql_1 = require("graphql");
const types_1 = require("../types");
const getSchemaType_1 = require("./getSchemaType");
function buildSchema(schema) {
    const schemaType = (0, getSchemaType_1.getSchemaType)(schema);
    switch (schemaType) {
        case types_1.SchemaType.SDL:
            return buildSDLSchema(schema);
        case types_1.SchemaType.INTROSPECTION:
            return buildIntrospectionSchema(schema);
        default:
            throw new Error("Please provide either SDL or Introspection schema as input to build it");
    }
}
exports.buildSchema = buildSchema;
function buildIntrospectionSchema(schema) {
    const schemaData = JSON.parse(schema);
    if (!schemaData.data && !schemaData.__schema) {
        throw new Error('GraphQL schema file should contain a valid GraphQL introspection query result');
    }
    return (0, graphql_1.buildClientSchema)(schemaData.data ? schemaData.data : schemaData);
}
function buildSDLSchema(schema) {
    const extendedSchema = [schema, AWS_APPSYNC_SDL].join("\n");
    const graphQLDocument = (0, graphql_1.parse)(new graphql_1.Source(extendedSchema));
    return (0, graphql_1.buildASTSchema)(graphQLDocument);
}
const AWS_APPSYNC_SDL = `
scalar AWSDate
scalar AWSTime
scalar AWSDateTime
scalar AWSTimestamp
scalar AWSEmail
scalar AWSJSON
scalar AWSURL
scalar AWSPhone
scalar AWSIPAddress
scalar BigInt
scalar Double

directive @aws_subscribe(mutations: [String!]!) on FIELD_DEFINITION

# Allows transformer libraries to deprecate directive arguments.
directive @deprecated(reason: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ENUM | ENUM_VALUE

directive @aws_auth(cognito_groups: [String!]!) on FIELD_DEFINITION
directive @aws_api_key on FIELD_DEFINITION | OBJECT
directive @aws_iam on FIELD_DEFINITION | OBJECT
directive @aws_lambda on FIELD_DEFINITION | OBJECT
directive @aws_oidc on FIELD_DEFINITION | OBJECT
directive @aws_cognito_user_pools(cognito_groups: [String!]) on FIELD_DEFINITION | OBJECT
`;
//# sourceMappingURL=loading.js.map