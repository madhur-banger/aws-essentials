"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const codegen_ui_1 = require("@aws-amplify/codegen-ui");
const typescript_1 = require("typescript");
const react_component_renderer_1 = require("../react-component-renderer");
const react_component_render_helper_1 = require("../react-component-render-helper");
const imports_1 = require("../imports");
const forms_1 = require("../forms");
const form_renderer_helper_1 = require("../forms/form-renderer-helper");
const layout_helpers_1 = require("../utils/forms/layout-helpers");
const value_props_1 = require("../forms/form-renderer-helper/value-props");
const render_checkers_1 = require("../forms/form-renderer-helper/render-checkers");
const cta_props_1 = require("../forms/form-renderer-helper/cta-props");
const amplify_js_versioning_1 = require("../helpers/amplify-js-versioning");
const constants_1 = require("../utils/constants");
class FormRenderer extends react_component_renderer_1.ReactComponentRenderer {
    constructor(component, form, // we are passing in form here as it's the top level component
    componentMetadata, importCollection, renderConfig, parent) {
        super(component, componentMetadata, importCollection, parent);
        this.form = form;
        this.componentMetadata = componentMetadata;
        this.importCollection = importCollection;
        this.renderConfig = renderConfig;
        this.parent = parent;
        this.isRenderingGraphQL = () => {
            var _a;
            return ((_a = this.renderConfig.apiConfiguration) === null || _a === void 0 ? void 0 : _a.dataApi) === 'GraphQL';
        };
    }
    renderElement(renderChildren) {
        var _a;
        const children = (_a = this.component.children) !== null && _a !== void 0 ? _a : [];
        const element = typescript_1.factory.createJsxElement(this.renderCollectionOpeningElement(), renderChildren ? renderChildren(children) : [], typescript_1.factory.createJsxClosingElement(typescript_1.factory.createIdentifier(this.component.componentType)));
        this.importCollection.addImport('@aws-amplify/ui-react', this.component.componentType);
        if (this.form.dataType.dataSourceType === 'DataStore' && this.isRenderingGraphQL()) {
            const mappedImport = (0, amplify_js_versioning_1.getAmplifyJSAPIImport)();
            this.importCollection.addMappedImport(mappedImport);
        }
        else if (this.form.dataType.dataSourceType === 'DataStore') {
            if ((0, amplify_js_versioning_1.getAmplifyJSVersionToRender)(this.renderConfig.dependencies) === constants_1.AMPLIFY_JS_V6) {
                this.importCollection.addImport(imports_1.ImportSource.AMPLIFY_DATASTORE_V6, imports_1.ImportValue.DATASTORE);
            }
            else {
                this.importCollection.addImport(imports_1.ImportSource.AMPLIFY, imports_1.ImportValue.DATASTORE);
            }
        }
        if ((0, layout_helpers_1.hasTokenReference)(this.componentMetadata)) {
            this.importCollection.addImport(imports_1.ImportSource.UI_REACT, 'useTheme');
        }
        return element;
    }
    renderCollectionOpeningElement() {
        const propsArray = Object.entries(this.component.properties).map(([key, value]) => (0, react_component_render_helper_1.buildOpeningElementProperties)(this.componentMetadata, value, key));
        propsArray.push(...(0, react_component_render_helper_1.buildFormLayoutProperties)(this.componentMetadata.formMetadata));
        const submitAttribute = this.getFormOnSubmitAttribute();
        propsArray.push(submitAttribute);
        this.addPropsSpreadAttributes(propsArray);
        return typescript_1.factory.createJsxOpeningElement(typescript_1.factory.createIdentifier(this.component.componentType), undefined, typescript_1.factory.createJsxAttributes(propsArray));
    }
    /**
     * generates the necessary function call if using
     * - datastore
     * - custom
     */
    getOnSubmitDSCall() {
        var _a;
        const { dataType: { dataSourceType, dataTypeName }, formActionType, } = this.form;
        const importedModelName = this.importCollection.getMappedModelAlias(dataTypeName);
        const { formMetadata } = this.componentMetadata;
        if (!formMetadata) {
            throw new Error(`Form Metadata is missing from form: ${this.component.name}`);
        }
        const onSubmitIdentifier = typescript_1.factory.createIdentifier('onSubmit');
        if (dataSourceType === 'Custom') {
            return [
                typescript_1.factory.createExpressionStatement(typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(onSubmitIdentifier, undefined, [typescript_1.factory.createIdentifier('modelFields')]))),
            ];
        }
        if (dataSourceType === 'DataStore') {
            const { dataSchemaMetadata } = this.componentMetadata;
            if (!dataSchemaMetadata) {
                throw new codegen_ui_1.InternalError(`Could not find data schema for data-backed form`);
            }
            return [
                typescript_1.factory.createIfStatement(onSubmitIdentifier, typescript_1.factory.createBlock([
                    typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('modelFields'), typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsToken), typescript_1.factory.createCallExpression(onSubmitIdentifier, undefined, [
                        typescript_1.factory.createIdentifier('modelFields'),
                    ]))),
                ], true), undefined),
                typescript_1.factory.createTryStatement(typescript_1.factory.createBlock([
                    cta_props_1.replaceEmptyStringStatement,
                    ...(0, forms_1.buildExpression)(formActionType, dataTypeName, importedModelName, formMetadata.fieldConfigs, dataSchemaMetadata, this.importCollection, 'apiConfiguration' in this.renderConfig ? (_a = this.renderConfig.apiConfiguration) === null || _a === void 0 ? void 0 : _a.dataApi : undefined, this.renderConfig.dependencies),
                    // call onSuccess hook if it exists
                    typescript_1.factory.createIfStatement(typescript_1.factory.createIdentifier('onSuccess'), typescript_1.factory.createBlock([
                        typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('onSuccess'), undefined, [
                            typescript_1.factory.createIdentifier('modelFields'),
                        ])),
                    ], true), undefined),
                    // call the reset function if clearOnSuccess is true
                    ...(0, value_props_1.resetFunctionCheck)({ formActionType, dataSourceType }),
                ], true), typescript_1.factory.createCatchClause(typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('err'), undefined, undefined, undefined), typescript_1.factory.createBlock([
                    typescript_1.factory.createIfStatement(typescript_1.factory.createIdentifier('onError'), typescript_1.factory.createBlock(this.isRenderingGraphQL()
                        ? [
                            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('messages'), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('err'), typescript_1.factory.createIdentifier('errors')), typescript_1.factory.createIdentifier('map')), undefined, [
                                    typescript_1.factory.createArrowFunction(undefined, undefined, [
                                        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('e'), undefined, undefined, undefined),
                                    ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('e'), typescript_1.factory.createIdentifier('message'))),
                                ]), typescript_1.factory.createIdentifier('join')), undefined, [typescript_1.factory.createStringLiteral('\n')])),
                            ], typescript_1.NodeFlags.Const)),
                            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('onError'), undefined, [
                                typescript_1.factory.createIdentifier('modelFields'),
                                typescript_1.factory.createIdentifier('messages'),
                            ])),
                        ]
                        : [
                            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('onError'), undefined, [
                                typescript_1.factory.createIdentifier('modelFields'),
                                typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('err'), typescript_1.factory.createIdentifier('message')),
                            ])),
                        ], true), undefined),
                ], true)), undefined),
            ];
        }
        throw new Error(`${dataSourceType} is not supported in form:onSubmit`);
    }
    getFormOnSubmitAttribute() {
        var _a;
        const { dataType: { dataSourceType }, } = this.form;
        const { formMetadata } = this.componentMetadata;
        const hasModelField = (formMetadata === null || formMetadata === void 0 ? void 0 : formMetadata.fieldConfigs) && Object.values(formMetadata.fieldConfigs).some((config) => (0, render_checkers_1.isModelDataType)(config));
        return typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('onSubmit'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createArrowFunction([typescript_1.factory.createModifier(typescript_1.SyntaxKind.AsyncKeyword)], undefined, [
            typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('event'), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier('SyntheticEvent'), undefined), undefined),
        ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('event'), typescript_1.factory.createIdentifier('preventDefault')), undefined, [])),
            (0, form_renderer_helper_1.buildModelFieldObject)(dataSourceType !== 'DataStore', formMetadata === null || formMetadata === void 0 ? void 0 : formMetadata.fieldConfigs, undefined, (_a = this.renderConfig.apiConfiguration) === null || _a === void 0 ? void 0 : _a.dataApi, formMetadata === null || formMetadata === void 0 ? void 0 : formMetadata.formActionType),
            ...(0, form_renderer_helper_1.onSubmitValidationRun)(hasModelField),
            ...this.getOnSubmitDSCall(),
        ], false))));
    }
}
exports.default = FormRenderer;
//# sourceMappingURL=form.js.map