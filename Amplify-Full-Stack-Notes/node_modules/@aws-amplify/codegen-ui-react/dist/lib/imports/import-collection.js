"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _ImportCollection_collection;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportCollection = void 0;
/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 */
const typescript_1 = require("typescript");
const path_1 = __importDefault(require("path"));
const codegen_ui_1 = require("@aws-amplify/codegen-ui");
const import_mapping_1 = require("./import-mapping");
const primitive_1 = require("../primitive");
const helpers_1 = require("../helpers");
class ImportCollection {
    constructor(importConfig) {
        _ImportCollection_collection.set(this, new Map());
        this.importAlias = new Map();
        this.importedNames = new Set(codegen_ui_1.reservedWords);
        this.rendererConfig = importConfig === null || importConfig === void 0 ? void 0 : importConfig.rendererConfig;
    }
    ingestComponentMetadata(componentMetadata) {
        Object.values((componentMetadata === null || componentMetadata === void 0 ? void 0 : componentMetadata.componentNameToTypeMap) || {}).forEach((value) => this.importedNames.add(value));
        // Add form fields so we dont reuse the identifier
        if (componentMetadata === null || componentMetadata === void 0 ? void 0 : componentMetadata.formMetadata) {
            Object.keys(componentMetadata.formMetadata.fieldConfigs).forEach((value) => this.importedNames.add(value));
        }
    }
    getOperationsPath(operation) {
        var _a, _b;
        if (((_b = (_a = this.rendererConfig) === null || _a === void 0 ? void 0 : _a.apiConfiguration) === null || _b === void 0 ? void 0 : _b.dataApi) === 'GraphQL') {
            switch (operation) {
                case 'mutation':
                    return this.rendererConfig.apiConfiguration.mutationsFilePath;
                case 'query':
                    return this.rendererConfig.apiConfiguration.queriesFilePath;
                case 'subscription':
                    return this.rendererConfig.apiConfiguration.subscriptionsFilePath;
                case 'fragment':
                    return this.rendererConfig.apiConfiguration.fragmentsFilePath;
                default:
                    throw new codegen_ui_1.InvalidInputError(`Unexpected GraphQL operation encountered: ${operation}`);
            }
        }
        throw new codegen_ui_1.InvalidInputError('Render is not configured to utilize GraphQL operations');
    }
    addMappedImport(...importValue) {
        importValue.forEach((value) => {
            const importPackage = import_mapping_1.ImportMapping[value];
            this.addImport(importPackage, value);
        });
    }
    addGraphqlMutationImport(importName) {
        return this.addImport(this.getOperationsPath('mutation'), importName);
    }
    addGraphqlQueryImport(importName) {
        return this.addImport(this.getOperationsPath('query'), importName);
    }
    addGraphqlSubscriptionImport(importName) {
        return this.addImport(this.getOperationsPath('subscription'), importName);
    }
    addModelImport(importName) {
        var _a, _b;
        if (((_b = (_a = this.rendererConfig) === null || _a === void 0 ? void 0 : _a.apiConfiguration) === null || _b === void 0 ? void 0 : _b.dataApi) === 'GraphQL') {
            return this.addImport(`${this.rendererConfig.apiConfiguration.typesFilePath}`, importName);
        }
        return this.addImport(import_mapping_1.ImportSource.LOCAL_MODELS, importName);
    }
    addImport(packageName, importName) {
        if (!__classPrivateFieldGet(this, _ImportCollection_collection, "f").has(packageName)) {
            __classPrivateFieldGet(this, _ImportCollection_collection, "f").set(packageName, new Set());
        }
        const existingPackage = __classPrivateFieldGet(this, _ImportCollection_collection, "f").get(packageName);
        if (!(existingPackage === null || existingPackage === void 0 ? void 0 : existingPackage.has(importName))) {
            existingPackage === null || existingPackage === void 0 ? void 0 : existingPackage.add(importName);
            if (packageName !== import_mapping_1.ImportSource.LOCAL_MODELS) {
                this.importedNames.add(importName);
            }
        }
        if (packageName === import_mapping_1.ImportSource.LOCAL_MODELS) {
            const existingPackageAlias = this.importAlias.get(packageName);
            const existingAlias = existingPackageAlias === null || existingPackageAlias === void 0 ? void 0 : existingPackageAlias.get(importName);
            if (existingAlias)
                return existingAlias;
            const modelAlias = (0, helpers_1.createUniqueName)(importName, (input) => 
            // Testing if the name is not unique.
            // Props is for testing the primitive types e.g. "TextProps".
            // And test for a matching primitive name value e.g. "Text"
            this.importedNames.has(input) ||
                (input.endsWith('Props') && (0, primitive_1.isPrimitive)(input.replace(/Props/g, ''))) ||
                (0, primitive_1.isPrimitive)(input));
            if (existingPackageAlias) {
                existingPackageAlias.set(importName, modelAlias);
            }
            else {
                const aliasMap = new Map();
                aliasMap.set(importName, modelAlias);
                this.importAlias.set(packageName, aliasMap);
            }
            this.importedNames.add(modelAlias);
            return modelAlias;
        }
        return importName;
    }
    removeImportSource(packageImport) {
        __classPrivateFieldGet(this, _ImportCollection_collection, "f").delete(packageImport);
    }
    hasPackage(packageName) {
        return __classPrivateFieldGet(this, _ImportCollection_collection, "f").has(packageName);
    }
    getMappedAlias(packageName, importName) {
        var _a;
        return ((_a = this.importAlias.get(packageName)) === null || _a === void 0 ? void 0 : _a.get(importName)) || importName;
    }
    getMappedModelAlias(importName) {
        var _a, _b, _c;
        if (((_b = (_a = this.rendererConfig) === null || _a === void 0 ? void 0 : _a.apiConfiguration) === null || _b === void 0 ? void 0 : _b.dataApi) === 'GraphQL') {
            return this.getMappedAlias(((_c = this.rendererConfig.apiConfiguration) === null || _c === void 0 ? void 0 : _c.typesFilePath) || '', importName);
        }
        return this.getMappedAlias(import_mapping_1.ImportSource.LOCAL_MODELS, importName);
    }
    mergeCollections(otherCollection) {
        __classPrivateFieldGet(otherCollection, _ImportCollection_collection, "f").forEach((value, key) => {
            [...value].forEach((singlePackage) => {
                this.addImport(key, singlePackage);
            });
        });
    }
    buildSampleSnippetImports(topComponentName) {
        return [
            typescript_1.factory.createImportDeclaration(undefined, undefined, typescript_1.factory.createImportClause(false, undefined, typescript_1.factory.createNamedImports([
                typescript_1.factory.createImportSpecifier(undefined, typescript_1.factory.createIdentifier(topComponentName)),
            ])), typescript_1.factory.createStringLiteral('./ui-components')),
        ];
    }
    getAliasMap() {
        const modelMap = {};
        const modelSet = __classPrivateFieldGet(this, _ImportCollection_collection, "f").get(import_mapping_1.ImportSource.LOCAL_MODELS);
        const modelAliases = this.importAlias.get(import_mapping_1.ImportSource.LOCAL_MODELS);
        if (modelSet) {
            [...modelSet].forEach((item) => {
                const alias = modelAliases === null || modelAliases === void 0 ? void 0 : modelAliases.get(item);
                if (alias)
                    modelMap[item] = alias;
            });
        }
        return { model: modelMap };
    }
    buildImportStatements(skipReactImport) {
        const importDeclarations = []
            .concat(skipReactImport
            ? []
            : [
                typescript_1.factory.createImportDeclaration(undefined, undefined, typescript_1.factory.createImportClause(false, undefined, typescript_1.factory.createNamespaceImport(typescript_1.factory.createIdentifier('React'))), typescript_1.factory.createStringLiteral('react')),
            ])
            .concat(Array.from(__classPrivateFieldGet(this, _ImportCollection_collection, "f"))
            .filter(([moduleName]) => moduleName)
            .map(([moduleName, imports]) => {
            const namedImports = [...imports].filter((namedImport) => namedImport !== 'default').sort();
            const aliasMap = this.importAlias.get(moduleName);
            if (aliasMap) {
                const importClause = typescript_1.factory.createImportClause(false, undefined, typescript_1.factory.createNamedImports([...imports].map((item) => {
                    const alias = aliasMap.get(item);
                    return typescript_1.factory.createImportSpecifier(alias && alias !== item ? typescript_1.factory.createIdentifier(item) : undefined, typescript_1.factory.createIdentifier(alias !== null && alias !== void 0 ? alias : item));
                })));
                return typescript_1.factory.createImportDeclaration(undefined, undefined, importClause, typescript_1.factory.createStringLiteral(moduleName));
            }
            return typescript_1.factory.createImportDeclaration(undefined, undefined, typescript_1.factory.createImportClause(false, 
            // use module name as default import name
            [...imports].indexOf('default') >= 0 ? typescript_1.factory.createIdentifier(path_1.default.basename(moduleName)) : undefined, typescript_1.factory.createNamedImports(namedImports.map((item) => {
                return typescript_1.factory.createImportSpecifier(undefined, typescript_1.factory.createIdentifier(item));
            }))), typescript_1.factory.createStringLiteral(moduleName));
        }));
        return importDeclarations;
    }
}
exports.ImportCollection = ImportCollection;
_ImportCollection_collection = new WeakMap();
//# sourceMappingURL=import-collection.js.map