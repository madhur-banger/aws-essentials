"use strict";
/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapInParenthesizedExpression = exports.getFetchRelatedRecordsCallbacks = exports.getFetchRelatedRecords = exports.getGraphQLJoinTableCreateExpression = exports.mapFieldArraysToPropertyAssignments = exports.getGraphqlCallExpression = exports.isGraphqlQueryAction = exports.getGraphqlQueryForModel = exports.isGraphqlConfig = exports.ActionType = void 0;
const pluralize_1 = require("pluralize");
const codegen_ui_1 = require("@aws-amplify/codegen-ui");
const typescript_1 = require("typescript");
const helpers_1 = require("../helpers");
const react_component_render_helper_1 = require("../react-component-render-helper");
const primitive_1 = require("../primitive");
const render_checkers_1 = require("../forms/form-renderer-helper/render-checkers");
const constants_1 = require("./constants");
const amplify_js_versioning_1 = require("../helpers/amplify-js-versioning");
var ActionType;
(function (ActionType) {
    ActionType["CREATE"] = "create";
    ActionType["UPDATE"] = "update";
    ActionType["DELETE"] = "delete";
    ActionType["LIST"] = "list";
    ActionType["GET"] = "get";
    ActionType["GET_BY_RELATIONSHIP"] = "getByRelationship";
})(ActionType = exports.ActionType || (exports.ActionType = {}));
/* istanbul ignore next */
const isGraphqlConfig = (apiConfiguration) => {
    return (apiConfiguration === null || apiConfiguration === void 0 ? void 0 : apiConfiguration.dataApi) === 'GraphQL';
};
exports.isGraphqlConfig = isGraphqlConfig;
const getGraphqlQueryForModel = (action, model, byFieldName = '') => {
    switch (action) {
        case ActionType.CREATE:
            return `create${model}`;
        case ActionType.UPDATE:
            return `update${model}`;
        case ActionType.DELETE:
            return `delete${model}`;
        case ActionType.GET:
            return `get${model}`;
        case ActionType.LIST:
            return `list${(0, pluralize_1.plural)(model)}`;
        case ActionType.GET_BY_RELATIONSHIP:
            return `${(0, helpers_1.lowerCaseFirst)((0, pluralize_1.plural)(model))}By${(0, helpers_1.capitalizeFirstLetter)(byFieldName)}`;
        default:
            throw new codegen_ui_1.InvalidInputError(`Action ${action} has no corresponding GraphQL operation`);
    }
};
exports.getGraphqlQueryForModel = getGraphqlQueryForModel;
/* istanbul ignore next */
const isGraphqlQueryAction = (action) => {
    return [ActionType.GET_BY_RELATIONSHIP, ActionType.GET, ActionType.LIST].includes(action);
};
exports.isGraphqlQueryAction = isGraphqlQueryAction;
/**
 * Returns a GraphQL call expression and adds to importCollection.
 *
 * @example
 * ```
 * API.graphql({
 *  query: createTodo,
 *  variables: {
 *    input: {
 *      inputs
 *    },
 *  },
 * });
 * ```
 */
/* istanbul ignore next */
const getGraphqlCallExpression = (action, model, importCollection, variables, byFieldName, renderConfigDependencies) => {
    const query = (0, exports.getGraphqlQueryForModel)(action, model, byFieldName);
    const graphqlVariables = [];
    const graphqlOptions = [
        typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('query'), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(query), typescript_1.factory.createIdentifier('replaceAll')), undefined, [typescript_1.factory.createStringLiteral('__typename'), typescript_1.factory.createStringLiteral('')])),
    ];
    const mappedImport = (0, amplify_js_versioning_1.getAmplifyJSAPIImport)(renderConfigDependencies);
    importCollection.addMappedImport(mappedImport);
    if ((0, exports.isGraphqlQueryAction)(action)) {
        importCollection.addGraphqlQueryImport(query);
    }
    else {
        importCollection.addGraphqlMutationImport(query);
    }
    if (Array.isArray(variables)) {
        graphqlOptions.push(...variables);
    }
    else {
        if (variables === null || variables === void 0 ? void 0 : variables.inputs) {
            if ((0, exports.isGraphqlQueryAction)(action)) {
                variables.inputs.forEach((variable) => {
                    graphqlVariables.push(variable);
                });
            }
            else {
                graphqlVariables.push(typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('input'), typescript_1.factory.createObjectLiteralExpression(variables.inputs, true)));
            }
        }
        // filter applies to list
        if ((action === ActionType.LIST || action === ActionType.GET_BY_RELATIONSHIP) && (variables === null || variables === void 0 ? void 0 : variables.filters)) {
            graphqlVariables.push(typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('filter'), typescript_1.factory.createObjectLiteralExpression(variables === null || variables === void 0 ? void 0 : variables.filters, true)));
        }
        if (graphqlVariables.length > 0) {
            graphqlOptions.push(typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('variables'), typescript_1.factory.createObjectLiteralExpression(graphqlVariables)));
        }
    }
    importCollection.addModelImport(model);
    const amplifyJSVersion = (0, amplify_js_versioning_1.getAmplifyJSVersionToRender)(renderConfigDependencies);
    return typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(amplifyJSVersion === constants_1.AMPLIFY_JS_V5 ? 'API' : 'client'), typescript_1.factory.createIdentifier('graphql')), undefined, [typescript_1.factory.createObjectLiteralExpression(graphqlOptions, true)]);
};
exports.getGraphqlCallExpression = getGraphqlCallExpression;
/* istanbul ignore next */
const mapFieldArraysToPropertyAssignments = (joinTableFields, modelFields, modelRecord) => {
    return joinTableFields.map((key, i) => {
        const recordKey = modelFields[i];
        if (!recordKey) {
            throw new codegen_ui_1.InternalError(`Cannot find corresponding key for ${key}`);
        }
        return typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(key), typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(modelRecord), typescript_1.factory.createIdentifier(recordKey)));
    });
};
exports.mapFieldArraysToPropertyAssignments = mapFieldArraysToPropertyAssignments;
/* istanbul ignore next */
const getGraphQLJoinTableCreateExpression = (relatedJoinTableName, thisModelRecord, thisModelPrimaryKeys, joinTableThisModelFields, relatedModelRecord, relatedModelPrimaryKeys, joinTableRelatedModelFields, importCollection, renderConfigDependencies) => {
    const thisModelAssignments = (0, exports.mapFieldArraysToPropertyAssignments)(joinTableThisModelFields, thisModelPrimaryKeys, thisModelRecord);
    const relatedModelAssignments = (0, exports.mapFieldArraysToPropertyAssignments)(joinTableRelatedModelFields, relatedModelPrimaryKeys, relatedModelRecord);
    return (0, exports.getGraphqlCallExpression)(ActionType.CREATE, relatedJoinTableName, importCollection, {
        inputs: [...thisModelAssignments, ...relatedModelAssignments],
    }, undefined, renderConfigDependencies);
};
exports.getGraphQLJoinTableCreateExpression = getGraphQLJoinTableCreateExpression;
const fetchRelatedRecordEffect = (fetchRecordFunctions) => {
    return typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('React'), typescript_1.factory.createIdentifier('useEffect')), undefined, [
        typescript_1.factory.createArrowFunction(undefined, undefined, [], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock(fetchRecordFunctions.map((fetchFunction) => {
            return typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier(fetchFunction), undefined, [
                typescript_1.factory.createStringLiteral(''),
            ]));
        }), true)),
        typescript_1.factory.createArrayLiteralExpression([], false),
    ]));
};
/* istanbul ignore next */
const getFetchRelatedRecords = (relatedModelName) => `fetch${(0, helpers_1.capitalizeFirstLetter)(relatedModelName)}Records`;
exports.getFetchRelatedRecords = getFetchRelatedRecords;
/* istanbul ignore next */
const getFetchRelatedRecordsCallbacks = (fieldConfigs, importCollection, dataApi = 'DataStore', renderConfigDependencies) => {
    const initalFetchRecords = [];
    const fetchRecordsStatements = Object.entries(fieldConfigs).reduce((acc, [name, { sanitizedFieldName, relationship, valueMappings, componentType }]) => {
        if (relationship && componentType === primitive_1.Primitive.Autocomplete) {
            const fieldName = name.split('.')[0];
            const renderedFieldName = sanitizedFieldName || fieldName;
            const fetchRecordsVariable = (0, exports.getFetchRelatedRecords)(renderedFieldName);
            initalFetchRecords.push(fetchRecordsVariable);
            const setModelLoading = (0, helpers_1.getSetNameIdentifier)(`${renderedFieldName}Loading`);
            const setModelFetchOption = (0, helpers_1.getSetNameIdentifier)(`${renderedFieldName}Records`);
            const valueConfig = valueMappings === null || valueMappings === void 0 ? void 0 : valueMappings.values[0];
            if (!valueConfig) {
                return acc;
            }
            const displayValueProperty = valueConfig.displayValue || valueConfig.value;
            let displayValues = [];
            if ((0, react_component_render_helper_1.isConcatenatedProperty)(displayValueProperty)) {
                displayValues = displayValueProperty.concat.reduce((displayValue, displayValueProp) => {
                    if ('bindingProperties' in displayValueProp &&
                        'field' in displayValueProp.bindingProperties &&
                        displayValueProp.bindingProperties.field) {
                        displayValue.push(displayValueProp.bindingProperties.field);
                    }
                    return displayValue;
                }, []);
            }
            else if ((0, react_component_render_helper_1.isBoundProperty)(displayValueProperty)) {
                displayValues = [displayValueProperty.bindingProperties.field];
            }
            acc.push(typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(fetchRecordsVariable), undefined, undefined, typescript_1.factory.createArrowFunction([typescript_1.factory.createToken(typescript_1.SyntaxKind.AsyncKeyword)], undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('value'), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
                    typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(setModelLoading, undefined, [typescript_1.factory.createTrue()])),
                    typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                        typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('newOptions'), undefined, undefined, typescript_1.factory.createArrayLiteralExpression([], false)),
                    ], typescript_1.NodeFlags.Const)),
                    typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                        typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('newNext'), undefined, undefined, typescript_1.factory.createStringLiteral('')),
                    ], typescript_1.NodeFlags.Let)),
                    typescript_1.factory.createWhileStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('newOptions'), typescript_1.factory.createIdentifier('length')), typescript_1.factory.createToken(typescript_1.SyntaxKind.LessThanToken), typescript_1.factory.createIdentifier('autocompleteLength')), typescript_1.factory.createToken(typescript_1.SyntaxKind.AmpersandAmpersandToken), typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('newNext'), typescript_1.factory.createToken(typescript_1.SyntaxKind.ExclamationEqualsToken), typescript_1.factory.createNull()))), typescript_1.factory.createBlock([
                        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('variables'), undefined, undefined, typescript_1.factory.createObjectLiteralExpression([
                                typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('limit'), typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('autocompleteLength'), typescript_1.factory.createToken(typescript_1.SyntaxKind.AsteriskToken), typescript_1.factory.createNumericLiteral('5'))),
                                typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('filter'), typescript_1.factory.createObjectLiteralExpression([
                                    typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('or'), typescript_1.factory.createArrayLiteralExpression(displayValues.map((value) => typescript_1.factory.createObjectLiteralExpression([
                                        typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(value), typescript_1.factory.createObjectLiteralExpression([
                                            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('contains'), typescript_1.factory.createIdentifier('value')),
                                        ], false)),
                                    ], false)))),
                                ], false)),
                            ], true)),
                        ], typescript_1.NodeFlags.Const)),
                        typescript_1.factory.createIfStatement(typescript_1.factory.createIdentifier('newNext'), typescript_1.factory.createBlock([
                            typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createElementAccessExpression(typescript_1.factory.createIdentifier('variables'), typescript_1.factory.createStringLiteral('nextToken')), typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsToken), typescript_1.factory.createIdentifier('newNext'))),
                        ], true), undefined),
                        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('result'), undefined, undefined, wrapInParenthesizedExpression((0, exports.getGraphqlCallExpression)(ActionType.LIST, relationship.relatedModelName, importCollection, [
                                typescript_1.factory.createShorthandPropertyAssignment(typescript_1.factory.createIdentifier('variables'), undefined),
                            ], undefined, renderConfigDependencies), [
                                'data',
                                (0, exports.getGraphqlQueryForModel)(ActionType.LIST, (0, helpers_1.capitalizeFirstLetter)(relationship.relatedModelName)),
                                'items',
                            ])),
                        ], typescript_1.NodeFlags.Const)),
                        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('loaded'), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('result'), typescript_1.factory.createIdentifier('filter')), undefined, [
                                typescript_1.factory.createArrowFunction(undefined, undefined, [
                                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('item'), undefined, undefined, undefined),
                                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), dataApi === 'GraphQL' && !(0, render_checkers_1.isModelDataType)(fieldConfigs[fieldName])
                                    ? typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier(fieldName), typescript_1.factory.createToken(typescript_1.SyntaxKind.ExclamationEqualsEqualsToken), typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('item'), typescript_1.factory.createIdentifier('id')))
                                    : typescript_1.factory.createPrefixUnaryExpression(typescript_1.SyntaxKind.ExclamationToken, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(`${fieldName}IdSet`), typescript_1.factory.createIdentifier('has')), undefined, [
                                        typescript_1.factory.createCallChain(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('getIDValue'), typescript_1.factory.createIdentifier(fieldName)), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionDotToken), undefined, [typescript_1.factory.createIdentifier('item')]),
                                    ]))),
                            ])),
                        ], typescript_1.NodeFlags.AwaitContext)),
                        typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('newOptions'), typescript_1.factory.createIdentifier('push')), undefined, [typescript_1.factory.createSpreadElement(typescript_1.factory.createIdentifier('loaded'))])),
                        typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('newNext'), typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsToken), typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('result'), typescript_1.factory.createIdentifier('nextToken')))),
                    ], true)),
                    typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(setModelFetchOption, undefined, [
                        typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('newOptions'), typescript_1.factory.createIdentifier('slice')), undefined, [typescript_1.factory.createNumericLiteral('0'), typescript_1.factory.createIdentifier('autocompleteLength')]),
                    ])),
                    typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(setModelLoading, undefined, [typescript_1.factory.createFalse()])),
                ], true))),
            ], typescript_1.NodeFlags.Const)));
        }
        return acc;
    }, []);
    return [...fetchRecordsStatements, fetchRelatedRecordEffect(initalFetchRecords)];
};
exports.getFetchRelatedRecordsCallbacks = getFetchRelatedRecordsCallbacks;
function wrapInParenthesizedExpression(callExpression, accessors) {
    return accessors.reduce((acc, _, index, initialValue) => typescript_1.factory.createPropertyAccessChain(acc, typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionDotToken), typescript_1.factory.createIdentifier(initialValue[index])), typescript_1.factory.createAwaitExpression(callExpression));
}
exports.wrapInParenthesizedExpression = wrapInParenthesizedExpression;
//# sourceMappingURL=graphql.js.map