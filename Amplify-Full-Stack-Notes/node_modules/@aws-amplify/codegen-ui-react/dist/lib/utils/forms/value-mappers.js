"use strict";
/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertToLocalAST = exports.convertTimeStampToDateAST = exports.convertToLocal = exports.convertTimeStampToDate = void 0;
const typescript_1 = require("typescript");
/**
 * accepts timestamp number and returns date object
 * since datastore allows second and millisecond epochs we need to format accordingly
 *
 * @param ts number
 * @returns date object
 */
const convertTimeStampToDate = (ts) => {
    if (Math.abs(Date.now() - ts) < Math.abs(Date.now() - ts * 1000)) {
        return new Date(ts);
    }
    return new Date(ts * 1000);
};
exports.convertTimeStampToDate = convertTimeStampToDate;
/**
 * takes a date object and converts it to the local format used for an html input element with datetime-local
 *
 * @param date date object
 * @returns string formatted in datetime-local
 */
const convertToLocal = (date) => {
    const df = new Intl.DateTimeFormat('default', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        calendar: 'iso8601',
        numberingSystem: 'latn',
        hourCycle: 'h23',
    });
    const parts = df.formatToParts(date).reduce((acc, part) => {
        acc[part.type] = part.value;
        return acc;
    }, {});
    return `${parts.year}-${parts.month}-${parts.day}T${parts.hour}:${parts.minute}`;
};
exports.convertToLocal = convertToLocal;
/**
 * ast representation fo the convert timestamp to date
 */
exports.convertTimeStampToDateAST = typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
    typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('convertTimeStampToDate'), undefined, undefined, typescript_1.factory.createArrowFunction(undefined, undefined, [
        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('ts'), undefined, typescript_1.factory.createKeywordTypeNode(typescript_1.SyntaxKind.NumberKeyword), undefined),
    ], typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier('Date'), undefined), typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
        typescript_1.factory.createIfStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('Math'), typescript_1.factory.createIdentifier('abs')), undefined, [
            typescript_1.factory.createBinaryExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('Date'), typescript_1.factory.createIdentifier('now')), undefined, []), typescript_1.factory.createToken(typescript_1.SyntaxKind.MinusToken), typescript_1.factory.createIdentifier('ts')),
        ]), typescript_1.factory.createToken(typescript_1.SyntaxKind.LessThanToken), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('Math'), typescript_1.factory.createIdentifier('abs')), undefined, [
            typescript_1.factory.createBinaryExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('Date'), typescript_1.factory.createIdentifier('now')), undefined, []), typescript_1.factory.createToken(typescript_1.SyntaxKind.MinusToken), typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('ts'), typescript_1.factory.createToken(typescript_1.SyntaxKind.AsteriskToken), typescript_1.factory.createNumericLiteral('1000'))),
        ])), typescript_1.factory.createBlock([
            typescript_1.factory.createReturnStatement(typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier('Date'), undefined, [
                typescript_1.factory.createIdentifier('ts'),
            ])),
        ], true), undefined),
        typescript_1.factory.createReturnStatement(typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier('Date'), undefined, [
            typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('ts'), typescript_1.factory.createToken(typescript_1.SyntaxKind.AsteriskToken), typescript_1.factory.createNumericLiteral('1000')),
        ])),
    ], true))),
], typescript_1.NodeFlags.Const));
/**
 * convertToLocal function represented in ts ast
 */
exports.convertToLocalAST = typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
    typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('convertToLocal'), undefined, undefined, typescript_1.factory.createArrowFunction(undefined, undefined, [
        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('date'), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier('Date'), undefined), undefined),
    ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('df'), undefined, undefined, typescript_1.factory.createNewExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('Intl'), typescript_1.factory.createIdentifier('DateTimeFormat')), undefined, [
                typescript_1.factory.createStringLiteral('default'),
                typescript_1.factory.createObjectLiteralExpression([
                    typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('year'), typescript_1.factory.createStringLiteral('numeric')),
                    typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('month'), typescript_1.factory.createStringLiteral('2-digit')),
                    typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('day'), typescript_1.factory.createStringLiteral('2-digit')),
                    typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hour'), typescript_1.factory.createStringLiteral('2-digit')),
                    typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('minute'), typescript_1.factory.createStringLiteral('2-digit')),
                    typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('calendar'), typescript_1.factory.createStringLiteral('iso8601')),
                    typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('numberingSystem'), typescript_1.factory.createStringLiteral('latn')),
                    typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hourCycle'), typescript_1.factory.createStringLiteral('h23')),
                ], true),
            ])),
        ], typescript_1.NodeFlags.Const)),
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('parts'), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('df'), typescript_1.factory.createIdentifier('formatToParts')), undefined, [typescript_1.factory.createIdentifier('date')]), typescript_1.factory.createIdentifier('reduce')), [
                typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier('Record'), [
                    typescript_1.factory.createKeywordTypeNode(typescript_1.SyntaxKind.StringKeyword),
                    typescript_1.factory.createKeywordTypeNode(typescript_1.SyntaxKind.StringKeyword),
                ]),
            ], [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('acc'), undefined, undefined, undefined),
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('part'), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
                    typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createElementAccessExpression(typescript_1.factory.createIdentifier('acc'), typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('part'), typescript_1.factory.createIdentifier('type'))), typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsToken), typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('part'), typescript_1.factory.createIdentifier('value')))),
                    typescript_1.factory.createReturnStatement(typescript_1.factory.createIdentifier('acc')),
                ], true)),
                typescript_1.factory.createObjectLiteralExpression([], false),
            ])),
        ], typescript_1.NodeFlags.Const)),
        typescript_1.factory.createReturnStatement(typescript_1.factory.createTemplateExpression(typescript_1.factory.createTemplateHead('', ''), [
            typescript_1.factory.createTemplateSpan(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('parts'), typescript_1.factory.createIdentifier('year')), typescript_1.factory.createTemplateMiddle('-', '-')),
            typescript_1.factory.createTemplateSpan(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('parts'), typescript_1.factory.createIdentifier('month')), typescript_1.factory.createTemplateMiddle('-', '-')),
            typescript_1.factory.createTemplateSpan(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('parts'), typescript_1.factory.createIdentifier('day')), typescript_1.factory.createTemplateMiddle('T', 'T')),
            typescript_1.factory.createTemplateSpan(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('parts'), typescript_1.factory.createIdentifier('hour')), typescript_1.factory.createTemplateMiddle(':', ':')),
            typescript_1.factory.createTemplateSpan(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('parts'), typescript_1.factory.createIdentifier('minute')), typescript_1.factory.createTemplateTail('', '')),
        ])),
    ], true))),
], typescript_1.NodeFlags.Const));
//# sourceMappingURL=value-mappers.js.map