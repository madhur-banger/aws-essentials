"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateCheckValidationFunction = exports.generateParseDateValidatorFunction = exports.generateValidateFieldFunction = exports.fieldValidationConfigurationDeclaration = exports.validationResponseDeclaration = void 0;
/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 */
const typescript_1 = __importStar(require("typescript"));
/* eslint-disable max-len */
// AST-viewer does not escape backslashes, so it generates the wrong regex
const EscapedRegexLiterals = {
    emailAddress: "/^[-!#$%&'*+\\/0-9=?A-Z^_a-z`{|}~](\\.?[-!#$%&'*+\\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\\.?[a-zA-Z0-9])*\\.[a-zA-Z](-?[a-zA-Z0-9])+$/",
    ipv4: '/^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$/',
    ipv6: '/^(?:(?:[a-fA-F\\d]{1,4}:){7}(?:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\d]{1,4}:){4}(?:(?::[a-fA-F\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\d]{1,4}:){3}(?:(?::[a-fA-F\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\d]{1,4}:){2}(?:(?::[a-fA-F\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\d]{1,4}:){1}(?:(?::[a-fA-F\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$/',
    phone: '/^\\+?\\d[\\d\\s-]+$/',
};
const validationResponseDeclaration = () => typescript_1.factory.createTypeAliasDeclaration(undefined, undefined, typescript_1.factory.createIdentifier('ValidationResponse'), undefined, typescript_1.factory.createTypeLiteralNode([
    typescript_1.factory.createPropertySignature(undefined, typescript_1.factory.createIdentifier('hasError'), undefined, typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.BooleanKeyword)),
    typescript_1.factory.createPropertySignature(undefined, typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionToken), typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.StringKeyword)),
]));
exports.validationResponseDeclaration = validationResponseDeclaration;
const fieldValidationConfigurationDeclaration = () => typescript_1.factory.createTypeAliasDeclaration(undefined, undefined, typescript_1.factory.createIdentifier('FieldValidationConfiguration'), undefined, typescript_1.factory.createTypeLiteralNode([
    typescript_1.factory.createPropertySignature(undefined, typescript_1.factory.createIdentifier('type'), undefined, typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.StringKeyword)),
    typescript_1.factory.createPropertySignature(undefined, typescript_1.factory.createIdentifier('strValues'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionToken), typescript_1.factory.createArrayTypeNode(typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.StringKeyword))),
    typescript_1.factory.createPropertySignature(undefined, typescript_1.factory.createIdentifier('numValues'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionToken), typescript_1.factory.createArrayTypeNode(typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.NumberKeyword))),
    typescript_1.factory.createPropertySignature(undefined, typescript_1.factory.createIdentifier('validationMessage'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionToken), typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.StringKeyword)),
]));
exports.fieldValidationConfigurationDeclaration = fieldValidationConfigurationDeclaration;
const generateValidateFieldFunction = () => typescript_1.factory.createVariableStatement([typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.ExportKeyword)], typescript_1.factory.createVariableDeclarationList([
    typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('validateField'), undefined, undefined, typescript_1.factory.createArrowFunction(undefined, undefined, [
        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('value'), undefined, typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.AnyKeyword), undefined),
        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('validations'), undefined, typescript_1.factory.createArrayTypeNode(typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier('FieldValidationConfiguration'), undefined)), undefined),
    ], typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier('ValidationResponse'), undefined), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
        typescript_1.factory.createForOfStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('validation'), undefined, undefined, undefined),
        ], typescript_1.default.NodeFlags.Const), typescript_1.factory.createIdentifier('validations'), typescript_1.factory.createBlock([
            typescript_1.factory.createIfStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('value'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsEqualsEqualsToken), typescript_1.factory.createIdentifier('undefined')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('value'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsEqualsEqualsToken), typescript_1.factory.createStringLiteral(''))), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('value'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsEqualsEqualsToken), typescript_1.factory.createNull())), typescript_1.factory.createBlock([
                typescript_1.factory.createIfStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('type')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsEqualsEqualsToken), typescript_1.factory.createStringLiteral('Required')), typescript_1.factory.createBlock([
                    typescript_1.factory.createReturnStatement(typescript_1.factory.createObjectLiteralExpression([
                        typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createTrue()),
                        typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('validationMessage')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createStringLiteral('The value is required'))),
                    ], true)),
                ], true), typescript_1.factory.createBlock([
                    typescript_1.factory.createReturnStatement(typescript_1.factory.createObjectLiteralExpression([
                        typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createFalse()),
                    ], true)),
                ], true)),
            ], true), undefined),
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('validationResult'), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('checkValidation'), undefined, [
                    typescript_1.factory.createIdentifier('value'),
                    typescript_1.factory.createIdentifier('validation'),
                ])),
            ], typescript_1.default.NodeFlags.Const)),
            typescript_1.factory.createIfStatement(typescript_1.factory.createPropertyAccessChain(typescript_1.factory.createIdentifier('validationResult'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionDotToken), typescript_1.factory.createIdentifier('hasError')), typescript_1.factory.createBlock([typescript_1.factory.createReturnStatement(typescript_1.factory.createIdentifier('validationResult'))], true), undefined),
        ], true)),
        typescript_1.factory.createReturnStatement(typescript_1.factory.createObjectLiteralExpression([typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createFalse())], false)),
    ], true))),
], typescript_1.default.NodeFlags.Const));
exports.generateValidateFieldFunction = generateValidateFieldFunction;
const generateParseDateValidatorFunction = () => typescript_1.factory.createVariableStatement([typescript_1.factory.createToken(typescript_1.default.SyntaxKind.ExportKeyword)], typescript_1.factory.createVariableDeclarationList([
    typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('parseDateValidator'), undefined, undefined, typescript_1.factory.createArrowFunction(undefined, undefined, [
        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('dateValidator'), undefined, typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.StringKeyword), undefined),
    ], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('isTimestamp'), undefined, undefined, typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createTemplateExpression(typescript_1.factory.createTemplateHead('', ''), [
                typescript_1.factory.createTemplateSpan(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('parseInt'), undefined, [
                    typescript_1.factory.createIdentifier('dateValidator'),
                ]), typescript_1.factory.createTemplateTail('', '')),
            ]), typescript_1.factory.createIdentifier('length')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsEqualsEqualsToken), typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('dateValidator'), typescript_1.factory.createIdentifier('length')))),
        ], typescript_1.default.NodeFlags.Const)),
        typescript_1.factory.createReturnStatement(typescript_1.factory.createConditionalExpression(typescript_1.factory.createIdentifier('isTimestamp'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionToken), typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('parseInt'), undefined, [
            typescript_1.factory.createIdentifier('dateValidator'),
        ]), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.ColonToken), typescript_1.factory.createIdentifier('dateValidator'))),
    ], true))),
], typescript_1.default.NodeFlags.Const));
exports.generateParseDateValidatorFunction = generateParseDateValidatorFunction;
const numValuesSwitchStatement = () => typescript_1.factory.createSwitchStatement(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('type')), typescript_1.factory.createCaseBlock([
    typescript_1.factory.createCaseClause(typescript_1.factory.createStringLiteral('LessThanChar'), [
        typescript_1.factory.createReturnStatement(typescript_1.factory.createObjectLiteralExpression([
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('value'), typescript_1.factory.createIdentifier('length')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.LessThanEqualsToken), typescript_1.factory.createElementAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('numValues')), typescript_1.factory.createNumericLiteral('0')))))),
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('validationMessage')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createTemplateExpression(typescript_1.factory.createTemplateHead('The value must be shorter than ', 'The value must be shorter than '), [
                typescript_1.factory.createTemplateSpan(typescript_1.factory.createElementAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('numValues')), typescript_1.factory.createNumericLiteral('0')), typescript_1.factory.createTemplateTail('', '')),
            ]))),
        ], true)),
    ]),
    typescript_1.factory.createCaseClause(typescript_1.factory.createStringLiteral('GreaterThanChar'), [
        typescript_1.factory.createReturnStatement(typescript_1.factory.createObjectLiteralExpression([
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('value'), typescript_1.factory.createIdentifier('length')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.GreaterThanToken), typescript_1.factory.createElementAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('numValues')), typescript_1.factory.createNumericLiteral('0')))))),
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('validationMessage')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createTemplateExpression(typescript_1.factory.createTemplateHead('The value must be longer than ', 'The value must be longer than '), [
                typescript_1.factory.createTemplateSpan(typescript_1.factory.createElementAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('numValues')), typescript_1.factory.createNumericLiteral('0')), typescript_1.factory.createTemplateTail('', '')),
            ]))),
        ], true)),
    ]),
    typescript_1.factory.createCaseClause(typescript_1.factory.createStringLiteral('LessThanNum'), [
        typescript_1.factory.createReturnStatement(typescript_1.factory.createObjectLiteralExpression([
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('value'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.LessThanToken), typescript_1.factory.createElementAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('numValues')), typescript_1.factory.createNumericLiteral('0')))))),
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('validationMessage')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createTemplateExpression(typescript_1.factory.createTemplateHead('The value must be less than ', 'The value must be less than '), [
                typescript_1.factory.createTemplateSpan(typescript_1.factory.createElementAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('numValues')), typescript_1.factory.createNumericLiteral('0')), typescript_1.factory.createTemplateTail('', '')),
            ]))),
        ], true)),
    ]),
    typescript_1.factory.createCaseClause(typescript_1.factory.createStringLiteral('GreaterThanNum'), [
        typescript_1.factory.createReturnStatement(typescript_1.factory.createObjectLiteralExpression([
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('value'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.GreaterThanToken), typescript_1.factory.createElementAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('numValues')), typescript_1.factory.createNumericLiteral('0')))))),
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('validationMessage')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createTemplateExpression(typescript_1.factory.createTemplateHead('The value must be greater than ', 'The value must be greater than '), [
                typescript_1.factory.createTemplateSpan(typescript_1.factory.createElementAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('numValues')), typescript_1.factory.createNumericLiteral('0')), typescript_1.factory.createTemplateTail('', '')),
            ]))),
        ], true)),
    ]),
    typescript_1.factory.createCaseClause(typescript_1.factory.createStringLiteral('EqualTo'), [
        typescript_1.factory.createReturnStatement(typescript_1.factory.createObjectLiteralExpression([
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('numValues')), typescript_1.factory.createIdentifier('some')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('el'), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('el'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsEqualsEqualsToken), typescript_1.factory.createIdentifier('value'))),
            ]))),
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('validationMessage')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createTemplateExpression(typescript_1.factory.createTemplateHead('The value must be equal to ', 'The value must be equal to '), [
                typescript_1.factory.createTemplateSpan(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('numValues')), typescript_1.factory.createIdentifier('join')), undefined, [typescript_1.factory.createStringLiteral(' or ')]), typescript_1.factory.createTemplateTail('', '')),
            ]))),
        ], true)),
    ]),
    typescript_1.factory.createDefaultClause([]),
]));
const strValuesSwitchStatement = () => typescript_1.factory.createSwitchStatement(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('type')), typescript_1.factory.createCaseBlock([
    typescript_1.factory.createCaseClause(typescript_1.factory.createStringLiteral('StartWith'), [
        typescript_1.factory.createReturnStatement(typescript_1.factory.createObjectLiteralExpression([
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('strValues')), typescript_1.factory.createIdentifier('some')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('el'), undefined, typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.AnyKeyword), undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('value'), typescript_1.factory.createIdentifier('startsWith')), undefined, [typescript_1.factory.createIdentifier('el')])),
            ]))),
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('validationMessage')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createTemplateExpression(typescript_1.factory.createTemplateHead('The value must start with ', 'The value must start with '), [
                typescript_1.factory.createTemplateSpan(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('strValues')), typescript_1.factory.createIdentifier('join')), undefined, [typescript_1.factory.createStringLiteral(', ')]), typescript_1.factory.createTemplateTail('', '')),
            ]))),
        ], true)),
    ]),
    typescript_1.factory.createCaseClause(typescript_1.factory.createStringLiteral('EndWith'), [
        typescript_1.factory.createReturnStatement(typescript_1.factory.createObjectLiteralExpression([
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('strValues')), typescript_1.factory.createIdentifier('some')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('el'), undefined, typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.AnyKeyword), undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('value'), typescript_1.factory.createIdentifier('endsWith')), undefined, [typescript_1.factory.createIdentifier('el')])),
            ]))),
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('validationMessage')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createTemplateExpression(typescript_1.factory.createTemplateHead('The value must end with ', 'The value must end with '), [
                typescript_1.factory.createTemplateSpan(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('strValues')), typescript_1.factory.createIdentifier('join')), undefined, [typescript_1.factory.createStringLiteral(', ')]), typescript_1.factory.createTemplateTail('', '')),
            ]))),
        ], true)),
    ]),
    typescript_1.factory.createCaseClause(typescript_1.factory.createStringLiteral('Contains'), [
        typescript_1.factory.createReturnStatement(typescript_1.factory.createObjectLiteralExpression([
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('strValues')), typescript_1.factory.createIdentifier('some')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('el'), undefined, typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.AnyKeyword), undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('value'), typescript_1.factory.createIdentifier('includes')), undefined, [typescript_1.factory.createIdentifier('el')])),
            ]))),
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('validationMessage')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createTemplateExpression(typescript_1.factory.createTemplateHead('The value must contain ', 'The value must contain '), [
                typescript_1.factory.createTemplateSpan(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('strValues')), typescript_1.factory.createIdentifier('join')), undefined, [typescript_1.factory.createStringLiteral(', ')]), typescript_1.factory.createTemplateTail('', '')),
            ]))),
        ], true)),
    ]),
    typescript_1.factory.createCaseClause(typescript_1.factory.createStringLiteral('NotContains'), [
        typescript_1.factory.createReturnStatement(typescript_1.factory.createObjectLiteralExpression([
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('strValues')), typescript_1.factory.createIdentifier('every')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('el'), undefined, typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.AnyKeyword), undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('value'), typescript_1.factory.createIdentifier('includes')), undefined, [typescript_1.factory.createIdentifier('el')]))),
            ]))),
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('validationMessage')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createTemplateExpression(typescript_1.factory.createTemplateHead('The value must not contain ', 'The value must not contain '), [
                typescript_1.factory.createTemplateSpan(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('strValues')), typescript_1.factory.createIdentifier('join')), undefined, [typescript_1.factory.createStringLiteral(', ')]), typescript_1.factory.createTemplateTail('', '')),
            ]))),
        ], true)),
    ]),
    typescript_1.factory.createCaseClause(typescript_1.factory.createStringLiteral('BeAfter'), [
        typescript_1.factory.createReturnStatement(typescript_1.factory.createObjectLiteralExpression([
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier('Date'), undefined, [
                typescript_1.factory.createIdentifier('value'),
            ]), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.GreaterThanToken), typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier('Date'), undefined, [
                typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('parseDateValidator'), undefined, [
                    typescript_1.factory.createElementAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('strValues')), typescript_1.factory.createNumericLiteral('0')),
                ]),
            ]))))),
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('validationMessage')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createTemplateExpression(typescript_1.factory.createTemplateHead('The value must be after ', 'The value must be after '), [
                typescript_1.factory.createTemplateSpan(typescript_1.factory.createElementAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('strValues')), typescript_1.factory.createNumericLiteral('0')), typescript_1.factory.createTemplateTail('', '')),
            ]))),
        ], true)),
    ]),
    typescript_1.factory.createCaseClause(typescript_1.factory.createStringLiteral('BeBefore'), [
        typescript_1.factory.createReturnStatement(typescript_1.factory.createObjectLiteralExpression([
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier('Date'), undefined, [
                typescript_1.factory.createIdentifier('value'),
            ]), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.LessThanToken), typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier('Date'), undefined, [
                typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('parseDateValidator'), undefined, [
                    typescript_1.factory.createElementAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('strValues')), typescript_1.factory.createNumericLiteral('0')),
                ]),
            ]))))),
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('validationMessage')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createTemplateExpression(typescript_1.factory.createTemplateHead('The value must be before ', 'The value must be before '), [
                typescript_1.factory.createTemplateSpan(typescript_1.factory.createElementAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('strValues')), typescript_1.factory.createNumericLiteral('0')), typescript_1.factory.createTemplateTail('', '')),
            ]))),
        ], true)),
    ]),
]));
const unqiueScalarSwitchStatement = () => typescript_1.factory.createSwitchStatement(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('type')), typescript_1.factory.createCaseBlock([
    typescript_1.factory.createCaseClause(typescript_1.factory.createStringLiteral('Email'), [
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('EMAIL_ADDRESS_REGEX'), undefined, undefined, typescript_1.factory.createRegularExpressionLiteral(EscapedRegexLiterals.emailAddress)),
        ], typescript_1.default.NodeFlags.Const)),
        typescript_1.factory.createReturnStatement(typescript_1.factory.createObjectLiteralExpression([
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('EMAIL_ADDRESS_REGEX'), typescript_1.factory.createIdentifier('test')), undefined, [typescript_1.factory.createIdentifier('value')]))),
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('validationMessage')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createStringLiteral('The value must be a valid email address'))),
        ], true)),
    ]),
    typescript_1.factory.createCaseClause(typescript_1.factory.createStringLiteral('JSON'), [
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('isInvalidJSON'), undefined, undefined, typescript_1.factory.createFalse()),
        ], typescript_1.default.NodeFlags.Let)),
        typescript_1.factory.createTryStatement(typescript_1.factory.createBlock([
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('JSON'), typescript_1.factory.createIdentifier('parse')), undefined, [typescript_1.factory.createIdentifier('value')])),
        ], true), typescript_1.factory.createCatchClause(typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('e'), undefined, undefined, undefined), typescript_1.factory.createBlock([
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('isInvalidJSON'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsToken), typescript_1.factory.createTrue())),
        ], true)), undefined),
        typescript_1.factory.createReturnStatement(typescript_1.factory.createObjectLiteralExpression([
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createIdentifier('isInvalidJSON')),
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('validationMessage')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createStringLiteral('The value must be in a correct JSON format'))),
        ], true)),
    ]),
    typescript_1.factory.createCaseClause(typescript_1.factory.createStringLiteral('IpAddress'), [
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('IPV_4'), undefined, undefined, typescript_1.factory.createRegularExpressionLiteral(EscapedRegexLiterals.ipv4)),
        ], typescript_1.default.NodeFlags.Const)),
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('IPV_6'), undefined, undefined, typescript_1.factory.createRegularExpressionLiteral(EscapedRegexLiterals.ipv6)),
        ], typescript_1.default.NodeFlags.Const)),
        typescript_1.factory.createReturnStatement(typescript_1.factory.createObjectLiteralExpression([
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('IPV_4'), typescript_1.factory.createIdentifier('test')), undefined, [typescript_1.factory.createIdentifier('value')]), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('IPV_6'), typescript_1.factory.createIdentifier('test')), undefined, [typescript_1.factory.createIdentifier('value')]))))),
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('validationMessage')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createStringLiteral('The value must be an IPv4 or IPv6 address'))),
        ], true)),
    ]),
    typescript_1.factory.createCaseClause(typescript_1.factory.createStringLiteral('URL'), [
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('isInvalidUrl'), undefined, undefined, typescript_1.factory.createFalse()),
        ], typescript_1.default.NodeFlags.Let)),
        typescript_1.factory.createTryStatement(typescript_1.factory.createBlock([
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier('URL'), undefined, [
                typescript_1.factory.createIdentifier('value'),
            ])),
        ], true), typescript_1.factory.createCatchClause(typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('e'), undefined, undefined, undefined), typescript_1.factory.createBlock([
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('isInvalidUrl'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsToken), typescript_1.factory.createTrue())),
        ], true)), undefined),
        typescript_1.factory.createReturnStatement(typescript_1.factory.createObjectLiteralExpression([
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createIdentifier('isInvalidUrl')),
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('validationMessage')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createStringLiteral('The value must be a valid URL that begins with a schema (i.e. http:// or mailto:)'))),
        ], true)),
    ]),
    typescript_1.factory.createCaseClause(typescript_1.factory.createStringLiteral('Phone'), [
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('PHONE'), undefined, undefined, typescript_1.factory.createRegularExpressionLiteral(EscapedRegexLiterals.phone)),
        ], typescript_1.default.NodeFlags.Const)),
        typescript_1.factory.createReturnStatement(typescript_1.factory.createObjectLiteralExpression([
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('PHONE'), typescript_1.factory.createIdentifier('test')), undefined, [typescript_1.factory.createIdentifier('value')]))),
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('validationMessage')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createStringLiteral('The value must be a valid phone number'))),
        ], true)),
    ]),
    typescript_1.factory.createDefaultClause([]),
]));
const generateCheckValidationFunction = () => typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
    typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('checkValidation'), undefined, undefined, typescript_1.factory.createArrowFunction(undefined, undefined, [
        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('value'), undefined, typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.AnyKeyword), undefined),
        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('validation'), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier('FieldValidationConfiguration'), undefined), undefined),
    ], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
        typescript_1.factory.createIfStatement(typescript_1.factory.createPropertyAccessChain(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('numValues')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionDotToken), typescript_1.factory.createIdentifier('length')), typescript_1.factory.createBlock([numValuesSwitchStatement()], true), typescript_1.factory.createIfStatement(typescript_1.factory.createPropertyAccessChain(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('validation'), typescript_1.factory.createIdentifier('strValues')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionDotToken), typescript_1.factory.createIdentifier('length')), typescript_1.factory.createBlock([strValuesSwitchStatement()], true), undefined)),
        unqiueScalarSwitchStatement(),
    ], true))),
], typescript_1.default.NodeFlags.Const));
exports.generateCheckValidationFunction = generateCheckValidationFunction;
//# sourceMappingURL=validation-helpers.js.map