export declare const useDataStoreUpdateActionString = "export const useDataStoreUpdateAction = <Model extends PersistentModel>({\n  fields: initialFields,\n  id,\n  model,\n  schema,\n}: UseDataStoreUpdateActionOptions<Model>): (() => Promise<void>) => {\n  const fields = useTypeCastFields<Model>({\n    fields: initialFields,\n    modelName: model.name,\n    schema,\n  });\n\n  return async () => {\n    try {\n      Hub.dispatch(\n        UI_CHANNEL,\n        {\n          event: ACTION_DATASTORE_UPDATE_STARTED,\n          data: { fields, id },\n        },\n        EVENT_ACTION_DATASTORE_UPDATE,\n        AMPLIFY_SYMBOL\n      );\n\n      const original = await DataStore.query(model, id);\n\n      if (!original) {\n        throw new Error(`${DATASTORE_QUERY_BY_ID_ERROR}: ${id}`);\n      }\n\n      const item = await DataStore.save(\n        model.copyOf(original, (updated: any) => {\n          Object.assign(updated, fields);\n        })\n      );\n\n      Hub.dispatch(\n        UI_CHANNEL,\n        {\n          event: ACTION_DATASTORE_UPDATE_FINISHED,\n          data: { fields, id, item },\n        },\n        EVENT_ACTION_DATASTORE_UPDATE,\n        AMPLIFY_SYMBOL\n      );\n    } catch (error) {\n      Hub.dispatch(\n        UI_CHANNEL,\n        {\n          event: ACTION_DATASTORE_UPDATE_FINISHED,\n          data: {\n            fields,\n            id,\n            errorMessage: getErrorMessage(error),\n          },\n        },\n        EVENT_ACTION_DATASTORE_UPDATE,\n        AMPLIFY_SYMBOL\n      );\n    }\n  };\n};";
