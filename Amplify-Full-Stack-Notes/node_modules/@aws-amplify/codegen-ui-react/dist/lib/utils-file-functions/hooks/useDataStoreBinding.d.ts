export declare const useDataStoreBindingString = "export const useDataStoreCollection = <M extends PersistentModel>({\n  model,\n  criteria,\n  pagination,\n}: DataStoreCollectionProps<M>): DataStoreCollectionResult<M> => {\n  const [result, setResult] = React.useState<DataStoreCollectionResult<M>>({\n    items: [],\n    isLoading: false,\n    error: undefined,\n  });\n\n  const fetch = () => {\n    setResult({ isLoading: true, items: [] });\n\n    const subscription = DataStore.observeQuery(\n      model,\n      criteria,\n      pagination\n    ).subscribe(\n      (snapshot) => setResult({ items: snapshot.items, isLoading: false }),\n      (error: Error) => setResult({ items: [], error, isLoading: false })\n    );\n\n    if (subscription) {\n      return () => subscription.unsubscribe();\n    }\n  };\n\n  React.useEffect(fetch, []);\n  return result;\n};\n\nexport const useDataStoreItem = <M extends PersistentModel>({\n  model,\n  id,\n}: DataStoreItemProps<M>): DataStoreItemResult<M> => {\n  const [item, setItem] = React.useState<M>();\n  const [isLoading, setLoading] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<Error>();\n\n  const fetch = () => {\n    setLoading(true);\n\n    DataStore.query(model, id)\n      .then(setItem)\n      .catch(setError)\n      .finally(() => setLoading(false));\n  };\n\n  React.useEffect(fetch, []);\n  return {\n    error,\n    item,\n    isLoading,\n  };\n};\n\nexport function useDataStoreBinding<Model extends PersistentModel>(\n  props: DataStoreBindingProps<Model, 'record'>\n): DataStoreItemResult<Model>;\nexport function useDataStoreBinding<Model extends PersistentModel>(\n  props: DataStoreBindingProps<Model, 'collection'>\n): DataStoreCollectionResult<Model>;\nexport function useDataStoreBinding<Model extends PersistentModel>(\n  props:\n    | DataStoreBindingProps<Model, 'record'>\n    | DataStoreBindingProps<Model, 'collection'>\n): DataStoreItemResult<Model> | DataStoreCollectionResult<Model> {\n  return props.type === 'record'\n    ? useDataStoreItem(props) : useDataStoreCollection(props);\n};";
