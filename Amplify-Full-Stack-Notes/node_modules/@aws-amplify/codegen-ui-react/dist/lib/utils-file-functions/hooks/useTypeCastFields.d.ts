export declare const useTypeCastFieldsString = "export const useTypeCastFields = <Model extends PersistentModel>({\n  fields,\n  modelName,\n  schema,\n}: UseTypeCastFieldsProps): UseTypeCastFieldsReturn<Model> => {\n  return React.useMemo(() => {\n    if (!schema) {\n      return fields;\n    }\n\n    const castFields: any = {};\n    Object.keys(fields).forEach((fieldName: string) => {\n      const field = fields[fieldName];\n      switch (schema?.models[modelName]?.fields?.[fieldName]?.type) {\n        case 'AWSTimestamp':\n          castFields[fieldName] = Number(field);\n          break;\n        case 'Boolean':\n          castFields[fieldName] = Boolean(field);\n          break;\n        case 'Int':\n          castFields[fieldName] = (\n            typeof field === 'string' ||\n            (typeof field === 'object' &&\n              Object.prototype.toString.call(field) === '[object String]')\n          ) ? parseInt(field) : field;\n          break;\n        case 'Float':\n          castFields[fieldName] = Number(field);\n          break;\n        default:\n          castFields[fieldName] = field;\n          break;\n      }\n    });\n\n    return castFields;\n  }, [fields, schema, modelName]);\n};";
