"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOverridesFromVariantsString = exports.getOverridesFromVariants = void 0;
function getOverridesFromVariants(variants, props) {
    // Get unique keys from the provided variants
    const variantValueKeys = [...new Set(variants.flatMap((variant) => Object.keys(variant.variantValues)))];
    const variantValuesFromProps = Object.keys(props)
        .filter((i) => variantValueKeys.includes(i) && props[i])
        .reduce((acc, key) => {
        return {
            ...acc,
            [key]: props[key],
        };
    }, {});
    const matchedVariants = variants.filter(({ variantValues }) => {
        return (Object.keys(variantValues).length === Object.keys(variantValuesFromProps).length &&
            Object.entries(variantValues).every(([key, value]) => variantValuesFromProps[key] === value));
    });
    return matchedVariants.reduce((overrides, variant) => {
        return { ...overrides, ...variant.overrides };
    }, {});
}
exports.getOverridesFromVariants = getOverridesFromVariants;
exports.getOverridesFromVariantsString = `export function getOverridesFromVariants<T>(
  variants: Variant[],
  props: { [key: string]: T }
): { [key: string]: Variant } {
  const variantValueKeys = [
    ...new Set(
      variants.flatMap((variant) => Object.keys(variant.variantValues))
    ),
  ];
  const variantValuesFromProps: VariantValues = Object.keys(props)
    .filter((i) => variantValueKeys.includes(i) && props[i])
    .reduce((acc, key) => {
      return {
        ...acc,
        [key]: props[key],
      };
    }, {});
  const matchedVariants = variants.filter(({ variantValues }) => {
    return (
      Object.keys(variantValues).length ===
        Object.keys(variantValuesFromProps).length &&
      Object.entries(variantValues).every(
        ([key, value]) => variantValuesFromProps[key] === value
      )
    );
  });
  return matchedVariants.reduce((overrides, variant) => {
    return { ...overrides, ...variant.overrides };
  }, {});
}`;
//# sourceMappingURL=getOverridesFromVariants.js.map