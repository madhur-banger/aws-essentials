import { Variant } from './override-types';
export declare function getOverridesFromVariants<T>(variants: Variant[], props: {
    [key: string]: T;
}): {
    [key: string]: Variant;
};
export declare const getOverridesFromVariantsString = "export function getOverridesFromVariants<T>(\n  variants: Variant[],\n  props: { [key: string]: T }\n): { [key: string]: Variant } {\n  const variantValueKeys = [\n    ...new Set(\n      variants.flatMap((variant) => Object.keys(variant.variantValues))\n    ),\n  ];\n  const variantValuesFromProps: VariantValues = Object.keys(props)\n    .filter((i) => variantValueKeys.includes(i) && props[i])\n    .reduce((acc, key) => {\n      return {\n        ...acc,\n        [key]: props[key],\n      };\n    }, {});\n  const matchedVariants = variants.filter(({ variantValues }) => {\n    return (\n      Object.keys(variantValues).length ===\n        Object.keys(variantValuesFromProps).length &&\n      Object.entries(variantValues).every(\n        ([key, value]) => variantValuesFromProps[key] === value\n      )\n    );\n  });\n  return matchedVariants.reduce((overrides, variant) => {\n    return { ...overrides, ...variant.overrides };\n  }, {});\n}";
