"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isManyToManyRelationship = exports.mapFromFieldConfigs = void 0;
const model_values_1 = require("./model-values");
const render_checkers_1 = require("./render-checkers");
const validation_1 = require("./validation");
/**
 * This helper returns an evolving collection of artifacts produced by iterating through
 * the fieldConfigs object. Its purpose is to prevent iterating through this object
 * multiple times to shave off compute time.
 */
function mapFromFieldConfigs(fieldConfigs) {
    const validationsForField = [];
    const dataTypesMap = {};
    const displayValueFunctions = [];
    const idValueFunctions = [];
    const modelsToImport = [];
    let usesArrayField = false;
    Object.entries(fieldConfigs).forEach(([fieldName, fieldConfig]) => {
        // dataTypesMap
        let dataTypeKey;
        if (fieldConfig.dataType) {
            if (typeof fieldConfig.dataType === 'string') {
                dataTypeKey = fieldConfig.dataType;
            }
        }
        if (dataTypeKey) {
            if (dataTypesMap[dataTypeKey]) {
                dataTypesMap[dataTypeKey].push(fieldName);
            }
            else {
                dataTypesMap[dataTypeKey] = [fieldName];
            }
        }
        // usesArrayField
        if ((0, render_checkers_1.shouldWrapInArrayField)(fieldConfig)) {
            usesArrayField = true;
        }
        // displayValue
        if ((0, render_checkers_1.shouldImplementDisplayValueFunction)(fieldConfig)) {
            displayValueFunctions.push((0, model_values_1.buildDisplayValueFunction)(fieldName, fieldConfig));
        }
        // idValue
        if ((0, render_checkers_1.shouldImplementIDValueFunction)(fieldConfig)) {
            idValueFunctions.push((0, model_values_1.buildIDValueFunction)(fieldName, fieldConfig));
        }
        // modelsToImport
        modelsToImport.push(...(0, model_values_1.getModelsToImport)(fieldConfig));
        // validation
        validationsForField.push((0, validation_1.buildValidationForField)(fieldName, fieldConfig.validationRules));
    });
    return {
        validationsObject: (0, validation_1.buildValidations)(validationsForField),
        dataTypesMap,
        displayValueObject: displayValueFunctions.length ? (0, model_values_1.getDisplayValueObject)(displayValueFunctions) : undefined,
        idValueObject: idValueFunctions.length ? (0, model_values_1.getIDValueObject)(idValueFunctions) : undefined,
        modelsToImport,
        usesArrayField,
    };
}
exports.mapFromFieldConfigs = mapFromFieldConfigs;
const isManyToManyRelationship = (fieldConfigMetaData) => { var _a; return !!(((_a = fieldConfigMetaData.relationship) === null || _a === void 0 ? void 0 : _a.type) === 'HAS_MANY' && fieldConfigMetaData.relationship.relatedJoinTableName); };
exports.isManyToManyRelationship = isManyToManyRelationship;
//# sourceMappingURL=map-from-fieldConfigs.js.map