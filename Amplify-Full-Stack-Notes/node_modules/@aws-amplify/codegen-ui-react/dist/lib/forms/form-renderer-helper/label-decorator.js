"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIsRequiredValue = exports.getDecoratedLabel = void 0;
const typescript_1 = require("typescript");
/**
 <span style={{ display: \\"inline-flex\\" }}>
  <span>City</span>
  <span style={{ whiteSpace: \\"pre\\", fontStyle: \\"italic\\" }}>
    {\\" \\"}
    - optional
  </span>
</span>
 */
const getDecoratedLabel = (attribute, value, labelDecorator) => typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier(attribute), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createJsxElement(typescript_1.factory.createJsxOpeningElement(typescript_1.factory.createIdentifier('span'), undefined, typescript_1.factory.createJsxAttributes([
    typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('style'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createObjectLiteralExpression([
        typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('display'), typescript_1.factory.createStringLiteral('inline-flex')),
    ], false))),
])), [
    typescript_1.factory.createJsxElement(typescript_1.factory.createJsxOpeningElement(typescript_1.factory.createIdentifier('span'), undefined, typescript_1.factory.createJsxAttributes([])), [typescript_1.factory.createJsxText(value, false)], typescript_1.factory.createJsxClosingElement(typescript_1.factory.createIdentifier('span'))),
    generateLabelDecorator(labelDecorator),
], typescript_1.factory.createJsxClosingElement(typescript_1.factory.createIdentifier('span')))));
exports.getDecoratedLabel = getDecoratedLabel;
const generateLabelDecorator = (labelDecorator) => {
    let styles = [
        typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('whiteSpace'), typescript_1.factory.createStringLiteral('pre')),
        typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('fontStyle'), typescript_1.factory.createStringLiteral('italic')),
    ];
    let decoratorText = ' - optional';
    if (labelDecorator === 'required') {
        styles = [typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('color'), typescript_1.factory.createStringLiteral('red'))];
        decoratorText = '*';
    }
    return typescript_1.factory.createJsxElement(typescript_1.factory.createJsxOpeningElement(typescript_1.factory.createIdentifier('span'), undefined, typescript_1.factory.createJsxAttributes([
        typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('style'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createObjectLiteralExpression(styles, false))),
    ])), [typescript_1.factory.createJsxText(decoratorText, false)], typescript_1.factory.createJsxClosingElement(typescript_1.factory.createIdentifier('span')));
};
const getIsRequiredValue = (isRequiredProperty) => {
    let isRequired = false;
    if (isRequiredProperty && 'value' in isRequiredProperty) {
        const isRequiredValue = isRequiredProperty.value;
        if (typeof isRequiredValue === 'string') {
            isRequired = isRequiredProperty.value === 'true';
        }
    }
    return isRequired;
};
exports.getIsRequiredValue = getIsRequiredValue;
//# sourceMappingURL=label-decorator.js.map