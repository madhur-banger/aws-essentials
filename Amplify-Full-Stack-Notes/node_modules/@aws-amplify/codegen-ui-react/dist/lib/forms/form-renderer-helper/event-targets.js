"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildTargetVariable = exports.extractKeyByMapping = void 0;
const typescript_1 = require("typescript");
const constants_1 = require("../../utils/constants");
/*
Builds the event target variable. Example:
let { value } = e.target;
*/
const expressionMap = {
    // e
    e: typescript_1.factory.createIdentifier('e'),
    // value
    value: typescript_1.factory.createIdentifier('value'),
    // e.target.checked
    eTargetChecked: typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('e'), typescript_1.factory.createIdentifier('target')), typescript_1.factory.createIdentifier('checked')),
    // e.target
    eTarget: typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('e'), typescript_1.factory.createIdentifier('target')),
    // {value}
    destructuredValue: typescript_1.factory.createObjectBindingPattern([
        typescript_1.factory.createBindingElement(undefined, undefined, typescript_1.factory.createIdentifier('value'), undefined),
    ]),
    // e.target.value
    eTargetValue: typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('e'), typescript_1.factory.createIdentifier('target')), typescript_1.factory.createIdentifier('value')),
};
// array:     files.map(({ key }) => key)
// non-array: files?.[0]?.key;
function extractKeyByMapping(array, key, isArray) {
    if (isArray) {
        return typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(array), typescript_1.factory.createIdentifier('map')), undefined, [
            typescript_1.factory.createArrowFunction(undefined, undefined, [
                typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createObjectBindingPattern([
                    typescript_1.factory.createBindingElement(undefined, undefined, typescript_1.factory.createIdentifier(key), undefined),
                ]), undefined, undefined, undefined),
            ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createIdentifier(key)),
        ]);
    }
    return typescript_1.factory.createPropertyAccessChain(typescript_1.factory.createElementAccessChain(typescript_1.factory.createIdentifier(array), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionDotToken), typescript_1.factory.createNumericLiteral('0')), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionDotToken), typescript_1.factory.createIdentifier(constants_1.STORAGE_FILE_KEY));
}
exports.extractKeyByMapping = extractKeyByMapping;
// default variable statement
const setVariableStatement = (lhs, assignment) => typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(lhs, undefined, undefined, assignment)], typescript_1.NodeFlags.Let));
const buildTargetVariable = (fieldType, fieldName, dataType, isArray) => {
    var _a, _b, _c, _d;
    const fieldTypeToExpressionMap = {
        SliderField: {
            expression: expressionMap.e,
            identifier: expressionMap.value,
        },
        StepperField: {
            expression: expressionMap.e,
            identifier: expressionMap.value,
        },
        SwitchField: {
            expression: expressionMap.eTargetChecked,
            identifier: expressionMap.value,
        },
        CheckboxField: {
            expression: expressionMap.eTargetChecked,
            identifier: expressionMap.value,
        },
        ToggleButton: {
            expression: typescript_1.factory.createPrefixUnaryExpression(typescript_1.SyntaxKind.ExclamationToken, typescript_1.factory.createIdentifier(fieldName)),
            identifier: expressionMap.value,
        },
        StorageField: {
            expression: extractKeyByMapping('files', constants_1.STORAGE_FILE_KEY, isArray),
            identifier: expressionMap.value,
        },
    };
    let expression = (_b = (_a = fieldTypeToExpressionMap[fieldType]) === null || _a === void 0 ? void 0 : _a.expression) !== null && _b !== void 0 ? _b : expressionMap.eTarget;
    let defaultIdentifier = (_d = (_c = fieldTypeToExpressionMap[fieldType]) === null || _c === void 0 ? void 0 : _c.identifier) !== null && _d !== void 0 ? _d : expressionMap.destructuredValue;
    switch (dataType) {
        case 'AWSTimestamp':
            if (fieldType === 'NumberField') {
                // value = isNaN(parseInt(e.target.value)) ? e.target.value : parseInt(e.target.value);
                defaultIdentifier = expressionMap.value;
                expression = typescript_1.factory.createConditionalExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('isNaN'), undefined, [
                    typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('parseInt'), undefined, [expressionMap.eTargetValue]),
                ]), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), expressionMap.eTargetValue, typescript_1.factory.createToken(typescript_1.SyntaxKind.ColonToken), typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('parseInt'), undefined, [expressionMap.eTargetValue]));
            }
            else if (fieldType === 'DateTimeField') {
                // value = e.target.value === '' ? '' : Number(new Date(e.target.value))
                defaultIdentifier = expressionMap.value;
                expression = typescript_1.factory.createConditionalExpression(typescript_1.factory.createBinaryExpression(expressionMap.eTargetValue, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsEqualsEqualsToken), typescript_1.factory.createStringLiteral('')), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), typescript_1.factory.createStringLiteral(''), typescript_1.factory.createToken(typescript_1.SyntaxKind.ColonToken), typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('Number'), undefined, [
                    typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier('Date'), undefined, [expressionMap.eTargetValue]),
                ]));
            }
            return [setVariableStatement(defaultIdentifier, expression)];
        case 'Float':
            if (fieldType === 'NumberField') {
                // value = isNaN(parseFloat(e.target.value)) ? e.target.value : parseFloat(e.target.value);
                defaultIdentifier = expressionMap.value;
                expression = typescript_1.factory.createConditionalExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('isNaN'), undefined, [
                    typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('parseFloat'), undefined, [
                        expressionMap.eTargetValue,
                    ]),
                ]), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), expressionMap.eTargetValue, typescript_1.factory.createToken(typescript_1.SyntaxKind.ColonToken), typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('parseFloat'), undefined, [expressionMap.eTargetValue]));
            }
            return [setVariableStatement(defaultIdentifier, expression)];
        case 'Int':
            if (fieldType === 'NumberField') {
                // value = isNaN(parseInt(e.target.value)) ? e.target.value : parseInt(e.target.value);
                defaultIdentifier = expressionMap.value;
                expression = typescript_1.factory.createConditionalExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('isNaN'), undefined, [
                    typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('parseInt'), undefined, [expressionMap.eTargetValue]),
                ]), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), expressionMap.eTargetValue, typescript_1.factory.createToken(typescript_1.SyntaxKind.ColonToken), typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('parseInt'), undefined, [expressionMap.eTargetValue]));
            }
            return [setVariableStatement(defaultIdentifier, expression)];
        case 'Boolean':
            if (fieldType === 'RadioGroupField') {
                // value = e.target.value === 'true'
                defaultIdentifier = expressionMap.value;
                expression = typescript_1.factory.createBinaryExpression(expressionMap.eTargetValue, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsEqualsEqualsToken), typescript_1.factory.createStringLiteral('true'));
            }
            return [setVariableStatement(defaultIdentifier, expression)];
        case 'AWSDateTime':
            // value = e.target.value === '' ? '' : new Date(value).toISOString()
            defaultIdentifier = expressionMap.value;
            expression = typescript_1.factory.createConditionalExpression(typescript_1.factory.createBinaryExpression(expressionMap.eTargetValue, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsEqualsEqualsToken), typescript_1.factory.createStringLiteral('')), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), typescript_1.factory.createStringLiteral(''), typescript_1.factory.createToken(typescript_1.SyntaxKind.ColonToken), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier('Date'), undefined, [expressionMap.eTargetValue]), typescript_1.factory.createIdentifier('toISOString')), undefined, []));
            return [setVariableStatement(defaultIdentifier, expression)];
        default:
            return [setVariableStatement(defaultIdentifier, expression)];
    }
};
exports.buildTargetVariable = buildTargetVariable;
//# sourceMappingURL=event-targets.js.map