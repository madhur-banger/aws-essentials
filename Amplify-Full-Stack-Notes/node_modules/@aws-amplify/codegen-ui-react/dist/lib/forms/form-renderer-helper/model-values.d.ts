import { FieldConfigMetadata, StudioFormValueMappings } from '@aws-amplify/codegen-ui';
import { JsxAttribute, PropertyAssignment, CallExpression, VariableStatement, Statement } from 'typescript';
import { DataApiKind } from '../../react-render-config';
export declare const getDisplayValueObjectName = "getDisplayValue";
export declare const getIDValueObjectName = "getIDValue";
export declare const getIDValueCallChain: ({ fieldName, recordString }: {
    fieldName: string;
    recordString: string;
}) => import("typescript").CallChain;
/**
  getDisplayValue.compositeDogCompositeToysDescription(
    compositeDogRecords.find((r) => r.description === value)
  )
 */
export declare function getDisplayValueScalar(fieldName: string, model: string, key: string, dataApi?: DataApiKind): import("typescript").ConditionalExpression;
export declare function extractModelAndKeys(valueMappings?: StudioFormValueMappings): {
    model?: string;
    keys?: string[];
};
export declare function buildFixedAutocompleteOptions(fieldName: string, valueMappings?: StudioFormValueMappings): import("typescript").ArrayLiteralExpression;
/**
    example:
    options={authorRecords.map(r) => ({
        id: getIDValue['primaryAuthor]?.(r),
        label: getDisplayValue['primaryAuthor']?.(r),
    }))}
 */
export declare function getAutocompleteOptionsProp({ fieldName, fieldConfig, dataApi, }: {
    fieldName: string;
    fieldConfig: FieldConfigMetadata;
    dataApi?: DataApiKind;
}): JsxAttribute;
export declare function getDisplayValueObject(displayValueFunctions: PropertyAssignment[]): VariableStatement;
export declare function getIDValueObject(idValueFunctions: PropertyAssignment[]): VariableStatement;
export declare function buildIDValueFunction(fieldName: string, fieldConfig: FieldConfigMetadata): PropertyAssignment;
export declare function buildDisplayValueFunction(fieldName: string, fieldConfig: FieldConfigMetadata): PropertyAssignment;
export declare function getModelsToImport(fieldConfig: FieldConfigMetadata): string[];
/**
  compositeVetRecords.find((r) =>
    Object.entries(JSON.parse(id)).every(([key, value]) => r[key] === value)
  );
 */
export declare function getMatchEveryModelFieldCallExpression({ recordsArrayName, JSONName, }: {
    recordsArrayName: string;
    JSONName: string;
}): CallExpression;
/**
  const CompositeBowlIdSet = new Set(
    Array.isArray(CompositeBowl)
      ? CompositeBowl.map((r) => getIDValue.CompositeBowl?.(r))
      : getIDValue.CompositeBowl?.(CompositeBowl)
  );
 */
export declare const buildSelectedRecordsIdSet: (fieldConfigs: Record<string, FieldConfigMetadata>) => Statement[];
