"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildSelectedRecordsIdSet = exports.getMatchEveryModelFieldCallExpression = exports.getModelsToImport = exports.buildDisplayValueFunction = exports.buildIDValueFunction = exports.getIDValueObject = exports.getDisplayValueObject = exports.getAutocompleteOptionsProp = exports.buildFixedAutocompleteOptions = exports.extractModelAndKeys = exports.getDisplayValueScalar = exports.getIDValueCallChain = exports.getIDValueObjectName = exports.getDisplayValueObjectName = void 0;
/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 */
const codegen_ui_1 = require("@aws-amplify/codegen-ui");
const typescript_1 = require("typescript");
const react_component_render_helper_1 = require("../../react-component-render-helper");
const form_state_1 = require("./form-state");
const invalid_variable_helpers_1 = require("./invalid-variable-helpers");
const render_checkers_1 = require("./render-checkers");
const helpers_1 = require("../../helpers");
exports.getDisplayValueObjectName = 'getDisplayValue';
exports.getIDValueObjectName = 'getIDValue';
const getIDValueCallChain = ({ fieldName, recordString }) => {
    return typescript_1.factory.createCallChain((0, invalid_variable_helpers_1.getElementAccessExpression)(exports.getIDValueObjectName, fieldName), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionDotToken), undefined, [typescript_1.factory.createIdentifier(recordString)]);
};
exports.getIDValueCallChain = getIDValueCallChain;
const getDisplayValueCallChain = ({ fieldName, recordString }) => {
    return typescript_1.factory.createCallChain((0, invalid_variable_helpers_1.getElementAccessExpression)(exports.getDisplayValueObjectName, fieldName), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionDotToken), undefined, [typescript_1.factory.createIdentifier(recordString)]);
};
/**
  getDisplayValue.compositeDogCompositeToysDescription(
    compositeDogRecords.find((r) => r.description === value)
  )
 */
function getDisplayValueScalar(fieldName, model, key, dataApi) {
    const recordString = 'r';
    return typescript_1.factory.createConditionalExpression(typescript_1.factory.createIdentifier('value'), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(exports.getDisplayValueObjectName), typescript_1.factory.createIdentifier(fieldName)), undefined, [
        dataApi === 'GraphQL'
            ? typescript_1.factory.createBinaryExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier((0, form_state_1.getRecordsName)(fieldName)), typescript_1.factory.createIdentifier('find')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier(recordString), undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(recordString), typescript_1.factory.createIdentifier(key)), typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsEqualsEqualsToken), typescript_1.factory.createIdentifier('value'))),
            ]), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionQuestionToken), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(`selected${(0, helpers_1.capitalizeFirstLetter)(fieldName)}Records`), typescript_1.factory.createIdentifier('find')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier(recordString), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(recordString), typescript_1.factory.createIdentifier('id')), typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsEqualsEqualsToken), typescript_1.factory.createIdentifier('value'))),
            ]))
            : typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(
            // DataStore needs a value to the model instead of the field
            // because the value of field may be different where this variable was defined.
            typescript_1.factory.createIdentifier((0, form_state_1.getRecordsName)(model)), typescript_1.factory.createIdentifier('find')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier(recordString), undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(recordString), typescript_1.factory.createIdentifier(key)), typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsEqualsEqualsToken), typescript_1.factory.createIdentifier('value'))),
            ]),
    ]), typescript_1.factory.createToken(typescript_1.SyntaxKind.ColonToken), typescript_1.factory.createStringLiteral(''));
}
exports.getDisplayValueScalar = getDisplayValueScalar;
/**
  examples:
  for model -
  authorRecords
  .filter(
    (r, i, arr) => arr.findIndex(member => member.shape === r.shape) === i
    )
  .map((r) => ({
    id: r?.id,
    label: getDisplayValue['fieldName']?.(r),
  }))
  // For use in AutoComplete options prop only
 */
function getSuggestionsForRelationshipScalar(valueRefForBuildingSuggestions, key, fieldName) {
    const recordString = 'r';
    const labelExpression = getDisplayValueCallChain({ fieldName, recordString });
    return typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier((0, form_state_1.getRecordsName)(valueRefForBuildingSuggestions)), typescript_1.factory.createIdentifier('filter')), undefined, [
        typescript_1.factory.createArrowFunction(undefined, undefined, [
            typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier(recordString), undefined, undefined, undefined),
            typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('i'), undefined, undefined, undefined),
            typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('arr'), undefined, undefined, undefined),
        ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBinaryExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('arr'), typescript_1.factory.createIdentifier('findIndex')), undefined, [
            typescript_1.factory.createArrowFunction(undefined, undefined, [
                typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('member'), undefined, undefined, undefined),
            ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBinaryExpression((0, form_state_1.buildAccessChain)(['member', key]), typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsEqualsEqualsToken), (0, form_state_1.buildAccessChain)([recordString, key]))),
        ]), typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsEqualsEqualsToken), typescript_1.factory.createIdentifier('i'))),
    ]), typescript_1.factory.createIdentifier('map')), undefined, [
        typescript_1.factory.createArrowFunction(undefined, undefined, [
            typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier(recordString), undefined, undefined, undefined),
        ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createObjectLiteralExpression([
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('id'), (0, form_state_1.buildAccessChain)([recordString, key])),
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('label'), labelExpression),
        ], true))),
    ]);
}
/**
  example:
  for model -
  authorRecords
  .filter(r => !primaryAuthorSet.has(getIDValue.primaryAuthor?.(r))
  .map((r) => ({
    id: getIDValue['primaryAuthor]?.(r),
    label: getDisplayValue['primaryAuthor']?.(r),
  }))
  For AutoComplete field only
 */
function getModelTypeSuggestions({ modelName, fieldName, fieldConfig, dataApi, }) {
    var _a;
    const recordString = 'r';
    const labelExpression = getDisplayValueCallChain({ fieldName, recordString });
    // Autocomplete is special and needs a ref to the model for DataStore because the
    // fieldName will not be the same as when the reference was created.
    const optionsRecords = (0, form_state_1.getRecordsName)(dataApi === 'GraphQL' ? fieldName : modelName);
    const mappingFunction = typescript_1.factory.createArrowFunction(undefined, undefined, [
        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier(recordString), undefined, undefined, undefined),
    ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createObjectLiteralExpression([
        typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('id'), (0, exports.getIDValueCallChain)({ fieldName, recordString })),
        typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('label'), labelExpression),
    ], true)));
    if (dataApi === 'GraphQL' &&
        ((_a = fieldConfig.relationship) === null || _a === void 0 ? void 0 : _a.type) === 'HAS_MANY' &&
        fieldConfig.relationship.belongsToFieldOnRelatedModel) {
        return typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(optionsRecords), typescript_1.factory.createIdentifier('map')), undefined, [mappingFunction]);
    }
    const filterOptionsExpression = typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(optionsRecords), typescript_1.factory.createIdentifier('filter')), undefined, [
        typescript_1.factory.createArrowFunction(undefined, undefined, [
            typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier(recordString), undefined, undefined, undefined),
        ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createPrefixUnaryExpression(typescript_1.SyntaxKind.ExclamationToken, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(`${fieldName}IdSet`), typescript_1.factory.createIdentifier('has')), undefined, [(0, exports.getIDValueCallChain)({ fieldName, recordString })]))),
    ]);
    return typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(filterOptionsExpression, typescript_1.factory.createIdentifier('map')), undefined, [mappingFunction]);
}
function extractModelAndKeys(valueMappings) {
    let model;
    let keys;
    const bindingProperty = (valueMappings === null || valueMappings === void 0 ? void 0 : valueMappings.bindingProperties) && Object.values(valueMappings.bindingProperties)[0];
    if (bindingProperty && bindingProperty.type === 'Data') {
        model = bindingProperty.bindingProperties.model;
        const { values } = valueMappings;
        values.forEach((v) => {
            const { value } = v;
            if ((0, react_component_render_helper_1.isBoundProperty)(value) && value.bindingProperties.field) {
                if (!keys) {
                    keys = [];
                }
                keys.push(value.bindingProperties.field);
            }
        });
    }
    return { model, keys };
}
exports.extractModelAndKeys = extractModelAndKeys;
/*
 *  [{ id: 'value', label: 'valuelabel' }, { id: 'value', label: 'label' }]
 */
function buildFixedAutocompleteOptions(fieldName, valueMappings) {
    return typescript_1.factory.createArrayLiteralExpression(valueMappings === null || valueMappings === void 0 ? void 0 : valueMappings.values.map(({ displayValue, value }) => {
        let idStringLiteral;
        let labelStringLiteral;
        if ((0, react_component_render_helper_1.isFixedPropertyWithValue)(value)) {
            idStringLiteral = (0, react_component_render_helper_1.getFixedComponentPropValueExpression)(value);
            labelStringLiteral = (0, react_component_render_helper_1.getFixedComponentPropValueExpression)(value);
        }
        if (displayValue && (0, react_component_render_helper_1.isFixedPropertyWithValue)(displayValue)) {
            labelStringLiteral = (0, react_component_render_helper_1.getFixedComponentPropValueExpression)(displayValue);
        }
        if (!idStringLiteral) {
            throw new codegen_ui_1.InternalError(`Unable to render value for ${fieldName} Autocomplete option`);
        }
        if (!labelStringLiteral) {
            throw new codegen_ui_1.InternalError(`Unable to render display value for ${fieldName} Autocomplete option`);
        }
        return typescript_1.factory.createObjectLiteralExpression([
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('id'), idStringLiteral),
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('label'), labelStringLiteral),
        ], true);
    }), false);
}
exports.buildFixedAutocompleteOptions = buildFixedAutocompleteOptions;
/**
    example:
    options={authorRecords.map(r) => ({
        id: getIDValue['primaryAuthor]?.(r),
        label: getDisplayValue['primaryAuthor']?.(r),
    }))}
 */
function getAutocompleteOptionsProp({ fieldName, fieldConfig, dataApi, }) {
    let options;
    const { valueMappings } = fieldConfig;
    const { model, keys } = extractModelAndKeys(valueMappings);
    if (model) {
        if ((0, render_checkers_1.isModelDataType)(fieldConfig)) {
            options = getModelTypeSuggestions({
                modelName: model,
                fieldName,
                fieldConfig,
                dataApi,
            });
        }
        else if (keys) {
            options = getSuggestionsForRelationshipScalar(dataApi === 'GraphQL' ? fieldName : model, keys[0], fieldName);
        }
    }
    else {
        options = buildFixedAutocompleteOptions(fieldName, valueMappings);
    }
    return typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('options'), typescript_1.factory.createJsxExpression(undefined, options));
}
exports.getAutocompleteOptionsProp = getAutocompleteOptionsProp;
// impure helper
/* eslint-disable no-param-reassign */
function replaceProperty(prop, toReplace, replaceWith) {
    if ((0, react_component_render_helper_1.isBoundProperty)(prop) && prop.bindingProperties.property === toReplace) {
        prop.bindingProperties.property = replaceWith;
    }
    if ((0, react_component_render_helper_1.isConcatenatedProperty)(prop)) {
        prop.concat.forEach((subProp) => replaceProperty(subProp, toReplace, replaceWith));
    }
}
/* eslint-enable no-param-reassign */
function getDisplayValueObject(displayValueFunctions) {
    return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
        typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(exports.getDisplayValueObjectName), undefined, undefined, typescript_1.factory.createObjectLiteralExpression(displayValueFunctions, true)),
    ], typescript_1.NodeFlags.Const));
}
exports.getDisplayValueObject = getDisplayValueObject;
function getIDValueObject(idValueFunctions) {
    return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
        typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(exports.getIDValueObjectName), undefined, undefined, typescript_1.factory.createObjectLiteralExpression(idValueFunctions, true)),
    ], typescript_1.NodeFlags.Const));
}
exports.getIDValueObject = getIDValueObject;
// this is a measure to not show `undefined` the way `bquildConcatExpression` would if the first field is undefined
// `${r?.humanReadable ? r?.humanReadable + ' - ' : ""}${r?.key}-${r?.anotherKey}`
function buildDefaultModelDisplayValue({ displayValue }) {
    const { concat: concatArray } = displayValue;
    const humanReadableFieldExists = concatArray[1] && (0, react_component_render_helper_1.isFixedPropertyWithValue)(concatArray[1]) && concatArray[1].value === ' - ';
    if (humanReadableFieldExists) {
        const [humanReadableField, ...primaryKeys] = concatArray;
        if (!(0, react_component_render_helper_1.isBoundProperty)(humanReadableField) || !humanReadableField.bindingProperties.field) {
            throw new codegen_ui_1.InternalError(`Wrong default value mapping shape for human-readable field`);
        }
        const { property: propertyName } = humanReadableField.bindingProperties;
        const templateSpans = [];
        templateSpans.push(typescript_1.factory.createTemplateSpan(typescript_1.factory.createConditionalExpression(typescript_1.factory.createPropertyAccessChain(typescript_1.factory.createIdentifier(propertyName), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionDotToken), typescript_1.factory.createIdentifier(humanReadableField.bindingProperties.field)), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessChain(typescript_1.factory.createIdentifier(propertyName), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionDotToken), typescript_1.factory.createIdentifier(humanReadableField.bindingProperties.field)), typescript_1.factory.createToken(typescript_1.SyntaxKind.PlusToken), typescript_1.factory.createStringLiteral(' - ')), typescript_1.factory.createToken(typescript_1.SyntaxKind.ColonToken), typescript_1.factory.createStringLiteral('')), typescript_1.factory.createTemplateMiddle('', '')));
        const filteredPrimaryKeys = primaryKeys.filter((key) => (0, react_component_render_helper_1.isBoundProperty)(key) && key.bindingProperties.field);
        filteredPrimaryKeys.forEach((key, index) => {
            if (!(0, react_component_render_helper_1.isBoundProperty)(key) || !key.bindingProperties.field) {
                return;
            }
            templateSpans.push(typescript_1.factory.createTemplateSpan(typescript_1.factory.createPropertyAccessChain(typescript_1.factory.createIdentifier(propertyName), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionDotToken), typescript_1.factory.createIdentifier(key.bindingProperties.field)), index === filteredPrimaryKeys.length - 1
                ? typescript_1.factory.createTemplateTail('', '')
                : typescript_1.factory.createTemplateMiddle('-', '-')));
        });
        return typescript_1.factory.createTemplateExpression(typescript_1.factory.createTemplateHead('', ''), templateSpans);
    }
    return (0, react_component_render_helper_1.buildConcatExpression)(displayValue);
}
// CompositeBowl: (r) => JSON.stringify({ shape: r?.shape, size: r?.size })
function buildIDValueFunction(fieldName, fieldConfig) {
    const recordString = 'r';
    const { keys } = extractModelAndKeys(fieldConfig.valueMappings);
    if (!keys || !keys.length) {
        throw new codegen_ui_1.InternalError(`Unable to render IDValue function for ${fieldName}`);
    }
    const idObjectProperties = keys.map((key) => typescript_1.factory.createPropertyAssignment((0, invalid_variable_helpers_1.getValidProperty)(key), (0, form_state_1.buildAccessChain)([recordString, key])));
    return typescript_1.factory.createPropertyAssignment((0, invalid_variable_helpers_1.getValidProperty)(fieldName), typescript_1.factory.createArrowFunction(undefined, undefined, [
        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier(recordString), undefined, undefined, undefined),
    ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('JSON'), typescript_1.factory.createIdentifier('stringify')), undefined, [typescript_1.factory.createObjectLiteralExpression(idObjectProperties, false)])));
}
exports.buildIDValueFunction = buildIDValueFunction;
// examples:
// primaryAuthor: (r) => r?.name,
// compositePrimaryAuthor: (r) => r?.name + ' - ' + r?.birthYear
function buildDisplayValueFunction(fieldName, fieldConfig) {
    var _a;
    const recordString = 'r';
    let additionalStatements = [];
    let renderedDisplayValue;
    if (fieldConfig.relationship && fieldConfig.valueMappings) {
        const valueConfig = fieldConfig.valueMappings.values[0];
        if (valueConfig) {
            const { model: modelName } = extractModelAndKeys(fieldConfig.valueMappings);
            if (!modelName) {
                throw new codegen_ui_1.InternalError(`Could not find model name for ${fieldName}`);
            }
            const displayValueIsDefault = (_a = valueConfig.displayValue) === null || _a === void 0 ? void 0 : _a.isDefault;
            const displayValueProperty = valueConfig.displayValue || valueConfig.value;
            replaceProperty(displayValueProperty, modelName, recordString);
            if ((0, react_component_render_helper_1.isConcatenatedProperty)(displayValueProperty)) {
                if (displayValueIsDefault) {
                    renderedDisplayValue = buildDefaultModelDisplayValue({ displayValue: displayValueProperty });
                }
                else {
                    renderedDisplayValue = (0, react_component_render_helper_1.buildConcatExpression)(displayValueProperty);
                }
            }
            else if ((0, react_component_render_helper_1.isBoundProperty)(displayValueProperty)) {
                renderedDisplayValue = (0, react_component_render_helper_1.buildBindingExpression)(displayValueProperty);
            }
        }
    }
    if ((0, render_checkers_1.isEnumDataType)(fieldConfig) && fieldConfig.valueMappings && fieldConfig.isArray) {
        const displayValueMapName = `enumDisplayValueMap`;
        additionalStatements = [
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(displayValueMapName), undefined, undefined, typescript_1.factory.createObjectLiteralExpression(fieldConfig.valueMappings.values.map((v) => {
                    let value = '';
                    let displayValue = '';
                    if ((0, react_component_render_helper_1.isFixedPropertyWithValue)(v.value)) {
                        value = v.value.value.toString();
                    }
                    if (v.displayValue && (0, react_component_render_helper_1.isFixedPropertyWithValue)(v.displayValue)) {
                        displayValue = v.displayValue.value.toString();
                    }
                    if (value === '') {
                        throw Error('Enum cannot have an empty value');
                    }
                    return typescript_1.factory.createPropertyAssignment(typescript_1.factory.createStringLiteral(value), typescript_1.factory.createStringLiteral(displayValue !== null && displayValue !== void 0 ? displayValue : value));
                }), true)),
            ], typescript_1.NodeFlags.Const)),
        ];
        renderedDisplayValue = typescript_1.factory.createElementAccessExpression(typescript_1.factory.createIdentifier(displayValueMapName), typescript_1.factory.createIdentifier(recordString));
    }
    if (!renderedDisplayValue) {
        throw new codegen_ui_1.InternalError(`Unable to render display value for ${fieldName}`);
    }
    return typescript_1.factory.createPropertyAssignment((0, invalid_variable_helpers_1.getValidProperty)(fieldName), typescript_1.factory.createArrowFunction(undefined, undefined, [
        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier(recordString), undefined, undefined, undefined),
    ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), additionalStatements.length
        ? typescript_1.factory.createBlock([...additionalStatements, typescript_1.factory.createReturnStatement(renderedDisplayValue)], false)
        : renderedDisplayValue));
}
exports.buildDisplayValueFunction = buildDisplayValueFunction;
function getModelsToImport(fieldConfig) {
    var _a;
    const modelDependencies = [];
    if (fieldConfig.valueMappings && fieldConfig.valueMappings.bindingProperties) {
        Object.values(fieldConfig.valueMappings.bindingProperties).forEach((prop) => {
            if (prop.type === 'Data' && prop.bindingProperties.model) {
                modelDependencies.push(prop.bindingProperties.model);
            }
        });
    }
    // Import join table model
    if (((_a = fieldConfig.relationship) === null || _a === void 0 ? void 0 : _a.type) === 'HAS_MANY' && fieldConfig.relationship.relatedJoinTableName) {
        modelDependencies.push(fieldConfig.relationship.relatedJoinTableName);
    }
    return modelDependencies;
}
exports.getModelsToImport = getModelsToImport;
/**
  compositeVetRecords.find((r) =>
    Object.entries(JSON.parse(id)).every(([key, value]) => r[key] === value)
  );
 */
function getMatchEveryModelFieldCallExpression({ recordsArrayName, JSONName, }) {
    const recordString = 'r';
    const keyString = 'key';
    const valueString = 'value';
    return typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(recordsArrayName), typescript_1.factory.createIdentifier('find')), undefined, [
        typescript_1.factory.createArrowFunction(undefined, undefined, [
            typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier(recordString), undefined, undefined, undefined),
        ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('Object'), typescript_1.factory.createIdentifier('entries')), undefined, [
            typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('JSON'), typescript_1.factory.createIdentifier('parse')), undefined, [typescript_1.factory.createIdentifier(JSONName)]),
        ]), typescript_1.factory.createIdentifier('every')), undefined, [
            typescript_1.factory.createArrowFunction(undefined, undefined, [
                typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createArrayBindingPattern([
                    typescript_1.factory.createBindingElement(undefined, undefined, typescript_1.factory.createIdentifier('key'), undefined),
                    typescript_1.factory.createBindingElement(undefined, undefined, typescript_1.factory.createIdentifier('value'), undefined),
                ]), undefined, undefined, undefined),
            ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBinaryExpression(typescript_1.factory.createElementAccessExpression(typescript_1.factory.createIdentifier(recordString), typescript_1.factory.createIdentifier(keyString)), typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsEqualsEqualsToken), typescript_1.factory.createIdentifier(valueString))),
        ])),
    ]);
}
exports.getMatchEveryModelFieldCallExpression = getMatchEveryModelFieldCallExpression;
/**
  const CompositeBowlIdSet = new Set(
    Array.isArray(CompositeBowl)
      ? CompositeBowl.map((r) => getIDValue.CompositeBowl?.(r))
      : getIDValue.CompositeBowl?.(CompositeBowl)
  );
 */
const buildSelectedRecordsIdSet = (fieldConfigs) => {
    const statements = [];
    Object.entries(fieldConfigs).forEach((fieldConfig) => {
        const [name, fieldConfigMetaData] = fieldConfig;
        const fieldName = fieldConfigMetaData.sanitizedFieldName || name;
        const recordString = 'r';
        if (fieldConfigMetaData.relationship && (0, render_checkers_1.isModelDataType)(fieldConfigMetaData)) {
            statements.push(typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(`${fieldName}IdSet`), undefined, undefined, typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier('Set'), undefined, [
                    typescript_1.factory.createConditionalExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('Array'), typescript_1.factory.createIdentifier('isArray')), undefined, [typescript_1.factory.createIdentifier(fieldName)]), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(fieldName), typescript_1.factory.createIdentifier('map')), undefined, [
                        typescript_1.factory.createArrowFunction(undefined, undefined, [
                            typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier(recordString), undefined, undefined, undefined),
                        ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), (0, exports.getIDValueCallChain)({ fieldName, recordString })),
                    ]), typescript_1.factory.createToken(typescript_1.SyntaxKind.ColonToken), (0, exports.getIDValueCallChain)({ fieldName, recordString: fieldName })),
                ])),
            ], typescript_1.NodeFlags.Const)));
        }
    });
    return statements;
};
exports.buildSelectedRecordsIdSet = buildSelectedRecordsIdSet;
//# sourceMappingURL=model-values.js.map