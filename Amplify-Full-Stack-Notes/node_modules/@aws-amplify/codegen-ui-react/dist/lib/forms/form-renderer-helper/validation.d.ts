import { Expression, PropertyAssignment } from 'typescript';
import { FieldValidationConfiguration } from '@aws-amplify/codegen-ui';
export declare const createValidationExpression: (validationRules?: FieldValidationConfiguration[]) => Expression;
/**
 * builds validation variable
 * for nested values it will mention the full path as that corresponds to the fields
 * this will also link to error messages
 *
 * const validations = { post_url: [{ type: "URL" }], 'user.status': [] };
 *
 * @param fieldConfigs
 * @returns
 */
export declare function buildValidations(validationsAssignments: PropertyAssignment[]): import("typescript").VariableStatement;
export declare function buildValidationForField(fieldName: string, validationRules: FieldValidationConfiguration[]): PropertyAssignment;
/**
    if (errors.name?.hasError) {
      runValidationTasks("name", value);
    }
   */
export declare function getOnChangeValidationBlock(fieldName: string): import("typescript").IfStatement;
/**
  const runValidationTasks = async (fieldName, currentValue, getDisplayValue) => {
    const value = currentValue && getDisplayValue ? getDisplayValue(currentValue) : currentValue;
    let validationResponse = validateField(value, validations[fieldName]);
    const customValidator = fetchByPath(onValidate, fieldName);
    if (customValidator) {
      validationResponse = await customValidator(value, validationResponse);
    }
    setErrors((errors) => ({ ...errors, [fieldName]: validationResponse }));
    return validationResponse;
  };
   */
export declare const runValidationTasksFunction: import("typescript").VariableStatement;
