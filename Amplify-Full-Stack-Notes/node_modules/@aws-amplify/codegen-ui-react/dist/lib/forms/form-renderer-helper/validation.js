"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runValidationTasksFunction = exports.getOnChangeValidationBlock = exports.buildValidationForField = exports.buildValidations = exports.createValidationExpression = void 0;
/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 */
const typescript_1 = require("typescript");
const codegen_ui_1 = require("@aws-amplify/codegen-ui");
const createValidationExpression = (validationRules = []) => {
    const validateExpressions = validationRules.map((rule) => {
        const elements = [
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('type'), typescript_1.factory.createStringLiteral(rule.type)),
        ];
        if (rule.type === codegen_ui_1.ValidationTypes.CONTAINS ||
            rule.type === codegen_ui_1.ValidationTypes.NOT_CONTAINS ||
            rule.type === codegen_ui_1.ValidationTypes.END_WITH ||
            rule.type === codegen_ui_1.ValidationTypes.START_WITH ||
            rule.type === codegen_ui_1.ValidationTypes.BE_BEFORE ||
            rule.type === codegen_ui_1.ValidationTypes.BE_AFTER) {
            elements.push(typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('strValues'), typescript_1.factory.createArrayLiteralExpression(rule.strValues.map((value) => typescript_1.factory.createStringLiteral(value)), false)));
        }
        else if (rule.type === codegen_ui_1.ValidationTypes.LESS_THAN_CHAR_LENGTH ||
            rule.type === codegen_ui_1.ValidationTypes.GREATER_THAN_CHAR_LENGTH ||
            rule.type === codegen_ui_1.ValidationTypes.LESS_THAN_NUM ||
            rule.type === codegen_ui_1.ValidationTypes.GREATER_THAN_NUM ||
            rule.type === codegen_ui_1.ValidationTypes.EQUAL_TO_NUM) {
            elements.push(typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('numValues'), typescript_1.factory.createArrayLiteralExpression(rule.numValues.map((value) => typescript_1.factory.createNumericLiteral(value)), false)));
        }
        if (rule.validationMessage) {
            elements.push(typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('validationMessage'), typescript_1.factory.createStringLiteral(rule.validationMessage)));
        }
        return typescript_1.factory.createObjectLiteralExpression(elements, false);
    });
    return typescript_1.factory.createArrayLiteralExpression(validateExpressions, true);
};
exports.createValidationExpression = createValidationExpression;
/**
 * builds validation variable
 * for nested values it will mention the full path as that corresponds to the fields
 * this will also link to error messages
 *
 * const validations = { post_url: [{ type: "URL" }], 'user.status': [] };
 *
 * @param fieldConfigs
 * @returns
 */
function buildValidations(validationsAssignments) {
    return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
        typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('validations'), undefined, undefined, typescript_1.factory.createObjectLiteralExpression(validationsAssignments, true)),
    ], typescript_1.NodeFlags.Const));
}
exports.buildValidations = buildValidations;
function buildValidationForField(fieldName, validationRules) {
    const propKey = fieldName.split('.').length > 1 || !(0, codegen_ui_1.isValidVariableName)(fieldName)
        ? typescript_1.factory.createStringLiteral(fieldName)
        : typescript_1.factory.createIdentifier(fieldName);
    return typescript_1.factory.createPropertyAssignment(propKey, (0, exports.createValidationExpression)(validationRules));
}
exports.buildValidationForField = buildValidationForField;
/**
    if (errors.name?.hasError) {
      runValidationTasks("name", value);
    }
   */
function getOnChangeValidationBlock(fieldName) {
    return typescript_1.factory.createIfStatement(typescript_1.factory.createPropertyAccessChain((0, codegen_ui_1.isValidVariableName)(fieldName)
        ? typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('errors'), typescript_1.factory.createIdentifier(fieldName))
        : typescript_1.factory.createElementAccessExpression(typescript_1.factory.createIdentifier('errors'), typescript_1.factory.createStringLiteral(fieldName)), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionDotToken), typescript_1.factory.createIdentifier('hasError')), typescript_1.factory.createBlock([
        typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('runValidationTasks'), undefined, [
            typescript_1.factory.createStringLiteral(fieldName),
            typescript_1.factory.createIdentifier('value'),
        ])),
    ], true), undefined);
}
exports.getOnChangeValidationBlock = getOnChangeValidationBlock;
/**
  const runValidationTasks = async (fieldName, currentValue, getDisplayValue) => {
    const value = currentValue && getDisplayValue ? getDisplayValue(currentValue) : currentValue;
    let validationResponse = validateField(value, validations[fieldName]);
    const customValidator = fetchByPath(onValidate, fieldName);
    if (customValidator) {
      validationResponse = await customValidator(value, validationResponse);
    }
    setErrors((errors) => ({ ...errors, [fieldName]: validationResponse }));
    return validationResponse;
  };
   */
exports.runValidationTasksFunction = typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
    typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('runValidationTasks'), undefined, undefined, typescript_1.factory.createArrowFunction([typescript_1.factory.createModifier(typescript_1.SyntaxKind.AsyncKeyword)], undefined, [
        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('fieldName'), undefined, undefined, undefined),
        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('currentValue'), undefined, undefined, undefined),
        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('getDisplayValue'), undefined, undefined, undefined),
    ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('value'), undefined, undefined, typescript_1.factory.createConditionalExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('currentValue'), typescript_1.factory.createToken(typescript_1.SyntaxKind.AmpersandAmpersandToken), typescript_1.factory.createIdentifier('getDisplayValue')), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('getDisplayValue'), undefined, [
                typescript_1.factory.createIdentifier('currentValue'),
            ]), typescript_1.factory.createToken(typescript_1.SyntaxKind.ColonToken), typescript_1.factory.createIdentifier('currentValue'))),
        ], typescript_1.NodeFlags.Const)),
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('validationResponse'), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('validateField'), undefined, [
                typescript_1.factory.createIdentifier('value'),
                typescript_1.factory.createElementAccessExpression(typescript_1.factory.createIdentifier('validations'), typescript_1.factory.createIdentifier('fieldName')),
            ])),
        ], typescript_1.NodeFlags.Let)),
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('customValidator'), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('fetchByPath'), undefined, [
                typescript_1.factory.createIdentifier('onValidate'),
                typescript_1.factory.createIdentifier('fieldName'),
            ])),
        ], typescript_1.NodeFlags.Const)),
        typescript_1.factory.createIfStatement(typescript_1.factory.createIdentifier('customValidator'), typescript_1.factory.createBlock([
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('validationResponse'), typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsToken), typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('customValidator'), undefined, [
                typescript_1.factory.createIdentifier('value'),
                typescript_1.factory.createIdentifier('validationResponse'),
            ])))),
        ], true), undefined),
        typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('setErrors'), undefined, [
            typescript_1.factory.createArrowFunction(undefined, undefined, [
                typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('errors'), undefined, undefined, undefined),
            ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createObjectLiteralExpression([
                typescript_1.factory.createSpreadAssignment(typescript_1.factory.createIdentifier('errors')),
                typescript_1.factory.createPropertyAssignment(typescript_1.factory.createComputedPropertyName(typescript_1.factory.createIdentifier('fieldName')), typescript_1.factory.createIdentifier('validationResponse')),
            ], false))),
        ])),
        typescript_1.factory.createReturnStatement(typescript_1.factory.createIdentifier('validationResponse')),
    ], true))),
], typescript_1.NodeFlags.Const));
//# sourceMappingURL=validation.js.map