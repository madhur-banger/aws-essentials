"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderArrayFieldComponent = void 0;
const typescript_1 = require("typescript");
const form_state_1 = require("./form-state");
const event_handler_props_1 = require("./event-handler-props");
const render_checkers_1 = require("./render-checkers");
const model_values_1 = require("./model-values");
const invalid_variable_helpers_1 = require("./invalid-variable-helpers");
const helpers_1 = require("../../helpers");
const label_decorator_1 = require("./label-decorator");
function getOnChangeAttribute({ setStateName, fieldName, renderedFieldName, fieldConfigs, isLimitedToOneValue, }) {
    const fieldConfig = fieldConfigs[fieldName];
    const { dataType, componentType } = fieldConfig;
    let valueName = typescript_1.factory.createIdentifier('values');
    const onChangeArgName = typescript_1.factory.createIdentifier('items');
    let argToValue = onChangeArgName;
    if (isLimitedToOneValue) {
        argToValue = typescript_1.factory.createElementAccessExpression(onChangeArgName, typescript_1.factory.createNumericLiteral('0'));
        valueName = typescript_1.factory.createIdentifier('value');
    }
    const setStateStatements = [
        typescript_1.factory.createExpressionStatement((0, form_state_1.setFieldState)(renderedFieldName, valueName)),
        typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(setStateName, undefined, [
            (0, form_state_1.getDefaultValueExpression)(fieldName, componentType, dataType),
        ])),
    ];
    if ((0, render_checkers_1.isModelDataType)(fieldConfig)) {
        setStateStatements.push(typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier(`set${(0, helpers_1.capitalizeFirstLetter)((0, form_state_1.getCurrentDisplayValueName)(renderedFieldName))}`), undefined, [(0, form_state_1.getDefaultValueExpression)(fieldName, componentType, dataType, false, true)])));
    }
    return typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('onChange'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createArrowFunction([typescript_1.factory.createModifier(typescript_1.SyntaxKind.AsyncKeyword)], undefined, [typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, onChangeArgName, undefined, undefined)], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(valueName, undefined, undefined, argToValue)], typescript_1.NodeFlags.Let)),
        (0, event_handler_props_1.buildOverrideOnChangeStatement)(fieldName, fieldConfigs, valueName),
        ...setStateStatements,
    ], true))));
}
/*
  <ArrayField
    onChange = { async(items) => {
      setBreeds(items);
      setCurrentBreedsValue('');
    }}
    currentBreedsValue = { currentBreedsValue }
    hasError = { errors.breeds?.hasError }
    setFieldValue = { setCurrentBreedsValue }
    inputFieldRef={ breedsRef }
    >
    <ExampleInputField />
  </ArrayField>

  wraps input field component with array field component
 */
const renderArrayFieldComponent = (fieldName, fieldLabel, fieldConfigs, inputField, labelDecorator, isRequired, dataApi = 'DataStore') => {
    const fieldConfig = fieldConfigs[fieldName];
    const { sanitizedFieldName, dataType, componentType } = fieldConfig;
    const isLimitedToOneValue = fieldConfig.relationship &&
        (fieldConfig.relationship.type === 'HAS_ONE' || fieldConfig.relationship.type === 'BELONGS_TO');
    const renderedFieldName = sanitizedFieldName || fieldName;
    const stateName = (0, form_state_1.getCurrentValueIdentifier)(renderedFieldName);
    const setStateName = (0, helpers_1.getSetNameIdentifier)((0, form_state_1.getCurrentValueName)(renderedFieldName));
    const props = [];
    // render `?? []` if nested.
    let itemsExpression = renderedFieldName.includes('.')
        ? typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier(renderedFieldName), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionQuestionToken), typescript_1.factory.createArrayLiteralExpression([], false))
        : typescript_1.factory.createIdentifier(renderedFieldName);
    if (isLimitedToOneValue) {
        // "book ? [book] : []"
        itemsExpression = typescript_1.factory.createConditionalExpression(typescript_1.factory.createIdentifier(renderedFieldName), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), typescript_1.factory.createArrayLiteralExpression([typescript_1.factory.createIdentifier(renderedFieldName)], false), typescript_1.factory.createToken(typescript_1.SyntaxKind.ColonToken), typescript_1.factory.createArrayLiteralExpression([], false));
        props.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('lengthLimit'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createNumericLiteral('1'))));
    }
    props.push(getOnChangeAttribute({ fieldName, isLimitedToOneValue, fieldConfigs, renderedFieldName, setStateName }));
    let labelAttribute = typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('label'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createStringLiteral(fieldLabel)));
    if ((labelDecorator === 'required' && isRequired) || (labelDecorator === 'optional' && !isRequired)) {
        labelAttribute = (0, label_decorator_1.getDecoratedLabel)('label', fieldLabel, labelDecorator);
    }
    props.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('currentFieldValue'), typescript_1.factory.createJsxExpression(undefined, stateName)), labelAttribute);
    props.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('items'), typescript_1.factory.createJsxExpression(undefined, itemsExpression)));
    props.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createJsxExpression(undefined, (0, form_state_1.buildAccessChain)(['errors', fieldName, 'hasError']))));
    props.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('runValidationTasks'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createArrowFunction([typescript_1.factory.createToken(typescript_1.SyntaxKind.AsyncKeyword)], undefined, [], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('runValidationTasks'), undefined, [
        typescript_1.factory.createStringLiteral(fieldName),
        stateName,
    ]))))));
    props.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createJsxExpression(undefined, (0, form_state_1.buildAccessChain)(['errors', fieldName, 'errorMessage']))));
    let setFieldValueIdentifier = setStateName;
    let scalarModel;
    let scalarKey;
    if (fieldConfig.relationship && !(0, render_checkers_1.isModelDataType)(fieldConfig)) {
        const { valueMappings } = fieldConfig;
        const { model, keys } = (0, model_values_1.extractModelAndKeys)(valueMappings);
        if (model && keys) {
            [scalarModel, scalarKey] = [model, keys[0]];
        }
    }
    let getBadgeTextFunction = (0, invalid_variable_helpers_1.getElementAccessExpression)(model_values_1.getDisplayValueObjectName, fieldName);
    if (scalarModel && scalarKey) {
        getBadgeTextFunction = typescript_1.factory.createArrowFunction(undefined, undefined, [
            typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('value'), undefined, undefined),
        ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), (0, model_values_1.getDisplayValueScalar)(fieldName, scalarModel, scalarKey, dataApi));
    }
    if ((0, render_checkers_1.shouldImplementDisplayValueFunction)(fieldConfig)) {
        setFieldValueIdentifier = (0, helpers_1.getSetNameIdentifier)((0, form_state_1.getCurrentDisplayValueName)(renderedFieldName));
        props.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('getBadgeText'), typescript_1.factory.createJsxExpression(undefined, getBadgeTextFunction)));
    }
    /**
    // model
    setFieldValue={(model) => {
      setCurrentHasOneUserDisplayValue(getDisplayValue.HasOneUser(model))
      setCurrentHasOneUserValue(model)
    }
  
    // scalar
    setFieldValue={(value) => {
      setCurrentCompositeDogCompositeToysNameDisplayValue(
        getDisplayValue.compositeDogCompositeToysName(
          compositeDogRecords.find((r) => r.name === value)
        )
      );
      setCurrentCompositeDogCompositeToysNameValue(value);
    }}
    */
    if (fieldConfig.relationship) {
        if ((0, render_checkers_1.isModelDataType)(fieldConfig)) {
            const valueArgument = 'model';
            props.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('setFieldValue'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createArrowFunction(undefined, undefined, [
                typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier(valueArgument), undefined, undefined, undefined),
            ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
                typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(setFieldValueIdentifier, undefined, [
                    typescript_1.factory.createConditionalExpression(typescript_1.factory.createIdentifier(valueArgument), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), typescript_1.factory.createCallExpression((0, invalid_variable_helpers_1.getElementAccessExpression)(model_values_1.getDisplayValueObjectName, fieldName), undefined, [typescript_1.factory.createIdentifier(valueArgument)]), typescript_1.factory.createToken(typescript_1.SyntaxKind.ColonToken), typescript_1.factory.createStringLiteral('')),
                ])),
                typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(setStateName, undefined, [typescript_1.factory.createIdentifier(valueArgument)])),
            ], true)))));
        }
        else if (scalarModel && scalarKey) {
            const setStateStatements = [];
            const valueArgument = 'value';
            setStateStatements.push(typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(setStateName, undefined, [typescript_1.factory.createIdentifier(valueArgument)])));
            if (dataApi === 'GraphQL') {
                const selectedRecordName = 'selectedRecord';
                setStateStatements.push(typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                    typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(selectedRecordName), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier((0, form_state_1.getRecordsName)(fieldName)), typescript_1.factory.createIdentifier('find')), undefined, [
                        typescript_1.factory.createArrowFunction(undefined, undefined, [
                            typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('r'), undefined, undefined, undefined),
                        ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('r'), typescript_1.factory.createIdentifier(scalarKey)), typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsEqualsEqualsToken), typescript_1.factory.createIdentifier('value'))),
                    ])),
                ], typescript_1.NodeFlags.Const)));
                setStateStatements.push(typescript_1.factory.createIfStatement(typescript_1.factory.createIdentifier(selectedRecordName), typescript_1.factory.createBlock([
                    typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression((0, helpers_1.getSetNameIdentifier)(`selected${(0, helpers_1.capitalizeFirstLetter)(fieldName)}Records`), undefined, [typescript_1.factory.createArrayLiteralExpression([typescript_1.factory.createIdentifier(selectedRecordName)])])),
                ])));
            }
            props.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('setFieldValue'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createArrowFunction(undefined, undefined, [
                typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier(valueArgument), undefined, undefined, undefined),
            ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
                typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(setFieldValueIdentifier, undefined, [
                    (0, model_values_1.getDisplayValueScalar)(fieldName, scalarModel, scalarKey, dataApi),
                ])),
                ...setStateStatements,
            ], true)))));
        }
    }
    else {
        props.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('setFieldValue'), typescript_1.factory.createJsxExpression(undefined, setStateName)));
    }
    props.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('inputFieldRef'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createIdentifier((0, form_state_1.getArrayChildRefName)(renderedFieldName)))), typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('defaultFieldValue'), typescript_1.factory.createJsxExpression(undefined, (0, form_state_1.getDefaultValueExpression)(fieldName, componentType, dataType, false, true))));
    return typescript_1.factory.createJsxElement(typescript_1.factory.createJsxOpeningElement(typescript_1.factory.createIdentifier('ArrayField'), undefined, typescript_1.factory.createJsxAttributes(props)), [inputField], typescript_1.factory.createJsxClosingElement(typescript_1.factory.createIdentifier('ArrayField')));
};
exports.renderArrayFieldComponent = renderArrayFieldComponent;
//# sourceMappingURL=render-array-field.js.map