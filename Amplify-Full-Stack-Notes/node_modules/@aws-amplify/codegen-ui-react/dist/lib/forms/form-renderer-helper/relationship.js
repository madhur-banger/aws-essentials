"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRelationshipBasedRecordUpdateStatements = exports.buildHasManyRelationshipStatements = exports.buildGetRelationshipModels = exports.buildManyToManyRelationshipStatements = exports.buildRelationshipQuery = void 0;
/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 */
const typescript_1 = require("typescript");
const codegen_ui_1 = require("@aws-amplify/codegen-ui");
const pluralize_1 = require("pluralize");
const form_state_1 = require("./form-state");
const react_studio_template_renderer_helper_1 = require("../../react-studio-template-renderer-helper");
const helpers_1 = require("../../helpers");
const map_from_fieldConfigs_1 = require("./map-from-fieldConfigs");
const model_values_1 = require("./model-values");
const render_checkers_1 = require("./render-checkers");
const graphql_1 = require("../../utils/graphql");
const constants_1 = require("../../utils/constants");
const amplify_js_versioning_1 = require("../../helpers/amplify-js-versioning");
const buildRelationshipQuery = (relatedModelName, importCollection, fieldName, dataApi, renderConfigDependencies) => {
    /* istanbul ignore next */
    if (dataApi === 'GraphQL') {
        return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier((0, form_state_1.getRecordsName)(fieldName)), undefined, undefined, (0, graphql_1.wrapInParenthesizedExpression)((0, graphql_1.getGraphqlCallExpression)(graphql_1.ActionType.LIST, relatedModelName, importCollection, undefined, undefined, renderConfigDependencies), ['data', (0, graphql_1.getGraphqlQueryForModel)(graphql_1.ActionType.LIST, relatedModelName), 'items'])),
        ], typescript_1.NodeFlags.Const));
    }
    const objectProperties = [
        typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('type'), typescript_1.factory.createStringLiteral('collection')),
        typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('model'), typescript_1.factory.createIdentifier(importCollection.addModelImport(relatedModelName))),
    ];
    return (0, react_studio_template_renderer_helper_1.buildBaseCollectionVariableStatement)((0, form_state_1.getRecordsName)(relatedModelName), typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('useDataStoreBinding'), undefined, [
        typescript_1.factory.createObjectLiteralExpression(objectProperties, true),
    ]));
};
exports.buildRelationshipQuery = buildRelationshipQuery;
const getJoinTableQueryArrowFunction = ({ thisModelPrimaryKeys, relatedModelPrimaryKeys, joinTableThisModelFields, joinTableRelatedModelFields, thisModelRecord, }) => {
    const recordKeysString = 'recordKeys';
    const getQueryCallExpression = (queriedKey, recordName, recordKey) => typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('r'), typescript_1.factory.createIdentifier(queriedKey)), typescript_1.factory.createIdentifier('eq')), undefined, [
        typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(recordName), typescript_1.factory.createIdentifier(recordKey)),
    ]);
    const queryCallExpressions = [];
    joinTableRelatedModelFields.forEach((field, index) => {
        const recordKey = relatedModelPrimaryKeys[index];
        if (!recordKey) {
            throw new codegen_ui_1.InternalError(`Cannot find corresponding key for ${field}`);
        }
        queryCallExpressions.push(getQueryCallExpression(field, recordKeysString, recordKey));
    });
    joinTableThisModelFields.forEach((field, index) => {
        const recordKey = thisModelPrimaryKeys[index];
        if (!recordKey) {
            throw new codegen_ui_1.InternalError(`Cannot find corresponding key for ${field}`);
        }
        queryCallExpressions.push(getQueryCallExpression(field, thisModelRecord, recordKey));
    });
    return typescript_1.factory.createArrowFunction(undefined, undefined, [
        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('r'), undefined, undefined, undefined),
    ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([typescript_1.factory.createReturnStatement(typescript_1.factory.createArrayLiteralExpression(queryCallExpressions, true))], true));
};
function extractAssociatedFields(field) {
    const { relationship } = field;
    if (relationship && 'associatedFields' in relationship && relationship.associatedFields) {
        return relationship.associatedFields;
    }
    return undefined;
}
function createHasManyUpdateRelatedModelBlock({ relatedModelFields, thisModelPrimaryKeys, thisModelRecord, belongsToFieldOnRelatedModel, setToNull, }) {
    const statements = relatedModelFields.map((relatedModelField, index) => {
        const correspondingPrimaryKey = thisModelPrimaryKeys[index];
        if (!correspondingPrimaryKey) {
            throw new codegen_ui_1.InternalError(`Corresponding primary key not found for ${relatedModelField}`);
        }
        // updated.cPKTeacherID = cPKTeacherRecord.specialTeacherId;
        return typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('updated'), typescript_1.factory.createIdentifier(relatedModelField)), typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsToken), setToNull
            ? typescript_1.factory.createNull()
            : typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(thisModelRecord), typescript_1.factory.createIdentifier(correspondingPrimaryKey))));
    });
    // updated.Org = orgRecord;
    if (belongsToFieldOnRelatedModel) {
        statements.push(typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('updated'), typescript_1.factory.createIdentifier(belongsToFieldOnRelatedModel)), typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsToken), setToNull ? typescript_1.factory.createNull() : typescript_1.factory.createIdentifier(thisModelRecord))));
    }
    return typescript_1.factory.createBlock(statements, true);
}
function graphqlLinkedRecordsFallback(modelName) {
    return typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessChain(typescript_1.factory.createPropertyAccessChain(typescript_1.factory.createIdentifier('record'), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionDotToken), typescript_1.factory.createIdentifier(modelName)), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionDotToken), typescript_1.factory.createIdentifier('items')), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionQuestionToken), typescript_1.factory.createArrayLiteralExpression([], false));
}
const buildManyToManyRelationshipStatements = (dataStoreActionType, modelName, hasManyFieldConfig, thisModelPrimaryKeys, joinTable, savedModelName, importCollection, dataApi, renderConfigDependencies) => {
    let [fieldName] = hasManyFieldConfig;
    const [, fieldConfigMetaData] = hasManyFieldConfig;
    fieldName = fieldConfigMetaData.sanitizedFieldName || fieldName;
    const { relatedModelFields, relatedJoinFieldName, relatedJoinTableName, relatedModelName } = fieldConfigMetaData.relationship;
    const joinTableThisModelName = relatedModelFields[0];
    const joinTableRelatedModelName = relatedJoinFieldName;
    const isGraphql = dataApi === 'GraphQL';
    if (!relatedJoinTableName) {
        throw new codegen_ui_1.InternalError(`Cannot find join table for ${fieldName}`);
    }
    if (!joinTableRelatedModelName) {
        throw new codegen_ui_1.InternalError(`Cannot find corresponding field in join table for ${fieldName}`);
    }
    const joinTableThisModelFields = extractAssociatedFields(joinTable.fields[joinTableThisModelName]);
    const joinTableRelatedModelFields = extractAssociatedFields(joinTable.fields[joinTableRelatedModelName]);
    const { keys: relatedModelPrimaryKeys } = (0, model_values_1.extractModelAndKeys)(fieldConfigMetaData.valueMappings);
    if (!relatedModelPrimaryKeys) {
        throw new codegen_ui_1.InternalError(`Could not identify primary key(s) for ${relatedModelName}`);
    }
    if (!joinTableThisModelFields || !joinTableRelatedModelFields) {
        throw new codegen_ui_1.InternalError(`Cannot find associated fields to build ${fieldName}`);
    }
    if (dataStoreActionType === 'update') {
        const idValueCallChain = (0, model_values_1.getIDValueCallChain)({ fieldName, recordString: 'r' });
        const linkedDataName = (0, form_state_1.getLinkedDataName)(fieldName);
        const dataToLink = `${(0, helpers_1.lowerCaseFirst)(relatedModelName)}ToLink`;
        const dataToLinkMap = `${(0, helpers_1.lowerCaseFirst)(fieldName)}ToLinkMap`;
        const dataToUnlinkMap = `${(0, helpers_1.lowerCaseFirst)(fieldName)}ToUnLinkMap`;
        const thisModelRecord = (0, form_state_1.getRecordName)(modelName);
        const updatedMap = `${(0, helpers_1.lowerCaseFirst)(fieldName)}Map`;
        const originalMap = `${linkedDataName}Map`;
        return [
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(dataToLinkMap), undefined, undefined, typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier('Map'), undefined, [])),
            ], typescript_1.NodeFlags.Const)),
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(dataToUnlinkMap), undefined, undefined, typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier('Map'), undefined, [])),
            ], typescript_1.NodeFlags.Const)),
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(updatedMap), undefined, undefined, typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier('Map'), undefined, [])),
            ], typescript_1.NodeFlags.Const)),
            // const linkedCPKClassesMap  = new Map();
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(originalMap), undefined, undefined, typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier('Map'), undefined, [])),
            ], typescript_1.NodeFlags.Const)),
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(fieldName), typescript_1.factory.createIdentifier('forEach')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('r'), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
                    typescript_1.factory.createVariableStatement(undefined, 
                    // const count = cPKClassesMap.get(getIDValue.CPKClasses?.(r));
                    typescript_1.factory.createVariableDeclarationList([
                        typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('count'), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(updatedMap), typescript_1.factory.createIdentifier('get')), undefined, [idValueCallChain])),
                    ], typescript_1.NodeFlags.Const)),
                    typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                        typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('newCount'), undefined, undefined, typescript_1.factory.createConditionalExpression(typescript_1.factory.createIdentifier('count'), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('count'), typescript_1.factory.createToken(typescript_1.SyntaxKind.PlusToken), typescript_1.factory.createNumericLiteral('1')), typescript_1.factory.createToken(typescript_1.SyntaxKind.ColonToken), typescript_1.factory.createNumericLiteral('1'))),
                    ], typescript_1.NodeFlags.Const)),
                    // cPKClassesMap.set(getIDValue.CPKClasses?.(r), newCount);
                    typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(updatedMap), typescript_1.factory.createIdentifier('set')), undefined, [idValueCallChain, typescript_1.factory.createIdentifier('newCount')])),
                ], true)),
            ])),
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(linkedDataName), typescript_1.factory.createIdentifier('forEach')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('r'), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
                    typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                        // const count = linkedCPKClassesMap.get(getIDValue.CPKClasses?.(r));
                        typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('count'), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(originalMap), typescript_1.factory.createIdentifier('get')), undefined, [idValueCallChain])),
                    ], typescript_1.NodeFlags.Const)),
                    typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                        typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('newCount'), undefined, undefined, typescript_1.factory.createConditionalExpression(typescript_1.factory.createIdentifier('count'), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('count'), typescript_1.factory.createToken(typescript_1.SyntaxKind.PlusToken), typescript_1.factory.createNumericLiteral('1')), typescript_1.factory.createToken(typescript_1.SyntaxKind.ColonToken), typescript_1.factory.createNumericLiteral('1'))),
                    ], typescript_1.NodeFlags.Const)),
                    typescript_1.factory.createExpressionStatement(
                    //  linkedCPKClassesMap.set(getIDValue.CPKClasses?.(r), newCount);
                    typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(originalMap), typescript_1.factory.createIdentifier('set')), undefined, [idValueCallChain, typescript_1.factory.createIdentifier('newCount')])),
                ], true)),
            ])),
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(originalMap), typescript_1.factory.createIdentifier('forEach')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('count'), undefined, undefined, undefined),
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('id'), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
                    typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                        typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('newCount'), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(updatedMap), typescript_1.factory.createIdentifier('get')), undefined, [typescript_1.factory.createIdentifier('id')])),
                    ], typescript_1.NodeFlags.Const)),
                    typescript_1.factory.createIfStatement(typescript_1.factory.createIdentifier('newCount'), typescript_1.factory.createBlock([
                        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('diffCount'), undefined, undefined, typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('count'), typescript_1.factory.createToken(typescript_1.SyntaxKind.MinusToken), typescript_1.factory.createIdentifier('newCount'))),
                        ], typescript_1.NodeFlags.Const)),
                        typescript_1.factory.createIfStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('diffCount'), typescript_1.factory.createToken(typescript_1.SyntaxKind.GreaterThanToken), typescript_1.factory.createNumericLiteral('0')), typescript_1.factory.createBlock([
                            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(dataToUnlinkMap), typescript_1.factory.createIdentifier('set')), undefined, [typescript_1.factory.createIdentifier('id'), typescript_1.factory.createIdentifier('diffCount')])),
                        ], true), undefined),
                    ], true), typescript_1.factory.createBlock([
                        typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(dataToUnlinkMap), typescript_1.factory.createIdentifier('set')), undefined, [typescript_1.factory.createIdentifier('id'), typescript_1.factory.createIdentifier('count')])),
                    ], true)),
                ], true)),
            ])),
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(updatedMap), typescript_1.factory.createIdentifier('forEach')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('count'), undefined, undefined, undefined),
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('id'), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
                    typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                        typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('originalCount'), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(originalMap), typescript_1.factory.createIdentifier('get')), undefined, [typescript_1.factory.createIdentifier('id')])),
                    ], typescript_1.NodeFlags.Const)),
                    typescript_1.factory.createIfStatement(typescript_1.factory.createIdentifier('originalCount'), typescript_1.factory.createBlock([
                        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('diffCount'), undefined, undefined, typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('count'), typescript_1.factory.createToken(typescript_1.SyntaxKind.MinusToken), typescript_1.factory.createIdentifier('originalCount'))),
                        ], typescript_1.NodeFlags.Const)),
                        typescript_1.factory.createIfStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('diffCount'), typescript_1.factory.createToken(typescript_1.SyntaxKind.GreaterThanToken), typescript_1.factory.createNumericLiteral('0')), typescript_1.factory.createBlock([
                            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(dataToLinkMap), typescript_1.factory.createIdentifier('set')), undefined, [typescript_1.factory.createIdentifier('id'), typescript_1.factory.createIdentifier('diffCount')])),
                        ], true), undefined),
                    ], true), typescript_1.factory.createBlock([
                        typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(dataToLinkMap), typescript_1.factory.createIdentifier('set')), undefined, [typescript_1.factory.createIdentifier('id'), typescript_1.factory.createIdentifier('count')])),
                    ], true)),
                ], true)),
            ])),
            // unlink many:many records
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(dataToUnlinkMap), typescript_1.factory.createIdentifier('forEach')), undefined, [
                typescript_1.factory.createArrowFunction([typescript_1.factory.createModifier(typescript_1.SyntaxKind.AsyncKeyword)], undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('count'), undefined, undefined, undefined),
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('id'), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), buildUnlinkForEachBlock(relatedJoinTableName, thisModelPrimaryKeys, relatedModelPrimaryKeys, joinTableThisModelFields, joinTableRelatedModelFields, thisModelRecord, isGraphql, importCollection, renderConfigDependencies)),
            ])),
            // link many:many records
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(dataToLinkMap), typescript_1.factory.createIdentifier('forEach')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('count'), undefined, undefined, undefined),
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('id'), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
                    typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                        typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(dataToLink), undefined, undefined, (0, model_values_1.getMatchEveryModelFieldCallExpression)({
                            // Special and needs a ref to the model for DataStore because the
                            // fieldName will not be the same as when the reference was created.
                            recordsArrayName: (0, form_state_1.getRecordsName)(dataApi === 'GraphQL' ? fieldName : relatedModelName),
                            JSONName: 'id',
                        })),
                    ], typescript_1.NodeFlags.Const)),
                    typescript_1.factory.createForStatement(typescript_1.factory.createVariableDeclarationList([
                        typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('i'), undefined, undefined, typescript_1.factory.createIdentifier('count')),
                    ], typescript_1.NodeFlags.Let), typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('i'), typescript_1.factory.createToken(typescript_1.SyntaxKind.GreaterThanToken), typescript_1.factory.createNumericLiteral('0')), typescript_1.factory.createPostfixUnaryExpression(typescript_1.factory.createIdentifier('i'), typescript_1.SyntaxKind.MinusMinusToken), typescript_1.factory.createBlock([
                        typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('promises'), typescript_1.factory.createIdentifier('push')), undefined, [
                            isGraphql
                                ? (0, graphql_1.getGraphQLJoinTableCreateExpression)(relatedJoinTableName, thisModelRecord, thisModelPrimaryKeys, joinTableThisModelFields, dataToLink, relatedModelPrimaryKeys, joinTableRelatedModelFields, importCollection, renderConfigDependencies)
                                : typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('DataStore'), typescript_1.factory.createIdentifier('save')), undefined, [
                                    typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier(relatedJoinTableName), undefined, [
                                        typescript_1.factory.createObjectLiteralExpression([
                                            // cpkTeacher: cPKTeacherRecord,
                                            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(joinTableThisModelName), typescript_1.factory.createIdentifier((0, form_state_1.getRecordName)(modelName))),
                                            // compositeVet: compositeVetRecords.find(
                                            //   (r) => Object.entries(JSON.parse(id)).every(([key, value]) =>
                                            //   r[key] === value))
                                            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(joinTableRelatedModelName), typescript_1.factory.createIdentifier(dataToLink)),
                                        ], true),
                                    ]),
                                ]),
                        ])),
                    ], true)),
                ], true)),
            ])),
        ];
    }
    return [
        typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('promises'), typescript_1.factory.createIdentifier('push')), undefined, [
            typescript_1.factory.createSpreadElement(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(fieldName), typescript_1.factory.createIdentifier('reduce')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('promises'), undefined, undefined, undefined),
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier(joinTableRelatedModelName), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
                    typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('promises'), typescript_1.factory.createIdentifier('push')), undefined, [
                        isGraphql
                            ? (0, graphql_1.getGraphQLJoinTableCreateExpression)(relatedJoinTableName, savedModelName, thisModelPrimaryKeys, joinTableThisModelFields, joinTableRelatedModelName, relatedModelPrimaryKeys, joinTableRelatedModelFields, importCollection, renderConfigDependencies)
                            : getCreateJoinTableExpression(relatedJoinTableName, savedModelName, joinTableThisModelName, joinTableRelatedModelName, importCollection, dataApi, renderConfigDependencies),
                    ])),
                    typescript_1.factory.createReturnStatement(typescript_1.factory.createIdentifier('promises')),
                ], true)),
                typescript_1.factory.createArrayLiteralExpression([], false),
            ]))),
        ])),
    ];
};
exports.buildManyToManyRelationshipStatements = buildManyToManyRelationshipStatements;
const buildGetRelationshipModels = (fieldName, fieldConfigMetaData, dataSchemaMetadata, primaryKeys, importCollection, dataApi, renderConfigDependencies) => {
    var _a;
    const recordIdentifier = typescript_1.factory.createIdentifier('record');
    const amplifyJSVersion = (0, amplify_js_versioning_1.getAmplifyJSVersionToRender)(renderConfigDependencies);
    if (((_a = fieldConfigMetaData.relationship) === null || _a === void 0 ? void 0 : _a.type) === 'HAS_MANY') {
        const linkedDataName = (0, form_state_1.getLinkedDataName)(fieldName);
        let lazyLoadLinkedDataStatement;
        if ((0, map_from_fieldConfigs_1.isManyToManyRelationship)(fieldConfigMetaData)) {
            const { relatedJoinFieldName, relatedJoinTableName } = fieldConfigMetaData.relationship;
            /* istanbul ignore next */
            if (dataApi === 'GraphQL') {
                const joinTableMetadata = dataSchemaMetadata === null || dataSchemaMetadata === void 0 ? void 0 : dataSchemaMetadata.models[relatedJoinTableName];
                const joinTableThisModelName = fieldConfigMetaData.relationship.relatedModelFields[0];
                const joinTableThisModelFields = extractAssociatedFields(joinTableMetadata.fields[joinTableThisModelName]) || [];
                const joinTableIndexedQuery = `${(0, pluralize_1.plural)((0, helpers_1.lowerCaseFirst)(relatedJoinTableName))}By${joinTableThisModelFields
                    .map(helpers_1.capitalizeFirstLetter)
                    .join('And')}`;
                importCollection.addGraphqlQueryImport(joinTableIndexedQuery);
                lazyLoadLinkedDataStatement = typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                    typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(linkedDataName), undefined, undefined, typescript_1.factory.createConditionalExpression(typescript_1.factory.createIdentifier('record'), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(amplifyJSVersion === constants_1.AMPLIFY_JS_V5 ? 'API' : 'client'), typescript_1.factory.createIdentifier('graphql')), undefined, [
                        typescript_1.factory.createObjectLiteralExpression([
                            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('query'), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(joinTableIndexedQuery), typescript_1.factory.createIdentifier('replaceAll')), undefined, [
                                typescript_1.factory.createStringLiteral('__typename'),
                                typescript_1.factory.createStringLiteral(''),
                            ])),
                            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('variables'), typescript_1.factory.createObjectLiteralExpression([
                                ...(0, graphql_1.mapFieldArraysToPropertyAssignments)(joinTableThisModelFields, primaryKeys, 'record'),
                            ], true)),
                        ], true),
                    ]))), typescript_1.factory.createIdentifier('data')), typescript_1.factory.createIdentifier(joinTableIndexedQuery)), typescript_1.factory.createIdentifier('items')), typescript_1.factory.createIdentifier('map')), undefined, [
                        typescript_1.factory.createArrowFunction(undefined, undefined, [
                            typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('t'), undefined, undefined, undefined),
                        ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('t'), typescript_1.factory.createIdentifier(relatedJoinFieldName || fieldName))),
                    ]), typescript_1.factory.createToken(typescript_1.SyntaxKind.ColonToken), typescript_1.factory.createArrayLiteralExpression([], false))),
                ], typescript_1.NodeFlags.Const));
            }
            else {
                lazyLoadLinkedDataStatement = typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                    typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(linkedDataName), undefined, undefined, typescript_1.factory.createConditionalExpression(recordIdentifier, typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('Promise'), typescript_1.factory.createIdentifier('all')), undefined, [
                        typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallChain(typescript_1.factory.createPropertyAccessChain(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('record'), typescript_1.factory.createIdentifier(fieldName)), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionDotToken), typescript_1.factory.createIdentifier('toArray')), undefined, undefined, [])), typescript_1.factory.createToken(typescript_1.SyntaxKind.BarBarToken), typescript_1.factory.createArrayLiteralExpression([], false))), typescript_1.factory.createIdentifier('map')), undefined, [
                            typescript_1.factory.createArrowFunction(undefined, undefined, [
                                typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('r'), undefined, undefined, undefined),
                            ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
                                typescript_1.factory.createReturnStatement(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('r'), typescript_1.factory.createIdentifier(relatedJoinFieldName))),
                            ], true)),
                        ]),
                    ])), typescript_1.factory.createToken(typescript_1.SyntaxKind.ColonToken), typescript_1.factory.createArrayLiteralExpression([], false))),
                ], 
                // eslint-disable-next-line no-bitwise
                typescript_1.NodeFlags.Const | typescript_1.NodeFlags.AwaitContext | typescript_1.NodeFlags.ContextFlags | typescript_1.NodeFlags.TypeExcludesFlags));
            }
        }
        else {
            // hasMany relationship has one related field.
            lazyLoadLinkedDataStatement = typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(linkedDataName), undefined, undefined, dataApi === 'GraphQL'
                    ? graphqlLinkedRecordsFallback(fieldName)
                    : typescript_1.factory.createBinaryExpression(typescript_1.factory.createBinaryExpression(recordIdentifier, typescript_1.factory.createToken(typescript_1.SyntaxKind.AmpersandAmpersandToken), typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessChain(typescript_1.factory.createPropertyAccessExpression(recordIdentifier, typescript_1.factory.createIdentifier(fieldName)), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionDotToken), typescript_1.factory.createIdentifier('toArray')), undefined, []))), typescript_1.factory.createToken(typescript_1.SyntaxKind.BarBarToken), typescript_1.factory.createArrayLiteralExpression([], false))),
            ], typescript_1.NodeFlags.Const));
        }
        const setLinkedDataStateStatement = typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression((0, helpers_1.getSetNameIdentifier)(linkedDataName), undefined, [
            typescript_1.factory.createIdentifier(linkedDataName),
        ]));
        return [lazyLoadLinkedDataStatement, setLinkedDataStateStatement];
    }
    if (dataApi === 'GraphQL' && fieldConfigMetaData.relationship && !(0, render_checkers_1.isModelDataType)(fieldConfigMetaData)) {
        const relatedModelName = (0, helpers_1.lowerCaseFirst)(fieldConfigMetaData.relationship.relatedModelName);
        const queryCall = (0, graphql_1.wrapInParenthesizedExpression)((0, graphql_1.getGraphqlCallExpression)(graphql_1.ActionType.GET, fieldConfigMetaData.relationship.relatedModelName, importCollection, {
            inputs: [
                typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('id'), typescript_1.factory.createIdentifier(`${fieldName}Record`)),
            ],
        }, undefined, renderConfigDependencies), ['data', (0, graphql_1.getGraphqlQueryForModel)(graphql_1.ActionType.GET, fieldConfigMetaData.relationship.relatedModelName)]);
        return [
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(`${fieldName}Record`), undefined, undefined, typescript_1.factory.createConditionalExpression(typescript_1.factory.createIdentifier('record'), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('record'), typescript_1.factory.createIdentifier(fieldName)), typescript_1.factory.createToken(typescript_1.SyntaxKind.ColonToken), typescript_1.factory.createIdentifier('undefined'))),
            ], typescript_1.NodeFlags.Const)),
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(`${relatedModelName}Record`), undefined, undefined, typescript_1.factory.createConditionalExpression(typescript_1.factory.createIdentifier(`${fieldName}Record`), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), queryCall, typescript_1.factory.createToken(typescript_1.SyntaxKind.ColonToken), typescript_1.factory.createIdentifier('undefined'))),
            ], typescript_1.NodeFlags.Const)),
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression((0, helpers_1.getSetNameIdentifier)(fieldName), undefined, [
                typescript_1.factory.createIdentifier(`${fieldName}Record`),
            ])),
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression((0, helpers_1.getSetNameIdentifier)(`selected${(0, helpers_1.capitalizeFirstLetter)(fieldName)}Records`), undefined, [typescript_1.factory.createArrayLiteralExpression([typescript_1.factory.createIdentifier(`${relatedModelName}Record`)])])),
        ];
    }
    return [
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(`${fieldName}Record`), undefined, undefined, typescript_1.factory.createConditionalExpression(typescript_1.factory.createIdentifier('record'), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), typescript_1.factory.createAwaitExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('record'), typescript_1.factory.createIdentifier(fieldName))), typescript_1.factory.createToken(typescript_1.SyntaxKind.ColonToken), typescript_1.factory.createIdentifier('undefined'))),
        ], typescript_1.NodeFlags.Const)),
        typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression((0, helpers_1.getSetNameIdentifier)(fieldName), undefined, [
            typescript_1.factory.createIdentifier(`${fieldName}Record`),
        ])),
    ];
};
exports.buildGetRelationshipModels = buildGetRelationshipModels;
const buildHasManyRelationshipStatements = (dataStoreActionType, modelName, hasManyFieldConfig, thisModelPrimaryKeys, savedModelName, importCollection, dataApi, renderConfigDependencies) => {
    let [fieldName] = hasManyFieldConfig;
    const [, fieldConfigMetaData] = hasManyFieldConfig;
    fieldName = fieldConfigMetaData.sanitizedFieldName || fieldName;
    const { relatedModelName, relatedModelFields, belongsToFieldOnRelatedModel } = fieldConfigMetaData.relationship;
    const relatedModelVariableName = importCollection.getMappedModelAlias(relatedModelName);
    const linkedDataName = (0, form_state_1.getLinkedDataName)(fieldName);
    const dataToLink = `${(0, helpers_1.lowerCaseFirst)(fieldName)}ToLink`;
    const dataToUnLink = `${(0, helpers_1.lowerCaseFirst)(fieldName)}ToUnLink`;
    const dataToLinkSet = `${(0, helpers_1.lowerCaseFirst)(fieldName)}Set`;
    const linkedDataSet = `${linkedDataName}Set`;
    const thisModelRecord = (0, form_state_1.getRecordName)(modelName);
    const { keys } = (0, model_values_1.extractModelAndKeys)(fieldConfigMetaData.valueMappings);
    if (!keys) {
        throw new codegen_ui_1.InternalError(`Could not identify primary key(s) for ${relatedModelName}`);
    }
    if (dataStoreActionType === 'update') {
        const idValueCallChain = (0, model_values_1.getIDValueCallChain)({ fieldName, recordString: 'r' });
        return [
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(dataToLink), undefined, undefined, typescript_1.factory.createArrayLiteralExpression([], false)),
            ], typescript_1.NodeFlags.Const)),
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(dataToUnLink), undefined, undefined, typescript_1.factory.createArrayLiteralExpression([], false)),
            ], typescript_1.NodeFlags.Const)),
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(dataToLinkSet), undefined, undefined, typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier('Set'), undefined, [])),
            ], typescript_1.NodeFlags.Const)),
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(linkedDataSet), undefined, undefined, typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier('Set'), undefined, [])),
            ], typescript_1.NodeFlags.Const)),
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(
            // CPKProjects.forEach((r) => cPKProjectsSet.add(getIDValue.CPKProjects?.(r)));
            typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(fieldName), typescript_1.factory.createIdentifier('forEach')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('r'), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(dataToLinkSet), typescript_1.factory.createIdentifier('add')), undefined, [idValueCallChain])),
            ])),
            // linkedCPKProjects.forEach((r) => linkedCPKProjectsSet.add(getIDValue.CPKProjects?.(r)));
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(linkedDataName), typescript_1.factory.createIdentifier('forEach')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('r'), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(linkedDataSet), typescript_1.factory.createIdentifier('add')), undefined, [idValueCallChain])),
            ])),
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(linkedDataName), typescript_1.factory.createIdentifier('forEach')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('r'), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
                    typescript_1.factory.createIfStatement(typescript_1.factory.createPrefixUnaryExpression(typescript_1.SyntaxKind.ExclamationToken, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(dataToLinkSet), typescript_1.factory.createIdentifier('has')), undefined, [idValueCallChain])), typescript_1.factory.createBlock([
                        typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(dataToUnLink), typescript_1.factory.createIdentifier('push')), undefined, [typescript_1.factory.createIdentifier('r')])),
                    ], true), undefined),
                ], true)),
            ])),
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(fieldName), typescript_1.factory.createIdentifier('forEach')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('r'), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
                    typescript_1.factory.createIfStatement(typescript_1.factory.createPrefixUnaryExpression(typescript_1.SyntaxKind.ExclamationToken, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(linkedDataSet), typescript_1.factory.createIdentifier('has')), undefined, [idValueCallChain])), typescript_1.factory.createBlock([
                        typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(dataToLink), typescript_1.factory.createIdentifier('push')), undefined, [typescript_1.factory.createIdentifier('r')])),
                    ], true), undefined),
                ], true)),
            ])),
            // unlink items
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(dataToUnLink), typescript_1.factory.createIdentifier('forEach')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('original'), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
                    typescript_1.factory.createIfStatement(typescript_1.factory.createPrefixUnaryExpression(typescript_1.SyntaxKind.ExclamationToken, typescript_1.factory.createIdentifier((0, form_state_1.getCanUnlinkModelName)(fieldName))), typescript_1.factory.createBlock([
                        typescript_1.factory.createThrowStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('Error'), undefined, [
                            typescript_1.factory.createTemplateExpression(typescript_1.factory.createTemplateHead(`${relatedModelName} `), [
                                typescript_1.factory.createTemplateSpan(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('original'), typescript_1.factory.createIdentifier(keys[0])), typescript_1.factory.createTemplateTail(
                                // eslint-disable-next-line max-len
                                ` cannot be unlinked from ${modelName} because ${relatedModelFields[0]} is a required field.`)),
                            ]),
                        ])),
                    ], true), undefined),
                    typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('promises'), typescript_1.factory.createIdentifier('push')), undefined, [
                        dataApi === 'GraphQL'
                            ? (0, graphql_1.getGraphqlCallExpression)(graphql_1.ActionType.UPDATE, relatedModelName, importCollection, {
                                inputs: keys
                                    .map((key) => typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(key), typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('original'), typescript_1.factory.createIdentifier(key))))
                                    .concat(relatedModelFields.map((key) => typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(key), typescript_1.factory.createNull()))),
                            }, undefined, renderConfigDependencies)
                            : getUpdateRelatedModelExpression(keys, thisModelRecord, relatedModelVariableName, relatedModelFields, thisModelPrimaryKeys, importCollection, dataApi, belongsToFieldOnRelatedModel, true, renderConfigDependencies),
                    ])),
                ], true)),
            ])),
            // link items
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(dataToLink), typescript_1.factory.createIdentifier('forEach')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('original'), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
                    typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('promises'), typescript_1.factory.createIdentifier('push')), undefined, [
                        dataApi === 'GraphQL'
                            ? (0, graphql_1.getGraphqlCallExpression)(graphql_1.ActionType.UPDATE, relatedModelName, importCollection, {
                                inputs: [
                                    ...keys.map((key) => typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(key), typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('original'), typescript_1.factory.createIdentifier(key)))),
                                    ...relatedModelFields.map((relatedModelField) => typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(relatedModelField), typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(thisModelRecord), typescript_1.factory.createIdentifier(thisModelPrimaryKeys[0])))),
                                ],
                            }, undefined, renderConfigDependencies)
                            : getUpdateRelatedModelExpression(keys, thisModelRecord, relatedModelVariableName, relatedModelFields, thisModelPrimaryKeys, importCollection, dataApi, belongsToFieldOnRelatedModel, undefined, renderConfigDependencies),
                    ])),
                ], true)),
            ])),
        ];
    }
    const updateRelatedModelExpression = getUpdateRelatedModelExpression(keys, savedModelName, relatedModelName, relatedModelFields, thisModelPrimaryKeys, importCollection, dataApi, belongsToFieldOnRelatedModel, undefined, renderConfigDependencies);
    return [
        typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('promises'), typescript_1.factory.createIdentifier('push')), undefined, [
            typescript_1.factory.createSpreadElement(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(fieldName), typescript_1.factory.createIdentifier('reduce')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('promises'), undefined, undefined, undefined),
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('original'), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
                    typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('promises'), typescript_1.factory.createIdentifier('push')), undefined, [updateRelatedModelExpression])),
                    typescript_1.factory.createReturnStatement(typescript_1.factory.createIdentifier('promises')),
                ], true)),
                typescript_1.factory.createArrayLiteralExpression([], false),
            ]))),
        ])),
    ];
};
exports.buildHasManyRelationshipStatements = buildHasManyRelationshipStatements;
const getRelationshipBasedRecordUpdateStatements = ({ updatedObjectName, savedObjectName, fieldConfigs, }) => {
    const statements = [];
    const modelToFieldsMap = {};
    Object.entries(fieldConfigs).forEach(([fieldName, config]) => {
        var _a;
        if (config.relationship && (config.relationship.type === 'HAS_ONE' || ((_a = config.relationship) === null || _a === void 0 ? void 0 : _a.type) === 'BELONGS_TO')) {
            const { associatedFields, relatedModelName } = config.relationship;
            if ((0, render_checkers_1.isModelDataType)(config) && associatedFields) {
                modelToFieldsMap[relatedModelName] = { model: fieldName, scalar: associatedFields };
            }
            else {
                // if the scalar relationship field is mapped on the form,
                // we do not need to set its value at DataStore.save
                delete modelToFieldsMap[relatedModelName];
            }
        }
    });
    // if(!modelFields.HasOneUser) updated.webUserId = undefined;
    Object.values(modelToFieldsMap).forEach(({ model: modelField, scalar: scalarFields }) => {
        statements.push(typescript_1.factory.createIfStatement(typescript_1.factory.createPrefixUnaryExpression(typescript_1.SyntaxKind.ExclamationToken, (0, form_state_1.buildAccessChain)([savedObjectName, modelField], false)), typescript_1.factory.createBlock(scalarFields.map((scalarField) => typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression((0, form_state_1.buildAccessChain)([updatedObjectName, scalarField], false), typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsToken), typescript_1.factory.createIdentifier('undefined')))), true), undefined));
    });
    return statements;
};
exports.getRelationshipBasedRecordUpdateStatements = getRelationshipBasedRecordUpdateStatements;
const getUpdateRelatedModelExpression = (primaryKeys, savedModelName, relatedModelName, relatedModelFields, thisModelPrimaryKeys, importCollection, dataApi, belongsToFieldOnRelatedModel, setToNull, renderConfigDependencies) => {
    /* istanbul ignore next */
    if (dataApi === 'GraphQL') {
        const statements = relatedModelFields.map((relatedModelField, index) => {
            const correspondingPrimaryKey = thisModelPrimaryKeys[index];
            if (!correspondingPrimaryKey) {
                throw new codegen_ui_1.InternalError(`Corresponding primary key not found for ${relatedModelField}`);
            }
            return typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(relatedModelField), setToNull
                ? typescript_1.factory.createNull()
                : typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(savedModelName), typescript_1.factory.createIdentifier(correspondingPrimaryKey)));
        });
        /**
         * API.graphql({
         *    query: updateStudent,
         *    variables: {
         *      input: {
         *        id: original.id,
         *        schoolID: school.id
         *      }
         *    }
         * })
         */
        const inputs = [
            ...primaryKeys.map((key) => typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(key), typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('original'), typescript_1.factory.createIdentifier(key)))),
            ...statements,
        ];
        return (0, graphql_1.getGraphqlCallExpression)(graphql_1.ActionType.UPDATE, (0, helpers_1.capitalizeFirstLetter)(relatedModelName), importCollection, {
            inputs,
        }, undefined, renderConfigDependencies);
    }
    /**
     * Datastore.save(
     *    Student.copyOf(original, (updated) => {
     *        updated.schoolID = school.id
     *    })
     * )
     */
    return typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('DataStore'), typescript_1.factory.createIdentifier('save')), undefined, [
        typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(relatedModelName), typescript_1.factory.createIdentifier('copyOf')), undefined, [
            typescript_1.factory.createIdentifier('original'),
            typescript_1.factory.createArrowFunction(undefined, undefined, [
                typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('updated'), undefined, undefined, undefined),
            ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), createHasManyUpdateRelatedModelBlock({
                relatedModelFields,
                thisModelPrimaryKeys,
                thisModelRecord: savedModelName,
                belongsToFieldOnRelatedModel,
                setToNull,
            })),
        ]),
    ]);
};
const getCreateJoinTableExpression = (relatedJoinTableName, savedModelName, joinTableThisModelName, joinTableRelatedModelName, importCollection, dataApi, renderConfigDependencies) => {
    /* istanbul ignore next */
    if (dataApi === 'GraphQL') {
        const inputs = [
            savedModelName === joinTableThisModelName
                ? typescript_1.factory.createShorthandPropertyAssignment(typescript_1.factory.createIdentifier(joinTableThisModelName), undefined)
                : typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(joinTableThisModelName), typescript_1.factory.createIdentifier(savedModelName)),
            typescript_1.factory.createShorthandPropertyAssignment(typescript_1.factory.createIdentifier(joinTableRelatedModelName), undefined),
        ];
        return (0, graphql_1.getGraphqlCallExpression)(graphql_1.ActionType.CREATE, relatedJoinTableName, importCollection, { inputs }, undefined, renderConfigDependencies);
    }
    return typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('DataStore'), typescript_1.factory.createIdentifier('save')), undefined, [
        typescript_1.factory.createNewExpression(typescript_1.factory.createIdentifier(relatedJoinTableName), undefined, [
            // {
            //   cpkTeacher: cPKTeacher,
            //   cpkClass,
            // }
            typescript_1.factory.createObjectLiteralExpression([
                savedModelName === joinTableThisModelName
                    ? typescript_1.factory.createShorthandPropertyAssignment(typescript_1.factory.createIdentifier(joinTableThisModelName), undefined)
                    : typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(joinTableThisModelName), typescript_1.factory.createIdentifier(savedModelName)),
                typescript_1.factory.createShorthandPropertyAssignment(typescript_1.factory.createIdentifier(joinTableRelatedModelName), undefined),
            ], true),
        ]),
    ]);
};
/*
  GraphQL:
    const recordKeys = JSON.parse(id);
      const studentClassRecords = await API.graphql({
        query: listStudentClasses,
        variables: {
          filter: {
            and: [
              { studentId: { eq: recordKeys.id } },
              { classId: { eq: classRecord.id } },
            ],
          },
        },
      });
      for (let i = 0; i < count; i++) {
        promises.push(
          API.graphql({
            query: deleteStudentClass,
            variables: {
              input: {
                input: studentClassRecords[i],
              },
            },
          })
        );
      }
  
  DataStore:
    const recordKeys = JSON.parse(id);
    const studentClassRecords = await DataStore.query(
      StudentClass,
      (r) =>
        r.and((r) => {
          const recordKeys = JSON.parse(id);
          return [
            r.studentID.eq(recordKeys.id),
            r.classID.eq(classRecord.id),
          ];
        })
    );

    for (let i = 0; i < count; i++) {
      promises.push(DataStore.delete(studentClassRecords[i]));
    }
*/
function buildUnlinkForEachBlock(relatedJoinTableName, thisModelPrimaryKeys, relatedModelPrimaryKeys, joinTableThisModelFields, joinTableRelatedModelFields, thisModelRecord, isGraphql, importCollection, renderConfigDependencies) {
    const recordKeysString = 'recordKeys';
    const joinTableFilterExpressions = [];
    const graphqlFilterInput = (field, recordModel, recordKey) => {
        return typescript_1.factory.createObjectLiteralExpression([
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(field), typescript_1.factory.createObjectLiteralExpression([
                typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('eq'), typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(recordModel), typescript_1.factory.createIdentifier(recordKey))),
            ], false)),
        ], false);
    };
    joinTableRelatedModelFields.forEach((field, index) => {
        const recordKey = relatedModelPrimaryKeys[index];
        if (!recordKey) {
            throw new codegen_ui_1.InternalError(`Cannot find corresponding key for ${field}`);
        }
        joinTableFilterExpressions.push(graphqlFilterInput(field, recordKeysString, recordKey));
    });
    joinTableThisModelFields.forEach((field, index) => {
        const recordKey = thisModelPrimaryKeys[index];
        if (!recordKey) {
            throw new codegen_ui_1.InternalError(`Cannot find corresponding key for ${field}`);
        }
        joinTableFilterExpressions.push(graphqlFilterInput(field, thisModelRecord, recordKey));
    });
    const filters = [
        typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('and'), typescript_1.factory.createArrayLiteralExpression(joinTableFilterExpressions, true)),
    ];
    return typescript_1.factory.createBlock([
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(recordKeysString), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('JSON'), typescript_1.factory.createIdentifier('parse')), undefined, [typescript_1.factory.createIdentifier('id')])),
        ], typescript_1.NodeFlags.Const)),
        typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier((0, form_state_1.getRecordsName)(relatedJoinTableName)), undefined, undefined, (0, graphql_1.wrapInParenthesizedExpression)(isGraphql
                ? (0, graphql_1.getGraphqlCallExpression)(graphql_1.ActionType.LIST, relatedJoinTableName, importCollection, { filters }, undefined, renderConfigDependencies)
                : typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('DataStore'), typescript_1.factory.createIdentifier('query')), undefined, [
                    typescript_1.factory.createIdentifier(relatedJoinTableName),
                    typescript_1.factory.createArrowFunction(undefined, undefined, [
                        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('r'), undefined, undefined, undefined),
                    ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('r'), typescript_1.factory.createIdentifier('and')), undefined, [
                        getJoinTableQueryArrowFunction({
                            thisModelPrimaryKeys,
                            relatedModelPrimaryKeys,
                            joinTableThisModelFields,
                            joinTableRelatedModelFields,
                            thisModelRecord,
                        }),
                    ])),
                ]), isGraphql ? ['data', (0, graphql_1.getGraphqlQueryForModel)(graphql_1.ActionType.LIST, relatedJoinTableName), 'items'] : [])),
        ], 
        // eslint-disable-next-line no-bitwise
        typescript_1.NodeFlags.Const | typescript_1.NodeFlags.AwaitContext | typescript_1.NodeFlags.ContextFlags | typescript_1.NodeFlags.TypeExcludesFlags)),
        typescript_1.factory.createForStatement(typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('i'), undefined, undefined, typescript_1.factory.createNumericLiteral('0')),
        ], 
        // eslint-disable-next-line no-bitwise
        typescript_1.NodeFlags.Let | typescript_1.NodeFlags.AwaitContext | typescript_1.NodeFlags.ContextFlags | typescript_1.NodeFlags.TypeExcludesFlags), typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('i'), typescript_1.factory.createToken(typescript_1.SyntaxKind.LessThanToken), typescript_1.factory.createIdentifier('count')), typescript_1.factory.createPostfixUnaryExpression(typescript_1.factory.createIdentifier('i'), typescript_1.SyntaxKind.PlusPlusToken), typescript_1.factory.createBlock([
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('promises'), typescript_1.factory.createIdentifier('push')), undefined, [
                isGraphql
                    ? (0, graphql_1.getGraphqlCallExpression)(graphql_1.ActionType.DELETE, relatedJoinTableName, importCollection, {
                        inputs: [
                            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('id'), typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createElementAccessExpression(typescript_1.factory.createIdentifier((0, form_state_1.getRecordsName)(relatedJoinTableName)), typescript_1.factory.createIdentifier('i')), typescript_1.factory.createIdentifier('id'))),
                        ],
                    }, undefined, renderConfigDependencies)
                    : typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('DataStore'), typescript_1.factory.createIdentifier('delete')), undefined, [
                        typescript_1.factory.createElementAccessExpression(typescript_1.factory.createIdentifier((0, form_state_1.getRecordsName)(relatedJoinTableName)), typescript_1.factory.createIdentifier('i')),
                    ]),
            ])),
        ], true)),
    ], true);
}
//# sourceMappingURL=relationship.js.map