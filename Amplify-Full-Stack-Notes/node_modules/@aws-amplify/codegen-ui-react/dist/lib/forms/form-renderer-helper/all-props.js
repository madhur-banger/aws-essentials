"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addFormAttributes = void 0;
/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 */
const codegen_ui_1 = require("@aws-amplify/codegen-ui");
const typescript_1 = require("typescript");
const static_props_1 = require("./static-props");
const value_props_1 = require("./value-props");
const event_handler_props_1 = require("./event-handler-props");
const form_state_1 = require("./form-state");
const render_checkers_1 = require("./render-checkers");
const model_values_1 = require("./model-values");
const react_component_render_helper_1 = require("../../react-component-render-helper");
const helpers_1 = require("../../helpers");
const constants_1 = require("../../utils/constants");
const addFormAttributes = (component, formMetadata, dataSchema, dataApi) => {
    var _a, _b, _c;
    const { name: componentName, componentType } = component;
    const { dataType: { dataTypeName }, } = formMetadata;
    const attributes = [];
    /*
          boolean => RadioGroupField
          const value = e.target.value.toLowerCase() === 'yes';
          boolean => selectfield
          const value = ....
      
      
          componentType => SelectField && boolean
          const value = Boolean(e.target.checked)
    
        */
    if (componentName in formMetadata.fieldConfigs) {
        const fieldConfig = formMetadata.fieldConfigs[componentName];
        const renderedVariableName = fieldConfig.sanitizedFieldName || componentName;
        /*
          if the componetName is a dotPath we need to change the access expression to the following
           - bio.user.favorites.Quote => errors['bio.user.favorites.Quote']?.errorMessage
          if it's a regular componetName it will use the following expression
           - bio => errors.bio?.errorMessage
          */
        const errorKey = componentName.split('.').length > 1 || !(0, codegen_ui_1.isValidVariableName)(componentName)
            ? typescript_1.factory.createElementAccessExpression(typescript_1.factory.createIdentifier('errors'), typescript_1.factory.createStringLiteral(componentName))
            : typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('errors'), typescript_1.factory.createIdentifier(componentName));
        attributes.push(...(0, static_props_1.buildComponentSpecificAttributes)({
            componentType: (_a = fieldConfig.studioFormComponentType) !== null && _a !== void 0 ? _a : fieldConfig.componentType,
        }));
        const valueAttribute = (0, value_props_1.renderValueAttribute)({
            componentName: renderedVariableName,
            fieldConfig,
        });
        if (valueAttribute) {
            attributes.push(valueAttribute);
        }
        if (fieldConfig.componentType === 'Autocomplete') {
            attributes.push((0, model_values_1.getAutocompleteOptionsProp)({ fieldName: renderedVariableName, fieldConfig, dataApi }));
            if (fieldConfig.relationship && dataApi === 'GraphQL') {
                attributes.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('isLoading'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createIdentifier(`${renderedVariableName}Loading`))));
            }
            attributes.push((0, event_handler_props_1.buildOnSelect)({ sanitizedFieldName: renderedVariableName, fieldConfig, fieldName: componentName, dataApi }));
            attributes.push((0, event_handler_props_1.buildOnClearStatement)(componentName, fieldConfig));
        }
        if (formMetadata.formActionType === 'update' && !fieldConfig.isArray && !(0, value_props_1.isControlledComponent)(componentType)) {
            attributes.push((0, value_props_1.renderDefaultValueAttribute)(renderedVariableName, fieldConfig, componentType));
        }
        attributes.push((0, event_handler_props_1.buildOnChangeStatement)(component, formMetadata.fieldConfigs, dataApi));
        attributes.push((0, event_handler_props_1.buildOnBlurStatement)(componentName, fieldConfig));
        attributes.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('errorMessage'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createPropertyAccessChain(errorKey, typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionDotToken), typescript_1.factory.createIdentifier('errorMessage')))), typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('hasError'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createPropertyAccessChain(errorKey, typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionDotToken), typescript_1.factory.createIdentifier('hasError')))));
        if ((0, render_checkers_1.shouldWrapInArrayField)(fieldConfig)) {
            attributes.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('ref'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createIdentifier((0, form_state_1.getArrayChildRefName)(renderedVariableName)))));
            // labelHidden={true}. Label rendered on ArrayField instead
            attributes.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('labelHidden'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createTrue())));
        }
        else if (fieldConfig.componentType === 'Autocomplete') {
            attributes.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('labelHidden'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createFalse())));
        }
    }
    if (componentName === 'RightAlignCTASubFlex') {
        const flexGapAttribute = (0, react_component_render_helper_1.buildCtaLayoutProperties)(formMetadata);
        if (flexGapAttribute) {
            attributes.push(flexGapAttribute);
        }
    }
    /*
      onClick={(event) => {
        event.preventDefault();
        resetStateValues();
      }}
    */
    // multiple primary keys means it is a composite key
    const primaryKeys = ((_c = (_b = dataSchema === null || dataSchema === void 0 ? void 0 : dataSchema.models[dataTypeName]) === null || _b === void 0 ? void 0 : _b.primaryKeys) === null || _c === void 0 ? void 0 : _c.length)
        ? dataSchema.models[dataTypeName].primaryKeys
        : [''];
    const idProp = primaryKeys.length > 1 ? (0, form_state_1.getPropName)(constants_1.COMPOSITE_PRIMARY_KEY_PROP_NAME) : (0, form_state_1.getPropName)(primaryKeys[0]);
    if (componentName === 'ClearButton' || componentName === 'ResetButton') {
        attributes.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('onClick'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createArrowFunction(undefined, undefined, [
            typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('event'), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier('SyntheticEvent'), undefined), undefined),
        ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('event'), typescript_1.factory.createIdentifier('preventDefault')), undefined, [])),
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(form_state_1.resetValuesName, undefined, [])),
        ], true)))));
        if (formMetadata.formActionType === 'update' && formMetadata.dataType.dataSourceType === 'DataStore') {
            attributes.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('isDisabled'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createPrefixUnaryExpression(typescript_1.SyntaxKind.ExclamationToken, typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier(idProp), typescript_1.factory.createToken(typescript_1.SyntaxKind.BarBarToken), typescript_1.factory.createIdentifier((0, helpers_1.getModelNameProp)((0, helpers_1.lowerCaseFirst)(dataTypeName)))))))));
        }
    }
    if (componentName === 'SubmitButton') {
        if (formMetadata.formActionType === 'update' && formMetadata.dataType.dataSourceType === 'DataStore') {
            attributes.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('isDisabled'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createBinaryExpression(typescript_1.factory.createPrefixUnaryExpression(typescript_1.SyntaxKind.ExclamationToken, typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier(idProp), typescript_1.factory.createToken(typescript_1.SyntaxKind.BarBarToken), typescript_1.factory.createIdentifier((0, helpers_1.getModelNameProp)((0, helpers_1.lowerCaseFirst)(dataTypeName)))))), typescript_1.SyntaxKind.BarBarToken, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('Object'), typescript_1.factory.createIdentifier('values')), undefined, [typescript_1.factory.createIdentifier('errors')]), typescript_1.factory.createIdentifier('some')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('e'), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createPropertyAccessChain(typescript_1.factory.createIdentifier('e'), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionDotToken), typescript_1.factory.createIdentifier('hasError'))),
            ])))));
        }
        else {
            attributes.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('isDisabled'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('Object'), typescript_1.factory.createIdentifier('values')), undefined, [typescript_1.factory.createIdentifier('errors')]), typescript_1.factory.createIdentifier('some')), undefined, [
                typescript_1.factory.createArrowFunction(undefined, undefined, [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('e'), undefined, undefined, undefined),
                ], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createPropertyAccessChain(typescript_1.factory.createIdentifier('e'), typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionDotToken), typescript_1.factory.createIdentifier('hasError'))),
            ]))));
        }
    }
    if (componentName === 'CancelButton') {
        attributes.push(typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier('onClick'), typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createArrowFunction(undefined, undefined, [], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('onCancel'), typescript_1.factory.createToken(typescript_1.SyntaxKind.AmpersandAmpersandToken), typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('onCancel'), undefined, []))),
        ], false)))));
    }
    return attributes;
};
exports.addFormAttributes = addFormAttributes;
//# sourceMappingURL=all-props.js.map