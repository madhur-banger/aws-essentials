"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.filterStateReferencesForComponent = exports.getDefaultForComponentAndProperty = exports.getStateInitialValue = exports.buildStateStatements = exports.buildOpeningElementControlEvents = exports.getActionStateParameters = exports.mapSyntheticStateReferences = exports.buildUseEffectStatements = void 0;
/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 */
const typescript_1 = __importStar(require("typescript"));
const codegen_ui_1 = require("@aws-amplify/codegen-ui");
const react_component_render_helper_1 = require("../react-component-render-helper");
const imports_1 = require("../imports");
const events_1 = require("./events");
const utils_1 = require("./utils");
const primitive_1 = require("../primitive");
const genericEventToReactEventImplementationOverrides = {
    [primitive_1.Primitive.StepperField]: { [codegen_ui_1.StudioGenericEvent.onChange]: numericValueCallback },
    [primitive_1.Primitive.SliderField]: { [codegen_ui_1.StudioGenericEvent.onChange]: numericValueCallback },
    [primitive_1.Primitive.CheckboxField]: { [codegen_ui_1.StudioGenericEvent.onChange]: buildSyntheticEventTargetCallback('checked') },
    [primitive_1.Primitive.SwitchField]: { [codegen_ui_1.StudioGenericEvent.onChange]: toggleBooleanStateCallback },
};
const PrimitiveDefaultValuePropMapping = new Proxy({
    [primitive_1.Primitive.SwitchField]: { isChecked: 'defaultChecked' },
}, {
    get(target, name, ...args) {
        return name in target ? Reflect.get(target, name, ...args) : { value: 'defaultValue' };
    },
});
function buildUseEffectStatements(component, componentMetadata) {
    return componentMetadata.stateReferences
        .filter(({ dataDependencies }) => dataDependencies.length > 0)
        .map((stateReference) => {
        const { reference, dataDependencies } = stateReference;
        const dependencyConditions = dataDependencies.flatMap((dataDependency) => [
            // prevents components from changing to an uncontrolled state
            typescript_1.factory.createBinaryExpression(getStateInitialValue(component, componentMetadata, { reference, dataDependencies: [] }), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.ExclamationEqualsEqualsToken), typescript_1.factory.createIdentifier('undefined')),
            typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier(dataDependency), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.ExclamationEqualsEqualsToken), typescript_1.factory.createIdentifier('undefined')),
        ]);
        const conditions = [
            ...dependencyConditions,
            typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier((0, react_component_render_helper_1.getStateName)(reference)), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsEqualsEqualsToken), getStateInitialValue(component, componentMetadata, stateReference)),
        ];
        const binaryExpression = conditions.reduce((expression, currentCondition) => {
            return typescript_1.factory.createBinaryExpression(typescript_1.factory.createParenthesizedExpression(currentCondition), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.AmpersandAmpersandToken), expression);
        });
        return typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('useEffect'), undefined, [
            typescript_1.factory.createArrowFunction(undefined, undefined, [], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
                typescript_1.factory.createIfStatement(binaryExpression, typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier((0, react_component_render_helper_1.getSetStateName)(reference)), undefined, [
                    getStateInitialValue(component, componentMetadata, { reference, dataDependencies: [] }),
                ]))),
            ])),
            typescript_1.factory.createArrayLiteralExpression(dataDependencies.map(typescript_1.factory.createIdentifier), false),
        ]));
    });
}
exports.buildUseEffectStatements = buildUseEffectStatements;
function mapSyntheticStateReferences(componentMetadata) {
    return componentMetadata.stateReferences.map((stateReference) => {
        const { reference: { componentName, property }, } = stateReference;
        const childrenPropMapping = (0, utils_1.getChildPropMappingForComponentName)(componentMetadata, componentName);
        if (childrenPropMapping !== undefined && property === childrenPropMapping) {
            return { ...stateReference, reference: { ...stateReference.reference, property: 'children' } };
        }
        return stateReference;
    });
}
exports.mapSyntheticStateReferences = mapSyntheticStateReferences;
function getActionStateParameters(action) {
    if (action.parameters) {
        return Object.entries(action.parameters)
            .filter(([key]) => key !== 'model')
            .flatMap(([key, parameter]) => {
            if (key === 'fields' || key === 'attributes') {
                return Object.values(parameter);
            }
            if ((0, react_component_render_helper_1.isSetStateParameter)(parameter)) {
                return [parameter, parameter.set];
            }
            return parameter;
        })
            .filter((parameter) => (0, react_component_render_helper_1.isStateProperty)(parameter) || (0, react_component_render_helper_1.isSetStateParameter)(parameter));
    }
    return [];
}
exports.getActionStateParameters = getActionStateParameters;
function buildSyntheticEventTargetCallback(targetFieldName) {
    return (setStateName) => {
        return typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createArrowFunction(undefined, undefined, [
            typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('event'), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier('SyntheticEvent'), undefined), undefined),
        ], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier(setStateName), undefined, [
                typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('event'), typescript_1.factory.createIdentifier('target')), typescript_1.factory.createIdentifier(targetFieldName)),
            ])),
        ], false)));
    };
}
function numericValueCallback(setStateName) {
    return typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createArrowFunction(undefined, undefined, [
        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('value'), undefined, typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.NumberKeyword), undefined),
    ], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier(setStateName), undefined, [
        typescript_1.factory.createIdentifier('value'),
    ])));
}
function toggleBooleanStateCallback(setStateName, stateName) {
    return typescript_1.factory.createJsxExpression(undefined, typescript_1.factory.createArrowFunction(undefined, undefined, [], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier(setStateName), undefined, [
        typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createIdentifier(stateName)),
    ])));
}
function buildOpeningElementControlEvents(componentType, setStateName, stateName, event) {
    const implementationOverrides = genericEventToReactEventImplementationOverrides[componentType];
    const controlEventBuilder = implementationOverrides && implementationOverrides[event]
        ? implementationOverrides[event]
        : buildSyntheticEventTargetCallback('value');
    return typescript_1.factory.createJsxAttribute(typescript_1.factory.createIdentifier((0, events_1.mapGenericEventToReact)(componentType, event)), controlEventBuilder(setStateName, stateName));
}
exports.buildOpeningElementControlEvents = buildOpeningElementControlEvents;
/**
 * Dedupes state references by componentName, property, and dataDependencies, returning a consolidate
 * list, stripping the `set` property from them. We do this by serializing to json,
 * collecting in a set, then deserializing.
 */
function dedupeStateReferences(stateReferences) {
    const dedupedSerializedRefs = [
        ...new Set(stateReferences.map((stateReference) => {
            const { reference: { componentName, property }, dataDependencies, } = stateReference;
            return JSON.stringify({ reference: { componentName, property }, dataDependencies: dataDependencies.sort() });
        })),
    ];
    return dedupedSerializedRefs.map((ref) => JSON.parse(ref));
}
function buildStateStatements(component, componentMetadata, importCollection, apiKind = 'DataStore') {
    const stateHook = apiKind === 'DataStore' ? imports_1.ImportValue.USE_STATE_MUTATION_ACTION : imports_1.ImportValue.USE_STATE;
    if (componentMetadata.stateReferences.length > 0) {
        importCollection.addMappedImport(stateHook);
    }
    const dedupedStateReferences = dedupeStateReferences(componentMetadata.stateReferences);
    return dedupedStateReferences.map((stateReference) => {
        return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createArrayBindingPattern([
                typescript_1.factory.createBindingElement(undefined, undefined, typescript_1.factory.createIdentifier((0, react_component_render_helper_1.getStateName)(stateReference.reference)), undefined),
                typescript_1.factory.createBindingElement(undefined, undefined, typescript_1.factory.createIdentifier((0, react_component_render_helper_1.getSetStateName)(stateReference.reference)), undefined),
            ]), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier(stateHook), undefined, [
                getStateInitialValue(component, componentMetadata, stateReference),
            ])),
        ], typescript_1.default.NodeFlags.Const));
    });
}
exports.buildStateStatements = buildStateStatements;
function getStateInitialValue(component, componentMetadata, stateReference) {
    const { reference: { componentName, property }, dataDependencies, } = stateReference;
    const referencedComponent = (0, codegen_ui_1.getComponentFromComponentTree)(component, componentName);
    const componentProperty = referencedComponent.properties[property];
    if (componentProperty === undefined || dataDependencies.length > 0) {
        const defaultPropMapping = PrimitiveDefaultValuePropMapping[referencedComponent.componentType];
        if (property in defaultPropMapping && referencedComponent.properties[defaultPropMapping[property]]) {
            const defaultProp = referencedComponent.properties[defaultPropMapping[property]];
            // eslint-disable-next-line no-param-reassign
            delete referencedComponent.properties[defaultPropMapping[property]];
            return (0, react_component_render_helper_1.propertyToExpression)(componentMetadata, defaultProp);
        }
        return (0, react_component_render_helper_1.propertyToExpression)(componentMetadata, getDefaultForComponentAndProperty(referencedComponent, property));
    }
    return (0, react_component_render_helper_1.propertyToExpression)(componentMetadata, componentProperty);
}
exports.getStateInitialValue = getStateInitialValue;
function getDefaultForComponentAndProperty(component, property) {
    const { componentType } = component;
    const componentDefault = primitive_1.PrimitiveDefaultPropertyValue[componentType];
    if (componentDefault && property in componentDefault) {
        // if component has defaultValue use defaultValue as initial state value
        return componentDefault[property];
    }
    // use empty string as fallback default
    return undefined;
}
exports.getDefaultForComponentAndProperty = getDefaultForComponentAndProperty;
function filterStateReferencesForComponent(component, stateReferences) {
    return stateReferences
        .filter(({ reference: { componentName } }) => componentName === component.name)
        .reduce(mutationReferenceReducerWithComponentType(component.componentType), {});
}
exports.filterStateReferencesForComponent = filterStateReferencesForComponent;
function mutationReferenceReducerWithComponentType(componentType) {
    return function mutationReferenceReducer(mutationReferences, stateReference) {
        const { reference } = stateReference;
        const propertyReferences = reference.property in mutationReferences ? mutationReferences[reference.property] : [];
        return {
            ...mutationReferences,
            [reference.property]: propertyReferences.concat([
                { addControlEvent: primitive_1.PrimitivesWithChangeEvent.has(componentType) },
            ]),
        };
    };
}
//# sourceMappingURL=mutation.js.map