"use strict";
/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getActionParameterValue = exports.addSchemaToArguments = exports.buildActionArguments = exports.buildMutationActionStatement = exports.buildGraphqlCallback = exports.buildUseActionStatement = exports.getActionIdentifier = exports.getComponentActions = exports.getActionHookImportValue = exports.ActionNameMapping = void 0;
const typescript_1 = __importStar(require("typescript"));
const codegen_ui_1 = require("@aws-amplify/codegen-ui");
const react_component_render_helper_1 = require("../react-component-render-helper");
const imports_1 = require("../imports");
const utils_1 = require("./utils");
const graphql_1 = require("../utils/graphql");
var Action;
(function (Action) {
    Action["Amplify.Navigation"] = "Amplify.Navigation";
    Action["Amplify.DataStoreCreateItemAction"] = "Amplify.DataStoreCreateItemAction";
    Action["Amplify.DataStoreUpdateItemAction"] = "Amplify.DataStoreUpdateItemAction";
    Action["Amplify.DataStoreDeleteItemAction"] = "Amplify.DataStoreDeleteItemAction";
    Action["Amplify.AuthSignOut"] = "Amplify.AuthSignOut";
    Action["Amplify.Mutation"] = "Amplify.Mutation";
})(Action || (Action = {}));
exports.default = Action;
exports.ActionNameMapping = {
    [Action['Amplify.Navigation']]: imports_1.ImportValue.USE_NAVIGATE_ACTION,
    [Action['Amplify.DataStoreCreateItemAction']]: imports_1.ImportValue.USE_DATA_STORE_CREATE_ACTION,
    [Action['Amplify.DataStoreUpdateItemAction']]: imports_1.ImportValue.USE_DATA_STORE_UPDATE_ACTION,
    [Action['Amplify.DataStoreDeleteItemAction']]: imports_1.ImportValue.USE_DATA_STORE_DELETE_ACTION,
    [Action['Amplify.AuthSignOut']]: imports_1.ImportValue.USE_AUTH_SIGN_OUT_ACTION,
    [Action['Amplify.Mutation']]: imports_1.ImportValue.USE_STATE_MUTATION_ACTION,
};
const DataStoreActions = new Set([
    Action['Amplify.DataStoreCreateItemAction'],
    Action['Amplify.DataStoreDeleteItemAction'],
    Action['Amplify.DataStoreUpdateItemAction'],
]);
function isMutationAction(action) {
    return action.action === Action['Amplify.Mutation'];
}
function isDataAction(action) {
    return DataStoreActions.has(action.action);
}
function getActionHookImportValue(action) {
    const actionName = exports.ActionNameMapping[Action[action]];
    if (actionName === undefined) {
        throw new codegen_ui_1.InvalidInputError(`${action} is not a valid action.`);
    }
    return actionName;
}
exports.getActionHookImportValue = getActionHookImportValue;
function getGraphqlMutationFromAction(action) {
    switch (action) {
        case Action['Amplify.DataStoreCreateItemAction']:
            return graphql_1.ActionType.CREATE;
        case Action['Amplify.DataStoreUpdateItemAction']:
            return graphql_1.ActionType.UPDATE;
        case Action['Amplify.DataStoreDeleteItemAction']:
            return graphql_1.ActionType.DELETE;
        default:
            throw new codegen_ui_1.InvalidInputError(`Action ${action} has no corresponding GraphQL operation`);
    }
}
function getComponentActions(component) {
    const actions = [];
    if (component.events) {
        actions.push(...Object.entries(component.events)
            // need 'action is ...' so that typescript will know all items after filter are ActionStudioComponentEvent type
            .filter((action) => (0, react_component_render_helper_1.isActionEvent)(action[1]))
            .map(([event, action]) => ({ action, identifier: getActionIdentifier(component.name, event) })));
    }
    if (component.children) {
        actions.push(...component.children.map(getComponentActions).flat());
    }
    return actions;
}
exports.getComponentActions = getComponentActions;
function getActionIdentifier(componentName, event) {
    const name = (0, react_component_render_helper_1.sanitizeName)(componentName);
    return [name.charAt(0).toLowerCase() + name.slice(1), event.charAt(0).toUpperCase() + event.slice(1)].join('');
}
exports.getActionIdentifier = getActionIdentifier;
function buildUseActionStatement(componentMetadata, action, identifier, importCollection, apiKind = 'DataStore', renderConfigDependencies) {
    if (isMutationAction(action)) {
        return buildMutationActionStatement(componentMetadata, action, identifier);
    }
    if (isDataAction(action) && apiKind === 'GraphQL') {
        return buildGraphqlCallback(componentMetadata, action, identifier, importCollection, renderConfigDependencies);
    }
    const actionHookImportValue = getActionHookImportValue(action.action);
    importCollection.addMappedImport(actionHookImportValue);
    return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
        typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(identifier), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier(actionHookImportValue), undefined, buildActionArguments(componentMetadata, action, importCollection))),
    ], typescript_1.default.NodeFlags.Const));
}
exports.buildUseActionStatement = buildUseActionStatement;
function buildGraphqlCallback(componentMetadata, action, identifier, importCollection, renderConfigDependencies) {
    const inputKeys = [];
    if ('id' in action.parameters && action.parameters.id) {
        inputKeys.push(typescript_1.factory.createPropertyAssignment('id', getActionParameterValue(componentMetadata, 'id', action.parameters.id, importCollection)));
    }
    if ('fields' in action.parameters && action.parameters.fields) {
        inputKeys.unshift(...assignFieldProperties(componentMetadata, action.parameters.fields, importCollection));
    }
    return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
        typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(identifier), undefined, undefined, typescript_1.factory.createArrowFunction([typescript_1.factory.createToken(typescript_1.default.SyntaxKind.AsyncKeyword)], undefined, [], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createAwaitExpression((0, graphql_1.getGraphqlCallExpression)(getGraphqlMutationFromAction(action.action), action.parameters.model, importCollection, { inputs: inputKeys }, undefined, renderConfigDependencies))),
        ], true))),
    ], typescript_1.default.NodeFlags.Const));
}
exports.buildGraphqlCallback = buildGraphqlCallback;
function buildMutationActionStatement(componentMetadata, action, identifier) {
    const { componentName, property } = action.parameters.state;
    const childrenPropMapping = (0, utils_1.getChildPropMappingForComponentName)(componentMetadata, componentName);
    const stateReference = childrenPropMapping !== undefined && property === childrenPropMapping
        ? { ...action.parameters.state, property: 'children' }
        : action.parameters.state;
    const setState = (0, react_component_render_helper_1.getSetStateName)(stateReference);
    return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
        typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(identifier), undefined, undefined, typescript_1.factory.createArrowFunction(undefined, undefined, [], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier(setState), undefined, [
                (0, react_component_render_helper_1.propertyToExpression)(componentMetadata, action.parameters.state.set),
            ])),
        ], true))),
    ], typescript_1.default.NodeFlags.Const));
}
exports.buildMutationActionStatement = buildMutationActionStatement;
/* Transform the action parameters field to literal
 *
 * model and fields are special cases. All other fields are StudioComponentProperty
 */
function buildActionArguments(componentMetadata, action, importCollection) {
    if (action.parameters) {
        return [buildActionArgument(componentMetadata, action, importCollection)];
    }
    return undefined;
}
exports.buildActionArguments = buildActionArguments;
function buildActionArgument(componentMetadata, action, importCollection) {
    const properties = Object.entries(action.parameters).map(([key, value]) => typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(key), getActionParameterValue(componentMetadata, key, value, importCollection)));
    if (DataStoreActions.has(action.action)) {
        addSchemaToArguments(properties, importCollection);
    }
    return typescript_1.factory.createObjectLiteralExpression(properties, false);
}
function addSchemaToArguments(properties, importCollection) {
    const SCHEMA = 'schema';
    properties.push(typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(SCHEMA), typescript_1.factory.createIdentifier(SCHEMA)));
    importCollection.addImport(imports_1.ImportSource.LOCAL_SCHEMA, SCHEMA);
}
exports.addSchemaToArguments = addSchemaToArguments;
function assignFieldProperties(componentMetadata, fieldsValue, importCollection) {
    return Object.entries(fieldsValue).map(([nestedKey, nestedValue]) => typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(nestedKey), getActionParameterValue(componentMetadata, nestedKey, nestedValue, importCollection)));
}
function getActionParameterValue(componentMetadata, key, value, importCollection) {
    if (key === 'model') {
        const modelName = importCollection.addModelImport(value);
        return typescript_1.factory.createIdentifier(modelName);
    }
    if (key === 'fields') {
        return typescript_1.factory.createObjectLiteralExpression(assignFieldProperties(componentMetadata, value, importCollection), false);
    }
    return (0, react_component_render_helper_1.propertyToExpression)(componentMetadata, value);
}
exports.getActionParameterValue = getActionParameterValue;
//# sourceMappingURL=action.js.map