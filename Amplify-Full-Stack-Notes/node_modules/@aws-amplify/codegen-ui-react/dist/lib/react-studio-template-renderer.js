"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReactStudioTemplateRenderer = void 0;
/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 */
const codegen_ui_1 = require("@aws-amplify/codegen-ui");
const os_1 = require("os");
const typescript_1 = __importStar(require("typescript"));
const pluralize_1 = __importDefault(require("pluralize"));
const imports_1 = require("./imports");
const react_output_manager_1 = require("./react-output-manager");
const react_render_config_1 = require("./react-render-config");
const sampleCodeRenderer_1 = __importDefault(require("./amplify-ui-renderers/sampleCodeRenderer"));
const react_component_render_helper_1 = require("./react-component-render-helper");
const react_studio_template_renderer_helper_1 = require("./react-studio-template-renderer-helper");
const primitive_1 = require("./primitive");
const workflow_1 = require("./workflow");
const keywords_1 = __importDefault(require("./keywords"));
const helpers_1 = require("./helpers");
const generate_react_hooks_1 = require("./utils/generate-react-hooks");
const graphql_1 = require("./utils/graphql");
const constants_1 = require("./utils/constants");
const amplify_js_versioning_1 = require("./helpers/amplify-js-versioning");
const utils_file_functions_1 = require("./utils-file-functions");
class ReactStudioTemplateRenderer extends codegen_ui_1.StudioTemplateRenderer {
    constructor(component, renderConfig, dataSchema) {
        var _a;
        super(component, new react_output_manager_1.ReactOutputManager(), renderConfig);
        this.fileName = `${this.component.name}.tsx`;
        this.renderConfig = {
            ...react_studio_template_renderer_helper_1.defaultRenderConfig,
            ...renderConfig,
        };
        this.fileName = `${this.component.name}.${(0, react_render_config_1.scriptKindToFileExtension)(this.renderConfig.script)}`;
        this.componentMetadata = (0, codegen_ui_1.computeComponentMetadata)(this.component);
        this.componentMetadata.stateReferences = (0, workflow_1.mapSyntheticStateReferences)(this.componentMetadata);
        this.componentMetadata.dataSchemaMetadata = dataSchema;
        this.mapSyntheticPropsForVariants();
        this.mapSyntheticProps();
        this.importCollection = new imports_1.ImportCollection({ rendererConfig: renderConfig });
        this.importCollection.ingestComponentMetadata(this.componentMetadata);
        (0, react_component_render_helper_1.addBindingPropertiesImports)(this.component, this.importCollection);
        // TODO: throw warnings on invalid config combinations. i.e. CommonJS + JSX
        if ((0, codegen_ui_1.componentRequiresDataApi)(component) && ((_a = renderConfig.apiConfiguration) === null || _a === void 0 ? void 0 : _a.dataApi) === 'NoApi') {
            throw new codegen_ui_1.NoApiError('Component cannot be rendered without a data API');
        }
    }
    renderSampleCodeSnippet() {
        const jsx = this.renderSampleCodeSnippetJsx(this.component);
        const imports = this.importCollection.buildSampleSnippetImports(this.component.name);
        const { printer, file } = (0, react_studio_template_renderer_helper_1.buildPrinter)(this.fileName, this.renderConfig);
        let importsText = '';
        imports.forEach((importStatement) => {
            const result = printer.printNode(typescript_1.EmitHint.Unspecified, importStatement, file);
            importsText += result + os_1.EOL;
        });
        const compText = printer.printNode(typescript_1.EmitHint.Unspecified, jsx, file);
        return { compText, importsText };
    }
    renderComponentOnly() {
        // buildVariableStatements must be called before renderJsx
        // so that some properties can be removed from opening element
        const variableStatements = this.buildVariableStatements(this.component);
        const jsx = this.renderJsx(this.component);
        const { printer, file } = (0, react_studio_template_renderer_helper_1.buildPrinter)(this.fileName, this.renderConfig);
        const imports = this.importCollection.buildImportStatements();
        let importsText = '';
        imports.forEach((importStatement) => {
            const result = printer.printNode(typescript_1.EmitHint.Unspecified, importStatement, file);
            importsText += result + os_1.EOL;
        });
        const wrappedFunction = this.renderFunctionWrapper(this.component.name, variableStatements, jsx, false);
        const result = printer.printNode(typescript_1.EmitHint.Unspecified, wrappedFunction, file);
        // do not produce declaration becuase it is not used
        // also do not format because we don't care what the component looks like in Studio UI
        const { componentText: compText } = (0, react_studio_template_renderer_helper_1.transpile)(result, { ...this.renderConfig, renderTypeDeclarations: false }, false);
        return {
            compText,
            importsText,
            requiredDataModels: this.componentMetadata.requiredDataModels,
            importCollection: this.importCollection,
        };
    }
    renderComponentInternal() {
        // This is a react component so we only need a single tsx
        var _a;
        const { printer, file } = (0, react_studio_template_renderer_helper_1.buildPrinter)(this.fileName, this.renderConfig);
        // buildVariableStatements must be called before renderJsx
        // so that some properties can be removed from opening element
        const variableStatements = this.buildVariableStatements(this.component);
        const jsx = this.renderJsx(this.component);
        const wrappedFunction = this.renderFunctionWrapper(this.component.name, variableStatements, jsx, true);
        const propsDeclarations = this.renderBindingPropsType(this.component);
        const imports = this.importCollection.buildImportStatements();
        let componentText = `/* eslint-disable */${os_1.EOL}`;
        imports.forEach((importStatement) => {
            const result = printer.printNode(typescript_1.EmitHint.Unspecified, importStatement, file);
            componentText += result + os_1.EOL;
        });
        componentText += os_1.EOL;
        componentText += utils_file_functions_1.overrideTypesString + os_1.EOL;
        propsDeclarations.forEach((propsDeclaration) => {
            const propsPrinted = printer.printNode(typescript_1.EmitHint.Unspecified, propsDeclaration, file);
            componentText += propsPrinted;
        });
        componentText += os_1.EOL;
        if (this.component.componentType === 'Collection' && ((_a = this.renderConfig.apiConfiguration) === null || _a === void 0 ? void 0 : _a.dataApi) === 'GraphQL') {
            componentText += os_1.EOL;
            const graphqlVariableDeclarations = [
                typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                    typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('nextToken'), undefined, undefined, typescript_1.factory.createObjectLiteralExpression([], false)),
                ], typescript_1.default.NodeFlags.Const)),
                typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                    typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('apiCache'), undefined, undefined, typescript_1.factory.createObjectLiteralExpression([], false)),
                ], typescript_1.default.NodeFlags.Const)),
            ];
            graphqlVariableDeclarations.forEach((variableDeclaration) => {
                const result = printer.printNode(typescript_1.EmitHint.Unspecified, variableDeclaration, file);
                componentText += result + os_1.EOL;
            });
        }
        // Amplify JS V6 api
        // const client = generateClient();
        if ((0, graphql_1.isGraphqlConfig)(this.renderConfig.apiConfiguration) &&
            this.importCollection.hasPackage(imports_1.ImportSource.AMPLIFY_API) &&
            (0, amplify_js_versioning_1.getAmplifyJSVersionToRender)(this.renderConfig.dependencies) === constants_1.AMPLIFY_JS_V6) {
            const result = printer.printNode(typescript_1.EmitHint.Unspecified, (0, react_studio_template_renderer_helper_1.getAmplifyJSClientGenerator)(), file);
            componentText += result + os_1.EOL;
        }
        const result = printer.printNode(typescript_1.EmitHint.Unspecified, wrappedFunction, file);
        componentText += result;
        const { componentText: transpiledComponentText, declaration } = (0, react_studio_template_renderer_helper_1.transpile)(componentText, this.renderConfig);
        return {
            componentText: transpiledComponentText,
            declaration,
            renderComponentToFilesystem: async (outputPath) => {
                await this.renderComponentToFilesystem(transpiledComponentText)(this.fileName)(outputPath);
                if (declaration) {
                    await this.renderComponentToFilesystem(declaration)((0, react_studio_template_renderer_helper_1.getDeclarationFilename)(this.fileName))(outputPath);
                }
            },
        };
    }
    renderFunctionWrapper(componentName, variableStatements, jsx, renderExport) {
        const componentPropType = (0, react_component_render_helper_1.getComponentPropName)(componentName);
        const jsxStatement = typescript_1.factory.createReturnStatement(typescript_1.factory.createParenthesizedExpression(this.renderConfig.script !== react_render_config_1.ScriptKind.TSX
            ? jsx
            : /* add ts-ignore comment above jsx statement. Generated props are incompatible with amplify-ui props */
                (0, typescript_1.addSyntheticLeadingComment)(typescript_1.factory.createParenthesizedExpression(jsx), typescript_1.SyntaxKind.MultiLineCommentTrivia, ' @ts-ignore: TS2322 ', true)));
        const codeBlockContent = variableStatements.concat([jsxStatement]);
        const modifiers = renderExport
            ? [typescript_1.factory.createModifier(typescript_1.SyntaxKind.ExportKeyword), typescript_1.factory.createModifier(typescript_1.SyntaxKind.DefaultKeyword)]
            : [];
        const typeParameter = primitive_1.PrimitiveTypeParameter[primitive_1.Primitive[this.component.componentType]];
        // only use type parameter reference if one was declared
        const typeParameterReference = typeParameter && typeParameter.declaration() ? typeParameter.reference() : undefined;
        return typescript_1.factory.createFunctionDeclaration(undefined, modifiers, undefined, typescript_1.factory.createIdentifier(componentName), typeParameter ? typeParameter.declaration() : undefined, [
            typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, 'props', undefined, typescript_1.factory.createTypeReferenceNode(componentPropType, typeParameterReference), undefined),
        ], typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier('React'), typescript_1.factory.createIdentifier('ReactElement')), undefined), typescript_1.factory.createBlock(codeBlockContent, true));
    }
    renderAppWrapper(appName, jsx) {
        const declarationList = typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(appName, undefined, undefined, typescript_1.factory.createArrowFunction(undefined, undefined, [], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([typescript_1.factory.createReturnStatement(typescript_1.factory.createParenthesizedExpression(jsx))], true))),
        ], typescript_1.default.NodeFlags.Const);
        const wrapper = typescript_1.factory.createVariableStatement([typescript_1.factory.createModifier(typescript_1.SyntaxKind.ExportKeyword)], declarationList);
        return wrapper;
    }
    renderSampleCodeSnippetJsx(component) {
        return new sampleCodeRenderer_1.default(component, this.componentMetadata, this.importCollection).renderElement();
    }
    renderBindingPropsType(component) {
        const componentOverridesPropName = `${component.name}OverridesProps`;
        const escapeHatchTypeNode = typescript_1.factory.createTypeLiteralNode([
            typescript_1.factory.createPropertySignature(undefined, typescript_1.factory.createIdentifier('overrides'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionToken), typescript_1.factory.createUnionTypeNode([
                typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier(componentOverridesPropName), undefined),
                typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.UndefinedKeyword),
                typescript_1.factory.createLiteralTypeNode(typescript_1.factory.createNull()),
            ])),
        ]);
        const componentPropType = (0, react_component_render_helper_1.getComponentPropName)(component.name);
        const propsTypeParameter = primitive_1.PrimitiveTypeParameter[primitive_1.Primitive[component.componentType]];
        const overridesProps = typescript_1.factory.createTypeAliasDeclaration(undefined, [typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.ExportKeyword), typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.DeclareKeyword)], typescript_1.factory.createIdentifier(componentOverridesPropName), undefined, typescript_1.factory.createIntersectionTypeNode([
            typescript_1.factory.createTypeLiteralNode(Object.entries(this.componentMetadata.componentNameToTypeMap).map(([name, componentType]) => {
                const isComponentTypePrimitive = (0, primitive_1.isPrimitive)(componentType);
                const componentName = (0, helpers_1.isAliased)(componentType) ? (0, helpers_1.removeAlias)(componentType) : componentType;
                const componentTypePropName = `${componentName}Props`;
                this.importCollection.addImport(isComponentTypePrimitive ? imports_1.ImportSource.UI_REACT : `./${componentName}`, componentTypePropName);
                return typescript_1.factory.createPropertySignature(undefined, (0, codegen_ui_1.isValidVariableName)(name) ? typescript_1.factory.createIdentifier(name) : typescript_1.factory.createStringLiteral(name), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionToken), isComponentTypePrimitive
                    ? typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier(primitive_1.PRIMITIVE_OVERRIDE_PROPS), [
                        typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier(componentTypePropName), undefined),
                    ])
                    : typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier(componentTypePropName)));
            })),
            typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier('EscapeHatchProps'), undefined),
        ]));
        return [
            primitive_1.primitiveOverrideProp,
            overridesProps,
            typescript_1.factory.createTypeAliasDeclaration(undefined, [typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.ExportKeyword)], typescript_1.factory.createIdentifier(componentPropType), propsTypeParameter ? propsTypeParameter.declaration() : undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier('React.PropsWithChildren'), [
                typescript_1.factory.createIntersectionTypeNode(this.dropMissingListElements([
                    this.buildBasePropNode(component),
                    this.buildComponentPropNode(component),
                    this.buildVariantPropNode(component),
                    escapeHatchTypeNode,
                ])),
            ])),
        ];
    }
    buildBasePropNode(component) {
        const propsType = this.getPropsTypeName(component);
        const componentIsPrimitive = (0, primitive_1.isPrimitive)(component.componentType);
        if (componentIsPrimitive) {
            this.importCollection.addImport(imports_1.ImportSource.UI_REACT, propsType);
        }
        else {
            this.importCollection.addImport(`./${component.componentType}`, `${(0, react_component_render_helper_1.getComponentPropName)(component.componentType)}`);
        }
        const propsTypeParameter = componentIsPrimitive
            ? primitive_1.PrimitiveTypeParameter[primitive_1.Primitive[component.componentType]]
            : undefined;
        const basePropType = typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier(propsType), propsTypeParameter ? propsTypeParameter.reference() : undefined);
        return typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier('Partial'), [basePropType]);
    }
    /**
     * This builder is responsible primarily for identifying the variant options, partioning them into
     * required and optional parameters, then building the appropriate property signature based on that.
     * e.g.
       {
         variant?: "primary" | "secondary",
         size?: "large",
       }
     */
    buildVariantPropNode(component) {
        if (!(0, codegen_ui_1.isStudioComponentWithVariants)(component)) {
            return undefined;
        }
        const variantValues = component.variants.map((variant) => variant.variantValues);
        const allKeys = [...new Set(variantValues.flatMap((variantValue) => Object.keys(variantValue)))];
        const requiredKeys = allKeys
            .filter((key) => variantValues.every((variantValue) => Object.keys(variantValue).includes(key)))
            .sort();
        const optionalKeys = [...allKeys].filter((key) => !requiredKeys.includes(key)).sort();
        const requiredProperties = requiredKeys.map((key) => {
            const variantOptions = [
                ...new Set(variantValues
                    .map((variantValue) => variantValue[key])
                    .filter((variantOption) => variantOption !== undefined && variantOption !== null)),
            ].sort();
            const valueTypeNodes = variantOptions.map((variantOption) => typescript_1.factory.createLiteralTypeNode(typescript_1.factory.createStringLiteral(variantOption)));
            return typescript_1.factory.createPropertySignature(undefined, typescript_1.factory.createIdentifier(key), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionToken), typescript_1.factory.createUnionTypeNode(valueTypeNodes));
        });
        const optionalProperties = optionalKeys.map((key) => {
            const variantOptions = [
                ...new Set(variantValues
                    .map((variantValue) => variantValue[key])
                    .filter((variantOption) => variantOption !== undefined && variantOption !== null)),
            ].sort();
            const valueTypeNodes = variantOptions.map((variantOption) => typescript_1.factory.createLiteralTypeNode(typescript_1.factory.createStringLiteral(variantOption)));
            return typescript_1.factory.createPropertySignature(undefined, typescript_1.factory.createIdentifier(key), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionToken), typescript_1.factory.createUnionTypeNode(valueTypeNodes));
        });
        return typescript_1.factory.createTypeLiteralNode([...requiredProperties, ...optionalProperties]);
    }
    buildComponentPropNode(component) {
        var _a;
        const propSignatures = [];
        if (component.bindingProperties !== undefined && (0, codegen_ui_1.isStudioComponentWithBinding)(component)) {
            Object.entries(component.bindingProperties).forEach(([propName, binding]) => {
                if ((0, codegen_ui_1.isSimplePropertyBinding)(binding)) {
                    const propSignature = typescript_1.factory.createPropertySignature(undefined, propName, typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), typescript_1.factory.createTypeReferenceNode(binding.type, undefined));
                    propSignatures.push(propSignature);
                }
                else if ((0, codegen_ui_1.isDataPropertyBinding)(binding)) {
                    let modelName = this.importCollection.getMappedModelAlias(binding.bindingProperties.model);
                    const apiConfig = this.renderConfig.apiConfiguration;
                    if ((0, graphql_1.isGraphqlConfig)(apiConfig) && !apiConfig.typesFilePath) {
                        modelName = 'any';
                    }
                    const propSignature = typescript_1.factory.createPropertySignature(undefined, propName, typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), typescript_1.factory.createTypeReferenceNode(modelName, undefined));
                    propSignatures.push(propSignature);
                }
                else if ((0, codegen_ui_1.isEventPropertyBinding)(binding)) {
                    this.importCollection.addImport('react', 'SyntheticEvent');
                    const propSignature = typescript_1.factory.createPropertySignature(undefined, propName, typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), typescript_1.factory.createFunctionTypeNode(undefined, [
                        typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('event'), undefined, typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier('SyntheticEvent'), undefined), undefined),
                    ], typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.VoidKeyword)));
                    propSignatures.push(propSignature);
                }
                else if ((0, codegen_ui_1.isSlotBinding)(binding)) {
                    const propSignature = typescript_1.factory.createPropertySignature(undefined, propName, typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createQualifiedName(typescript_1.factory.createIdentifier('React'), typescript_1.factory.createIdentifier('ReactNode')), undefined));
                    propSignatures.push(propSignature);
                }
            });
        }
        if (component.componentType === 'Collection') {
            const child = (_a = component.children) === null || _a === void 0 ? void 0 : _a[0];
            if (!child) {
                throw new Error(`Collection component must have a child`);
            }
            const childComponentName = child.name;
            const childComponentProps = (0, react_component_render_helper_1.getComponentPropName)(childComponentName);
            this.importCollection.addImport(`./${childComponentName}`, `${childComponentProps}`);
            propSignatures.push(typescript_1.factory.createPropertySignature(undefined, 'items', typescript_1.factory.createToken(typescript_1.SyntaxKind.QuestionToken), typescript_1.factory.createTypeReferenceNode('any[]', undefined)));
            propSignatures.push(typescript_1.factory.createPropertySignature(undefined, typescript_1.factory.createIdentifier('overrideItems'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionToken), typescript_1.factory.createFunctionTypeNode(undefined, [
                typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('collectionItem'), undefined, typescript_1.factory.createTypeLiteralNode([
                    typescript_1.factory.createPropertySignature(undefined, typescript_1.factory.createIdentifier('item'), undefined, typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.AnyKeyword)),
                    typescript_1.factory.createPropertySignature(undefined, typescript_1.factory.createIdentifier('index'), undefined, typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.NumberKeyword)),
                ]), undefined),
            ], typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier(childComponentProps), undefined))));
        }
        if (propSignatures.length === 0) {
            return undefined;
        }
        return typescript_1.factory.createTypeLiteralNode(propSignatures);
    }
    buildVariableStatements(component) {
        var _a, _b, _c;
        const statements = [];
        const elements = [];
        if ((0, codegen_ui_1.isStudioComponentWithBinding)(component)) {
            Object.entries(component.bindingProperties).forEach((entry) => {
                const [propName, binding] = entry;
                if ((0, codegen_ui_1.isSimplePropertyBinding)(binding) ||
                    (0, codegen_ui_1.isDataPropertyBinding)(binding) ||
                    (0, codegen_ui_1.isEventPropertyBinding)(binding) ||
                    (0, codegen_ui_1.isSlotBinding)(binding)) {
                    const usesHook = (0, react_studio_template_renderer_helper_1.bindingPropertyUsesHook)(binding);
                    const shouldAssignToDifferentName = usesHook || keywords_1.default.has(propName);
                    const propVariableName = shouldAssignToDifferentName ? `${propName}Prop` : propName;
                    const bindingElement = typescript_1.factory.createBindingElement(undefined, shouldAssignToDifferentName ? typescript_1.factory.createIdentifier(propName) : undefined, typescript_1.factory.createIdentifier(propVariableName), (0, codegen_ui_1.isSimplePropertyBinding)(binding) ? this.getDefaultValue(binding) : undefined);
                    elements.push(bindingElement);
                }
            });
        }
        if (component.componentType === 'Collection') {
            const bindingElement = this.hasCollectionPropertyNamedItems(component) || ((_a = this.renderConfig.apiConfiguration) === null || _a === void 0 ? void 0 : _a.dataApi) === 'GraphQL'
                ? typescript_1.factory.createBindingElement(undefined, typescript_1.factory.createIdentifier('items'), typescript_1.factory.createIdentifier('itemsProp'), undefined)
                : typescript_1.factory.createBindingElement(undefined, undefined, typescript_1.factory.createIdentifier('items'), undefined);
            elements.push(bindingElement);
            elements.push(typescript_1.factory.createBindingElement(undefined, undefined, typescript_1.factory.createIdentifier('overrideItems'), undefined));
        }
        // remove overrides from rest of props
        const hasVariant = (0, codegen_ui_1.isStudioComponentWithVariants)(component);
        const hasBreakpoint = (0, codegen_ui_1.isStudioComponentWithBreakpoints)(component);
        elements.push(typescript_1.factory.createBindingElement(undefined, hasVariant ? typescript_1.factory.createIdentifier('overrides') : undefined, typescript_1.factory.createIdentifier(hasVariant ? 'overridesProp' : 'overrides'), undefined));
        // get rest of props to pass to top level component
        elements.push(typescript_1.factory.createBindingElement(typescript_1.factory.createToken(typescript_1.default.SyntaxKind.DotDotDotToken), undefined, typescript_1.factory.createIdentifier(hasBreakpoint ? 'restProp' : 'rest'), undefined));
        const statement = typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createObjectBindingPattern(elements), undefined, undefined, typescript_1.factory.createIdentifier('props')),
        ], typescript_1.default.NodeFlags.Const));
        statements.push(statement);
        if ((0, codegen_ui_1.isStudioComponentWithVariants)(component)) {
            this.importCollection.addMappedImport(imports_1.ImportValue.MERGE_VARIANTS_OVERRIDES);
            statements.push(this.buildVariantDeclaration(component.variants));
            if (hasBreakpoint) {
                statements.push(this.buildDefaultBreakpointMap(component));
                statements.push(this.buildRestWithStyle());
            }
            statements.push(this.buildOverridesFromVariantsAndProp(hasBreakpoint));
        }
        const authStatement = this.buildUseAuthenticatedUserStatement();
        if (authStatement !== undefined) {
            if ((0, amplify_js_versioning_1.getAmplifyJSVersionToRender)(this.renderConfig.dependencies) === constants_1.AMPLIFY_JS_V5) {
                this.importCollection.addMappedImport(imports_1.ImportValue.USE_AUTH);
            }
            else {
                // V6 useAuth is in the utils file
                this.importCollection.addImport(imports_1.ImportSource.UTILS, imports_1.ImportValue.USE_AUTH);
            }
            statements.push(authStatement);
        }
        if (component.componentType === 'Collection' && ((_b = this.renderConfig.apiConfiguration) === null || _b === void 0 ? void 0 : _b.dataApi) === 'GraphQL') {
            const paginationStatements = this.buildGraphqlPaginationStatements(component);
            paginationStatements.forEach((entry) => {
                statements.push(entry);
            });
        }
        else {
            const collectionBindingStatements = this.buildCollectionBindingStatements(component);
            collectionBindingStatements.forEach((entry) => {
                statements.push(entry);
            });
        }
        const useStoreBindingStatements = this.buildUseBindingStatements(component);
        useStoreBindingStatements.forEach((entry) => {
            statements.push(entry);
        });
        const stateStatements = (0, workflow_1.buildStateStatements)(component, this.componentMetadata, this.importCollection, (_c = this.renderConfig.apiConfiguration) === null || _c === void 0 ? void 0 : _c.dataApi);
        stateStatements.forEach((entry) => {
            statements.push(entry);
        });
        const useActionStatements = this.buildUseActionStatements();
        useActionStatements.forEach((entry) => {
            statements.push(entry);
        });
        const useEffectStatements = (0, workflow_1.buildUseEffectStatements)(component, this.componentMetadata);
        useEffectStatements.forEach((entry) => {
            this.importCollection.addMappedImport(imports_1.ImportValue.USE_EFFECT);
            statements.push(entry);
        });
        return statements;
    }
    buildUseAuthenticatedUserStatement() {
        if (this.componentMetadata.hasAuthBindings) {
            return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('authAttributes'), undefined, undefined, typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessChain(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('useAuth'), undefined, []), typescript_1.factory.createIdentifier('user')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionDotToken), typescript_1.factory.createIdentifier('attributes')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionQuestionToken), typescript_1.factory.createObjectLiteralExpression([], false))),
            ], typescript_1.default.NodeFlags.Const));
        }
        return undefined;
    }
    /**
     * const variants = [
       {
         variantValues: { variant: 'primary' },
         overrides: { Button: { fontSize: '12px' } },
       },
       {
         variantValues: { variant: 'secondary' },
         overrides: { Button: { fontSize: '40px' } }
       }
     ];
     */
    buildVariantDeclaration(variants) {
        return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('variants'), undefined, typescript_1.factory.createArrayTypeNode(typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier('Variant'), undefined)), (0, react_studio_template_renderer_helper_1.jsonToLiteral)(variants, true)),
        ], typescript_1.default.NodeFlags.Const));
    }
    /**
     *     const breakpointHook = useBreakpointValue({
     *        base: 'base',
     *        large: 'large',
     *        medium: 'medium',
     *        small: 'small',
     *        xl: 'xl',
     *        xxl: 'xxl',
     *     });
     */
    buildDefaultBreakpointMap(component) {
        const breakpoints = (0, codegen_ui_1.getBreakpoints)(component);
        const element = [];
        // if the first element is not base then we sent it anyway as the smallest size should default to base
        if (breakpoints[0] !== 'base') {
            element.push(typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('base'), typescript_1.factory.createStringLiteral(breakpoints[0])));
        }
        breakpoints.forEach((bp) => {
            element.push(typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(bp), typescript_1.factory.createStringLiteral(bp)));
        });
        this.importCollection.addMappedImport(imports_1.ImportValue.USE_BREAKPOINT_VALUE);
        return (0, react_studio_template_renderer_helper_1.createHookStatement)('breakpointHook', 'useBreakpointValue', typescript_1.factory.createObjectLiteralExpression(element, true));
    }
    /**
     *   const rest = {style: {transition:"all 1s"}, ...restProp}
     */
    buildRestWithStyle() {
        return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('rest'), undefined, undefined, typescript_1.factory.createObjectLiteralExpression([
                typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('style'), typescript_1.factory.createObjectLiteralExpression([
                    typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('transition'), typescript_1.factory.createStringLiteral('all 0.25s')),
                ], false)),
                typescript_1.factory.createSpreadAssignment(typescript_1.factory.createIdentifier('restProp')),
            ], false)),
        ], typescript_1.default.NodeFlags.Const));
    }
    /**
     * If component hasBreakpoint:
     *
     * const overrides = mergeVariantsAndOverrides(
     *  getOverridesFromVariants(variants, {
     *   breakpoint: breakpointHook,
     *   ...props,
     *  }),
     *  overridesProp || {}
     * );
     *
     * Else:
     *
     * const overrides = mergeVariantsAndOverrides(
     *  getOverridesFromVariants(variants, props),
     *  overridesProp || {}
     * );
     */
    buildOverridesFromVariantsAndProp(hasBreakpoint) {
        this.importCollection.addMappedImport(imports_1.ImportValue.GET_OVERRIDES_FROM_VARIANTS, imports_1.ImportValue.VARIANT);
        return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('overrides'), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('mergeVariantsAndOverrides'), undefined, [
                typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('getOverridesFromVariants'), undefined, [
                    typescript_1.factory.createIdentifier('variants'),
                    hasBreakpoint
                        ? typescript_1.factory.createObjectLiteralExpression([
                            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('breakpoint'), typescript_1.factory.createIdentifier('breakpointHook')),
                            typescript_1.factory.createSpreadAssignment(typescript_1.factory.createIdentifier('props')),
                        ], false)
                        : typescript_1.factory.createIdentifier('props'),
                ]),
                typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('overridesProp'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createObjectLiteralExpression([], false)),
            ])),
        ], typescript_1.default.NodeFlags.Const));
    }
    buildCollectionBindingStatements(component) {
        const statements = [];
        if ((0, codegen_ui_1.isStudioComponentWithCollectionProperties)(component)) {
            Object.entries(component.collectionProperties).forEach((collectionProp) => {
                const [propName, { model, sort, predicate }] = collectionProp;
                const modelName = this.importCollection.addModelImport(model);
                if (predicate) {
                    statements.push(this.buildPredicateDeclaration(propName, predicate, model));
                    statements.push(this.buildCreateDataStorePredicateCall(modelName, propName));
                }
                if (sort) {
                    this.importCollection.addMappedImport(imports_1.ImportValue.SORT_DIRECTION, imports_1.ImportValue.SORT_PREDICATE);
                    statements.push(this.buildPaginationStatement(propName, modelName, sort));
                }
                statements.push((0, helpers_1.buildUseStateExpression)(propName, typescript_1.factory.createIdentifier('undefined')));
                /**
                 * const userDataStore = useDataStoreBinding({
                 *  type: "collection",
                 *  model: User,
                 *  ...
                 * }).items;
                 */
                statements.push(...this.buildCollectionBindingCall(modelName, this.getDataStoreName(propName), predicate ? this.getFilterName(propName) : undefined, sort ? this.getPaginationName(propName) : undefined));
                statements.push(this.buildSetCollectionItemsUseEffectStatement({
                    itemsDataStoreName: this.getDataStoreName(propName),
                    itemsPropName: this.hasCollectionPropertyNamedItems(component) ? 'itemsProp' : 'items',
                    needsRelationshipsLoaded: (0, helpers_1.modelNeedsRelationshipsLoadedForCollection)(model, this.componentMetadata.dataSchemaMetadata),
                    modelName: model,
                    propName,
                }));
            });
        }
        return statements;
    }
    /**
    React.useEffect(() => {
      if (itemsProp !== undefined) {
        setItems(itemsProp)
        return;
      }
  
      <setItemsFromDataStoreFunctionDeclaration>
      
      setItemsFromDataStore()
  
    }, [itemsProp, itemsDataStore])
     */
    buildSetCollectionItemsUseEffectStatement({ itemsDataStoreName, itemsPropName, needsRelationshipsLoaded, modelName, propName, }) {
        const setItemsIdentifier = (0, helpers_1.getSetNameIdentifier)(propName);
        const setItemsFromDataStoreFunctionName = `set${(0, helpers_1.capitalizeFirstLetter)(propName)}FromDataStore`;
        const setItemsExpressionStatements = needsRelationshipsLoaded
            ? [
                this.buildSetItemsFromDataStoreFunction({
                    functionName: setItemsFromDataStoreFunctionName,
                    itemsDataStoreName,
                    setItemsIdentifier,
                    modelName,
                }),
                typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier(setItemsFromDataStoreFunctionName), undefined, [])),
            ]
            : [
                typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(setItemsIdentifier, undefined, [typescript_1.factory.createIdentifier(itemsDataStoreName)])),
            ];
        return typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('React'), typescript_1.factory.createIdentifier('useEffect')), undefined, [
            typescript_1.factory.createArrowFunction(undefined, undefined, [], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
                typescript_1.factory.createIfStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier(itemsPropName), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.ExclamationEqualsEqualsToken), typescript_1.factory.createIdentifier('undefined')), typescript_1.factory.createBlock([
                    typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(setItemsIdentifier, undefined, [
                        typescript_1.factory.createIdentifier(itemsPropName),
                    ])),
                    typescript_1.factory.createReturnStatement(undefined),
                ], true), undefined),
                ...setItemsExpressionStatements,
            ], true)),
            typescript_1.factory.createArrayLiteralExpression([typescript_1.factory.createIdentifier(itemsPropName), typescript_1.factory.createIdentifier(itemsDataStoreName)], false),
        ]));
    }
    /**
    async function setItemsFromDataStore() {
      const loaded = await Promise.all(itemsDataStore.map(async (item) => ({
          ...item,
          CompositeOwner: await item.CompositeOwner,
          CompositeToys: await item.CompositeToys.toArray()
        })))
  
      setItems(loaded)
    }
     */
    buildSetItemsFromDataStoreFunction({ functionName, itemsDataStoreName, setItemsIdentifier, modelName, }) {
        const { dataSchemaMetadata: dataSchema } = this.componentMetadata;
        const model = dataSchema === null || dataSchema === void 0 ? void 0 : dataSchema.models[modelName];
        if (!model) {
            throw new codegen_ui_1.InternalError(`Could not find schema for ${modelName}`);
        }
        const loadedFields = [];
        Object.entries(model.fields).forEach(([fieldName, fieldSchema]) => {
            if ((0, helpers_1.fieldNeedsRelationshipLoadedForCollection)(fieldSchema, dataSchema)) {
                const { relationship } = fieldSchema;
                if ((relationship === null || relationship === void 0 ? void 0 : relationship.type) === 'HAS_MANY') {
                    loadedFields.push(typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(fieldName), typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('item'), typescript_1.factory.createIdentifier(fieldName)), typescript_1.factory.createIdentifier('toArray')), undefined, []))));
                }
                else {
                    loadedFields.push(typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(fieldName), typescript_1.factory.createAwaitExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('item'), typescript_1.factory.createIdentifier(fieldName)))));
                }
            }
        });
        return typescript_1.factory.createFunctionDeclaration(undefined, [typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.AsyncKeyword)], undefined, typescript_1.factory.createIdentifier(functionName), undefined, [], undefined, typescript_1.factory.createBlock([
            typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('loaded'), undefined, undefined, typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('Promise'), typescript_1.factory.createIdentifier('all')), undefined, [
                    typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(itemsDataStoreName), typescript_1.factory.createIdentifier('map')), undefined, [
                        typescript_1.factory.createArrowFunction([typescript_1.factory.createModifier(typescript_1.default.SyntaxKind.AsyncKeyword)], undefined, [
                            typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('item'), undefined, undefined, undefined),
                        ], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createObjectLiteralExpression([typescript_1.factory.createSpreadAssignment(typescript_1.factory.createIdentifier('item')), ...loadedFields], true))),
                    ]),
                ]))),
            ])),
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(setItemsIdentifier, undefined, [typescript_1.factory.createIdentifier('loaded')])),
        ], true));
    }
    buildCreateDataStorePredicateCall(type, name) {
        this.importCollection.addMappedImport(imports_1.ImportValue.CREATE_DATA_STORE_PREDICATE);
        return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(this.getFilterName(name)), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('createDataStorePredicate'), [typescript_1.factory.createTypeReferenceNode(typescript_1.factory.createIdentifier(type), undefined)], [typescript_1.factory.createIdentifier(this.getFilterObjName(name))])),
        ], typescript_1.default.NodeFlags.Const));
    }
    buildUseBindingStatements(component) {
        const statements = [];
        // generate for single record binding
        if (component.bindingProperties !== undefined) {
            Object.entries(component.bindingProperties).forEach((compBindingProp) => {
                var _a, _b;
                const [propName, binding] = compBindingProp;
                if ((0, codegen_ui_1.isDataPropertyBinding)(binding)) {
                    const { bindingProperties } = binding;
                    if ('predicate' in bindingProperties && bindingProperties.predicate !== undefined) {
                        this.importCollection.addMappedImport(imports_1.ImportValue.USE_DATA_STORE_BINDING);
                        const modelName = this.importCollection.addModelImport(bindingProperties.model);
                        /* const buttonColorFilter = {
                         *   field: "userID",
                         *   operand: "user@email.com",
                         *   operator: "eq",
                         * }
                         */
                        statements.push(this.buildPredicateDeclaration(propName, bindingProperties.predicate, bindingProperties.model));
                        if (((_a = this.renderConfig.apiConfiguration) === null || _a === void 0 ? void 0 : _a.dataApi) !== 'GraphQL') {
                            statements.push(this.buildCreateDataStorePredicateCall(modelName, propName));
                        }
                        /**
                         * const buttonColorDataStore = useDataStoreBinding({
                         *   type: "collection"
                         *   ...
                         * }).items[0];
                         */
                        statements.push(typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(this.getDataStoreName(propName)), undefined, undefined, typescript_1.factory.createElementAccessExpression(typescript_1.factory.createPropertyAccessExpression(((_b = this.renderConfig.apiConfiguration) === null || _b === void 0 ? void 0 : _b.dataApi) === 'GraphQL'
                                ? (0, graphql_1.getGraphqlCallExpression)(graphql_1.ActionType.LIST, modelName, this.importCollection, {
                                    inputs: [
                                        typescript_1.factory.createSpreadAssignment(typescript_1.factory.createIdentifier(this.getFilterObjName(propName))),
                                    ],
                                }, undefined, this.renderConfig.dependencies)
                                : this.buildUseDataStoreBindingCall('collection', modelName, this.getFilterName(propName)), typescript_1.factory.createIdentifier('items')), typescript_1.factory.createNumericLiteral('0'))),
                        ], typescript_1.default.NodeFlags.Const)));
                        /**
                         * const buttonColor =
                         *  buttonColorProp !== undefined ? buttonColorProp : buttonColorDataStore;
                         */
                        statements.push(typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(propName), undefined, undefined, typescript_1.factory.createConditionalExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier(`${propName}Prop`), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.ExclamationEqualsEqualsToken), typescript_1.factory.createIdentifier('undefined')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionToken), typescript_1.factory.createIdentifier(`${propName}Prop`), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.ColonToken), typescript_1.factory.createIdentifier(this.getDataStoreName(propName)))),
                        ], typescript_1.default.NodeFlags.Const)));
                    }
                }
            });
        }
        return statements;
    }
    buildPropPrecedentStatement(precedentName, propName, defaultExpression) {
        return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(precedentName), undefined, undefined, typescript_1.factory.createConditionalExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier(propName), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.ExclamationEqualsEqualsToken), typescript_1.factory.createIdentifier('undefined')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionToken), typescript_1.factory.createIdentifier(propName), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.ColonToken), defaultExpression)),
        ], typescript_1.default.NodeFlags.Const));
    }
    /**
     * const buttonUserSort = {
     *   sort: (s: SortPredicate<User>) => s.firstName('DESCENDING').lastName('ASCENDING')
     * }
     */
    buildPaginationStatement(propName, model, sort) {
        return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(this.getPaginationName(propName)), undefined, undefined, typescript_1.factory.createObjectLiteralExpression([].concat(sort
                ? [typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('sort'), (0, react_studio_template_renderer_helper_1.buildSortFunction)(model, sort))]
                : []))),
        ], typescript_1.default.NodeFlags.Const));
    }
    buildCollectionBindingCall(model, modelVariableName, criteriaName, paginationName) {
        const statements = [];
        statements.push((0, react_studio_template_renderer_helper_1.buildBaseCollectionVariableStatement)(typescript_1.factory.createIdentifier(modelVariableName), this.buildUseDataStoreBindingCall('collection', model, criteriaName, paginationName)));
        return statements;
    }
    buildUseDataStoreBindingCall(callType, bindingModel, criteriaName, paginationName) {
        this.importCollection.addMappedImport(imports_1.ImportValue.USE_DATA_STORE_BINDING);
        const objectProperties = [
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('type'), typescript_1.factory.createStringLiteral(callType)),
            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('model'), typescript_1.factory.createIdentifier(bindingModel)),
        ]
            .concat(criteriaName
            ? [
                typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('criteria'), typescript_1.factory.createIdentifier(criteriaName)),
            ]
            : [])
            .concat(paginationName
            ? [
                typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('pagination'), typescript_1.factory.createIdentifier(paginationName)),
            ]
            : []);
        return typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('useDataStoreBinding'), undefined, [
            typescript_1.factory.createObjectLiteralExpression(objectProperties, true),
        ]);
    }
    predicateToObjectLiteralExpression(predicate, model) {
        var _a, _b, _c;
        const { operandType, ...filteredPredicate } = predicate;
        if (filteredPredicate.operator === 'between') {
            return this.predicateToObjectLiteralExpression((0, codegen_ui_1.resolveBetweenPredicateToMultiplePredicates)(predicate), model);
        }
        let objectAssignments;
        if (((_a = this.renderConfig.apiConfiguration) === null || _a === void 0 ? void 0 : _a.dataApi) === 'GraphQL' &&
            filteredPredicate.field &&
            filteredPredicate.operand &&
            filteredPredicate.operator) {
            objectAssignments = [
                typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(filteredPredicate.field), typescript_1.factory.createObjectLiteralExpression([
                    typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(filteredPredicate.operator), (0, react_component_render_helper_1.getConditionalOperandExpression)((0, react_component_render_helper_1.parseNumberOperand)(filteredPredicate.operand, (_c = (_b = this.componentMetadata.dataSchemaMetadata) === null || _b === void 0 ? void 0 : _b.models[model]) === null || _c === void 0 ? void 0 : _c.fields[predicate.field || '']), operandType)),
                ], false)),
            ];
        }
        else {
            objectAssignments = Object.entries(filteredPredicate).map(([key, value]) => {
                var _a, _b;
                if (key === 'and' || key === 'or' || key === 'not') {
                    return typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(key), typescript_1.factory.createArrayLiteralExpression(predicate[key].map((pred) => this.predicateToObjectLiteralExpression(pred, model), false)));
                }
                if (key === 'operand' && typeof value === 'string') {
                    return typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(key), (0, react_component_render_helper_1.getConditionalOperandExpression)((0, react_component_render_helper_1.parseNumberOperand)(value, (_b = (_a = this.componentMetadata.dataSchemaMetadata) === null || _a === void 0 ? void 0 : _a.models[model]) === null || _b === void 0 ? void 0 : _b.fields[predicate.field || '']), operandType));
                }
                return typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(key), typeof value === 'string' ? typescript_1.factory.createStringLiteral(value) : typescript_1.factory.createIdentifier('undefined'));
            });
        }
        return typescript_1.factory.createObjectLiteralExpression(objectAssignments);
    }
    buildUseActionStatements() {
        const actions = (0, workflow_1.getComponentActions)(this.component);
        if (actions) {
            return actions.map(({ action, identifier }) => {
                var _a;
                return (0, workflow_1.buildUseActionStatement)(this.componentMetadata, action, identifier, this.importCollection, (_a = this.renderConfig.apiConfiguration) === null || _a === void 0 ? void 0 : _a.dataApi, this.renderConfig.dependencies);
            });
        }
        return [];
    }
    buildPredicateDeclaration(name, predicate, model) {
        return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(this.getFilterObjName(name)), undefined, undefined, this.predicateToObjectLiteralExpression(predicate, model)),
        ], typescript_1.default.NodeFlags.Const));
    }
    buildGraphqlPaginationStatements(component) {
        const statements = [];
        const stateVariables = [
            { name: 'pageIndex', default: typescript_1.factory.createNumericLiteral('1') },
            { name: 'hasMorePages', default: typescript_1.factory.createTrue() },
            { name: 'items', default: typescript_1.factory.createArrayLiteralExpression([]) },
            { name: 'isApiPagination', default: typescript_1.factory.createFalse() },
            { name: 'instanceKey', default: typescript_1.factory.createStringLiteral('newGuid') },
            { name: 'loading', default: typescript_1.factory.createTrue() },
            { name: 'maxViewed', default: typescript_1.factory.createNumericLiteral(1) },
        ];
        /*
            const [pageIndex, setPageIndex] = React.useState(1);
            const [hasMorePages, setHasMorePages] = React.useState(true);
            const [items, setItems] = React.useState([]);
            const [isApiPagination, setIsApiPagination] = React.useState(false);
            const [instanceKey] = React.useState('newGuid');
            const [loading, setLoading] = React.useState(true);
            const [maxViewed, setMaxViewed] = React.useState(1);
         */
        stateVariables.forEach((state) => {
            statements.push((0, helpers_1.buildUseStateExpression)(state.name, state.default));
        });
        // const pageSize = 6;
        let pageSize = 6;
        if ((0, react_component_render_helper_1.isFixedPropertyWithValue)(component.properties.itemsPerPage)) {
            const num = Number(component.properties.itemsPerPage.value);
            pageSize = Number.isNaN(num) ? pageSize : num;
        }
        statements.push((0, helpers_1.buildInitConstVariableExpression)('pageSize', typescript_1.factory.createNumericLiteral(pageSize)));
        // const isPaginated = false;
        let factoryMethodIsPaginatedValue = typescript_1.factory.createFalse;
        if ((0, react_component_render_helper_1.isFixedPropertyWithValue)(component.properties.isPaginated)) {
            const isPaginated = Boolean(component.properties.isPaginated.value);
            factoryMethodIsPaginatedValue = isPaginated ? typescript_1.factory.createTrue : typescript_1.factory.createFalse;
        }
        statements.push((0, helpers_1.buildInitConstVariableExpression)('isPaginated', factoryMethodIsPaginatedValue()));
        /*
          React.useEffect(() => {
            nextToken[instanceKey] = '';
            apiCache[instanceKey] = [];
          },[instanceKey]);
    
          React.useEffect(() => {
            setIsApiPagination(!!!itemsProp);
          }, [itemsProp]);
        */
        const instanceKeyStatements = [
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createElementAccessExpression(typescript_1.factory.createIdentifier('nextToken'), typescript_1.factory.createIdentifier('instanceKey')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsToken), typescript_1.factory.createStringLiteral(''))),
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createElementAccessExpression(typescript_1.factory.createIdentifier('apiCache'), typescript_1.factory.createIdentifier('instanceKey')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsToken), typescript_1.factory.createArrayLiteralExpression([], false))),
        ];
        statements.push((0, generate_react_hooks_1.addUseEffectWrapper)(instanceKeyStatements, ['instanceKey']));
        statements.push((0, generate_react_hooks_1.addUseEffectWrapper)([
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('setIsApiPagination'), undefined, [
                typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createIdentifier('itemsProp')))),
            ])),
        ], ['itemsProp']));
        /*
          const handlePreviousPage = () => {
            setPageIndex(pageIndex-1);
          };
    
          const handleNextPage = () => {
              setPageIndex(pageIndex+1);
          };
    
          const jumpToPage = (pageNum?: number) => {
              setPageIndex(pageNum!);
          };
        */
        const arrowFunctionVariables = [
            {
                variableName: 'handlePreviousPage',
                functionName: 'setPageIndex',
                expression: typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('pageIndex'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.MinusToken), typescript_1.factory.createNumericLiteral('1')),
            },
            {
                variableName: 'handleNextPage',
                functionName: 'setPageIndex',
                expression: typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('pageIndex'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.PlusToken), typescript_1.factory.createNumericLiteral('1')),
            },
            {
                variableName: 'jumpToPage',
                functionName: 'setPageIndex',
                expression: typescript_1.factory.createNonNullExpression(typescript_1.factory.createIdentifier('pageNum')),
                parameterDeclarations: [
                    typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('pageNum'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionToken), typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.NumberKeyword), undefined),
                ],
            },
        ];
        arrowFunctionVariables.forEach((entry) => {
            statements.push((0, helpers_1.buildArrowFunctionStatement)(entry.variableName, entry.functionName, entry.expression, entry.parameterDeclarations));
        });
        statements.push(this.buildLoadPageStatement(component));
        /*
          React.useEffect(() => {
            loadPage(pageIndex);
          }, [pageIndex]);
    
          React.useEffect(() => {
            setMaxViewed(Math.max(maxViewed, pageIndex));
          }, [pageIndex, maxViewed, setMaxViewed]);
        */
        statements.push((0, generate_react_hooks_1.addUseEffectWrapper)([
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('loadPage'), undefined, [
                typescript_1.factory.createIdentifier('pageIndex'),
            ])),
        ], ['pageIndex']));
        statements.push((0, generate_react_hooks_1.addUseEffectWrapper)([
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('setMaxViewed'), undefined, [
                typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('Math'), typescript_1.factory.createIdentifier('max')), undefined, [typescript_1.factory.createIdentifier('maxViewed'), typescript_1.factory.createIdentifier('pageIndex')]),
            ])),
        ], ['pageIndex', 'maxViewed', 'setMaxViewed']));
        return statements;
    }
    buildLoadPageStatement(component) {
        const statements = [];
        /*
          const cacheUntil = (page*pageSize)+1;
          const newCache = apiCache[instanceKey].slice();
          let newNext = nextToken[instanceKey];
        */
        statements.push((0, helpers_1.buildInitConstVariableExpression)('cacheUntil', typescript_1.factory.createBinaryExpression(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('page'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.AsteriskToken), typescript_1.factory.createIdentifier('pageSize'))), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.PlusToken), typescript_1.factory.createNumericLiteral('1'))));
        statements.push((0, helpers_1.buildInitConstVariableExpression)('newCache', typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createElementAccessExpression(typescript_1.factory.createIdentifier('apiCache'), typescript_1.factory.createIdentifier('instanceKey')), typescript_1.factory.createIdentifier('slice')), undefined, [])));
        statements.push(typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('newNext'), undefined, undefined, typescript_1.factory.createElementAccessExpression(typescript_1.factory.createIdentifier('nextToken'), typescript_1.factory.createIdentifier('instanceKey'))),
        ], typescript_1.default.NodeFlags.Let)));
        if ((0, codegen_ui_1.isStudioComponentWithCollectionProperties)(component)) {
            let filter;
            let modelQuery = '';
            const { dataSchemaMetadata: dataSchema } = this.componentMetadata;
            const loadedFields = [];
            const loadedFieldNames = [];
            const loadedFieldStatements = [];
            const amplifyJSVersion = (0, amplify_js_versioning_1.getAmplifyJSVersionToRender)(this.renderConfig.dependencies);
            Object.entries(component.collectionProperties).forEach((collectionProp) => {
                const [, { model: modelName, predicate }] = collectionProp;
                modelQuery = (0, graphql_1.getGraphqlQueryForModel)(graphql_1.ActionType.LIST, modelName);
                this.importCollection.addGraphqlQueryImport(modelQuery);
                if (predicate) {
                    filter = this.predicateToObjectLiteralExpression(predicate, modelName);
                }
                const model = dataSchema === null || dataSchema === void 0 ? void 0 : dataSchema.models[modelName];
                if (model !== undefined) {
                    Object.entries(model.fields).forEach(([fieldName, fieldSchema]) => {
                        var _a;
                        if ((0, helpers_1.fieldNeedsRelationshipLoadedForCollection)(fieldSchema, dataSchema)) {
                            const { relationship } = fieldSchema;
                            loadedFieldNames.push(fieldName);
                            const relatedFieldQueryName = this.getQueryRelationshipName(modelName, (_a = relationship === null || relationship === void 0 ? void 0 : relationship.relatedModelName) !== null && _a !== void 0 ? _a : '');
                            /*
                              const Comments = (await API.graphql({query: commentsByPostID, variables: { post: item.id }}))
                                .data.commentsByPostID.items;
                            */
                            loadedFieldStatements.push(typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier((0, pluralize_1.default)(fieldName)), undefined, undefined, typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(amplifyJSVersion === constants_1.AMPLIFY_JS_V5 ? 'API' : 'client'), typescript_1.factory.createIdentifier('graphql')), undefined, [
                                    typescript_1.factory.createObjectLiteralExpression([
                                        typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('query'), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(relatedFieldQueryName), typescript_1.factory.createIdentifier('replaceAll')), undefined, [
                                            typescript_1.factory.createStringLiteral('__typename'),
                                            typescript_1.factory.createStringLiteral(''),
                                        ])),
                                        typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('variables'), typescript_1.factory.createObjectLiteralExpression([
                                            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(`${modelName.toLowerCase()}ID`), typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('item'), typescript_1.factory.createIdentifier('id'))),
                                        ], false)),
                                    ], false),
                                ]))), typescript_1.factory.createIdentifier('data')), typescript_1.factory.createIdentifier(relatedFieldQueryName)), typescript_1.factory.createIdentifier('items'))),
                            ], typescript_1.default.NodeFlags.Const)));
                            loadedFields.push(typescript_1.factory.createShorthandPropertyAssignment(typescript_1.factory.createIdentifier(fieldName), undefined));
                        }
                    });
                }
            });
            statements.push(typescript_1.factory.createWhileStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('newCache'), typescript_1.factory.createIdentifier('length')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.LessThanToken), typescript_1.factory.createIdentifier('cacheUntil')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createIdentifier('isPaginated')))), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.AmpersandAmpersandToken), typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('newNext'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.ExclamationEqualsToken), typescript_1.factory.createNull()))), typescript_1.factory.createBlock([
                typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('setLoading'), undefined, [typescript_1.factory.createTrue()])),
                typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                    typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('variables'), undefined, typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.AnyKeyword), typescript_1.factory.createObjectLiteralExpression(filter !== undefined
                        ? [
                            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('limit'), typescript_1.factory.createIdentifier('pageSize')),
                            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('filter'), filter),
                        ]
                        : [
                            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('limit'), typescript_1.factory.createIdentifier('pageSize')),
                        ], true)),
                ], typescript_1.default.NodeFlags.Const)),
                typescript_1.factory.createIfStatement(typescript_1.factory.createIdentifier('newNext'), typescript_1.factory.createBlock([
                    typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createElementAccessExpression(typescript_1.factory.createIdentifier('variables'), typescript_1.factory.createStringLiteral('nextToken')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsToken), typescript_1.factory.createIdentifier('newNext'))),
                ], true), undefined),
                typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                    typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('result'), undefined, undefined, typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createAwaitExpression(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(amplifyJSVersion === constants_1.AMPLIFY_JS_V5 ? 'API' : 'client'), typescript_1.factory.createIdentifier('graphql')), undefined, [
                        typescript_1.factory.createObjectLiteralExpression([
                            typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier('query'), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier(modelQuery), typescript_1.factory.createIdentifier('replaceAll')), undefined, [typescript_1.factory.createStringLiteral('__typename'), typescript_1.factory.createStringLiteral('')])),
                            typescript_1.factory.createShorthandPropertyAssignment(typescript_1.factory.createIdentifier('variables'), undefined),
                        ], true),
                    ]))), typescript_1.factory.createIdentifier('data')), typescript_1.factory.createIdentifier(modelQuery))),
                ], typescript_1.default.NodeFlags.Const)),
                typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('newCache'), typescript_1.factory.createIdentifier('push')), undefined, [
                    typescript_1.factory.createSpreadElement(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('result'), typescript_1.factory.createIdentifier('items'))),
                ])),
                typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('newNext'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsToken), typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('result'), typescript_1.factory.createIdentifier('nextToken')))),
            ], true)));
        }
        /*
          const cacheSlice = newCache.slice((page-1)*pageSize, page*pageSize);
          setItems(cacheSlice);
          setHasMorePages(!!newNext);
          setLoading(false);
          apiCache[instanceKey] = newCache;
          nextToken[instanceKey] = newNext;
        */
        statements.push((0, helpers_1.buildInitConstVariableExpression)('cacheSlice', typescript_1.factory.createConditionalExpression(typescript_1.factory.createIdentifier('isPaginated'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.QuestionToken), typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('newCache'), typescript_1.factory.createIdentifier('slice')), undefined, [
            typescript_1.factory.createBinaryExpression(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('page'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.MinusToken), typescript_1.factory.createNumericLiteral('1'))), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.AsteriskToken), typescript_1.factory.createIdentifier('pageSize')),
            typescript_1.factory.createBinaryExpression(typescript_1.factory.createIdentifier('page'), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.AsteriskToken), typescript_1.factory.createIdentifier('pageSize')),
        ]), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.ColonToken), typescript_1.factory.createIdentifier('newCache'))));
        statements.push(typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('setItems'), undefined, [
            typescript_1.factory.createIdentifier('cacheSlice'),
        ])));
        statements.push(typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('setHasMorePages'), undefined, [
            typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.factory.createIdentifier('newNext'))),
        ])));
        statements.push(typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier('setLoading'), undefined, [typescript_1.factory.createFalse()])));
        statements.push(typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createElementAccessExpression(typescript_1.factory.createIdentifier('apiCache'), typescript_1.factory.createIdentifier('instanceKey')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsToken), typescript_1.factory.createIdentifier('newCache'))));
        statements.push(typescript_1.factory.createExpressionStatement(typescript_1.factory.createBinaryExpression(typescript_1.factory.createElementAccessExpression(typescript_1.factory.createIdentifier('nextToken'), typescript_1.factory.createIdentifier('instanceKey')), typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsToken), typescript_1.factory.createIdentifier('newNext'))));
        return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
            typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier('loadPage'), undefined, undefined, typescript_1.factory.createArrowFunction([typescript_1.factory.createToken(typescript_1.default.SyntaxKind.AsyncKeyword)], undefined, [
                typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, typescript_1.factory.createIdentifier('page'), undefined, typescript_1.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.NumberKeyword), undefined),
            ], undefined, typescript_1.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock(statements, true))),
        ], typescript_1.default.NodeFlags.Const));
    }
    hasCollectionPropertyNamedItems(component) {
        if (component.collectionProperties === undefined) {
            return false;
        }
        return Object.keys(component.collectionProperties).some((propName) => propName === 'items');
    }
    getPaginationName(propName) {
        return `${propName}Pagination`;
    }
    getFilterObjName(propName) {
        return `${propName}FilterObj`;
    }
    getFilterName(propName) {
        return `${propName}Filter`;
    }
    getDataStoreName(propName) {
        return `${propName}DataStore`;
    }
    getPropsTypeName(component) {
        // MenuButton primitive uses ButtonProps
        if (component.componentType === primitive_1.Primitive.MenuButton) {
            return 'ButtonProps';
        }
        return `${component.componentType}Props`;
    }
    getQueryRelationshipName(modelName, relatedModelName) {
        const relatedModel = (0, pluralize_1.default)(relatedModelName.toLowerCase());
        return `${relatedModel}By${modelName}ID`;
    }
    dropMissingListElements(elements) {
        return elements.filter((element) => element !== null && element !== undefined);
    }
    getDefaultValue(binding) {
        if (binding.defaultValue !== undefined) {
            switch (binding.type) {
                case 'String':
                    return typescript_1.factory.createStringLiteral(binding.defaultValue);
                case 'Number':
                    return typescript_1.factory.createNumericLiteral(binding.defaultValue);
                case 'Boolean':
                    return JSON.parse(binding.defaultValue) ? typescript_1.factory.createTrue() : typescript_1.factory.createFalse();
                default:
                    throw new Error(`Could not parse binding with type ${binding.type}`);
            }
        }
        return undefined;
    }
    /* To map predefined props to children props for variants
     *
     * Example: Text prop label is mapped to to Text prop Children
     *
     */
    mapSyntheticPropsForVariants() {
        if (!(0, codegen_ui_1.isStudioComponentWithVariants)(this.component)) {
            return;
        }
        this.component.variants.forEach((variant) => {
            Object.entries(variant.overrides).forEach(([name, value]) => {
                const propsInOverrides = value;
                const componentType = this.componentMetadata.componentNameToTypeMap[name];
                if (componentType && (0, primitive_1.isPrimitive)(componentType)) {
                    const childrenPropMapping = primitive_1.PrimitiveChildrenPropMapping[primitive_1.Primitive[componentType]];
                    if (childrenPropMapping !== undefined) {
                        // only remap if children prop is not defined in this particular overrides section
                        if (propsInOverrides.children === undefined && propsInOverrides[childrenPropMapping] !== undefined) {
                            propsInOverrides.children = propsInOverrides[childrenPropMapping];
                            delete propsInOverrides[childrenPropMapping];
                        }
                    }
                }
            });
        });
    }
    /* Some additional props are added to Amplify primitives in Studio. These "sythetic" props are mapped to real props
     * on the primitives.
     *
     * Example: Text prop label is mapped to to Text prop Children
     *
     * This is done so that nonadvanced users of Studio do not need to interact with props that might confuse them.
     */
    mapSyntheticProps() {
        function mapSyntheticPropsForComponent(component) {
            // properties.children will take precedent over mapped children prop
            if (component.properties.children === undefined) {
                const childrenPropMapping = primitive_1.PrimitiveChildrenPropMapping[primitive_1.Primitive[component.componentType]];
                if (childrenPropMapping !== undefined) {
                    const mappedChildrenProp = component.properties[childrenPropMapping];
                    if (mappedChildrenProp !== undefined) {
                        component.properties.children = mappedChildrenProp; // eslint-disable-line no-param-reassign
                        delete component.properties[childrenPropMapping]; // eslint-disable-line no-param-reassign
                    }
                }
            }
            if (component.children !== undefined) {
                component.children.forEach(mapSyntheticPropsForComponent);
            }
        }
        mapSyntheticPropsForComponent(this.component);
    }
    validateSchema(component) {
        (0, codegen_ui_1.validateComponentSchema)(component);
    }
}
__decorate([
    codegen_ui_1.handleCodegenErrors
], ReactStudioTemplateRenderer.prototype, "renderSampleCodeSnippet", null);
__decorate([
    codegen_ui_1.handleCodegenErrors
], ReactStudioTemplateRenderer.prototype, "renderComponentOnly", null);
exports.ReactStudioTemplateRenderer = ReactStudioTemplateRenderer;
//# sourceMappingURL=react-studio-template-renderer.js.map