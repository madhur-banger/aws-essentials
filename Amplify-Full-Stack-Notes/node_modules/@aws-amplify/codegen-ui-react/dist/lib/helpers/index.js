"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getControlledComponentDefaultValue = exports.removeAlias = exports.isAliased = exports.modelNeedsRelationshipsLoadedForCollection = exports.fieldNeedsRelationshipLoadedForCollection = exports.buildArrowFunctionStatement = exports.buildInitConstVariableExpression = exports.buildUseRefExpression = exports.buildUseStateExpression = exports.getModelNameProp = exports.getSetNameIdentifier = exports.capitalizeFirstLetter = exports.createUniqueName = exports.lowerCaseFirst = void 0;
const typescript_1 = require("typescript");
const primitive_1 = require("../primitive");
const lowerCaseFirst = (input) => input.charAt(0).toLowerCase() + input.slice(1);
exports.lowerCaseFirst = lowerCaseFirst;
const createUniqueName = (name, isNameUsed) => {
    if (!isNameUsed(name)) {
        return name;
    }
    let count = 0;
    const prospectiveNewName = name;
    while (isNameUsed(prospectiveNewName + count)) {
        count += 1;
    }
    return prospectiveNewName + count;
};
exports.createUniqueName = createUniqueName;
const capitalizeFirstLetter = (val) => {
    return val.charAt(0).toUpperCase() + val.slice(1);
};
exports.capitalizeFirstLetter = capitalizeFirstLetter;
const getSetNameIdentifier = (value) => {
    return typescript_1.factory.createIdentifier(`set${(0, exports.capitalizeFirstLetter)(value)}`);
};
exports.getSetNameIdentifier = getSetNameIdentifier;
const getModelNameProp = (value) => {
    return `${(0, exports.lowerCaseFirst)(value)}ModelProp`;
};
exports.getModelNameProp = getModelNameProp;
/**
 * const [name, setName] = React.useState({default_expression});
 *
 * name is the value we are looking to set
 * defaultValue is is the value to set for the useState
 * @param name
 * @param defaultValue
 * @returns
 */
const buildUseStateExpression = (name, defaultValue) => {
    return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
        typescript_1.factory.createVariableDeclaration(typescript_1.factory.createArrayBindingPattern([
            typescript_1.factory.createBindingElement(undefined, undefined, typescript_1.factory.createIdentifier(name), undefined),
            typescript_1.factory.createBindingElement(undefined, undefined, (0, exports.getSetNameIdentifier)(name), undefined),
        ]), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('React'), typescript_1.factory.createIdentifier('useState')), undefined, [defaultValue])),
    ], typescript_1.NodeFlags.Const));
};
exports.buildUseStateExpression = buildUseStateExpression;
const buildUseRefExpression = (name, defaultValue) => {
    return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
        typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(name), undefined, undefined, typescript_1.factory.createCallExpression(typescript_1.factory.createPropertyAccessExpression(typescript_1.factory.createIdentifier('React'), typescript_1.factory.createIdentifier('useRef')), undefined, defaultValue ? [defaultValue] : undefined)),
    ], typescript_1.NodeFlags.Const));
};
exports.buildUseRefExpression = buildUseRefExpression;
/**
 * Create statement to declare and initialized a const.
 *
 * const name = value;
 * @param name
 * @param value
 * @returns
 */
const buildInitConstVariableExpression = (name, value) => {
    return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(name), undefined, undefined, value)], typescript_1.NodeFlags.Const));
};
exports.buildInitConstVariableExpression = buildInitConstVariableExpression;
/**
 * Create statement to declare an arrow function to a const.
 *
 * @example
 * ```
 * const variableName = (parameterDeclaration) => {
 *  functionName(expression);
 * };
 * ```
 */
const buildArrowFunctionStatement = (variableName, functionName, expression, parameterDeclarations) => {
    return typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
        typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(variableName), undefined, undefined, typescript_1.factory.createArrowFunction(undefined, undefined, parameterDeclarations !== null && parameterDeclarations !== void 0 ? parameterDeclarations : [], undefined, typescript_1.factory.createToken(typescript_1.SyntaxKind.EqualsGreaterThanToken), typescript_1.factory.createBlock([
            typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier(functionName), undefined, [expression])),
        ], true))),
    ], typescript_1.NodeFlags.Const));
};
exports.buildArrowFunctionStatement = buildArrowFunctionStatement;
function fieldNeedsRelationshipLoadedForCollection(field, dataSchema) {
    const { relationship, dataType } = field;
    if (!relationship || !dataType) {
        return false;
    }
    if (typeof dataType !== 'object' || !('model' in dataType)) {
        return false;
    }
    const joinTableNames = Object.entries(dataSchema.models).reduce((acc, [modelName, { isJoinTable }]) => {
        if (isJoinTable) {
            acc.add(modelName);
        }
        return acc;
    }, new Set());
    // return false if manyToMany
    if (joinTableNames.has(dataType.model)) {
        return false;
    }
    return true;
}
exports.fieldNeedsRelationshipLoadedForCollection = fieldNeedsRelationshipLoadedForCollection;
function modelNeedsRelationshipsLoadedForCollection(modelName, dataSchema) {
    return !!(dataSchema &&
        dataSchema.models[modelName] &&
        Object.values(dataSchema.models[modelName].fields).some((field) => fieldNeedsRelationshipLoadedForCollection(field, dataSchema)));
}
exports.modelNeedsRelationshipsLoadedForCollection = modelNeedsRelationshipsLoadedForCollection;
function isAliased(componentType) {
    return !!((0, primitive_1.isPrimitive)(removeAlias(componentType)) && componentType.match(/(Custom$)/g));
}
exports.isAliased = isAliased;
function removeAlias(aliasString) {
    return aliasString.replace(/(Custom$)/g, '');
}
exports.removeAlias = removeAlias;
function getControlledComponentDefaultValue(fields, componentType, name) {
    let defaultValue = null;
    Object.entries(fields).forEach(([key, value]) => {
        var _a;
        if (key === name && 'inputType' in value && ((_a = value.inputType) === null || _a === void 0 ? void 0 : _a.defaultValue) && componentType === 'TextField') {
            defaultValue = value.inputType.defaultValue;
        }
    });
    return defaultValue;
}
exports.getControlledComponentDefaultValue = getControlledComponentDefaultValue;
//# sourceMappingURL=index.js.map