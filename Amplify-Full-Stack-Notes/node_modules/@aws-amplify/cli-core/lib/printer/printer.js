import { WriteStream } from 'node:tty';
import { EOL } from 'os';
/**
 * The class that pretty prints to the output stream.
 */
export class Printer {
    minimumLogLevel;
    stdout;
    stderr;
    refreshRate;
    // Properties for ellipsis animation
    timer;
    timerSet;
    /**
     * Spinner frames
     */
    spinnerFrames = ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏'];
    /**
     * Sets default configs
     */
    constructor(minimumLogLevel, stdout = process.stdout, stderr = process.stderr, refreshRate = 500) {
        this.minimumLogLevel = minimumLogLevel;
        this.stdout = stdout;
        this.stderr = stderr;
        this.refreshRate = refreshRate;
    }
    /**
     * Prints a given message to output stream followed by a newline.
     */
    print = (message) => {
        this.stdout.write(message);
        this.printNewLine();
    };
    /**
     * Prints a new line to output stream
     */
    printNewLine = () => {
        this.stdout.write(EOL);
    };
    /**
     * Logs a message to the output stream at the given log level followed by a newline
     */
    log(message, level = LogLevel.INFO) {
        const doLogMessage = level <= this.minimumLogLevel;
        if (!doLogMessage) {
            return;
        }
        const logMessage = this.minimumLogLevel === LogLevel.DEBUG
            ? `[${LogLevel[level]}] ${new Date().toISOString()}: ${message}`
            : message;
        if (level === LogLevel.ERROR) {
            this.stderr.write(logMessage);
        }
        else {
            this.stdout.write(logMessage);
        }
        this.printNewLine();
    }
    /**
     * Logs a message with animated spinner
     * If stdout is not a TTY, the message is logged at the info level without a spinner
     */
    async indicateProgress(message, callback) {
        try {
            this.startAnimatingSpinner(message);
            await callback();
        }
        finally {
            this.stopAnimatingSpinner();
        }
    }
    /**
     * Writes escape sequence to stdout
     */
    writeEscapeSequence(action) {
        if (!this.isTTY()) {
            return;
        }
        this.stdout.write(action);
    }
    /**
     * Checks if the environment is TTY
     */
    isTTY() {
        return this.stdout instanceof WriteStream && this.stdout.isTTY;
    }
    /**
     * Starts animating spinner with a message.
     */
    startAnimatingSpinner(message) {
        if (this.timerSet) {
            throw new Error('Timer is already set to animate spinner, stop the current running timer before starting a new one.');
        }
        if (!this.isTTY()) {
            this.log(message, LogLevel.INFO);
            return;
        }
        let frameIndex = 0;
        this.timerSet = true;
        this.writeEscapeSequence(EscapeSequence.HIDE_CURSOR);
        this.timer = setInterval(() => {
            this.writeEscapeSequence(EscapeSequence.CLEAR_LINE);
            this.writeEscapeSequence(EscapeSequence.MOVE_CURSOR_TO_START);
            const frame = this.spinnerFrames[frameIndex];
            this.stdout.write(`${frame} ${message}`);
            frameIndex = (frameIndex + 1) % this.spinnerFrames.length;
        }, this.refreshRate);
    }
    /**
     * Stops animating spinner.
     */
    stopAnimatingSpinner() {
        if (!this.isTTY()) {
            return;
        }
        clearInterval(this.timer);
        this.timerSet = false;
        this.writeEscapeSequence(EscapeSequence.CLEAR_LINE);
        this.writeEscapeSequence(EscapeSequence.MOVE_CURSOR_TO_START);
        this.writeEscapeSequence(EscapeSequence.SHOW_CURSOR);
    }
}
export var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["ERROR"] = 0] = "ERROR";
    LogLevel[LogLevel["INFO"] = 1] = "INFO";
    LogLevel[LogLevel["DEBUG"] = 2] = "DEBUG";
})(LogLevel || (LogLevel = {}));
var EscapeSequence;
(function (EscapeSequence) {
    EscapeSequence["CLEAR_LINE"] = "\u001B[2K";
    EscapeSequence["MOVE_CURSOR_TO_START"] = "\u001B[0G";
    EscapeSequence["SHOW_CURSOR"] = "\u001B[?25h";
    EscapeSequence["HIDE_CURSOR"] = "\u001B[?25l";
})(EscapeSequence || (EscapeSequence = {}));
//# sourceMappingURL=data:application/json;base64,