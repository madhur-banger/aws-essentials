import * as os from 'node:os';
import { blue, bold, cyan, dim, green, grey, magenta, red, underline, yellow, } from 'kleur/colors';
import { AmplifyFault } from '@aws-amplify/platform-core';
import { getPackageManagerRunnerName } from '../package-manager-controller/get_package_manager_name.js';
/**
 * Formats various inputs into single string.
 */
export class Format {
    packageManagerRunnerName;
    /**
     * Initialize with a package manager runner name. Defaults to attempting to load a value derived from environment variables.
     */
    constructor(packageManagerRunnerName = getPackageManagerRunnerName()) {
        this.packageManagerRunnerName = packageManagerRunnerName;
    }
    normalizeAmpxCommand = (command) => {
        if (command.length === 0) {
            throw new AmplifyFault('InvalidFormatFault', {
                message: 'The command must be non-empty',
            });
        }
        return cyan(`${this.packageManagerRunnerName} ampx ${command}`);
    };
    error = (error) => {
        if (error instanceof Error) {
            const message = red(`${error.name}: ${error.message}`);
            if (error.cause) {
                return message + os.EOL + this.error(error.cause);
            }
            return message;
        }
        else if (typeof error === 'string') {
            return red(error);
        }
        try {
            return red(JSON.stringify(error, null, 2));
        }
        catch (e) {
            return red('Unknown error') + os.EOL + this.error(e);
        }
    };
    note = (message) => grey(message);
    command = (command) => cyan(command);
    highlight = (command) => cyan(command);
    success = (message) => green(message);
    sectionHeader = (header) => bold(blue(header));
    bold = (message) => bold(message);
    dim = (message) => dim(message);
    link = (link) => underline(blue(link));
    list = (lines) => lines.map((line) => ` - ${line}`).join(os.EOL);
    indent = (message) => {
        if (message === '') {
            throw new Error('Message cannot be empty');
        }
        const spaces = '  '; // Two spaces for indentation
        return message
            .split(os.EOL)
            .map((line) => `${spaces}${line}`)
            .join(os.EOL);
    };
    record = (record) => Object.entries(record)
        .map(([key, value]) => `${key}: ${String(value)}`)
        .join(os.EOL);
    color = (message, colorName) => colors[colorName](message);
}
// Map to connect colorName to kleur color
const colors = {
    Green: green,
    Yellow: yellow,
    Blue: blue,
    Magenta: magenta,
    Cyan: cyan,
};
export const colorNames = [
    'Green',
    'Yellow',
    'Blue',
    'Magenta',
    'Cyan',
];
export const format = new Format();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Zvcm1hdC9mb3JtYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDOUIsT0FBTyxFQUVMLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLEdBQUcsRUFDSCxLQUFLLEVBQ0wsSUFBSSxFQUNKLE9BQU8sRUFDUCxHQUFHLEVBQ0gsU0FBUyxFQUNULE1BQU0sR0FDUCxNQUFNLGNBQWMsQ0FBQztBQUN0QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDMUQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sMkRBQTJELENBQUM7QUFFeEc7O0dBRUc7QUFDSCxNQUFNLE9BQU8sTUFBTTtJQUtFO0lBSm5COztPQUVHO0lBQ0gsWUFDbUIsMkJBQTJCLDJCQUEyQixFQUFFO1FBQXhELDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBZ0M7SUFDeEUsQ0FBQztJQUNKLG9CQUFvQixHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUU7UUFDekMsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN4QixNQUFNLElBQUksWUFBWSxDQUFDLG9CQUFvQixFQUFFO2dCQUMzQyxPQUFPLEVBQUUsK0JBQStCO2FBQ3pDLENBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsd0JBQXdCLFNBQVMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUNsRSxDQUFDLENBQUM7SUFDRixLQUFLLEdBQUcsQ0FBQyxLQUErQixFQUFVLEVBQUU7UUFDbEQsSUFBSSxLQUFLLFlBQVksS0FBSyxFQUFFO1lBQzFCLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7WUFFdkQsSUFBSSxLQUFL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MENBQTBDO0FBQzFDLE1BQU0sTUFBTSxHQUFnQztJQUMxQyxLQUFLLEVBQUUsS0FBSztJQUNaLE1BQU0sRUFBRSxNQUFNO0lBQ2QsSUFBSSxFQUFFLElBQUk7SUFDVixPQUFPLEVBQUUsT0FBTztJQUNoQixJQUFJLEVBQUUsSUFBSTtDQUNYLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUc7SUFDeEIsT0FBTztJQUNQLFFBQVE7SUFDUixNQUFNO0lBQ04sU0FBUztJQUNULE1BQU07Q0FDRSxDQUFDO0FBSVgsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBvcyBmcm9tICdub2RlOm9zJztcbmltcG9ydCB7XG4gIENvbG9yaXplLFxuICBibHVlLFxuICBib2xkLFxuICBjeWFuLFxuICBkaW0sXG4gIGdyZWVuLFxuICBncmV5LFxuICBtYWdlbnRhLFxuICByZWQsXG4gIHVuZGVybGluZSxcbiAgeWVsbG93LFxufSBmcm9tICdrbGV1ci9jb2xvcnMnO1xuaW1wb3J0IHsgQW1wbGlmeUZhdWx0IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuaW1wb3J0IHsgZ2V0UGFja2FnZU1hbmFnZXJSdW5uZXJOYW1lIH0gZnJvbSAnLi4vcGFja2FnZS1tYW5hZ2VyLWNvbnRyb2xsZXIvZ2V0X3BhY2thZ2VfbWFuYWdlcl9uYW1lLmpzJztcblxuLyoqXG4gKiBGb3JtYXRzIHZhcmlvdXMgaW5wdXRzIGludG8gc2luZ2xlIHN0cmluZy5cbiAqL1xuZXhwb3J0IGNsYXNzIEZvcm1hdCB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHdpdGggYSBwYWNrYWdlIG1hbmFnZXIgcnVubmVyIG5hbWUuIERlZmF1bHRzIHRvIGF0dGVtcHRpbmcgdG8gbG9hZCBhIHZhbHVlIGRlcml2ZWQgZnJvbSBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBhY2thZ2VNYW5hZ2VyUnVubmVyTmFtZSA9IGdldFBhY2thZ2VNYW5hZ2VyUnVubmVyTmFtZSgpXG4gICkge31cbiAgbm9ybWFsaXplQW1weENvbW1hbmQgPSAoY29tbWFuZDogc3RyaW5nKSA9PiB7XG4gICAgaWYgKGNvbW1hbmQubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgQW1wbGlmeUZhdWx0KCdJbnZhbGlkRm9ybWF0RmF1bHQnLCB7XG4gICAgICAgIG1lc3NhZ2U6ICdUaGUgY29tbWFuZCBtdXN0IGJlIG5vbi1lbXB0eScsXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGN5YW4oYCR7dGhpcy5wYWNrYWdlTWFuYWdlclJ1bm5lck5hbWV9IGFtcHggJHtjb21tYW5kfWApO1xuICB9O1xuICBlcnJvciA9IChlcnJvcjogc3RyaW5nIHwgRXJyb3IgfCB1bmtub3duKTogc3RyaW5nID0+IHtcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IHJlZChgJHtlcnJvci5uYW1lfTogJHtlcnJvci5tZXNzYWdlfWApO1xuXG4gICAgICBpZiAoZXJyb3IuY2F1c2UpIHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2UgKyBvcy5FT0wgKyB0aGlzLmVycm9yKGVycm9yLmNhdXNlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVycm9yID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHJlZChlcnJvcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gcmVkKEpTT04uc3RyaW5naWZ5KGVycm9yLCBudWxsLCAyKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHJlZCgnVW5rbm93biBlcnJvcicpICsgb3MuRU9MICsgdGhpcy5lcnJvcihlKTtcbiAgICB9XG4gIH07XG4gIG5vdGUgPSAobWVzc2FnZTogc3RyaW5nKSA9PiBncmV5KG1lc3NhZ2UpO1xuICBjb21tYW5kID0gKGNvbW1hbmQ6IHN0cmluZykgPT4gY3lhbihjb21tYW5kKTtcbiAgaGlnaGxpZ2h0ID0gKGNvbW1hbmQ6IHN0cmluZykgPT4gY3lhbihjb21tYW5kKTtcbiAgc3VjY2VzcyA9IChtZXNzYWdlOiBzdHJpbmcpID0+IGdyZWVuKG1lc3NhZ2UpO1xuICBzZWN0aW9uSGVhZGVyID0gKGhlYWRlcjogc3RyaW5nKSA9PiBib2xkKGJsdWUoaGVhZGVyKSk7XG4gIGJvbGQgPSAobWVzc2FnZTogc3RyaW5nKSA9PiBib2xkKG1lc3NhZ2UpO1xuICBkaW0gPSAobWVzc2FnZTogc3RyaW5nKSA9PiBkaW0obWVzc2FnZSk7XG4gIGxpbmsgPSAobGluazogc3RyaW5nKSA9PiB1bmRlcmxpbmUoYmx1ZShsaW5rKSk7XG4gIGxpc3QgPSAobGluZXM6IHN0cmluZ1tdKSA9PlxuICAgIGxpbmVzLm1hcCgobGluZTogc3RyaW5nKSA9PiBgIC0gJHtsaW5lfWApLmpvaW4ob3MuRU9MKTtcbiAgaW5kZW50ID0gKG1lc3NhZ2U6IHN0cmluZykgPT4ge1xuICAgIGlmIChtZXNzYWdlID09PSAnJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXNzYWdlIGNhbm5vdCBiZSBlbXB0eScpO1xuICAgIH1cbiAgICBjb25zdCBzcGFjZXMgPSAnICAnOyAvLyBUd28gc3BhY2VzIGZvciBpbmRlbnRhdGlvblxuICAgIHJldHVybiBtZXNzYWdlXG4gICAgICAuc3BsaXQob3MuRU9MKVxuICAgICAgLm1hcCgobGluZSkgPT4gYCR7c3BhY2VzfSR7bGluZX1gKVxuICAgICAgLmpvaW4ob3MuRU9MKTtcbiAgfTtcbiAgcmVjb3JkID0gKHJlY29yZDogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVtYmVyIHwgRGF0ZT4pID0+XG4gICAgT2JqZWN0LmVudHJpZXMocmVjb3JkKVxuICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBgJHtrZXl9OiAke1N0cmluZyh2YWx1ZSl9YClcbiAgICAgIC5qb2luKG9zLkVPTCk7XG4gIGNvbG9yID0gKG1lc3NhZ2U6IHN0cmluZywgY29sb3JOYW1lOiBDb2xvck5hbWUpID0+IGNvbG9yc1tjb2xvck5hbWVdKG1lc3NhZ2UpO1xufVxuXG4vLyBNYXAgdG8gY29ubmVjdCBjb2xvck5hbWUgdG8ga2xldXIgY29sb3JcbmNvbnN0IGNvbG9yczogUmVjb3JkPENvbG9yTmFtZSwgQ29sb3JpemU+ID0ge1xuICBHcmVlbjogZ3JlZW4sXG4gIFllbGxvdzogeWVsbG93LFxuICBCbHVlOiBibHVlLFxuICBNYWdlbnRhOiBtYWdlbnRhLFxuICBDeWFuOiBjeWFuLFxufTtcblxuZXhwb3J0IGNvbnN0IGNvbG9yTmFtZXMgPSBbXG4gICdHcmVlbicsXG4gICdZZWxsb3cnLFxuICAnQmx1ZScsXG4gICdNYWdlbnRhJyxcbiAgJ0N5YW4nLFxuXSBhcyBjb25zdDtcblxuZXhwb3J0IHR5cGUgQ29sb3JOYW1lID0gKHR5cGVvZiBjb2xvck5hbWVzKVtudW1iZXJdO1xuXG5leHBvcnQgY29uc3QgZm9ybWF0ID0gbmV3IEZvcm1hdCgpO1xuIl19