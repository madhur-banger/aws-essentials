import _fsp from 'fs/promises';
import * as _path from 'path';
import { existsSync as _existsSync } from 'fs';
import { execa as _execa } from 'execa';
import { executeWithDebugLogger as _executeWithDebugLogger } from './execute_with_debugger_logger.js';
import { PackageManagerControllerBase } from './package_manager_controller_base.js';
/**
 * PnpmPackageManagerController is an abstraction around pnpm commands that are needed to initialize a project and install dependencies
 */
export class PnpmPackageManagerController extends PackageManagerControllerBase {
    cwd;
    fsp;
    path;
    execa;
    executeWithDebugLogger;
    existsSync;
    /**
     * constructor
     */
    constructor(cwd, fsp = _fsp, path = _path, execa = _execa, executeWithDebugLogger = _executeWithDebugLogger, existsSync = _existsSync) {
        super(cwd, 'pnpm', ['init'], 'install', fsp, path, execa, executeWithDebugLogger, existsSync);
        this.cwd = cwd;
        this.fsp = fsp;
        this.path = path;
        this.execa = execa;
        this.executeWithDebugLogger = executeWithDebugLogger;
        this.existsSync = existsSync;
    }
    /**
     * Pnpm doesn't handle the node process gracefully during the SIGINT life cycle.
     * See: https://github.com/pnpm/pnpm/issues/7374
     */
    allowsSignalPropagation = () => false;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG5wbV9wYWNrYWdlX21hbmFnZXJfY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYWNrYWdlLW1hbmFnZXItY29udHJvbGxlci9wbnBtX3BhY2thZ2VfbWFuYWdlcl9jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLGFBQWEsQ0FBQztBQUMvQixPQUFPLEtBQUssS0FBSyxNQUFNLE1BQU0sQ0FBQztBQUM5QixPQUFPLEVBQUUsVUFBVSxJQUFJLFdBQVcsRUFBRSxNQUFNLElBQUksQ0FBQztBQUMvQyxPQUFPLEVBQUUsS0FBSyxJQUFJLE1BQU0sRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUN4QyxPQUFPLEVBQUUsc0JBQXNCLElBQUksdUJBQXVCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN0RyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUVwRjs7R0FFRztBQUNILE1BQU0sT0FBTyw0QkFBNkIsU0FBUSw0QkFBNEI7SUFLdkQ7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBVHJCOztPQUVHO0lBQ0gsWUFDcUIsR0FBVyxFQUNYLE1BQU0sSUFBSSxFQUNWLE9BQU8sS0FBSyxFQUNaLFFBQVEsTUFBTSxFQUNkLHlCQUF5Qix1QkFBdUIsRUFDaEQsYUFBYSxXQUFXO1FBRTNDLEtBQUssQ0FDSCxHQUFHLEVBQ0gsTUFBTSxFQUNOLENBQUMsTUFBTSxDQUFDLEVBQ1IsU0FBUyxFQUNULEdBQUcsRUFDSCxJQUFJLEVBQ0osS0FBSyxFQUNMLHNCQUFzQixFQUN0QixVQUFVLENBQ1gsQ0FBQztRQWpCaUIsUUFBRyxHQUFILEdBQUcsQ0FBUTtRQUNYLFFBQUcsR0FBSCxHQUFHLENBQU87UUFDVixTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ1osVUFBSyxHQUFMLEtBQUssQ0FBUztRQUNkLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBMEI7UUFDaEQsZUFBVSxHQUFWLFVBQVUsQ0FBYztJQWE3QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsdUJBQXVCLEdBQUcsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO0NBQ3ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9mc3AgZnJvbSAnZnMvcHJvbWlzZXMnO1xuaW1wb3J0ICogYXMgX3BhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBleGlzdHNTeW5jIGFzIF9leGlzdHNTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgZXhlY2EgYXMgX2V4ZWNhIH0gZnJvbSAnZXhlY2EnO1xuaW1wb3J0IHsgZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlciBhcyBfZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlciB9IGZyb20gJy4vZXhlY3V0ZV93aXRoX2RlYnVnZ2VyX2xvZ2dlci5qcyc7XG5pbXBvcnQgeyBQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXJCYXNlIH0gZnJvbSAnLi9wYWNrYWdlX21hbmFnZXJfY29udHJvbGxlcl9iYXNlLmpzJztcblxuLyoqXG4gKiBQbnBtUGFja2FnZU1hbmFnZXJDb250cm9sbGVyIGlzIGFuIGFic3RyYWN0aW9uIGFyb3VuZCBwbnBtIGNvbW1hbmRzIHRoYXQgYXJlIG5lZWRlZCB0byBpbml0aWFsaXplIGEgcHJvamVjdCBhbmQgaW5zdGFsbCBkZXBlbmRlbmNpZXNcbiAqL1xuZXhwb3J0IGNsYXNzIFBucG1QYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIgZXh0ZW5kcyBQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXJCYXNlIHtcbiAgLyoqXG4gICAqIGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgY3dkOiBzdHJpbmcsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGZzcCA9IF9mc3AsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHBhdGggPSBfcGF0aCxcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZXhlY2EgPSBfZXhlY2EsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGV4ZWN1dGVXaXRoRGVidWdMb2dnZXIgPSBfZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlcixcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZXhpc3RzU3luYyA9IF9leGlzdHNTeW5jXG4gICkge1xuICAgIHN1cGVyKFxuICAgICAgY3dkLFxuICAgICAgJ3BucG0nLFxuICAgICAgWydpbml0J10sXG4gICAgICAnaW5zdGFsbCcsXG4gICAgICBmc3AsXG4gICAgICBwYXRoLFxuICAgICAgZXhlY2EsXG4gICAgICBleGVjdXRlV2l0aERlYnVnTG9nZ2VyLFxuICAgICAgZXhpc3RzU3luY1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUG5wbSBkb2Vzbid0IGhhbmRsZSB0aGUgbm9kZSBwcm9jZXNzIGdyYWNlZnVsbHkgZHVyaW5nIHRoZSBTSUdJTlQgbGlmZSBjeWNsZS5cbiAgICogU2VlOiBodHRwczovL2dpdGh1Yi5jb20vcG5wbS9wbnBtL2lzc3Vlcy83Mzc0XG4gICAqL1xuICBhbGxvd3NTaWduYWxQcm9wYWdhdGlvbiA9ICgpID0+IGZhbHNlO1xufVxuIl19