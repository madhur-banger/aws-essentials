import { existsSync as _existsSync } from 'fs';
import _fsp from 'fs/promises';
import { execa as _execa } from 'execa';
import * as _path from 'path';
import { executeWithDebugLogger as _executeWithDebugLogger } from './execute_with_debugger_logger.js';
import { PackageManagerControllerBase } from './package_manager_controller_base.js';
/**
 * YarnClassicPackageManagerController is an abstraction around yarn classic commands that are needed to initialize a project and install dependencies
 */
export class YarnClassicPackageManagerController extends PackageManagerControllerBase {
    cwd;
    fsp;
    path;
    execa;
    executeWithDebugLogger;
    existsSync;
    /**
     * Abstraction around yarn classic commands that are needed to initialize a project and install dependencies
     */
    constructor(cwd, fsp = _fsp, path = _path, execa = _execa, executeWithDebugLogger = _executeWithDebugLogger, existsSync = _existsSync) {
        super(cwd, 'yarn', ['init', '--yes'], 'add', fsp, path, execa, executeWithDebugLogger, existsSync);
        this.cwd = cwd;
        this.fsp = fsp;
        this.path = path;
        this.execa = execa;
        this.executeWithDebugLogger = executeWithDebugLogger;
        this.existsSync = existsSync;
    }
    initializeTsConfig = async (targetDir) => {
        await this.addTypescript(targetDir);
        await super.initializeTsConfig(targetDir);
    };
    /**
     *
     * Yarn doesn't respect the SIGINT life cycle and exits immediately leaving
     * the node process hanging. See: https://github.com/yarnpkg/yarn/issues/8895
     */
    allowsSignalPropagation = () => false;
    addTypescript = async (targetDir) => {
        await this.executeWithDebugLogger(targetDir, 'yarn', ['add', 'typescript@^5'], this.execa);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFybl9jbGFzc2ljX3BhY2thZ2VfbWFuYWdlcl9jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhY2thZ2UtbWFuYWdlci1jb250cm9sbGVyL3lhcm5fY2xhc3NpY19wYWNrYWdlX21hbmFnZXJfY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxJQUFJLFdBQVcsRUFBRSxNQUFNLElBQUksQ0FBQztBQUMvQyxPQUFPLElBQUksTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxFQUFFLEtBQUssSUFBSSxNQUFNLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDeEMsT0FBTyxLQUFLLEtBQUssTUFBTSxNQUFNLENBQUM7QUFDOUIsT0FBTyxFQUFFLHNCQUFzQixJQUFJLHVCQUF1QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdEcsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFcEY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sbUNBQW9DLFNBQVEsNEJBQTRCO0lBSzlEO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQVRyQjs7T0FFRztJQUNILFlBQ3FCLEdBQVcsRUFDWCxNQUFNLElBQUksRUFDVixPQUFPLEtBQUssRUFDWixRQUFRLE1BQU0sRUFDZCx5QkFBeUIsdUJBQXVCLEVBQ2hELGFBQWEsV0FBVztRQUUzQyxLQUFLLENBQ0gsR0FBRyxFQUNILE1BQU0sRUFDTixDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFDakIsS0FBSyxFQUNMLEdBQUcsRUFDSCxJQUFJLEVBQ0osS0FBSyxFQUNMLHNCQUFzQixFQUN0QixVQUFVLENBQ1gsQ0FBQztRQWpCaUIsUUFBRyxHQUFILEdBQUcsQ0FBUTtRQUNYLFFBQUcsR0FBSCxHQUFHLENBQU87UUFDVixTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ1osVUFBSyxHQUFMLEtBQUssQ0FBUztRQUNkLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBMEI7UUFDaEQsZUFBVSxHQUFWLFVBQVUsQ0FBYztJQWE3QyxDQUFDO0lBRUQsa0JBQWtCLEdBQUcsS0FBSyxFQUFFLFNBQWlCLEVBQUUsRUFBRTtRQUMvQyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEMsTUFBTSxLQUFLLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUMsQ0FBQyxDQUFDO0lBQ0Y7Ozs7T0FJRztJQUNILHVCQUF1QixHQUFHLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztJQUU5QixhQUFhLEdBQUcsS0FBSyxFQUFFLFNBQWlCLEVBQUUsRUFBRTtRQUNsRCxNQUFNLElBQUksQ0FBQyxzQkFBc0IsQ0FDL0IsU0FBUyxFQUNULE1BQU0sRUFDTixDQUFDLEtBQUssRUFBRSxlQUFlLENBQUMsRUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FDWCxDQUFDO0lBQ0osQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGlzdHNTeW5jIGFzIF9leGlzdHNTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IF9mc3AgZnJvbSAnZnMvcHJvbWlzZXMnO1xuaW1wb3J0IHsgZXhlY2EgYXMgX2V4ZWNhIH0gZnJvbSAnZXhlY2EnO1xuaW1wb3J0ICogYXMgX3BhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBleGVjdXRlV2l0aERlYnVnTG9nZ2VyIGFzIF9leGVjdXRlV2l0aERlYnVnTG9nZ2VyIH0gZnJvbSAnLi9leGVjdXRlX3dpdGhfZGVidWdnZXJfbG9nZ2VyLmpzJztcbmltcG9ydCB7IFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckJhc2UgfSBmcm9tICcuL3BhY2thZ2VfbWFuYWdlcl9jb250cm9sbGVyX2Jhc2UuanMnO1xuXG4vKipcbiAqIFlhcm5DbGFzc2ljUGFja2FnZU1hbmFnZXJDb250cm9sbGVyIGlzIGFuIGFic3RyYWN0aW9uIGFyb3VuZCB5YXJuIGNsYXNzaWMgY29tbWFuZHMgdGhhdCBhcmUgbmVlZGVkIHRvIGluaXRpYWxpemUgYSBwcm9qZWN0IGFuZCBpbnN0YWxsIGRlcGVuZGVuY2llc1xuICovXG5leHBvcnQgY2xhc3MgWWFybkNsYXNzaWNQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIgZXh0ZW5kcyBQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXJCYXNlIHtcbiAgLyoqXG4gICAqIEFic3RyYWN0aW9uIGFyb3VuZCB5YXJuIGNsYXNzaWMgY29tbWFuZHMgdGhhdCBhcmUgbmVlZGVkIHRvIGluaXRpYWxpemUgYSBwcm9qZWN0IGFuZCBpbnN0YWxsIGRlcGVuZGVuY2llc1xuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGN3ZDogc3RyaW5nLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBmc3AgPSBfZnNwLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBwYXRoID0gX3BhdGgsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGV4ZWNhID0gX2V4ZWNhLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBleGVjdXRlV2l0aERlYnVnTG9nZ2VyID0gX2V4ZWN1dGVXaXRoRGVidWdMb2dnZXIsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGV4aXN0c1N5bmMgPSBfZXhpc3RzU3luY1xuICApIHtcbiAgICBzdXBlcihcbiAgICAgIGN3ZCxcbiAgICAgICd5YXJuJyxcbiAgICAgIFsnaW5pdCcsICctLXllcyddLFxuICAgICAgJ2FkZCcsXG4gICAgICBmc3AsXG4gICAgICBwYXRoLFxuICAgICAgZXhlY2EsXG4gICAgICBleGVjdXRlV2l0aERlYnVnTG9nZ2VyLFxuICAgICAgZXhpc3RzU3luY1xuICAgICk7XG4gIH1cblxuICBpbml0aWFsaXplVHNDb25maWcgPSBhc3luYyAodGFyZ2V0RGlyOiBzdHJpbmcpID0+IHtcbiAgICBhd2FpdCB0aGlzLmFkZFR5cGVzY3JpcHQodGFyZ2V0RGlyKTtcbiAgICBhd2FpdCBzdXBlci5pbml0aWFsaXplVHNDb25maWcodGFyZ2V0RGlyKTtcbiAgfTtcbiAgLyoqXG4gICAqXG4gICAqIFlhcm4gZG9lc24ndCByZXNwZWN0IHRoZSBTSUdJTlQgbGlmZSBjeWNsZSBhbmQgZXhpdHMgaW1tZWRpYXRlbHkgbGVhdmluZ1xuICAgKiB0aGUgbm9kZSBwcm9jZXNzIGhhbmdpbmcuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3lhcm5wa2cveWFybi9pc3N1ZXMvODg5NVxuICAgKi9cbiAgYWxsb3dzU2lnbmFsUHJvcGFnYXRpb24gPSAoKSA9PiBmYWxzZTtcblxuICBwcml2YXRlIGFkZFR5cGVzY3JpcHQgPSBhc3luYyAodGFyZ2V0RGlyOiBzdHJpbmcpID0+IHtcbiAgICBhd2FpdCB0aGlzLmV4ZWN1dGVXaXRoRGVidWdMb2dnZXIoXG4gICAgICB0YXJnZXREaXIsXG4gICAgICAneWFybicsXG4gICAgICBbJ2FkZCcsICd0eXBlc2NyaXB0QF41J10sXG4gICAgICB0aGlzLmV4ZWNhXG4gICAgKTtcbiAgfTtcbn1cbiJdfQ==