import { AmplifyUserError } from '@aws-amplify/platform-core';
import { cyan } from 'kleur/colors';
/**
 * Reads the npm_config_user_agent environment variable to determine the package manager that is currently being used.
 * Throws if npm_config_user_agent is not set.
 */
export const getPackageManagerName = () => {
    const userAgent = process.env.npm_config_user_agent;
    if (userAgent === undefined) {
        throw new AmplifyUserError('NoPackageManagerError', {
            message: `npm_config_user_agent environment variable is undefined`,
            details: 'This is usually caused by running commands without a package manager',
            // Note that we cannot use the format object to format the command here because that would create a circular dependency
            resolution: `Run commands via your package manager. For example: ${cyan('npx ampx <command>')} if npm is your package manager.`,
        });
    }
    const packageManagerAndVersion = userAgent.split(' ')[0];
    const [packageManagerName, packageManagerVersion] = packageManagerAndVersion.split('/');
    if (packageManagerName === 'yarn') {
        const yarnMajorVersion = packageManagerVersion.split('.')[0];
        return `yarn-${yarnMajorVersion === '1' ? 'classic' : 'modern'}`;
    }
    return packageManagerName;
};
const runnerMap = {
    npm: 'npx',
    'yarn-modern': 'yarn',
    'yarn-classic': 'yarn',
    pnpm: 'pnpm',
};
/**
 * Tries to determine the package manager runner that is currently being used. Eg 'npx' for 'npm' and 'yarn' for 'yarn'.
 */
export const getPackageManagerRunnerName = () => {
    const packageManagerName = getPackageManagerName();
    const packageManagerRunnerName = runnerMap[packageManagerName];
    if (!packageManagerRunnerName) {
        throw new AmplifyUserError('UnsupportedPackageManagerError', {
            message: `Package manager ${packageManagerName} is not supported.`,
            resolution: 'Use npm, yarn, or pnpm.',
        });
    }
    return packageManagerRunnerName;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0X3BhY2thZ2VfbWFuYWdlcl9uYW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhY2thZ2UtbWFuYWdlci1jb250cm9sbGVyL2dldF9wYWNrYWdlX21hbmFnZXJfbmFtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXBDOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLEdBQUcsRUFBRTtJQUN4QyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDO0lBQ3BELElBQUksU0FBUyxLQUFLLFNBQVMsRUFBRTtRQUMzQixNQUFNLElBQUksZ0JBQWdCLENBQUMsdUJBQXVCLEVBQUU7WUFDbEQsT0FBTyxFQUFFLHlEQUF5RDtZQUNsRSxPQUFPLEVBQ0wsc0VBQXNFO1lBQ3hFLHVIQUF1SDtZQUN2SCxVQUFVLEVBQUUsdURBQXVELElBQUksQ0FDckUsb0JBQW9CLENBQ3JCLGtDQUFrQztTQUNwQyxDQUFDLENBQUM7S0FDSjtJQUNELE1BQU0sd0JBQXdCLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RCxNQUFNLENBQUMsa0JBQWtCLEVBQUUscUJBQXFCLENBQUMsR0FDL0Msd0JBQXdCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXRDLElBQUksa0JBQWtCLEtBQUssTUFBTSxFQUFFO1FBQ2pDLE1BQU0sZ0JBQWdCLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdELE9BQU8sUUFBUSxnQkFBZ0IsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDbEU7SUFDRCxPQUFPLGtCQUFrQixDQUFDO0FBQzVCLENBQUMsQ0FBQztBQUVGLE1BQU0sU0FBUyxHQUEyQjtJQUN4QyxHQUFHLEVBQUUsS0FBSztJQUNWLGFBQWEsRUFBRSxNQUFNO0lBQ3JCLGNBQWMsRUFBRSxNQUFNO0lBQ3RCLElBQUksRUFBRSxNQUFNO0NBQ2IsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsR0FBVyxFQUFFO0lBQ3RELE1BQU0sa0JBQWtCLEdBQUcscUJBQXFCLEVBQUUsQ0FBQztJQUNuRCxNQUFNLHdCQUF3QixHQUFHLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQy9ELElBQUksQ0FBQyx3QkFBd0IsRUFBRTtRQUM3QixNQUFNLElBQUksZ0JBQWdCLENBQUMsZ0NBQWdDLEVBQUU7WUFDM0QsT0FBTyxFQUFFLG1CQUFtQixrQkFBa0Isb0JBQW9CO1lBQ2xFLFVBQVUsRUFBRSx5QkFBeUI7U0FDdEMsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxPQUFPLHdCQUF3QixDQUFDO0FBQ2xDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFtcGxpZnlVc2VyRXJyb3IgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBjeWFuIH0gZnJvbSAna2xldXIvY29sb3JzJztcblxuLyoqXG4gKiBSZWFkcyB0aGUgbnBtX2NvbmZpZ191c2VyX2FnZW50IGVudmlyb25tZW50IHZhcmlhYmxlIHRvIGRldGVybWluZSB0aGUgcGFja2FnZSBtYW5hZ2VyIHRoYXQgaXMgY3VycmVudGx5IGJlaW5nIHVzZWQuXG4gKiBUaHJvd3MgaWYgbnBtX2NvbmZpZ191c2VyX2FnZW50IGlzIG5vdCBzZXQuXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRQYWNrYWdlTWFuYWdlck5hbWUgPSAoKSA9PiB7XG4gIGNvbnN0IHVzZXJBZ2VudCA9IHByb2Nlc3MuZW52Lm5wbV9jb25maWdfdXNlcl9hZ2VudDtcbiAgaWYgKHVzZXJBZ2VudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoJ05vUGFja2FnZU1hbmFnZXJFcnJvcicsIHtcbiAgICAgIG1lc3NhZ2U6IGBucG1fY29uZmlnX3VzZXJfYWdlbnQgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgdW5kZWZpbmVkYCxcbiAgICAgIGRldGFpbHM6XG4gICAgICAgICdUaGlzIGlzIHVzdWFsbHkgY2F1c2VkIGJ5IHJ1bm5pbmcgY29tbWFuZHMgd2l0aG91dCBhIHBhY2thZ2UgbWFuYWdlcicsXG4gICAgICAvLyBOb3RlIHRoYXQgd2UgY2Fubm90IHVzZSB0aGUgZm9ybWF0IG9iamVjdCB0byBmb3JtYXQgdGhlIGNvbW1hbmQgaGVyZSBiZWNhdXNlIHRoYXQgd291bGQgY3JlYXRlIGEgY2lyY3VsYXIgZGVwZW5kZW5jeVxuICAgICAgcmVzb2x1dGlvbjogYFJ1biBjb21tYW5kcyB2aWEgeW91ciBwYWNrYWdlIG1hbmFnZXIuIEZvciBleGFtcGxlOiAke2N5YW4oXG4gICAgICAgICducHggYW1weCA8Y29tbWFuZD4nXG4gICAgICApfSBpZiBucG0gaXMgeW91ciBwYWNrYWdlIG1hbmFnZXIuYCxcbiAgICB9KTtcbiAgfVxuICBjb25zdCBwYWNrYWdlTWFuYWdlckFuZFZlcnNpb24gPSB1c2VyQWdlbnQuc3BsaXQoJyAnKVswXTtcbiAgY29uc3QgW3BhY2thZ2VNYW5hZ2VyTmFtZSwgcGFja2FnZU1hbmFnZXJWZXJzaW9uXSA9XG4gICAgcGFja2FnZU1hbmFnZXJBbmRWZXJzaW9uLnNwbGl0KCcvJyk7XG5cbiAgaWYgKHBhY2thZ2VNYW5hZ2VyTmFtZSA9PT0gJ3lhcm4nKSB7XG4gICAgY29uc3QgeWFybk1ham9yVmVyc2lvbiA9IHBhY2thZ2VNYW5hZ2VyVmVyc2lvbi5zcGxpdCgnLicpWzBdO1xuICAgIHJldHVybiBgeWFybi0ke3lhcm5NYWpvclZlcnNpb24gPT09ICcxJyA/ICdjbGFzc2ljJyA6ICdtb2Rlcm4nfWA7XG4gIH1cbiAgcmV0dXJuIHBhY2thZ2VNYW5hZ2VyTmFtZTtcbn07XG5cbmNvbnN0IHJ1bm5lck1hcDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgbnBtOiAnbnB4JyxcbiAgJ3lhcm4tbW9kZXJuJzogJ3lhcm4nLFxuICAneWFybi1jbGFzc2ljJzogJ3lhcm4nLFxuICBwbnBtOiAncG5wbScsXG59O1xuXG4vKipcbiAqIFRyaWVzIHRvIGRldGVybWluZSB0aGUgcGFja2FnZSBtYW5hZ2VyIHJ1bm5lciB0aGF0IGlzIGN1cnJlbnRseSBiZWluZyB1c2VkLiBFZyAnbnB4JyBmb3IgJ25wbScgYW5kICd5YXJuJyBmb3IgJ3lhcm4nLlxuICovXG5leHBvcnQgY29uc3QgZ2V0UGFja2FnZU1hbmFnZXJSdW5uZXJOYW1lID0gKCk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IHBhY2thZ2VNYW5hZ2VyTmFtZSA9IGdldFBhY2thZ2VNYW5hZ2VyTmFtZSgpO1xuICBjb25zdCBwYWNrYWdlTWFuYWdlclJ1bm5lck5hbWUgPSBydW5uZXJNYXBbcGFja2FnZU1hbmFnZXJOYW1lXTtcbiAgaWYgKCFwYWNrYWdlTWFuYWdlclJ1bm5lck5hbWUpIHtcbiAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcignVW5zdXBwb3J0ZWRQYWNrYWdlTWFuYWdlckVycm9yJywge1xuICAgICAgbWVzc2FnZTogYFBhY2thZ2UgbWFuYWdlciAke3BhY2thZ2VNYW5hZ2VyTmFtZX0gaXMgbm90IHN1cHBvcnRlZC5gLFxuICAgICAgcmVzb2x1dGlvbjogJ1VzZSBucG0sIHlhcm4sIG9yIHBucG0uJyxcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcGFja2FnZU1hbmFnZXJSdW5uZXJOYW1lO1xufTtcbiJdfQ==