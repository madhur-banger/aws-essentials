import { existsSync as _existsSync } from 'fs';
import _fsp from 'fs/promises';
import { execa as _execa } from 'execa';
import * as _path from 'path';
import { LogLevel } from '../printer/printer.js';
import { format } from '../format/format.js';
import { executeWithDebugLogger as _executeWithDebugLogger } from './execute_with_debugger_logger.js';
import { PackageManagerControllerBase } from './package_manager_controller_base.js';
/**
 * YarnModernPackageManagerController is an abstraction around yarn modern (yarn v2+) commands that are needed to initialize a project and install dependencies
 */
export class YarnModernPackageManagerController extends PackageManagerControllerBase {
    cwd;
    printer;
    fsp;
    path;
    execa;
    executeWithDebugLogger;
    existsSync;
    /**
     * constructor
     */
    constructor(cwd, printer, fsp = _fsp, path = _path, execa = _execa, executeWithDebugLogger = _executeWithDebugLogger, existsSync = _existsSync) {
        super(cwd, 'yarn', ['init', '--yes'], 'add', fsp, path, execa, executeWithDebugLogger, existsSync);
        this.cwd = cwd;
        this.printer = printer;
        this.fsp = fsp;
        this.path = path;
        this.execa = execa;
        this.executeWithDebugLogger = executeWithDebugLogger;
        this.existsSync = existsSync;
    }
    initializeTsConfig = async (targetDir) => {
        await this.addLockFile(targetDir);
        await this.addTypescript(targetDir);
        await super.initializeTsConfig(targetDir);
    };
    /**
     * addLockFile - adds a yarn.lock file to the project root for yarn v2+
     */
    addLockFile = async (targetDir) => {
        try {
            await this.fsp.writeFile(this.path.resolve(targetDir, 'yarn.lock'), '');
        }
        catch (error) {
            if (typeof error === 'string') {
                this.printer.log(format.error(`Error creating ${targetDir}/yarn.lock ${error}}`), LogLevel.ERROR);
            }
            else if (error instanceof Error) {
                this.printer.log(format.error(`Error creating ${targetDir}/yarn.lock ${error.message}}`), LogLevel.ERROR);
            }
        }
    };
    addTypescript = async (targetDir) => {
        await this.executeWithDebugLogger(targetDir, 'yarn', ['add', 'typescript@^5'], this.execa);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFybl9tb2Rlcm5fcGFja2FnZV9tYW5hZ2VyX2NvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGFja2FnZS1tYW5hZ2VyLWNvbnRyb2xsZXIveWFybl9tb2Rlcm5fcGFja2FnZV9tYW5hZ2VyX2NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsSUFBSSxXQUFXLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDL0MsT0FBTyxJQUFJLE1BQU0sYUFBYSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxLQUFLLElBQUksTUFBTSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ3hDLE9BQU8sS0FBSyxLQUFLLE1BQU0sTUFBTSxDQUFDO0FBQzlCLE9BQU8sRUFBRSxRQUFRLEVBQVcsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDN0MsT0FBTyxFQUFFLHNCQUFzQixJQUFJLHVCQUF1QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdEcsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFcEY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sa0NBQW1DLFNBQVEsNEJBQTRCO0lBSzdEO0lBQ0Y7SUFDRTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBVnJCOztPQUVHO0lBQ0gsWUFDcUIsR0FBVyxFQUNiLE9BQWdCLEVBQ2QsTUFBTSxJQUFJLEVBQ1YsT0FBTyxLQUFLLEVBQ1osUUFBUSxNQUFNLEVBQ2QseUJBQXlCLHVCQUF1QixFQUNoRCxhQUFhLFdBQVc7UUFFM0MsS0FBSyxDQUNILEdBQUcsRUFDSCxNQUFNLEVBQ04sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQ2pCLEtBQUssRUFDTCxHQUFHLEVBQ0gsSUFBSSxFQUNKLEtBQUssRUFDTCxzQkFBc0IsRUFDdEIsVUFBVSxDQUNYLENBQUM7UUFsQmlCLFFBQUcsR0FBSCxHQUFHLENBQVE7UUFDYixZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ2QsUUFBRyxHQUFILEdBQUcsQ0FBTztRQUNWLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixVQUFLLEdBQUwsS0FBSyxDQUFTO1FBQ2QsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUEwQjtRQUNoRCxlQUFVLEdBQVYsVUFBVSxDQUFjO0lBYTdDLENBQUM7SUFFRCxrQkFBa0IsR0FBRyxLQUFLLEVBQUUsU0FBaUIsRUFBRSxFQUFFO1FBQy9DLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNsQyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEMsTUFBTSxLQUFLLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUMsQ0FBQyxDQUFDO0lBRUY7O09BRUc7SUFDSyxXQUFXLEdBQUcsS0FBSyxFQUFFLFNBQWlCLEVBQUUsRUFBRTtRQUNoRCxJQUFJO1lBQ0YsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDekU7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO2dCQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FDZCxNQUFNLENBQUMsS0FBSyxDQUFDLGtCQUFrQixTQUFTLGNBQWMsS0FBSyxHQUFHLENBQUMsRUFDL0QsUUFBUSxDQUFDLEtBQUssQ0FDZixDQUFDO2FBQ0g7aUJBQU0sSUFBSSxLQUFLLFlBQVksS0FBSyxFQUFFO2dCQUNqQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FDZCxNQUFNLENBQUMsS0FBSyxDQUNWLGtCQUFrQixTQUFTLGNBQWMsS0FBSyxDQUFDLE9BQU8sR0FBRyxDQUMxRCxFQUNELFFBQVEsQ0FBQyxLQUFLLENBQ2YsQ0FBQzthQUNIO1NBQ0Y7SUFDSCxDQUFDLENBQUM7SUFFTSxhQUFhLEdBQUcsS0FBSyxFQUFFLFNBQWlCLEVBQUUsRUFBRTtRQUNsRCxNQUFNLElBQUksQ0FBQyxzQkFBc0IsQ0FDL0IsU0FBUyxFQUNULE1BQU0sRUFDTixDQUFDLEtBQUssRUFBRSxlQUFlLENBQUMsRUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FDWCxDQUFDO0lBQ0osQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGlzdHNTeW5jIGFzIF9leGlzdHNTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IF9mc3AgZnJvbSAnZnMvcHJvbWlzZXMnO1xuaW1wb3J0IHsgZXhlY2EgYXMgX2V4ZWNhIH0gZnJvbSAnZXhlY2EnO1xuaW1wb3J0ICogYXMgX3BhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBMb2dMZXZlbCwgUHJpbnRlciB9IGZyb20gJy4uL3ByaW50ZXIvcHJpbnRlci5qcyc7XG5pbXBvcnQgeyBmb3JtYXQgfSBmcm9tICcuLi9mb3JtYXQvZm9ybWF0LmpzJztcbmltcG9ydCB7IGV4ZWN1dGVXaXRoRGVidWdMb2dnZXIgYXMgX2V4ZWN1dGVXaXRoRGVidWdMb2dnZXIgfSBmcm9tICcuL2V4ZWN1dGVfd2l0aF9kZWJ1Z2dlcl9sb2dnZXIuanMnO1xuaW1wb3J0IHsgUGFja2FnZU1hbmFnZXJDb250cm9sbGVyQmFzZSB9IGZyb20gJy4vcGFja2FnZV9tYW5hZ2VyX2NvbnRyb2xsZXJfYmFzZS5qcyc7XG5cbi8qKlxuICogWWFybk1vZGVyblBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlciBpcyBhbiBhYnN0cmFjdGlvbiBhcm91bmQgeWFybiBtb2Rlcm4gKHlhcm4gdjIrKSBjb21tYW5kcyB0aGF0IGFyZSBuZWVkZWQgdG8gaW5pdGlhbGl6ZSBhIHByb2plY3QgYW5kIGluc3RhbGwgZGVwZW5kZW5jaWVzXG4gKi9cbmV4cG9ydCBjbGFzcyBZYXJuTW9kZXJuUGFja2FnZU1hbmFnZXJDb250cm9sbGVyIGV4dGVuZHMgUGFja2FnZU1hbmFnZXJDb250cm9sbGVyQmFzZSB7XG4gIC8qKlxuICAgKiBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGN3ZDogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJpbnRlcjogUHJpbnRlcixcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZnNwID0gX2ZzcCxcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgcGF0aCA9IF9wYXRoLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBleGVjYSA9IF9leGVjYSxcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlciA9IF9leGVjdXRlV2l0aERlYnVnTG9nZ2VyLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBleGlzdHNTeW5jID0gX2V4aXN0c1N5bmNcbiAgKSB7XG4gICAgc3VwZXIoXG4gICAgICBjd2QsXG4gICAgICAneWFybicsXG4gICAgICBbJ2luaXQnLCAnLS15ZXMnXSxcbiAgICAgICdhZGQnLFxuICAgICAgZnNwLFxuICAgICAgcGF0aCxcbiAgICAgIGV4ZWNhLFxuICAgICAgZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlcixcbiAgICAgIGV4aXN0c1N5bmNcbiAgICApO1xuICB9XG5cbiAgaW5pdGlhbGl6ZVRzQ29uZmlnID0gYXN5bmMgKHRhcmdldERpcjogc3RyaW5nKSA9PiB7XG4gICAgYXdhaXQgdGhpcy5hZGRMb2NrRmlsZSh0YXJnZXREaXIpO1xuICAgIGF3YWl0IHRoaXMuYWRkVHlwZXNjcmlwdCh0YXJnZXREaXIpO1xuICAgIGF3YWl0IHN1cGVyLmluaXRpYWxpemVUc0NvbmZpZyh0YXJnZXREaXIpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBhZGRMb2NrRmlsZSAtIGFkZHMgYSB5YXJuLmxvY2sgZmlsZSB0byB0aGUgcHJvamVjdCByb290IGZvciB5YXJuIHYyK1xuICAgKi9cbiAgcHJpdmF0ZSBhZGRMb2NrRmlsZSA9IGFzeW5jICh0YXJnZXREaXI6IHN0cmluZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmZzcC53cml0ZUZpbGUodGhpcy5wYXRoLnJlc29sdmUodGFyZ2V0RGlyLCAneWFybi5sb2NrJyksICcnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5wcmludGVyLmxvZyhcbiAgICAgICAgICBmb3JtYXQuZXJyb3IoYEVycm9yIGNyZWF0aW5nICR7dGFyZ2V0RGlyfS95YXJuLmxvY2sgJHtlcnJvcn19YCksXG4gICAgICAgICAgTG9nTGV2ZWwuRVJST1JcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB0aGlzLnByaW50ZXIubG9nKFxuICAgICAgICAgIGZvcm1hdC5lcnJvcihcbiAgICAgICAgICAgIGBFcnJvciBjcmVhdGluZyAke3RhcmdldERpcn0veWFybi5sb2NrICR7ZXJyb3IubWVzc2FnZX19YFxuICAgICAgICAgICksXG4gICAgICAgICAgTG9nTGV2ZWwuRVJST1JcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSBhZGRUeXBlc2NyaXB0ID0gYXN5bmMgKHRhcmdldERpcjogc3RyaW5nKSA9PiB7XG4gICAgYXdhaXQgdGhpcy5leGVjdXRlV2l0aERlYnVnTG9nZ2VyKFxuICAgICAgdGFyZ2V0RGlyLFxuICAgICAgJ3lhcm4nLFxuICAgICAgWydhZGQnLCAndHlwZXNjcmlwdEBeNSddLFxuICAgICAgdGhpcy5leGVjYVxuICAgICk7XG4gIH07XG59XG4iXX0=