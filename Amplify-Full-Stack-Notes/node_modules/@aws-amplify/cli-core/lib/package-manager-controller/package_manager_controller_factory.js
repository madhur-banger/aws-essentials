import { AmplifyUserError } from '@aws-amplify/platform-core';
import { NpmPackageManagerController } from './npm_package_manager_controller.js';
import { PnpmPackageManagerController } from './pnpm_package_manager_controller.js';
import { YarnClassicPackageManagerController } from './yarn_classic_package_manager_controller.js';
import { YarnModernPackageManagerController } from './yarn_modern_package_manager_controller.js';
import { printer as _printer } from '../printer.js';
import { getPackageManagerName } from './get_package_manager_name.js';
/**
 * PackageManagerControllerFactory is a factory for an abstraction around package manager commands that are needed to initialize a project and install dependencies
 */
export class PackageManagerControllerFactory {
    cwd;
    printer;
    platform;
    /**
     * constructor
     * @param cwd - the root directory of the project
     */
    constructor(cwd = process.cwd(), printer = _printer, platform = process.platform) {
        this.cwd = cwd;
        this.printer = printer;
        this.platform = platform;
    }
    /**
     * Returns a singleton instance of a package manager controller derived from reading the npm_config_user_agent environment variable.
     */
    getPackageManagerController() {
        const packageManagerName = getPackageManagerName();
        switch (packageManagerName) {
            case 'npm':
                return new NpmPackageManagerController(this.cwd);
            case 'pnpm':
                if (this.platform === 'win32') {
                    const message = 'Amplify does not support PNPM on Windows.';
                    const details = 'Details: https://github.com/aws-amplify/amplify-backend/blob/main/packages/create-amplify/README.md';
                    throw new AmplifyUserError('UnsupportedPackageManagerError', {
                        message,
                        details,
                        resolution: 'Use a supported package manager for your OS',
                    });
                }
                return new PnpmPackageManagerController(this.cwd);
            case 'yarn-classic':
                return new YarnClassicPackageManagerController(this.cwd);
            case 'yarn-modern':
                return new YarnModernPackageManagerController(this.cwd, this.printer);
            default:
                throw new AmplifyUserError('UnsupportedPackageManagerError', {
                    message: `Package Manager ${packageManagerName} is not supported.`,
                    resolution: 'Use npm, yarn or pnpm.',
                });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFja2FnZV9tYW5hZ2VyX2NvbnRyb2xsZXJfZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYWNrYWdlLW1hbmFnZXItY29udHJvbGxlci9wYWNrYWdlX21hbmFnZXJfY29udHJvbGxlcl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzlELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3BGLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ25HLE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ2pHLE9BQU8sRUFBRSxPQUFPLElBQUksUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXBELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRXRFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLCtCQUErQjtJQU12QjtJQUNBO0lBQ0E7SUFQbkI7OztPQUdHO0lBQ0gsWUFDbUIsTUFBTSxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQ25CLFVBQW1CLFFBQVEsRUFDM0IsV0FBVyxPQUFPLENBQUMsUUFBUTtRQUYzQixRQUFHLEdBQUgsR0FBRyxDQUFnQjtRQUNuQixZQUFPLEdBQVAsT0FBTyxDQUFvQjtRQUMzQixhQUFRLEdBQVIsUUFBUSxDQUFtQjtJQUMzQyxDQUFDO0lBRUo7O09BRUc7SUFDSCwyQkFBMkI7UUFDekIsTUFBTSxrQkFBa0IsR0FBRyxxQkFBcUIsRUFBRSxDQUFDO1FBQ25ELFFBQVEsa0JBQWtCLEVBQUU7WUFDMUIsS0FBSyxLQUFLO2dCQUNSLE9BQU8sSUFBSSwyQkFBMkIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkQsS0FBSyxNQUFNO2dCQUNULElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxPQUFPLEVBQUU7b0JBQzdCLE1BQU0sT0FBTyxHQUFHLDJDQUEyQyxDQUFDO29CQUM1RCxNQUFNLE9BQU8sR0FDWCxxR0FBcUcsQ0FBQztvQkFDeEcsTUFBTSxJQUFJLGdCQUFnQixDQUFDLGdDQUFnQyxFQUFFO3dCQUMzRCxPQUFPO3dCQUNQLE9BQU87d0JBQ1AsVUFBVSxFQUFFLDZDQUE2QztxQkFDMUQsQ0FBQyxDQUFDO2lCQUNKO2dCQUNELE9BQU8sSUFBSSw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDcEQsS0FBSyxjQUFjO2dCQUNqQixPQUFPLElBQUksbUNBQW1DLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNELEtBQUssYUFBYTtnQkFDaEIsT0FBTyxJQUFJLGtDQUFrQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3hFO2dCQUNFLE1BQU0sSUFBSSxnQkFBZ0IsQ0FBQyxnQ0FBZ0MsRUFBRTtvQkFDM0QsT0FBTyxFQUFFLG1CQUFtQixrQkFBa0Isb0JBQW9CO29CQUNsRSxVQUFVLEVBQUUsd0JBQXdCO2lCQUNyQyxDQUFDLENBQUM7U0FDTjtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHR5cGUgUGFja2FnZU1hbmFnZXJDb250cm9sbGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgeyBBbXBsaWZ5VXNlckVycm9yIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuaW1wb3J0IHsgTnBtUGFja2FnZU1hbmFnZXJDb250cm9sbGVyIH0gZnJvbSAnLi9ucG1fcGFja2FnZV9tYW5hZ2VyX2NvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHsgUG5wbVBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlciB9IGZyb20gJy4vcG5wbV9wYWNrYWdlX21hbmFnZXJfY29udHJvbGxlci5qcyc7XG5pbXBvcnQgeyBZYXJuQ2xhc3NpY1BhY2thZ2VNYW5hZ2VyQ29udHJvbGxlciB9IGZyb20gJy4veWFybl9jbGFzc2ljX3BhY2thZ2VfbWFuYWdlcl9jb250cm9sbGVyLmpzJztcbmltcG9ydCB7IFlhcm5Nb2Rlcm5QYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIgfSBmcm9tICcuL3lhcm5fbW9kZXJuX3BhY2thZ2VfbWFuYWdlcl9jb250cm9sbGVyLmpzJztcbmltcG9ydCB7IHByaW50ZXIgYXMgX3ByaW50ZXIgfSBmcm9tICcuLi9wcmludGVyLmpzJztcbmltcG9ydCB7IFByaW50ZXIgfSBmcm9tICcuLi9wcmludGVyL3ByaW50ZXIuanMnO1xuaW1wb3J0IHsgZ2V0UGFja2FnZU1hbmFnZXJOYW1lIH0gZnJvbSAnLi9nZXRfcGFja2FnZV9tYW5hZ2VyX25hbWUuanMnO1xuXG4vKipcbiAqIFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3RvcnkgaXMgYSBmYWN0b3J5IGZvciBhbiBhYnN0cmFjdGlvbiBhcm91bmQgcGFja2FnZSBtYW5hZ2VyIGNvbW1hbmRzIHRoYXQgYXJlIG5lZWRlZCB0byBpbml0aWFsaXplIGEgcHJvamVjdCBhbmQgaW5zdGFsbCBkZXBlbmRlbmNpZXNcbiAqL1xuZXhwb3J0IGNsYXNzIFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3Rvcnkge1xuICAvKipcbiAgICogY29uc3RydWN0b3JcbiAgICogQHBhcmFtIGN3ZCAtIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGUgcHJvamVjdFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBjd2QgPSBwcm9jZXNzLmN3ZCgpLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJpbnRlcjogUHJpbnRlciA9IF9wcmludGVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGxhdGZvcm0gPSBwcm9jZXNzLnBsYXRmb3JtXG4gICkge31cblxuICAvKipcbiAgICogUmV0dXJucyBhIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiBhIHBhY2thZ2UgbWFuYWdlciBjb250cm9sbGVyIGRlcml2ZWQgZnJvbSByZWFkaW5nIHRoZSBucG1fY29uZmlnX3VzZXJfYWdlbnQgZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gICAqL1xuICBnZXRQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIoKTogUGFja2FnZU1hbmFnZXJDb250cm9sbGVyIHtcbiAgICBjb25zdCBwYWNrYWdlTWFuYWdlck5hbWUgPSBnZXRQYWNrYWdlTWFuYWdlck5hbWUoKTtcbiAgICBzd2l0Y2ggKHBhY2thZ2VNYW5hZ2VyTmFtZSkge1xuICAgICAgY2FzZSAnbnBtJzpcbiAgICAgICAgcmV0dXJuIG5ldyBOcG1QYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIodGhpcy5jd2QpO1xuICAgICAgY2FzZSAncG5wbSc6XG4gICAgICAgIGlmICh0aGlzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XG4gICAgICAgICAgY29uc3QgbWVzc2FnZSA9ICdBbXBsaWZ5IGRvZXMgbm90IHN1cHBvcnQgUE5QTSBvbiBXaW5kb3dzLic7XG4gICAgICAgICAgY29uc3QgZGV0YWlscyA9XG4gICAgICAgICAgICAnRGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL2F3cy1hbXBsaWZ5L2FtcGxpZnktYmFja2VuZC9ibG9iL21haW4vcGFja2FnZXMvY3JlYXRlLWFtcGxpZnkvUkVBRE1FLm1kJztcbiAgICAgICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcignVW5zdXBwb3J0ZWRQYWNrYWdlTWFuYWdlckVycm9yJywge1xuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIGRldGFpbHMsXG4gICAgICAgICAgICByZXNvbHV0aW9uOiAnVXNlIGEgc3VwcG9ydGVkIHBhY2thZ2UgbWFuYWdlciBmb3IgeW91ciBPUycsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQbnBtUGFja2FnZU1hbmFnZXJDb250cm9sbGVyKHRoaXMuY3dkKTtcbiAgICAgIGNhc2UgJ3lhcm4tY2xhc3NpYyc6XG4gICAgICAgIHJldHVybiBuZXcgWWFybkNsYXNzaWNQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIodGhpcy5jd2QpO1xuICAgICAgY2FzZSAneWFybi1tb2Rlcm4nOlxuICAgICAgICByZXR1cm4gbmV3IFlhcm5Nb2Rlcm5QYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIodGhpcy5jd2QsIHRoaXMucHJpbnRlcik7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcignVW5zdXBwb3J0ZWRQYWNrYWdlTWFuYWdlckVycm9yJywge1xuICAgICAgICAgIG1lc3NhZ2U6IGBQYWNrYWdlIE1hbmFnZXIgJHtwYWNrYWdlTWFuYWdlck5hbWV9IGlzIG5vdCBzdXBwb3J0ZWQuYCxcbiAgICAgICAgICByZXNvbHV0aW9uOiAnVXNlIG5wbSwgeWFybiBvciBwbnBtLicsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIl19