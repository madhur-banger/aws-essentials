/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { existsSync as _existsSync } from 'fs';
import _fsp from 'fs/promises';
import { execa as _execa } from 'execa';
import * as _path from 'path';
import { PackageManagerControllerBase } from './package_manager_controller_base.js';
/**
 * YarnClassicPackageManagerController is an abstraction around yarn classic commands that are needed to initialize a project and install dependencies
 */
export declare class YarnClassicPackageManagerController extends PackageManagerControllerBase {
    protected readonly cwd: string;
    protected readonly fsp: typeof _fsp;
    protected readonly path: _path.PlatformPath;
    protected readonly execa: typeof _execa;
    protected readonly executeWithDebugLogger: (cwd: string, executable: string, args?: readonly string[] | undefined, execa?: typeof _execa, options?: import("execa").Options<"utf8"> | undefined) => import("execa").ExecaChildProcess<string>;
    protected readonly existsSync: typeof _existsSync;
    /**
     * Abstraction around yarn classic commands that are needed to initialize a project and install dependencies
     */
    constructor(cwd: string, fsp?: typeof _fsp, path?: _path.PlatformPath, execa?: typeof _execa, executeWithDebugLogger?: (cwd: string, executable: string, args?: readonly string[] | undefined, execa?: typeof _execa, options?: import("execa").Options<"utf8"> | undefined) => import("execa").ExecaChildProcess<string>, existsSync?: typeof _existsSync);
    initializeTsConfig: (targetDir: string) => Promise<void>;
    /**
     *
     * Yarn doesn't respect the SIGINT life cycle and exits immediately leaving
     * the node process hanging. See: https://github.com/yarnpkg/yarn/issues/8895
     */
    allowsSignalPropagation: () => boolean;
    private addTypescript;
}
//# sourceMappingURL=yarn_classic_package_manager_controller.d.ts.map