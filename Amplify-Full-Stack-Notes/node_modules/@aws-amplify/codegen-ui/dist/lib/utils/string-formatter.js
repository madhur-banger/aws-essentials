"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatter = exports.formatDateTime = exports.formatTime = exports.formatDate = void 0;
const monthToShortMon = {
    '1': 'Jan',
    '2': 'Feb',
    '3': 'Mar',
    '4': 'Apr',
    '5': 'May',
    '6': 'Jun',
    '7': 'Jul',
    '8': 'Aug',
    '9': 'Sep',
    '10': 'Oct',
    '11': 'Nov',
    '12': 'Dec',
};
const invalidDateStr = 'Invalid Date';
function formatDate(date, dateFormat) {
    if (date === undefined || date === null) {
        return date;
    }
    // AWSDate: YYYY-MM-DD (ISO 8601)
    const validDate = new Date(Date.parse(date));
    if (validDate.toString() === invalidDateStr) {
        return date;
    }
    const splitDate = date.split(/-|\+|Z/);
    const year = splitDate[0];
    const month = splitDate[1];
    const day = splitDate[2];
    // Remove leading zeroes
    const truncatedMonth = month.replace(/^0+/, '');
    switch (dateFormat) {
        case 'locale':
            return validDate.toLocaleDateString();
        case 'YYYY.MM.DD':
            return `${year}.${month}.${day}`;
        case 'DD.MM.YYYY':
            return `${day}.${month}.${year}`;
        case 'MM/DD/YYYY':
            return `${month}/${day}/${year}`;
        case 'Mmm DD, YYYY':
            return `${monthToShortMon[truncatedMonth]} ${day}, ${year}`;
        default:
            return date;
    }
}
exports.formatDate = formatDate;
function formatTime(time, timeFormat) {
    if (time === undefined || time === null) {
        return time;
    }
    // AWSTime: hh:mm:ss.sss (24hr format - ISO 8601)
    const splitTime = time.split(/:|Z/);
    if (splitTime.length < 3) {
        return time;
    }
    const validTime = new Date();
    validTime.setHours(Number.parseInt(splitTime[0], 10));
    validTime.setMinutes(Number.parseInt(splitTime[1], 10));
    const splitSeconds = splitTime[2].split('.');
    validTime.setSeconds(Number.parseInt(splitSeconds[0], 10), Number.parseInt(splitSeconds[1], 10));
    if (validTime.toString() === invalidDateStr) {
        return time;
    }
    switch (timeFormat) {
        case 'locale':
            return validTime.toLocaleTimeString();
        case 'hours24':
            return validTime.toLocaleTimeString('en-gb');
        case 'hours12':
            return validTime.toLocaleTimeString('en-us');
        default:
            return time;
    }
}
exports.formatTime = formatTime;
function formatDateTime(dateTimeStr, dateTimeFormat) {
    if (dateTimeStr === undefined || dateTimeStr === null) {
        return dateTimeStr;
    }
    // AWSTimestamp: millis before or after 1970-01-01-T00:00*Z*
    // AWSDateTime: hh:mm:ss.sss (24hr format - ISO 8601)
    const dateTime = /^\d+$/.test(dateTimeStr)
        ? new Date(Number.parseInt(dateTimeStr, 10))
        : new Date(Date.parse(dateTimeStr));
    if (dateTime.toString() === invalidDateStr) {
        return dateTimeStr;
    }
    if (dateTimeFormat === 'locale') {
        return dateTime.toLocaleString();
    }
    const dateAndTime = dateTime.toISOString().split('T');
    const date = formatDate(dateAndTime[0], dateTimeFormat.dateFormat);
    const time = formatTime(dateAndTime[1], dateTimeFormat.timeFormat);
    return `${date} - ${time}`;
}
exports.formatDateTime = formatDateTime;
function formatter(value, formatterInput) {
    switch (formatterInput.type) {
        case 'DateFormat':
            return formatDate(value, formatterInput.format.dateFormat);
        case 'TimeFormat':
            return formatTime(value, formatterInput.format.timeFormat);
        case 'LocaleDateTimeFormat':
            return formatDateTime(value, formatterInput.format.localeDateTimeFormat);
        case 'NonLocaleDateTimeFormat':
            return formatDateTime(value, formatterInput.format.nonLocaleDateTimeFormat);
        default:
            return value;
    }
}
exports.formatter = formatter;
//# sourceMappingURL=string-formatter.js.map