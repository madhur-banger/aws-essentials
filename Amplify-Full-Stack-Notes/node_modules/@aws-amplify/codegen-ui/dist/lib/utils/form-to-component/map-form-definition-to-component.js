"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapFormDefinitionToComponent = exports.wrapInRowGrid = void 0;
const map_element_children_1 = require("./helpers/map-element-children");
const map_cta_buttons_1 = require("./helpers/map-cta-buttons");
const mapFormElementProps = (element) => {
    const props = {};
    Object.entries(element.props).forEach(([key, value]) => {
        if (Array.isArray(value)) {
            props[key] = { value: JSON.stringify(value), type: 'object' };
        }
        else {
            props[key] = { value: `${value}`, type: `${typeof value}` };
        }
    });
    return props;
};
/**
 * will wrap the studio component children in a row grid
 */
const wrapInRowGrid = (idx, rowLength, children) => {
    return [
        {
            name: `RowGrid${idx}`,
            componentType: 'Grid',
            properties: {
                columnGap: { value: 'inherit' },
                rowGap: { value: 'inherit' },
                templateColumns: { value: `repeat(${rowLength}, auto)` },
            },
            children,
        },
    ];
};
exports.wrapInRowGrid = wrapInRowGrid;
const getFormElementChildren = (formDefinition) => formDefinition.elementMatrix.reduce((acc, row, rowIdx) => {
    const children = row.map((column) => {
        const element = formDefinition.elements[column];
        return {
            name: column,
            componentType: element.componentType,
            properties: mapFormElementProps(element),
            children: (0, map_element_children_1.mapElementChildren)(column, element).children,
        };
    });
    // if we have more than one element in a row we create a rowGrid to display the columns for those children
    acc.push(...(row.length > 1 ? (0, exports.wrapInRowGrid)(rowIdx, row.length, children) : children));
    return acc;
}, []);
const mapFormDefinitionToComponent = (name, formDefinition) => {
    const ctaComponent = (0, map_cta_buttons_1.ctaButtonMapper)(formDefinition);
    const formChildren = (0, map_cta_buttons_1.addCTAPosition)(getFormElementChildren(formDefinition), formDefinition.buttons.position, ctaComponent);
    const component = {
        name,
        componentType: 'Grid',
        properties: {
            as: { value: 'form' },
        },
        bindingProperties: {
            onCancel: { type: 'Event' },
        },
        events: {},
        children: formChildren,
    };
    return component;
};
exports.mapFormDefinitionToComponent = mapFormDefinitionToComponent;
//# sourceMappingURL=map-form-definition-to-component.js.map