"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addCTAPosition = exports.ctaButtonMapper = void 0;
function getButtonChild(key, buttonConfigs) {
    const buttonElement = buttonConfigs[key];
    if (buttonElement) {
        return {
            name: buttonElement.name,
            componentType: buttonElement.componentType,
            properties: Object.fromEntries(Object.entries(buttonElement.props).map(([propKey, value]) => {
                return [propKey, { value }];
            })),
        };
    }
    return undefined;
}
const ctaButtonMapper = (formDefinition) => {
    var _a;
    const CTAComponent = {
        name: 'CTAFlex',
        componentType: 'Flex',
        properties: {
            justifyContent: {
                value: 'space-between',
            },
        },
        children: [],
    };
    formDefinition.buttons.buttonMatrix[0].forEach((buttonKey) => {
        var _a;
        const buttonChild = getButtonChild(buttonKey, formDefinition.buttons.buttonConfigs);
        if (buttonChild) {
            (_a = CTAComponent.children) === null || _a === void 0 ? void 0 : _a.push(buttonChild);
        }
    });
    const rightAlignCTA = {
        componentType: 'Flex',
        name: 'RightAlignCTASubFlex',
        properties: {},
        children: [],
    };
    formDefinition.buttons.buttonMatrix[1].forEach((buttonKey) => {
        var _a;
        const buttonChild = getButtonChild(buttonKey, formDefinition.buttons.buttonConfigs);
        if (buttonChild) {
            (_a = rightAlignCTA.children) === null || _a === void 0 ? void 0 : _a.push(buttonChild);
        }
    });
    (_a = CTAComponent.children) === null || _a === void 0 ? void 0 : _a.push(rightAlignCTA);
    return CTAComponent;
};
exports.ctaButtonMapper = ctaButtonMapper;
const addCTAPosition = (formChildren, position, buttons) => {
    const updatedFormChildren = formChildren || [];
    switch (position) {
        case 'top':
            updatedFormChildren.splice(0, 0, buttons);
            break;
        case 'bottom':
            updatedFormChildren.splice(formChildren.length, 0, buttons);
            break;
        case 'top_and_bottom':
            updatedFormChildren.splice(0, 0, buttons);
            updatedFormChildren.splice(formChildren.length, 0, buttons);
            break;
        default:
            updatedFormChildren.splice(formChildren.length, 0, buttons);
            break;
    }
    return updatedFormChildren;
};
exports.addCTAPosition = addCTAPosition;
//# sourceMappingURL=map-cta-buttons.js.map