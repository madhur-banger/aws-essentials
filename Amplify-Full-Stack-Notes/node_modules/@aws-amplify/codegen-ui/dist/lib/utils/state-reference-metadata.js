"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeDataDependenciesForStudioComponentProperty = exports.computeStateReferenceMetadata = void 0;
const component_tree_1 = require("./component-tree");
/**
 * Component Structure Functions
 */
function computeStateReferenceMetadata(component, stateReferences) {
    return stateReferences.map((reference) => {
        const dataDependencies = computeDataDependenciesForStateReference(component, reference);
        return { reference, dataDependencies };
    });
}
exports.computeStateReferenceMetadata = computeStateReferenceMetadata;
function reduceDataDependencies(dataDependencies) {
    return [...new Set(dataDependencies)];
}
/**
 * Property Functions
 */
function computeDataDependenciesForStudioComponentProperty(property) {
    const deps = typeof property !== 'object'
        ? []
        : []
            .concat('concat' in property && property.concat
            ? property.concat.flatMap(computeDataDependenciesForStudioComponentProperty)
            : [])
            .concat('userAttribute' in property && property.userAttribute ? ['authAttributes'] : [])
            .concat('bindingProperties' in property && property.bindingProperties ? [property.bindingProperties.property] : [])
            .concat('collectionBindingProperties' in property && property.collectionBindingProperties ? ['items'] : [])
            .concat('condition' in property &&
            property.condition &&
            'property' in property.condition &&
            property.condition.property
            ? [property.condition.property]
            : [])
            .concat('condition' in property && property.condition && 'then' in property.condition && property.condition.then
            ? computeDataDependenciesForStudioComponentProperty(property.condition.then)
            : [])
            .concat('condition' in property && property.condition && 'else' in property.condition && property.condition.else
            ? computeDataDependenciesForStudioComponentProperty(property.condition.else)
            : []);
    return reduceDataDependencies(deps);
}
exports.computeDataDependenciesForStudioComponentProperty = computeDataDependenciesForStudioComponentProperty;
/**
 * State Functions
 */
function computeDataDependenciesForStateReference(component, stateReference) {
    const { componentName, property } = stateReference;
    const namedComponent = (0, component_tree_1.getComponentFromComponentTree)(component, componentName);
    const propertyDefinition = namedComponent.properties[property];
    if (propertyDefinition) {
        return computeDataDependenciesForStudioComponentProperty(propertyDefinition);
    }
    return [];
}
//# sourceMappingURL=state-reference-metadata.js.map