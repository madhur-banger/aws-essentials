"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkIsSupportedAsForm = exports.checkIsSupportedAsFormField = exports.isNonModelDataType = void 0;
const isNonModelDataType = (dataType) => {
    return typeof dataType === 'object' && 'nonModel' in dataType;
};
exports.isNonModelDataType = isNonModelDataType;
// TODO: change so that default is supported once GA release
const isRelationshipSupported = (featureFlags) => featureFlags === null || featureFlags === void 0 ? void 0 : featureFlags.isRelationshipSupported;
// TODO: change so that default is supported once GA release
const isNonModelSupported = (featureFlags) => featureFlags === null || featureFlags === void 0 ? void 0 : featureFlags.isNonModelSupported;
/**
 * Checks whether a field is supported as a form input
 */
const checkIsSupportedAsFormField = (field, featureFlags) => {
    const unsupportedFieldMap = {
        nonModel: (f) => !isNonModelSupported(featureFlags) && typeof f.dataType === 'object' && 'nonModel' in f.dataType,
        relationship: (f) => !isRelationshipSupported(featureFlags) && !!f.relationship,
    };
    const unsupportedArray = Object.values(unsupportedFieldMap);
    return !unsupportedArray.some((callback) => callback(field));
};
exports.checkIsSupportedAsFormField = checkIsSupportedAsFormField;
/**
 * Checks whether a form should be autogen'd from the given model
 */
const checkIsSupportedAsForm = (model, featureFlags) => {
    const fieldsArray = Object.values(model.fields);
    // no empty forms
    if (fieldsArray.length === 0) {
        return false;
    }
    let unsupportedFieldsCount = 0;
    const hasRequiredUnsupportedField = fieldsArray.some((field) => {
        const isUnsupported = !(0, exports.checkIsSupportedAsFormField)(field, featureFlags);
        if (isUnsupported) {
            unsupportedFieldsCount += 1;
            // no unsupported, required fields
            if (field.required) {
                return true;
            }
        }
        return false;
    });
    if (hasRequiredUnsupportedField) {
        return false;
    }
    // if all fields are unsupported
    if (unsupportedFieldsCount === fieldsArray.length) {
        return false;
    }
    return true;
};
exports.checkIsSupportedAsForm = checkIsSupportedAsForm;
//# sourceMappingURL=check-support.js.map