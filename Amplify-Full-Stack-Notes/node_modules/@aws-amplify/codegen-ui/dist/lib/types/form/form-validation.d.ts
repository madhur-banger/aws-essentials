export declare enum ValidationTypes {
    REQUIRED = "Required",
    START_WITH = "StartWith",
    END_WITH = "EndWith",
    CONTAINS = "Contains",
    NOT_CONTAINS = "NotContains",
    LESS_THAN_CHAR_LENGTH = "LessThanChar",
    GREATER_THAN_CHAR_LENGTH = "GreaterThanChar",
    LESS_THAN_NUM = "LessThanNum",
    GREATER_THAN_NUM = "GreaterThanNum",
    EQUAL_TO_NUM = "EqualTo",
    BE_BEFORE = "BeBefore",
    BE_AFTER = "BeAfter",
    EMAIL = "Email",
    JSON = "JSON",
    IP_ADDRESS = "IpAddress",
    URL = "URL",
    PHONE = "Phone"
}
export declare const ValidationTypeMapping: Record<'StringType' | 'NumberType', ValidationTypes[]>;
export declare const IsStringTypeValidator: (validator: ValidationTypes) => boolean;
export declare const IsNumberTypeValidator: (validator: ValidationTypes) => boolean;
export declare type BaseValidation = {
    validationMessage?: string;
};
export declare type StringValidationType = {
    type: ValidationTypes.CONTAINS | ValidationTypes.NOT_CONTAINS | ValidationTypes.END_WITH | ValidationTypes.START_WITH;
    strValues: string[];
} & BaseValidation;
export declare type DateValidationType = {
    type: ValidationTypes.BE_BEFORE | ValidationTypes.BE_AFTER;
    strValues: string[];
} & BaseValidation;
export declare type StringLengthValidationType = {
    type: ValidationTypes.LESS_THAN_CHAR_LENGTH | ValidationTypes.GREATER_THAN_CHAR_LENGTH;
    numValues: number[];
} & BaseValidation;
export declare type NumberValidationType = {
    type: ValidationTypes.LESS_THAN_NUM | ValidationTypes.GREATER_THAN_NUM | ValidationTypes.EQUAL_TO_NUM;
    numValues: number[];
} & BaseValidation;
export declare type GenericValidationType = {
    type: ValidationTypes.REQUIRED | ValidationTypes.EMAIL | ValidationTypes.JSON | ValidationTypes.IP_ADDRESS | ValidationTypes.URL | ValidationTypes.PHONE;
} & BaseValidation;
export declare type FieldValidationConfiguration = StringValidationType | DateValidationType | StringLengthValidationType | NumberValidationType | GenericValidationType;
export declare type ValidationResponse = {
    hasError: boolean;
    errorMessage?: string;
};
//# sourceMappingURL=form-validation.d.ts.map