"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapSectionalElement = exports.getFormDefinitionSectionalElement = void 0;
const errors_1 = require("../../errors");
const mapper_utils_1 = require("./mapper-utils");
const defaults_1 = require("./defaults");
function getFormDefinitionSectionalElement(config) {
    const componentType = config.type;
    let formDefinitionElement;
    switch (componentType) {
        case 'Text':
            formDefinitionElement = {
                componentType: 'Text',
                props: {
                    children: config.text || defaults_1.FORM_DEFINITION_DEFAULTS.sectionalElement.text,
                },
            };
            break;
        case 'Divider':
            formDefinitionElement = {
                componentType: 'Divider',
                props: {
                    orientation: config.orientation === 'vertical' ? 'vertical' : 'horizontal',
                },
            };
            break;
        case 'Heading':
            formDefinitionElement = {
                componentType: 'Heading',
                props: {
                    level: config.level,
                    children: config.text || defaults_1.FORM_DEFINITION_DEFAULTS.sectionalElement.text,
                },
            };
            break;
        default:
            throw new errors_1.InvalidInputError(`componentType ${componentType} could not be mapped`);
    }
    (0, mapper_utils_1.deleteUndefined)(formDefinitionElement);
    (0, mapper_utils_1.deleteUndefined)(formDefinitionElement.props);
    return formDefinitionElement;
}
exports.getFormDefinitionSectionalElement = getFormDefinitionSectionalElement;
/**
 * Impure function that adds sectional elements to the form definition
 */
/* eslint-disable no-param-reassign */
function mapSectionalElement(element, formDefinition) {
    if (formDefinition.elements[element.name]) {
        throw new errors_1.InvalidInputError(`There is are form elements with the same name: ${element.name}`);
    }
    if ('excluded' in element.config) {
        throw new errors_1.InternalError(`Attempted to map excluded sectional element ${element.name}`);
    }
    formDefinition.elements[element.name] = getFormDefinitionSectionalElement(element.config);
}
exports.mapSectionalElement = mapSectionalElement;
/* eslint-enable no-param-reassign */
//# sourceMappingURL=sectional-element.js.map