"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapFormFieldConfig = exports.getFormDefinitionInputElement = exports.mergeValueMappings = void 0;
/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 */
const types_1 = require("../../types");
const errors_1 = require("../../errors");
const defaults_1 = require("./defaults");
const mapper_utils_1 = require("./mapper-utils");
const check_support_1 = require("../../check-support");
function mergeValueMappings(base, override) {
    var _a;
    // if model-based
    if ((base === null || base === void 0 ? void 0 : base.bindingProperties) || (override === null || override === void 0 ? void 0 : override.bindingProperties)) {
        // if overrides present, autogen'd mappings will be passed as base
        // else, as override
        const autoGendValueMappings = base || override;
        if (autoGendValueMappings) {
            const { values } = autoGendValueMappings;
            // only use displayValue from overrides
            // rest should be autogend
            if (base && ((_a = override === null || override === void 0 ? void 0 : override.values[0]) === null || _a === void 0 ? void 0 : _a.displayValue)) {
                values[0].displayValue = override.values[0].displayValue;
            }
            return {
                values,
                bindingProperties: autoGendValueMappings.bindingProperties,
            };
        }
    }
    // if not model-based
    let values = [];
    if (!base && override) {
        values = override.values;
    }
    else if (base && !override) {
        values = base.values;
    }
    else if (base && override) {
        const overrideMap = new Map(override.values.map(({ displayValue, value }) => [JSON.stringify(value), displayValue]));
        values = base.values.map(({ displayValue, value }) => {
            const stringifiedBaseValue = JSON.stringify(value);
            const overrideDisplayValue = overrideMap.get(stringifiedBaseValue);
            if (overrideDisplayValue) {
                return { displayValue: overrideDisplayValue, value };
            }
            return { displayValue, value };
        });
    }
    return {
        values,
    };
}
exports.mergeValueMappings = mergeValueMappings;
function getRadioGroupFieldValueMappings(config, baseConfig) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    const valueMappings = ((_b = (_a = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _a === void 0 ? void 0 : _a.valueMappings) === null || _b === void 0 ? void 0 : _b.values.length) || ((_d = (_c = config === null || config === void 0 ? void 0 : config.inputType) === null || _c === void 0 ? void 0 : _c.valueMappings) === null || _d === void 0 ? void 0 : _d.values.length)
        ? mergeValueMappings((_e = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _e === void 0 ? void 0 : _e.valueMappings, (_f = config.inputType) === null || _f === void 0 ? void 0 : _f.valueMappings)
        : defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.valueMappings;
    const dataType = (_g = config.dataType) !== null && _g !== void 0 ? _g : baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.dataType;
    if (dataType === 'Boolean') {
        const trueOverride = (_h = valueMappings.values.find(({ value }) => typeof value === 'object' && 'value' in value && value.value === 'true')) === null || _h === void 0 ? void 0 : _h.displayValue;
        const falseOverride = (_j = valueMappings.values.find(({ value }) => typeof value === 'object' && 'value' in value && value.value === 'false')) === null || _j === void 0 ? void 0 : _j.displayValue;
        const { field: { radioGroupFieldBooleanDisplayValue: { true: trueDefault, false: falseDefault }, }, } = defaults_1.FORM_DEFINITION_DEFAULTS;
        return {
            values: [
                { value: { value: 'true' }, displayValue: trueOverride !== null && trueOverride !== void 0 ? trueOverride : { value: trueDefault } },
                { value: { value: 'false' }, displayValue: falseOverride !== null && falseOverride !== void 0 ? falseOverride : { value: falseDefault } },
            ],
        };
    }
    return valueMappings;
}
function getRequiredValidationMessage(dataType) {
    if (typeof dataType === 'object' && 'model' in dataType) {
        return `${dataType.model} is required.`;
    }
    return undefined;
}
// pure function that merges in validations in param with defaults
function getMergedValidations(componentType, validations, isRequired, dataType) {
    const mergedValidations = [];
    if (isRequired) {
        const requiredValidation = { type: types_1.ValidationTypes.REQUIRED, immutable: true };
        const requiredValidationMessage = getRequiredValidationMessage(dataType);
        if (requiredValidationMessage) {
            requiredValidation.validationMessage = requiredValidationMessage;
        }
        mergedValidations.push(requiredValidation);
    }
    const ComponentTypeToDefaultValidations = {
        IPAddressField: [{ type: types_1.ValidationTypes.IP_ADDRESS, immutable: true }],
        URLField: [{ type: types_1.ValidationTypes.URL, immutable: true }],
        EmailField: [{ type: types_1.ValidationTypes.EMAIL, immutable: true }],
        JSONField: [{ type: types_1.ValidationTypes.JSON, immutable: true }],
        PhoneNumberField: [{ type: types_1.ValidationTypes.PHONE, immutable: true }],
    };
    const defaultValidation = ComponentTypeToDefaultValidations[componentType];
    if ((0, check_support_1.isNonModelDataType)(dataType)) {
        mergedValidations.push({ type: types_1.ValidationTypes.JSON, immutable: true });
    }
    else if (defaultValidation) {
        mergedValidations.push(...defaultValidation);
    }
    validations.forEach((validationArray) => {
        if (validationArray) {
            mergedValidations.push(...validationArray);
        }
    });
    return mergedValidations.length ? mergedValidations : undefined;
}
function getTextFieldType(componentType) {
    const ComponentToTypeMap = {
        NumberField: 'number',
        DateField: 'date',
        TimeField: 'time',
        DateTimeField: 'datetime-local',
        PhoneNumberField: 'tel',
    };
    return ComponentToTypeMap[componentType];
}
/**
 * pure function that maps fieldConfig to definition Element
 */
function getFormDefinitionInputElement(config, baseConfig) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99, _100;
    let componentType = ((_a = config.inputType) === null || _a === void 0 ? void 0 : _a.type) || ((_b = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _b === void 0 ? void 0 : _b.type);
    if (!componentType) {
        // Gracefully fall back to a TextField if the inputType is no longer available due to a field rename
        componentType = 'TextField';
    }
    const defaultStringValue = (0, mapper_utils_1.getFirstString)([(_c = config.inputType) === null || _c === void 0 ? void 0 : _c.defaultValue, (_d = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _d === void 0 ? void 0 : _d.defaultValue]);
    const isRequiredValue = (0, mapper_utils_1.getFirstDefinedValue)([(_e = config.inputType) === null || _e === void 0 ? void 0 : _e.required, (_f = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _f === void 0 ? void 0 : _f.required]);
    let formDefinitionElement;
    switch (componentType) {
        case 'TextField':
        case 'NumberField':
        case 'DateField':
        case 'TimeField':
        case 'DateTimeField':
        case 'IPAddressField':
        case 'URLField':
        case 'EmailField':
        case 'PhoneNumberField':
            formDefinitionElement = {
                componentType: 'TextField',
                props: {
                    label: config.label || (baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.label) || defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.label,
                    descriptiveText: (_h = (_g = config.inputType) === null || _g === void 0 ? void 0 : _g.descriptiveText) !== null && _h !== void 0 ? _h : (_j = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _j === void 0 ? void 0 : _j.descriptiveText,
                    isRequired: isRequiredValue,
                    isReadOnly: (0, mapper_utils_1.getFirstDefinedValue)([(_k = config.inputType) === null || _k === void 0 ? void 0 : _k.readOnly, (_l = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _l === void 0 ? void 0 : _l.readOnly]),
                    placeholder: ((_m = config.inputType) === null || _m === void 0 ? void 0 : _m.placeholder) || ((_o = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _o === void 0 ? void 0 : _o.placeholder),
                    type: getTextFieldType(componentType),
                },
                studioFormComponentType: componentType,
            };
            break;
        case 'SwitchField':
            formDefinitionElement = {
                componentType: 'SwitchField',
                props: {
                    label: config.label || (baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.label) || defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.label,
                    defaultChecked: (0, mapper_utils_1.getFirstDefinedValue)([(_p = config.inputType) === null || _p === void 0 ? void 0 : _p.defaultChecked, (_q = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _q === void 0 ? void 0 : _q.defaultChecked]) || false,
                    isDisabled: (0, mapper_utils_1.getFirstDefinedValue)([(_r = config.inputType) === null || _r === void 0 ? void 0 : _r.readOnly, (_s = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _s === void 0 ? void 0 : _s.readOnly]),
                },
            };
            break;
        /**
         * TODO: Implement PhoneNumberField after UI Library supports
         * a controlled PhoneNumberField component
         * https://github.com/aws-amplify/amplify-ui/issues/2671
         */
        case 'SelectField':
            formDefinitionElement = {
                componentType: 'SelectField',
                props: {
                    label: config.label || (baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.label) || defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.label,
                    descriptiveText: (_u = (_t = config.inputType) === null || _t === void 0 ? void 0 : _t.descriptiveText) !== null && _u !== void 0 ? _u : (_v = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _v === void 0 ? void 0 : _v.descriptiveText,
                    placeholder: ((_w = config.inputType) === null || _w === void 0 ? void 0 : _w.placeholder) || ((_x = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _x === void 0 ? void 0 : _x.placeholder) || 'Please select an option',
                    isDisabled: (0, mapper_utils_1.getFirstDefinedValue)([(_y = config.inputType) === null || _y === void 0 ? void 0 : _y.readOnly, (_z = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _z === void 0 ? void 0 : _z.readOnly]),
                },
                defaultValue: defaultStringValue,
                valueMappings: mergeValueMappings((_0 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _0 === void 0 ? void 0 : _0.valueMappings, (_1 = config.inputType) === null || _1 === void 0 ? void 0 : _1.valueMappings),
            };
            break;
        case 'TextAreaField':
        case 'JSONField':
            formDefinitionElement = {
                componentType: 'TextAreaField',
                props: {
                    label: config.label || (baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.label) || defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.label,
                    descriptiveText: (_3 = (_2 = config.inputType) === null || _2 === void 0 ? void 0 : _2.descriptiveText) !== null && _3 !== void 0 ? _3 : (_4 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _4 === void 0 ? void 0 : _4.descriptiveText,
                    isRequired: isRequiredValue,
                    isReadOnly: (0, mapper_utils_1.getFirstDefinedValue)([(_5 = config.inputType) === null || _5 === void 0 ? void 0 : _5.readOnly, (_6 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _6 === void 0 ? void 0 : _6.readOnly]),
                    placeholder: ((_7 = config.inputType) === null || _7 === void 0 ? void 0 : _7.placeholder) || ((_8 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _8 === void 0 ? void 0 : _8.placeholder),
                    defaultValue: defaultStringValue,
                },
                studioFormComponentType: componentType,
            };
            break;
        case 'SliderField':
            formDefinitionElement = {
                componentType: 'SliderField',
                props: {
                    label: config.label || (baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.label) || defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.label,
                    min: (0, mapper_utils_1.getFirstDefinedValue)([(_9 = config.inputType) === null || _9 === void 0 ? void 0 : _9.minValue, (_10 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _10 === void 0 ? void 0 : _10.minValue]),
                    max: (0, mapper_utils_1.getFirstDefinedValue)([(_11 = config.inputType) === null || _11 === void 0 ? void 0 : _11.maxValue, (_12 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _12 === void 0 ? void 0 : _12.maxValue]),
                    step: (0, mapper_utils_1.getFirstDefinedValue)([(_13 = config.inputType) === null || _13 === void 0 ? void 0 : _13.step, (_14 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _14 === void 0 ? void 0 : _14.step]),
                    isDisabled: (0, mapper_utils_1.getFirstDefinedValue)([(_15 = config.inputType) === null || _15 === void 0 ? void 0 : _15.readOnly, (_16 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _16 === void 0 ? void 0 : _16.readOnly]),
                    defaultValue: (0, mapper_utils_1.getFirstNumber)([(_17 = config.inputType) === null || _17 === void 0 ? void 0 : _17.defaultValue, (_18 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _18 === void 0 ? void 0 : _18.defaultValue]),
                    descriptiveText: (_20 = (_19 = config.inputType) === null || _19 === void 0 ? void 0 : _19.descriptiveText) !== null && _20 !== void 0 ? _20 : (_21 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _21 === void 0 ? void 0 : _21.descriptiveText,
                    isRequired: isRequiredValue,
                },
            };
            break;
        case 'StepperField':
            formDefinitionElement = {
                componentType: 'StepperField',
                props: {
                    label: config.label || (baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.label) || defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.label,
                    min: (0, mapper_utils_1.getFirstDefinedValue)([(_22 = config.inputType) === null || _22 === void 0 ? void 0 : _22.minValue, (_23 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _23 === void 0 ? void 0 : _23.minValue]),
                    max: (0, mapper_utils_1.getFirstDefinedValue)([(_24 = config.inputType) === null || _24 === void 0 ? void 0 : _24.maxValue, (_25 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _25 === void 0 ? void 0 : _25.maxValue]),
                    step: (0, mapper_utils_1.getFirstDefinedValue)([(_26 = config.inputType) === null || _26 === void 0 ? void 0 : _26.step, (_27 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _27 === void 0 ? void 0 : _27.step]),
                    isReadOnly: (0, mapper_utils_1.getFirstDefinedValue)([(_28 = config.inputType) === null || _28 === void 0 ? void 0 : _28.readOnly, (_29 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _29 === void 0 ? void 0 : _29.readOnly]),
                    defaultValue: (0, mapper_utils_1.getFirstNumber)([(_30 = config.inputType) === null || _30 === void 0 ? void 0 : _30.defaultValue, (_31 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _31 === void 0 ? void 0 : _31.defaultValue]),
                    descriptiveText: (_33 = (_32 = config.inputType) === null || _32 === void 0 ? void 0 : _32.descriptiveText) !== null && _33 !== void 0 ? _33 : (_34 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _34 === void 0 ? void 0 : _34.descriptiveText,
                    isRequired: isRequiredValue,
                },
            };
            break;
        case 'ToggleButton':
            formDefinitionElement = {
                componentType: 'ToggleButton',
                props: {
                    children: config.label || (baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.label) || defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.label,
                    isDisabled: (0, mapper_utils_1.getFirstDefinedValue)([(_35 = config.inputType) === null || _35 === void 0 ? void 0 : _35.readOnly, (_36 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _36 === void 0 ? void 0 : _36.readOnly]),
                    defaultPressed: (0, mapper_utils_1.getFirstDefinedValue)([(_37 = config.inputType) === null || _37 === void 0 ? void 0 : _37.defaultChecked, (_38 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _38 === void 0 ? void 0 : _38.defaultChecked]) || false,
                },
            };
            break;
        case 'CheckboxField':
            formDefinitionElement = {
                componentType: 'CheckboxField',
                props: {
                    label: config.label || (baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.label) || defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.label,
                    name: ((_39 = config.inputType) === null || _39 === void 0 ? void 0 : _39.name) || ((_40 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _40 === void 0 ? void 0 : _40.name) || defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.name,
                    value: ((_41 = config.inputType) === null || _41 === void 0 ? void 0 : _41.value) || ((_42 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _42 === void 0 ? void 0 : _42.value) || defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.value,
                    isDisabled: (0, mapper_utils_1.getFirstDefinedValue)([(_43 = config.inputType) === null || _43 === void 0 ? void 0 : _43.readOnly, (_44 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _44 === void 0 ? void 0 : _44.readOnly]),
                },
            };
            break;
        case 'RadioGroupField':
            formDefinitionElement = {
                componentType: 'RadioGroupField',
                props: {
                    label: config.label || (baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.label) || defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.label,
                    name: ((_45 = config.inputType) === null || _45 === void 0 ? void 0 : _45.name) || ((_46 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _46 === void 0 ? void 0 : _46.name) || defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.name,
                    isReadOnly: (0, mapper_utils_1.getFirstDefinedValue)([(_47 = config.inputType) === null || _47 === void 0 ? void 0 : _47.readOnly, (_48 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _48 === void 0 ? void 0 : _48.readOnly]),
                    defaultValue: defaultStringValue,
                    descriptiveText: (_50 = (_49 = config.inputType) === null || _49 === void 0 ? void 0 : _49.descriptiveText) !== null && _50 !== void 0 ? _50 : (_51 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _51 === void 0 ? void 0 : _51.descriptiveText,
                    isRequired: isRequiredValue,
                },
                valueMappings: getRadioGroupFieldValueMappings(config, baseConfig),
            };
            break;
        case 'PasswordField':
            formDefinitionElement = {
                componentType: 'PasswordField',
                props: {
                    label: config.label || (baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.label) || defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.label,
                    descriptiveText: (_53 = (_52 = config.inputType) === null || _52 === void 0 ? void 0 : _52.descriptiveText) !== null && _53 !== void 0 ? _53 : (_54 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _54 === void 0 ? void 0 : _54.descriptiveText,
                    isRequired: isRequiredValue,
                    isReadOnly: (0, mapper_utils_1.getFirstDefinedValue)([(_55 = config.inputType) === null || _55 === void 0 ? void 0 : _55.readOnly, (_56 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _56 === void 0 ? void 0 : _56.readOnly]),
                    placeholder: ((_57 = config.inputType) === null || _57 === void 0 ? void 0 : _57.placeholder) || ((_58 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _58 === void 0 ? void 0 : _58.placeholder),
                    defaultValue: defaultStringValue,
                },
            };
            break;
        case 'Autocomplete':
            formDefinitionElement = {
                componentType: 'Autocomplete',
                props: {
                    label: config.label || (baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.label) || defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.label,
                    descriptiveText: (_60 = (_59 = config.inputType) === null || _59 === void 0 ? void 0 : _59.descriptiveText) !== null && _60 !== void 0 ? _60 : (_61 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _61 === void 0 ? void 0 : _61.descriptiveText,
                    isRequired: isRequiredValue,
                    isReadOnly: (0, mapper_utils_1.getFirstDefinedValue)([(_62 = config.inputType) === null || _62 === void 0 ? void 0 : _62.readOnly, (_63 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _63 === void 0 ? void 0 : _63.readOnly]),
                    placeholder: ((_64 = config.inputType) === null || _64 === void 0 ? void 0 : _64.placeholder) || ((_65 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _65 === void 0 ? void 0 : _65.placeholder),
                    defaultValue: defaultStringValue,
                },
                valueMappings: mergeValueMappings((_66 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _66 === void 0 ? void 0 : _66.valueMappings, (_67 = config.inputType) === null || _67 === void 0 ? void 0 : _67.valueMappings),
            };
            break;
        case 'StorageField':
            formDefinitionElement = {
                componentType: 'StorageField',
                props: {
                    label: config.label || (baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.label) || defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.label,
                    descriptiveText: (_69 = (_68 = config.inputType) === null || _68 === void 0 ? void 0 : _68.descriptiveText) !== null && _69 !== void 0 ? _69 : (_70 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _70 === void 0 ? void 0 : _70.descriptiveText,
                    isRequired: isRequiredValue,
                    isReadOnly: (0, mapper_utils_1.getFirstDefinedValue)([(_71 = config.inputType) === null || _71 === void 0 ? void 0 : _71.readOnly, (_72 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _72 === void 0 ? void 0 : _72.readOnly]),
                    defaultValue: defaultStringValue,
                    accessLevel: (0, mapper_utils_1.getFirstDefinedValue)([
                        (_74 = (_73 = config.inputType) === null || _73 === void 0 ? void 0 : _73.fileUploaderConfig) === null || _74 === void 0 ? void 0 : _74.accessLevel,
                        (_76 = (_75 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _75 === void 0 ? void 0 : _75.fileUploaderConfig) === null || _76 === void 0 ? void 0 : _76.accessLevel,
                        defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.fileUploaderConfig.accessLevel,
                    ]),
                    acceptedFileTypes: (0, mapper_utils_1.getFirstDefinedValue)([
                        (_78 = (_77 = config.inputType) === null || _77 === void 0 ? void 0 : _77.fileUploaderConfig) === null || _78 === void 0 ? void 0 : _78.acceptedFileTypes,
                        (_80 = (_79 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _79 === void 0 ? void 0 : _79.fileUploaderConfig) === null || _80 === void 0 ? void 0 : _80.acceptedFileTypes,
                        defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.fileUploaderConfig.acceptedFileTypes,
                    ]),
                    isResumable: (0, mapper_utils_1.getFirstDefinedValue)([
                        (_82 = (_81 = config.inputType) === null || _81 === void 0 ? void 0 : _81.fileUploaderConfig) === null || _82 === void 0 ? void 0 : _82.isResumable,
                        (_84 = (_83 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _83 === void 0 ? void 0 : _83.fileUploaderConfig) === null || _84 === void 0 ? void 0 : _84.isResumable,
                        defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.fileUploaderConfig.isResumable,
                    ]),
                    showThumbnails: (0, mapper_utils_1.getFirstDefinedValue)([
                        (_86 = (_85 = config.inputType) === null || _85 === void 0 ? void 0 : _85.fileUploaderConfig) === null || _86 === void 0 ? void 0 : _86.showThumbnails,
                        (_88 = (_87 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _87 === void 0 ? void 0 : _87.fileUploaderConfig) === null || _88 === void 0 ? void 0 : _88.showThumbnails,
                        defaults_1.FORM_DEFINITION_DEFAULTS.field.inputType.fileUploaderConfig.showThumbnails,
                    ]),
                    maxFileCount: (0, mapper_utils_1.getFirstDefinedValue)([
                        (_90 = (_89 = config.inputType) === null || _89 === void 0 ? void 0 : _89.fileUploaderConfig) === null || _90 === void 0 ? void 0 : _90.maxFileCount,
                        (_92 = (_91 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _91 === void 0 ? void 0 : _91.fileUploaderConfig) === null || _92 === void 0 ? void 0 : _92.maxFileCount,
                    ]),
                    maxSize: (0, mapper_utils_1.getFirstDefinedValue)([
                        (_94 = (_93 = config.inputType) === null || _93 === void 0 ? void 0 : _93.fileUploaderConfig) === null || _94 === void 0 ? void 0 : _94.maxSize,
                        (_96 = (_95 = baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.inputType) === null || _95 === void 0 ? void 0 : _95.fileUploaderConfig) === null || _96 === void 0 ? void 0 : _96.maxSize,
                    ]),
                },
            };
            break;
        default:
            throw new errors_1.InvalidInputError(`componentType ${componentType} could not be mapped`);
    }
    const mergedValidations = getMergedValidations(componentType, [baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.validations, config === null || config === void 0 ? void 0 : config.validations], isRequiredValue, (_97 = config === null || config === void 0 ? void 0 : config.dataType) !== null && _97 !== void 0 ? _97 : baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.dataType);
    formDefinitionElement.validations = mergedValidations;
    formDefinitionElement.dataType = (config === null || config === void 0 ? void 0 : config.dataType) || (baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.dataType);
    formDefinitionElement.isArray = baseConfig ? (_98 = baseConfig.inputType) === null || _98 === void 0 ? void 0 : _98.isArray : (_99 = config.inputType) === null || _99 === void 0 ? void 0 : _99.isArray;
    formDefinitionElement.relationship = (_100 = config.relationship) !== null && _100 !== void 0 ? _100 : baseConfig === null || baseConfig === void 0 ? void 0 : baseConfig.relationship;
    (0, mapper_utils_1.deleteUndefined)(formDefinitionElement);
    (0, mapper_utils_1.deleteUndefined)(formDefinitionElement.props);
    return formDefinitionElement;
}
exports.getFormDefinitionInputElement = getFormDefinitionInputElement;
/**
 * Impure function that adds field configurations to formDefinition
 */
/* eslint-disable no-param-reassign */
function mapFormFieldConfig(element, formDefinition, modelFieldsConfigs) {
    if (typeof element.config === 'object' && 'excluded' in element.config) {
        throw new errors_1.InternalError(`Attempted to map excluded element ${element.name}`);
    }
    formDefinition.elements[element.name] = getFormDefinitionInputElement(element.config, modelFieldsConfigs[element.name]);
}
exports.mapFormFieldConfig = mapFormFieldConfig;
/* eslint-enable no-param-reassign */
//# sourceMappingURL=form-field.js.map