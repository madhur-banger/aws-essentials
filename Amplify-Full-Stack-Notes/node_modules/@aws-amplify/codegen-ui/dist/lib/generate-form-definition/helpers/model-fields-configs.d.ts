import { FieldTypeMapKeys, FormDefinition, FormFeatureFlags, GenericDataField, GenericDataSchema, ModelFieldsConfigs, StudioForm } from '../../types';
import { ExtendedStudioGenericFieldConfig } from '../../types/form/form-definition';
export declare function getFieldTypeMapKey(field: GenericDataField): FieldTypeMapKeys;
export declare function getFieldConfigFromModelField({ dataTypeName, fieldName, field, dataSchema, setReadOnly, featureFlags, }: {
    dataTypeName: string;
    fieldName: string;
    field: GenericDataField;
    dataSchema: GenericDataSchema;
    setReadOnly?: boolean;
    featureFlags: FormFeatureFlags | undefined;
}): ExtendedStudioGenericFieldConfig;
/**
 * Impure function that adds fields from DataStore to temporary util object, modelFieldsConfigs
 * and to the formDefinition
 */
export declare function mapModelFieldsConfigs({ dataTypeName, formDefinition, dataSchema, formActionType, featureFlags, }: {
    dataTypeName: string;
    dataSchema: GenericDataSchema;
    formDefinition: FormDefinition;
    formActionType?: StudioForm['formActionType'];
    featureFlags?: FormFeatureFlags;
}): ModelFieldsConfigs;
//# sourceMappingURL=model-fields-configs.d.ts.map