"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapButtons = void 0;
function getButtonElement(key, formActionType, override) {
    const resetLabel = formActionType === 'create' ? 'Clear' : 'Reset';
    const buttonMap = {
        cancel: {
            name: 'CancelButton',
            type: 'button',
            label: 'Cancel',
        },
        clear: {
            name: `${resetLabel}Button`,
            type: 'reset',
            label: resetLabel,
        },
        submit: {
            name: 'SubmitButton',
            type: 'submit',
            variation: 'primary',
            label: 'Submit',
        },
    };
    const element = {
        name: buttonMap[key].name,
        componentType: 'Button',
        props: {
            children: buttonMap[key].label,
            type: buttonMap[key].type,
        },
    };
    if (typeof override === 'object' && 'children' in override && override.children) {
        element.props.children = override.children;
    }
    if (key === 'submit') {
        element.props.variation = buttonMap[key].variation;
    }
    return element;
}
// TODO: temporary logic. it should take reordering into consideration
function mapMatrix(buttons) {
    const matrix = [['clear'], ['cancel', 'submit']];
    if (!buttons) {
        return matrix;
    }
    return matrix.map((subArray) => {
        return subArray.filter((element) => {
            if (typeof buttons[element] === 'object' &&
                'excluded' in buttons[element] &&
                buttons[element].excluded) {
                return false;
            }
            // remove cancel by default if there is no defined value for it
            if (element === 'cancel' && !(buttons === null || buttons === void 0 ? void 0 : buttons.cancel)) {
                return false;
            }
            return true;
        });
    });
}
function mapButtons(formActionType, buttons) {
    var _a;
    const buttonMapping = {
        position: (_a = buttons === null || buttons === void 0 ? void 0 : buttons.position) !== null && _a !== void 0 ? _a : 'bottom',
        buttonMatrix: mapMatrix(buttons),
        buttonConfigs: {},
    };
    const keys = ['submit', 'cancel', 'clear'];
    keys.forEach((key) => {
        buttonMapping.buttonConfigs[key] = getButtonElement(key, formActionType, buttons === null || buttons === void 0 ? void 0 : buttons[key]);
    });
    return buttonMapping;
}
exports.mapButtons = mapButtons;
//# sourceMappingURL=map-cta.js.map