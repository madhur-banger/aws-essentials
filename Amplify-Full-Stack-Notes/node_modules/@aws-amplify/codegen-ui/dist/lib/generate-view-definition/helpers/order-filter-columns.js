"use strict";
/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.orderAndFilterVisibleColumns = void 0;
const generateNodeMap = (columns, fields) => {
    const map = {};
    fields.forEach((field) => {
        map[field.name] = { value: { header: field.name }, next: null };
    });
    Object.entries(columns).forEach(([id, config]) => {
        const current = {
            value: {
                ...map[id].value,
                ...config,
            },
            next: null,
        };
        map[id] = current;
    });
    return map;
};
const applyDefaultOrdering = (fields, map) => {
    const nodeMap = map;
    for (let i = 1; i < fields.length; i += 1) {
        const prev = fields[i - 1].name;
        const next = fields[i].name;
        nodeMap[prev].next = nodeMap[next];
    }
};
const applyOrderOverride = (map, defaultFirst) => {
    let newFirst = defaultFirst;
    const nodeMap = map;
    Object.values(nodeMap).forEach((node) => {
        var _a, _b;
        const current = node;
        if ((_b = (_a = current.next) === null || _a === void 0 ? void 0 : _a.value.position) === null || _b === void 0 ? void 0 : _b.fixed) {
            // extract first
            newFirst = current.next;
            current.next = current.next.next;
            // push first to front of linked list
            newFirst.next = nodeMap.headOfMap$.next;
            nodeMap.headOfMap$.next = newFirst;
        }
    });
    Object.values(nodeMap).forEach((node) => {
        var _a, _b;
        const current = node;
        const prev = (_b = (_a = current.next) === null || _a === void 0 ? void 0 : _a.value.position) === null || _b === void 0 ? void 0 : _b.rightOf;
        if (prev && current.next) {
            const toMove = current.next;
            current.next = toMove.next;
            toMove.next = nodeMap[prev].next;
            nodeMap[prev].next = toMove;
        }
    });
};
const traverseAndCollectVisible = (first) => {
    const ordered = [];
    let current = first;
    while (current) {
        if (!current.value.excluded) {
            ordered.push(current.value);
        }
        current = current.next;
    }
    return ordered;
};
const orderAndFilterVisibleColumns = (columns, fields) => {
    let ordered = [];
    if (fields && fields.length > 0) {
        const map = generateNodeMap(columns, fields);
        applyDefaultOrdering(fields, map);
        const defaultFirst = map[fields[0].name];
        const mapWithHead = {
            headOfMap$: {
                value: { header: '' },
                next: defaultFirst,
            },
            ...map,
        };
        applyOrderOverride(mapWithHead, defaultFirst);
        ordered = traverseAndCollectVisible(mapWithHead.headOfMap$.next);
    }
    // Spec for custom table generated from JSON is not defined yet.
    // Thus, said table shape is currently unhandled
    // TODO: Handle JSON-generated table after the spec is defined
    return ordered;
};
exports.orderAndFilterVisibleColumns = orderAndFilterVisibleColumns;
//# sourceMappingURL=order-filter-columns.js.map