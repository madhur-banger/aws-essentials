import { createLocalGraphqlFormGenerator } from '@aws-amplify/form-generator';
import { createGraphqlDocumentGenerator } from '@aws-amplify/model-generator';
import { printer } from '@aws-amplify/cli-core';
/**
 * Creates a handler for FormGeneration
 */
export class FormGenerationHandler {
    formGenParams;
    /**
     * Instantiates the handler
     */
    constructor(formGenParams) {
        this.formGenParams = formGenParams;
    }
    generate = async (params) => {
        const { backendIdentifier, modelsOutDir, uiOutDir, apiUrl, modelsFilter } = params;
        const { awsClientProvider } = this.formGenParams;
        const graphqlClientGenerator = createGraphqlDocumentGenerator({
            backendIdentifier,
            awsClientProvider,
        });
        const modelsResult = await graphqlClientGenerator.generateModels({
            targetFormat: 'typescript',
        });
        const { filesWritten: modelsFilesWritten } = await modelsResult.writeToDirectory(modelsOutDir);
        this.logMessages(modelsFilesWritten);
        const localFormGenerator = createLocalGraphqlFormGenerator({
            introspectionSchemaUrl: apiUrl,
            graphqlModelDirectoryPath: './graphql',
        });
        const result = await localFormGenerator.generateForms({
            models: modelsFilter,
        });
        const { filesWritten: uiFilesWritten } = await result.writeToDirectory(uiOutDir);
        this.logMessages(uiFilesWritten);
    };
    logMessages = (filesWritten) => {
        filesWritten.forEach((file) => {
            printer.log(`File written: ${file}`);
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybV9nZW5lcmF0aW9uX2hhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZm9ybS1nZW5lcmF0aW9uL2Zvcm1fZ2VuZXJhdGlvbl9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzlFLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRTlFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQWtCaEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8scUJBQXFCO0lBSUg7SUFIN0I7O09BRUc7SUFDSCxZQUE2QixhQUE0QztRQUE1QyxrQkFBYSxHQUFiLGFBQWEsQ0FBK0I7SUFBRyxDQUFDO0lBQzdFLFFBQVEsR0FBRyxLQUFLLEVBQUUsTUFBNEIsRUFBRSxFQUFFO1FBQ2hELE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsR0FDdkUsTUFBTSxDQUFDO1FBQ1QsTUFBTSxFQUFFLGlCQUFpQixFQUFFLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUNqRCxNQUFNLHNCQUFzQixHQUFHLDhCQUE4QixDQUFDO1lBQzVELGlCQUFpQjtZQUNqQixpQkFBaUI7U0FDbEIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxZQUFZLEdBQUcsTUFBTSxzQkFBc0IsQ0FBQyxjQUFjLENBQUM7WUFDL0QsWUFBWSxFQUFFLFlBQVk7U0FDM0IsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxFQUFFLFlBQVksRUFBRSxrQkFBa0IsRUFBRSxHQUN4QyxNQUFNLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFFckMsTUFBTSxrQkFBa0IsR0FBRywrQkFBK0IsQ0FBQztZQUN6RCxzQkFBc0IsRUFBRSxNQUFNO1lBQzlCLHlCQUF5QixFQUFFLFdBQVc7U0FDdkMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxNQUFNLEdBQUcsTUFBTSxrQkFBa0IsQ0FBQyxhQUFhLENBQUM7WUFDcEQsTUFBTSxFQUFFLFlBQVk7U0FDckIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsR0FBRyxNQUFNLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FDcEUsUUFBUSxDQUNULENBQUM7UUFDRixJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQztJQUVNLFdBQVcsR0FBRyxDQUFDLFlBQXNCLEVBQUUsRUFBRTtRQUMvQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlTG9jYWxHcmFwaHFsRm9ybUdlbmVyYXRvciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9mb3JtLWdlbmVyYXRvcic7XG5pbXBvcnQgeyBjcmVhdGVHcmFwaHFsRG9jdW1lbnRHZW5lcmF0b3IgfSBmcm9tICdAYXdzLWFtcGxpZnkvbW9kZWwtZ2VuZXJhdG9yJztcbmltcG9ydCB7IERlcGxveWVkQmFja2VuZElkZW50aWZpZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvZGVwbG95ZWQtYmFja2VuZC1jbGllbnQnO1xuaW1wb3J0IHsgcHJpbnRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5pbXBvcnQgeyBBV1NDbGllbnRQcm92aWRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgQW1wbGlmeUNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1hbXBsaWZ5JztcbmltcG9ydCB7IENsb3VkRm9ybWF0aW9uQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3VkZm9ybWF0aW9uJztcblxudHlwZSBGb3JtR2VuZXJhdGlvblBhcmFtcyA9IHtcbiAgbW9kZWxzT3V0RGlyOiBzdHJpbmc7XG4gIHVpT3V0RGlyOiBzdHJpbmc7XG4gIGFwaVVybDogc3RyaW5nO1xuICBiYWNrZW5kSWRlbnRpZmllcjogRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllcjtcbiAgbW9kZWxzRmlsdGVyPzogc3RyaW5nW107XG59O1xudHlwZSBGb3JtR2VuZXJhdGlvbkluc3RhbmNlT3B0aW9ucyA9IHtcbiAgYXdzQ2xpZW50UHJvdmlkZXI6IEFXU0NsaWVudFByb3ZpZGVyPHtcbiAgICBnZXRBbXBsaWZ5Q2xpZW50OiBBbXBsaWZ5Q2xpZW50O1xuICAgIGdldENsb3VkRm9ybWF0aW9uQ2xpZW50OiBDbG91ZEZvcm1hdGlvbkNsaWVudDtcbiAgfT47XG59O1xuLyoqXG4gKiBDcmVhdGVzIGEgaGFuZGxlciBmb3IgRm9ybUdlbmVyYXRpb25cbiAqL1xuZXhwb3J0IGNsYXNzIEZvcm1HZW5lcmF0aW9uSGFuZGxlciB7XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZXMgdGhlIGhhbmRsZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZm9ybUdlblBhcmFtczogRm9ybUdlbmVyYXRpb25JbnN0YW5jZU9wdGlvbnMpIHt9XG4gIGdlbmVyYXRlID0gYXN5bmMgKHBhcmFtczogRm9ybUdlbmVyYXRpb25QYXJhbXMpID0+IHtcbiAgICBjb25zdCB7IGJhY2tlbmRJZGVudGlmaWVyLCBtb2RlbHNPdXREaXIsIHVpT3V0RGlyLCBhcGlVcmwsIG1vZGVsc0ZpbHRlciB9ID1cbiAgICAgIHBhcmFtcztcbiAgICBjb25zdCB7IGF3c0NsaWVudFByb3ZpZGVyIH0gPSB0aGlzLmZvcm1HZW5QYXJhbXM7XG4gICAgY29uc3QgZ3JhcGhxbENsaWVudEdlbmVyYXRvciA9IGNyZWF0ZUdyYXBocWxEb2N1bWVudEdlbmVyYXRvcih7XG4gICAgICBiYWNrZW5kSWRlbnRpZmllcixcbiAgICAgIGF3c0NsaWVudFByb3ZpZGVyLFxuICAgIH0pO1xuICAgIGNvbnN0IG1vZGVsc1Jlc3VsdCA9IGF3YWl0IGdyYXBocWxDbGllbnRHZW5lcmF0b3IuZ2VuZXJhdGVNb2RlbHMoe1xuICAgICAgdGFyZ2V0Rm9ybWF0OiAndHlwZXNjcmlwdCcsXG4gICAgfSk7XG4gICAgY29uc3QgeyBmaWxlc1dyaXR0ZW46IG1vZGVsc0ZpbGVzV3JpdHRlbiB9ID1cbiAgICAgIGF3YWl0IG1vZGVsc1Jlc3VsdC53cml0ZVRvRGlyZWN0b3J5KG1vZGVsc091dERpcik7XG4gICAgdGhpcy5sb2dNZXNzYWdlcyhtb2RlbHNGaWxlc1dyaXR0ZW4pO1xuXG4gICAgY29uc3QgbG9jYWxGb3JtR2VuZXJhdG9yID0gY3JlYXRlTG9jYWxHcmFwaHFsRm9ybUdlbmVyYXRvcih7XG4gICAgICBpbnRyb3NwZWN0aW9uU2NoZW1hVXJsOiBhcGlVcmwsXG4gICAgICBncmFwaHFsTW9kZWxEaXJlY3RvcnlQYXRoOiAnLi9ncmFwaHFsJyxcbiAgICB9KTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBsb2NhbEZvcm1HZW5lcmF0b3IuZ2VuZXJhdGVGb3Jtcyh7XG4gICAgICBtb2RlbHM6IG1vZGVsc0ZpbHRlcixcbiAgICB9KTtcbiAgICBjb25zdCB7IGZpbGVzV3JpdHRlbjogdWlGaWxlc1dyaXR0ZW4gfSA9IGF3YWl0IHJlc3VsdC53cml0ZVRvRGlyZWN0b3J5KFxuICAgICAgdWlPdXREaXJcbiAgICApO1xuICAgIHRoaXMubG9nTWVzc2FnZXModWlGaWxlc1dyaXR0ZW4pO1xuICB9O1xuXG4gIHByaXZhdGUgbG9nTWVzc2FnZXMgPSAoZmlsZXNXcml0dGVuOiBzdHJpbmdbXSkgPT4ge1xuICAgIGZpbGVzV3JpdHRlbi5mb3JFYWNoKChmaWxlKSA9PiB7XG4gICAgICBwcmludGVyLmxvZyhgRmlsZSB3cml0dGVuOiAke2ZpbGV9YCk7XG4gICAgfSk7XG4gIH07XG59XG4iXX0=