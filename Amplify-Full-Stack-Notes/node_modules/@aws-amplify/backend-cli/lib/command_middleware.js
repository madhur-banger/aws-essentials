import { fromNodeProviderChain } from '@aws-sdk/credential-providers';
import { loadConfig } from '@smithy/node-config-provider';
import { NODE_REGION_CONFIG_OPTIONS } from '@aws-sdk/region-config-resolver';
import { AmplifyUserError } from '@aws-amplify/platform-core';
import { format } from '@aws-amplify/cli-core';
/**
 * Contains middleware functions.
 */
export class CommandMiddleware {
    printer;
    /**
     * Creates command middleware.
     */
    constructor(printer) {
        this.printer = printer;
    }
    /**
     * Ensure AWS credentials and region of the input profile (or 'default' if undefined) are available in the provider chain.
     * If the input profile is defined, the environment variable AWS_PROFILE will be set accordingly.
     */
    ensureAwsCredentialAndRegion = async (argv) => {
        /**
         * The AWS CDK respects older CLI v1 variable names that are no longer supported in the
         * latest AWS SDK. Developers that use the older variables and switch between Amplify
         * and CDK tools will experience region mismatch failures when using Amplify tools. Variable
         * names known to cause such failures are mapped here for a better developer experience.
         */
        this.mapEnvironmentVariables('AWS_DEFAULT_REGION', 'AWS_REGION');
        this.mapEnvironmentVariables('AWS_DEFAULT_PROFILE', 'AWS_PROFILE');
        if (argv.profile) {
            process.env.AWS_PROFILE = argv.profile;
        }
        const profileSetupInstruction = `To configure a new Amplify profile, use ${format.normalizeAmpxCommand('configure profile')}.`;
        // Check credentials.
        try {
            await fromNodeProviderChain({
                ignoreCache: true,
            })();
        }
        catch (err) {
            const errorMessage = argv.profile
                ? `Failed to load AWS credentials for profile '${argv.profile}'`
                : 'Failed to load default AWS credentials';
            throw new AmplifyUserError('InvalidCredentialError', {
                message: errorMessage,
                resolution: profileSetupInstruction,
            }, err);
        }
        // Check region.
        try {
            await loadConfig(NODE_REGION_CONFIG_OPTIONS, {
                ignoreCache: true,
            })();
        }
        catch (err) {
            const errorMessage = argv.profile
                ? `Failed to load AWS region for profile '${argv.profile}'`
                : 'Failed to load default AWS region';
            throw new AmplifyUserError('InvalidCredentialError', {
                message: errorMessage,
                resolution: profileSetupInstruction,
            }, err);
        }
    };
    /**
     * Maps one environment variable name to the other
     */
    mapEnvironmentVariables(legacyName, preferredName) {
        if (!process.env[legacyName]) {
            return;
        }
        if (process.env[preferredName]) {
            this.printer.log(`Both the legacy '${legacyName}' and preferred '${preferredName}' environment variables detected. Using '${preferredName}'`);
            return;
        }
        this.printer.log(`Legacy environment variable '${legacyName}' detected. Mapping to '${preferredName}'`);
        process.env[preferredName] = process.env[legacyName];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9taWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1hbmRfbWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDMUQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDN0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDOUQsT0FBTyxFQUFXLE1BQU0sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXhEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGlCQUFpQjtJQUlDO0lBSDdCOztPQUVHO0lBQ0gsWUFBNkIsT0FBZ0I7UUFBaEIsWUFBTyxHQUFQLE9BQU8sQ0FBUztJQUFHLENBQUM7SUFFakQ7OztPQUdHO0lBQ0gsNEJBQTRCLEdBQUcsS0FBSyxFQUdsQyxJQUEyQixFQUMzQixFQUFFO1FBQ0Y7Ozs7O1dBS0c7UUFDSCxJQUFJLENBQUMsdUJBQXVCLENBQUMsb0JBQW9CLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLHFCQUFxQixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRW5FLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ3hDO1FBRUQsTUFBTSx1QkFBdUIsR0FBRywyQ0FBMkMsTUFBTSxDQUFDLG9CQUFvQixDQUNwRyxtQkFBbUIsQ0FDcEIsR0FBRyxDQUFDO1FBRUwscUJBQXFCO1FBQ3JCLElBQUk7WUFDRixNQUFNLHFCQUFxQixDQUFDO2dCQUMxQixXQUFXLEVBQUUsSUFBSTthQUNsQixDQUFDLEVBQUUsQ0FBQztTQUNOO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTztnQkFDL0IsQ0FBQyxDQUFDLCtDQUErQyxJQUFJLENBQUMsT0FBTyxHQUFHO2dCQUNoRSxDQUFDLENBQUMsd0NBQXdDLENBQUM7WUFDN0MsTUFBTSxJQUFJLGdCQUFnQixDQUN4Qix3QkFBd0IsRUFDeEI7Z0JBQ0UsT0FBTyxFQUFFLFlBQVk7Z0JBQ3JCLFVBQVUsRUFBRSx1QkFBdUI7YUFDcEMsRUFDRCxHQUFZLENBQ2IsQ0FBQztTQUNIO1FBRUQsZ0JBQWdCO1FBQ2hCLElBQUk7WUFDRixNQUFNLFVBQVUsQ0FBQywwQkFBMEIsRUFBRTtnQkFDM0MsV0FBVyxFQUFFLElBQUk7YUFDbEIsQ0FBQyxFQUFFLENBQUM7U0FDTjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU87Z0JBQy9CLENBQUMsQ0FBQywwQ0FBMEMsSUFBSSxDQUFDLE9BQU8sR0FBRztnQkFDM0QsQ0FBQyxDQUFDLG1DQUFtQyxDQUFDO1lBQ3hDLE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsd0JBQXdCLEVBQ3hCO2dCQUNFLE9BQU8sRUFBRSxZQUFZO2dCQUNyQixVQUFVLEVBQUUsdUJBQXVCO2FBQ3BDLEVBQ0QsR0FBWSxDQUNiLENBQUM7U0FDSDtJQUNILENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0ssdUJBQXVCLENBQzdCLFVBQWtCLEVBQ2xCLGFBQXFCO1FBRXJCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzVCLE9BQU87U0FDUjtRQUNELElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUM5QixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FDZCxvQkFBb0IsVUFBVSxvQkFBb0IsYUFBYSw0Q0FBNEMsYUFBYSxHQUFHLENBQzVILENBQUM7WUFDRixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FDZCxnQ0FBZ0MsVUFBVSwyQkFBMkIsYUFBYSxHQUFHLENBQ3RGLENBQUM7UUFDRixPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdkQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJndW1lbnRzQ2FtZWxDYXNlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgZnJvbU5vZGVQcm92aWRlckNoYWluIH0gZnJvbSAnQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlcnMnO1xuaW1wb3J0IHsgbG9hZENvbmZpZyB9IGZyb20gJ0BzbWl0aHkvbm9kZS1jb25maWctcHJvdmlkZXInO1xuaW1wb3J0IHsgTk9ERV9SRUdJT05fQ09ORklHX09QVElPTlMgfSBmcm9tICdAYXdzLXNkay9yZWdpb24tY29uZmlnLXJlc29sdmVyJztcbmltcG9ydCB7IEFtcGxpZnlVc2VyRXJyb3IgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBQcmludGVyLCBmb3JtYXQgfSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuXG4vKipcbiAqIENvbnRhaW5zIG1pZGRsZXdhcmUgZnVuY3Rpb25zLlxuICovXG5leHBvcnQgY2xhc3MgQ29tbWFuZE1pZGRsZXdhcmUge1xuICAvKipcbiAgICogQ3JlYXRlcyBjb21tYW5kIG1pZGRsZXdhcmUuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHByaW50ZXI6IFByaW50ZXIpIHt9XG5cbiAgLyoqXG4gICAqIEVuc3VyZSBBV1MgY3JlZGVudGlhbHMgYW5kIHJlZ2lvbiBvZiB0aGUgaW5wdXQgcHJvZmlsZSAob3IgJ2RlZmF1bHQnIGlmIHVuZGVmaW5lZCkgYXJlIGF2YWlsYWJsZSBpbiB0aGUgcHJvdmlkZXIgY2hhaW4uXG4gICAqIElmIHRoZSBpbnB1dCBwcm9maWxlIGlzIGRlZmluZWQsIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSBBV1NfUFJPRklMRSB3aWxsIGJlIHNldCBhY2NvcmRpbmdseS5cbiAgICovXG4gIGVuc3VyZUF3c0NyZWRlbnRpYWxBbmRSZWdpb24gPSBhc3luYyA8XG4gICAgVCBleHRlbmRzIHsgcHJvZmlsZTogc3RyaW5nIHwgdW5kZWZpbmVkIH1cbiAgPihcbiAgICBhcmd2OiBBcmd1bWVudHNDYW1lbENhc2U8VD5cbiAgKSA9PiB7XG4gICAgLyoqXG4gICAgICogVGhlIEFXUyBDREsgcmVzcGVjdHMgb2xkZXIgQ0xJIHYxIHZhcmlhYmxlIG5hbWVzIHRoYXQgYXJlIG5vIGxvbmdlciBzdXBwb3J0ZWQgaW4gdGhlXG4gICAgICogbGF0ZXN0IEFXUyBTREsuIERldmVsb3BlcnMgdGhhdCB1c2UgdGhlIG9sZGVyIHZhcmlhYmxlcyBhbmQgc3dpdGNoIGJldHdlZW4gQW1wbGlmeVxuICAgICAqIGFuZCBDREsgdG9vbHMgd2lsbCBleHBlcmllbmNlIHJlZ2lvbiBtaXNtYXRjaCBmYWlsdXJlcyB3aGVuIHVzaW5nIEFtcGxpZnkgdG9vbHMuIFZhcmlhYmxlXG4gICAgICogbmFtZXMga25vd24gdG8gY2F1c2Ugc3VjaCBmYWlsdXJlcyBhcmUgbWFwcGVkIGhlcmUgZm9yIGEgYmV0dGVyIGRldmVsb3BlciBleHBlcmllbmNlLlxuICAgICAqL1xuICAgIHRoaXMubWFwRW52aXJvbm1lbnRWYXJpYWJsZXMoJ0FXU19ERUZBVUxUX1JFR0lPTicsICdBV1NfUkVHSU9OJyk7XG4gICAgdGhpcy5tYXBFbnZpcm9ubWVudFZhcmlhYmxlcygnQVdTX0RFRkFVTFRfUFJPRklMRScsICdBV1NfUFJPRklMRScpO1xuXG4gICAgaWYgKGFyZ3YucHJvZmlsZSkge1xuICAgICAgcHJvY2Vzcy5lbnYuQVdTX1BST0ZJTEUgPSBhcmd2LnByb2ZpbGU7XG4gICAgfVxuXG4gICAgY29uc3QgcHJvZmlsZVNldHVwSW5zdHJ1Y3Rpb24gPSBgVG8gY29uZmlndXJlIGEgbmV3IEFtcGxpZnkgcHJvZmlsZSwgdXNlICR7Zm9ybWF0Lm5vcm1hbGl6ZUFtcHhDb21tYW5kKFxuICAgICAgJ2NvbmZpZ3VyZSBwcm9maWxlJ1xuICAgICl9LmA7XG5cbiAgICAvLyBDaGVjayBjcmVkZW50aWFscy5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgZnJvbU5vZGVQcm92aWRlckNoYWluKHtcbiAgICAgICAgaWdub3JlQ2FjaGU6IHRydWUsXG4gICAgICB9KSgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYXJndi5wcm9maWxlXG4gICAgICAgID8gYEZhaWxlZCB0byBsb2FkIEFXUyBjcmVkZW50aWFscyBmb3IgcHJvZmlsZSAnJHthcmd2LnByb2ZpbGV9J2BcbiAgICAgICAgOiAnRmFpbGVkIHRvIGxvYWQgZGVmYXVsdCBBV1MgY3JlZGVudGlhbHMnO1xuICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICdJbnZhbGlkQ3JlZGVudGlhbEVycm9yJyxcbiAgICAgICAge1xuICAgICAgICAgIG1lc3NhZ2U6IGVycm9yTWVzc2FnZSxcbiAgICAgICAgICByZXNvbHV0aW9uOiBwcm9maWxlU2V0dXBJbnN0cnVjdGlvbixcbiAgICAgICAgfSxcbiAgICAgICAgZXJyIGFzIEVycm9yXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIENoZWNrIHJlZ2lvbi5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgbG9hZENvbmZpZyhOT0RFX1JFR0lPTl9DT05GSUdfT1BUSU9OUywge1xuICAgICAgICBpZ25vcmVDYWNoZTogdHJ1ZSxcbiAgICAgIH0pKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBhcmd2LnByb2ZpbGVcbiAgICAgICAgPyBgRmFpbGVkIHRvIGxvYWQgQVdTIHJlZ2lvbiBmb3IgcHJvZmlsZSAnJHthcmd2LnByb2ZpbGV9J2BcbiAgICAgICAgOiAnRmFpbGVkIHRvIGxvYWQgZGVmYXVsdCBBV1MgcmVnaW9uJztcbiAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAnSW52YWxpZENyZWRlbnRpYWxFcnJvcicsXG4gICAgICAgIHtcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgcmVzb2x1dGlvbjogcHJvZmlsZVNldHVwSW5zdHJ1Y3Rpb24sXG4gICAgICAgIH0sXG4gICAgICAgIGVyciBhcyBFcnJvclxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIE1hcHMgb25lIGVudmlyb25tZW50IHZhcmlhYmxlIG5hbWUgdG8gdGhlIG90aGVyXG4gICAqL1xuICBwcml2YXRlIG1hcEVudmlyb25tZW50VmFyaWFibGVzKFxuICAgIGxlZ2FjeU5hbWU6IHN0cmluZyxcbiAgICBwcmVmZXJyZWROYW1lOiBzdHJpbmdcbiAgKTogdm9pZCB7XG4gICAgaWYgKCFwcm9jZXNzLmVudltsZWdhY3lOYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnZbcHJlZmVycmVkTmFtZV0pIHtcbiAgICAgIHRoaXMucHJpbnRlci5sb2coXG4gICAgICAgIGBCb3RoIHRoZSBsZWdhY3kgJyR7bGVnYWN5TmFtZX0nIGFuZCBwcmVmZXJyZWQgJyR7cHJlZmVycmVkTmFtZX0nIGVudmlyb25tZW50IHZhcmlhYmxlcyBkZXRlY3RlZC4gVXNpbmcgJyR7cHJlZmVycmVkTmFtZX0nYFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5wcmludGVyLmxvZyhcbiAgICAgIGBMZWdhY3kgZW52aXJvbm1lbnQgdmFyaWFibGUgJyR7bGVnYWN5TmFtZX0nIGRldGVjdGVkLiBNYXBwaW5nIHRvICcke3ByZWZlcnJlZE5hbWV9J2BcbiAgICApO1xuICAgIHByb2Nlc3MuZW52W3ByZWZlcnJlZE5hbWVdID0gcHJvY2Vzcy5lbnZbbGVnYWN5TmFtZV07XG4gIH1cbn1cbiJdfQ==