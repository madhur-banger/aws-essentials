import { Argv } from 'yargs';
import { UsageDataEmitter } from '@aws-amplify/platform-core';
/**
 * Attaches process listeners to handle unhandled exceptions and rejections
 */
export declare const attachUnhandledExceptionListeners: (usageDataEmitter: UsageDataEmitter) => void;
/**
 * Generates a function that is intended to be used as a callback to yargs.fail()
 * All logic for actually handling errors should be delegated to handleError.
 *
 * For some reason the yargs object that is injected into the fail callback does not include all methods on the Argv type
 * This generator allows us to inject the yargs parser into the callback so that we can call parser.exit() from the failure handler
 * This prevents our top-level error handler from being invoked after the yargs error handler has already been invoked
 */
export declare const generateCommandFailureHandler: (parser: Argv, usageDataEmitter?: UsageDataEmitter) => (message: string, error: Error) => Promise<void>;
//# sourceMappingURL=error_handler.d.ts.map