import { SandboxBackendIdResolver } from '../commands/sandbox/sandbox_id_resolver.js';
import { BackendIdentifierParameters, BackendIdentifierResolver } from './backend_identifier_resolver.js';
/**
 * Resolves the backend id when branch or stack is passed as an arg, otherwise returns a sandbox backend identifier
 */
export declare class BackendIdentifierResolverWithFallback implements BackendIdentifierResolver {
    private defaultResolver;
    private fallbackResolver;
    /**
     * Accepts the sandbox id resolver as a parameter
     */
    constructor(defaultResolver: BackendIdentifierResolver, fallbackResolver: SandboxBackendIdResolver);
    /**
     * resolves to deployed backend id, falling back to the sandbox id if stack or appId and branch inputs are not provided
     */
    resolveDeployedBackendIdentifier: (args: BackendIdentifierParameters) => Promise<{
        namespace: string;
        name: string;
        type: "branch";
        hash?: string | undefined;
    } | {
        namespace: string;
        name: string;
        type: "sandbox";
        hash?: string | undefined;
    } | import("@aws-amplify/deployed-backend-client").StackIdentifier | import("@aws-amplify/deployed-backend-client").AppNameAndBranchBackendIdentifier | undefined>;
    /**
     * Resolves deployed backend id to backend id, falling back to the sandbox id if stack or appId and branch inputs are not provided
     */
    resolveBackendIdentifier: (args: BackendIdentifierParameters) => Promise<import("@aws-amplify/plugin-types").BackendIdentifier | undefined>;
}
//# sourceMappingURL=backend_identifier_with_sandbox_fallback.d.ts.map