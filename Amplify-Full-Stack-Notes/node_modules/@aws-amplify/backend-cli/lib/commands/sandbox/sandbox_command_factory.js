import { fileURLToPath } from 'node:url';
import { SandboxCommand, } from './sandbox_command.js';
import { SandboxSingletonFactory } from '@aws-amplify/sandbox';
import { SandboxDeleteCommand } from './sandbox-delete/sandbox_delete_command.js';
import { SandboxBackendIdResolver } from './sandbox_id_resolver.js';
import { ClientConfigGeneratorAdapter } from '../../client-config/client_config_generator_adapter.js';
import { LocalNamespaceResolver } from '../../backend-identifier/local_namespace_resolver.js';
import { createSandboxSecretCommand } from './sandbox-secret/sandbox_secret_command_factory.js';
import { PackageJsonReader, UsageDataEmitterFactory, } from '@aws-amplify/platform-core';
import { SandboxEventHandlerFactory } from './sandbox_event_handler_factory.js';
import { CommandMiddleware } from '../../command_middleware.js';
import { PackageManagerControllerFactory, format, printer, } from '@aws-amplify/cli-core';
import { S3Client } from '@aws-sdk/client-s3';
import { AmplifyClient } from '@aws-sdk/client-amplify';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
/**
 * Creates wired sandbox command.
 */
export const createSandboxCommand = () => {
    const sandboxBackendIdPartsResolver = new SandboxBackendIdResolver(new LocalNamespaceResolver(new PackageJsonReader()));
    const sandboxFactory = new SandboxSingletonFactory(sandboxBackendIdPartsResolver.resolve, printer, format);
    const s3Client = new S3Client();
    const amplifyClient = new AmplifyClient();
    const cloudFormationClient = new CloudFormationClient();
    const awsClientProvider = {
        getS3Client: () => s3Client,
        getAmplifyClient: () => amplifyClient,
        getCloudFormationClient: () => cloudFormationClient,
    };
    const clientConfigGeneratorAdapter = new ClientConfigGeneratorAdapter(awsClientProvider);
    const libraryVersion = new PackageJsonReader().read(fileURLToPath(new URL('../../../package.json', import.meta.url))).version ?? '';
    const eventHandlerFactory = new SandboxEventHandlerFactory(sandboxBackendIdPartsResolver.resolve, async () => await new UsageDataEmitterFactory().getInstance(libraryVersion));
    const commandMiddleWare = new CommandMiddleware(printer);
    return new SandboxCommand(sandboxFactory, [new SandboxDeleteCommand(sandboxFactory), createSandboxSecretCommand()], clientConfigGeneratorAdapter, commandMiddleWare, new PackageManagerControllerFactory().getPackageManagerController(), eventHandlerFactory.getSandboxEventHandlers);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9jb21tYW5kX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94X2NvbW1hbmRfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3pDLE9BQU8sRUFDTCxjQUFjLEdBRWYsTUFBTSxzQkFBc0IsQ0FBQztBQUM5QixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNsRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUN0RyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUM5RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUNoRyxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLHVCQUF1QixHQUN4QixNQUFNLDRCQUE0QixDQUFDO0FBQ3BDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2hFLE9BQU8sRUFDTCwrQkFBK0IsRUFDL0IsTUFBTSxFQUNOLE9BQU8sR0FDUixNQUFNLHVCQUF1QixDQUFDO0FBQy9CLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDeEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFdEU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxHQUdsQyxFQUFFO0lBQ0YsTUFBTSw2QkFBNkIsR0FBRyxJQUFJLHdCQUF3QixDQUNoRSxJQUFJLHNCQUFzQixDQUFDLElBQUksaUJBQWlCLEVBQUUsQ0FBQyxDQUNwRCxDQUFDO0lBRUYsTUFBTSxjQUFjLEdBQUcsSUFBSSx1QkFBdUIsQ0FDaEQsNkJBQTZCLENBQUMsT0FBTyxFQUNyQyxPQUFPLEVBQ1AsTUFBTSxDQUNQLENBQUM7SUFDRixNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO0lBQ2hDLE1BQU0sYUFBYSxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7SUFDMUMsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLG9CQUFvQixFQUFFLENBQUM7SUFFeEQsTUFBTSxpQkFBaUIsR0FBRztRQUN4QixXQUFXLEVBQUUsR0FBRyxFQUFFLENBQUMsUUFBUTtRQUMzQixnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxhQUFhO1FBQ3JDLHVCQUF1QixFQUFFLEdBQUcsRUFBRSxDQUFDLG9CQUFvQjtLQUNwRCxDQUFDO0lBQ0YsTUFBTSw0QkFBNEIsR0FBRyxJQUFJLDRCQUE0QixDQUNuRSxpQkFBaUIsQ0FDbEIsQ0FBQztJQUVGLE1BQU0sY0FBYyxHQUNsQixJQUFJLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUMxQixhQUFhLENBQUMsSUFBSSxHQUFHLENBQUMsdUJBQXVCLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUNqRSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFFbEIsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLDBCQUEwQixDQUN4RCw2QkFBNkIsQ0FBQyxPQUFPLEVBQ3JDLEtBQUssSUFBSSxFQUFFLENBQUMsTUFBTSxJQUFJLHVCQUF1QixFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUM1RSxDQUFDO0lBRUYsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pELE9BQU8sSUFBSSxjQUFjLENBQ3ZCLGNBQWMsRUFDZCxDQUFDLElBQUksb0JBQW9CLENBQUMsY0FBYyxDQUFDLEVBQUUsMEJBQTBCLEVBQUUsQ0FBQyxFQUN4RSw0QkFBNEIsRUFDNUIsaUJBQWlCLEVBQ2pCLElBQUksK0JBQStCLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxFQUNuRSxtQkFBbUIsQ0FBQyx1QkFBdUIsQ0FDNUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1hbmRNb2R1bGUgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSAnbm9kZTp1cmwnO1xuaW1wb3J0IHtcbiAgU2FuZGJveENvbW1hbmQsXG4gIFNhbmRib3hDb21tYW5kT3B0aW9uc0tlYmFiQ2FzZSxcbn0gZnJvbSAnLi9zYW5kYm94X2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgU2FuZGJveFNpbmdsZXRvbkZhY3RvcnkgfSBmcm9tICdAYXdzLWFtcGxpZnkvc2FuZGJveCc7XG5pbXBvcnQgeyBTYW5kYm94RGVsZXRlQ29tbWFuZCB9IGZyb20gJy4vc2FuZGJveC1kZWxldGUvc2FuZGJveF9kZWxldGVfY29tbWFuZC5qcyc7XG5pbXBvcnQgeyBTYW5kYm94QmFja2VuZElkUmVzb2x2ZXIgfSBmcm9tICcuL3NhbmRib3hfaWRfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlciB9IGZyb20gJy4uLy4uL2NsaWVudC1jb25maWcvY2xpZW50X2NvbmZpZ19nZW5lcmF0b3JfYWRhcHRlci5qcyc7XG5pbXBvcnQgeyBMb2NhbE5hbWVzcGFjZVJlc29sdmVyIH0gZnJvbSAnLi4vLi4vYmFja2VuZC1pZGVudGlmaWVyL2xvY2FsX25hbWVzcGFjZV9yZXNvbHZlci5qcyc7XG5pbXBvcnQgeyBjcmVhdGVTYW5kYm94U2VjcmV0Q29tbWFuZCB9IGZyb20gJy4vc2FuZGJveC1zZWNyZXQvc2FuZGJveF9zZWNyZXRfY29tbWFuZF9mYWN0b3J5LmpzJztcbmltcG9ydCB7XG4gIFBhY2thZ2VKc29uUmVhZGVyLFxuICBVc2FnZURhdGFFbWl0dGVyRmFjdG9yeSxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuaW1wb3J0IHsgU2FuZGJveEV2ZW50SGFuZGxlckZhY3RvcnkgfSBmcm9tICcuL3NhbmRib3hfZXZlbnRfaGFuZGxlcl9mYWN0b3J5LmpzJztcbmltcG9ydCB7IENvbW1hbmRNaWRkbGV3YXJlIH0gZnJvbSAnLi4vLi4vY29tbWFuZF9taWRkbGV3YXJlLmpzJztcbmltcG9ydCB7XG4gIFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3RvcnksXG4gIGZvcm1hdCxcbiAgcHJpbnRlcixcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcbmltcG9ydCB7IFMzQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LXMzJztcbmltcG9ydCB7IEFtcGxpZnlDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtYW1wbGlmeSc7XG5pbXBvcnQgeyBDbG91ZEZvcm1hdGlvbkNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1jbG91ZGZvcm1hdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyB3aXJlZCBzYW5kYm94IGNvbW1hbmQuXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVTYW5kYm94Q29tbWFuZCA9ICgpOiBDb21tYW5kTW9kdWxlPFxuICBvYmplY3QsXG4gIFNhbmRib3hDb21tYW5kT3B0aW9uc0tlYmFiQ2FzZVxuPiA9PiB7XG4gIGNvbnN0IHNhbmRib3hCYWNrZW5kSWRQYXJ0c1Jlc29sdmVyID0gbmV3IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlcihcbiAgICBuZXcgTG9jYWxOYW1lc3BhY2VSZXNvbHZlcihuZXcgUGFja2FnZUpzb25SZWFkZXIoKSlcbiAgKTtcblxuICBjb25zdCBzYW5kYm94RmFjdG9yeSA9IG5ldyBTYW5kYm94U2luZ2xldG9uRmFjdG9yeShcbiAgICBzYW5kYm94QmFja2VuZElkUGFydHNSZXNvbHZlci5yZXNvbHZlLFxuICAgIHByaW50ZXIsXG4gICAgZm9ybWF0XG4gICk7XG4gIGNvbnN0IHMzQ2xpZW50ID0gbmV3IFMzQ2xpZW50KCk7XG4gIGNvbnN0IGFtcGxpZnlDbGllbnQgPSBuZXcgQW1wbGlmeUNsaWVudCgpO1xuICBjb25zdCBjbG91ZEZvcm1hdGlvbkNsaWVudCA9IG5ldyBDbG91ZEZvcm1hdGlvbkNsaWVudCgpO1xuXG4gIGNvbnN0IGF3c0NsaWVudFByb3ZpZGVyID0ge1xuICAgIGdldFMzQ2xpZW50OiAoKSA9PiBzM0NsaWVudCxcbiAgICBnZXRBbXBsaWZ5Q2xpZW50OiAoKSA9PiBhbXBsaWZ5Q2xpZW50LFxuICAgIGdldENsb3VkRm9ybWF0aW9uQ2xpZW50OiAoKSA9PiBjbG91ZEZvcm1hdGlvbkNsaWVudCxcbiAgfTtcbiAgY29uc3QgY2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlciA9IG5ldyBDbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyKFxuICAgIGF3c0NsaWVudFByb3ZpZGVyXG4gICk7XG5cbiAgY29uc3QgbGlicmFyeVZlcnNpb24gPVxuICAgIG5ldyBQYWNrYWdlSnNvblJlYWRlcigpLnJlYWQoXG4gICAgICBmaWxlVVJMVG9QYXRoKG5ldyBVUkwoJy4uLy4uLy4uL3BhY2thZ2UuanNvbicsIGltcG9ydC5tZXRhLnVybCkpXG4gICAgKS52ZXJzaW9uID8/ICcnO1xuXG4gIGNvbnN0IGV2ZW50SGFuZGxlckZhY3RvcnkgPSBuZXcgU2FuZGJveEV2ZW50SGFuZGxlckZhY3RvcnkoXG4gICAgc2FuZGJveEJhY2tlbmRJZFBhcnRzUmVzb2x2ZXIucmVzb2x2ZSxcbiAgICBhc3luYyAoKSA9PiBhd2FpdCBuZXcgVXNhZ2VEYXRhRW1pdHRlckZhY3RvcnkoKS5nZXRJbnN0YW5jZShsaWJyYXJ5VmVyc2lvbilcbiAgKTtcblxuICBjb25zdCBjb21tYW5kTWlkZGxlV2FyZSA9IG5ldyBDb21tYW5kTWlkZGxld2FyZShwcmludGVyKTtcbiAgcmV0dXJuIG5ldyBTYW5kYm94Q29tbWFuZChcbiAgICBzYW5kYm94RmFjdG9yeSxcbiAgICBbbmV3IFNhbmRib3hEZWxldGVDb21tYW5kKHNhbmRib3hGYWN0b3J5KSwgY3JlYXRlU2FuZGJveFNlY3JldENvbW1hbmQoKV0sXG4gICAgY2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlcixcbiAgICBjb21tYW5kTWlkZGxlV2FyZSxcbiAgICBuZXcgUGFja2FnZU1hbmFnZXJDb250cm9sbGVyRmFjdG9yeSgpLmdldFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlcigpLFxuICAgIGV2ZW50SGFuZGxlckZhY3RvcnkuZ2V0U2FuZGJveEV2ZW50SGFuZGxlcnNcbiAgKTtcbn07XG4iXX0=