import { ArgumentsCamelCase, Argv, CommandModule } from 'yargs';
import { SandboxSingletonFactory } from '@aws-amplify/sandbox';
import { ClientConfigFormat } from '@aws-amplify/client-config';
import { ClientConfigLifecycleHandler } from '../../client-config/client_config_lifecycle_handler.js';
import { ClientConfigGeneratorAdapter } from '../../client-config/client_config_generator_adapter.js';
import { CommandMiddleware } from '../../command_middleware.js';
import { SandboxCommandGlobalOptions } from './option_types.js';
import { ArgumentsKebabCase } from '../../kebab_case.js';
import { PackageManagerController } from '@aws-amplify/plugin-types';
export type SandboxCommandOptionsKebabCase = ArgumentsKebabCase<{
    dirToWatch: string | undefined;
    exclude: string[] | undefined;
    outputsFormat: ClientConfigFormat | undefined;
    outputsOutDir: string | undefined;
    outputsVersion: string;
    once: boolean | undefined;
    streamFunctionLogs: boolean | undefined;
    logsFilter: string[] | undefined;
    logsOutFile: string | undefined;
} & SandboxCommandGlobalOptions>;
export type EventHandler = (...args: unknown[]) => void;
export type SandboxEventHandlers = {
    successfulDeployment: EventHandler[];
    successfulDeletion: EventHandler[];
    failedDeployment: EventHandler[];
};
export type SandboxEventHandlerParams = {
    sandboxIdentifier?: string;
    clientConfigLifecycleHandler: ClientConfigLifecycleHandler;
};
export type SandboxEventHandlerCreator = (params: SandboxEventHandlerParams) => SandboxEventHandlers;
/**
 * Command that starts sandbox.
 */
export declare class SandboxCommand implements CommandModule<object, SandboxCommandOptionsKebabCase> {
    private readonly sandboxFactory;
    private readonly sandboxSubCommands;
    private clientConfigGeneratorAdapter;
    private commandMiddleware;
    private readonly packageManagerController;
    private readonly sandboxEventHandlerCreator?;
    /**
     * @inheritDoc
     */
    readonly command: string;
    /**
     * @inheritDoc
     */
    readonly describe: string;
    private sandboxIdentifier?;
    private profile?;
    /**
     * Creates sandbox command.
     */
    constructor(sandboxFactory: SandboxSingletonFactory, sandboxSubCommands: CommandModule[], clientConfigGeneratorAdapter: ClientConfigGeneratorAdapter, commandMiddleware: CommandMiddleware, packageManagerController: PackageManagerController, sandboxEventHandlerCreator?: SandboxEventHandlerCreator | undefined);
    /**
     * @inheritDoc
     */
    handler: (args: ArgumentsCamelCase<SandboxCommandOptionsKebabCase>) => Promise<void>;
    /**
     * @inheritDoc
     */
    builder: (yargs: Argv) => Argv<SandboxCommandOptionsKebabCase>;
    sigIntHandler: () => Promise<void>;
    private validateDirectory;
}
//# sourceMappingURL=sandbox_command.d.ts.map