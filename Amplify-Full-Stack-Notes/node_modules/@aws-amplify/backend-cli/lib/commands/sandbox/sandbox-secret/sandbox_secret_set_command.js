import { AmplifyPrompter, printer } from '@aws-amplify/cli-core';
import { once } from 'events';
/**
 * Command to set sandbox secret.
 */
export class SandboxSecretSetCommand {
    sandboxIdResolver;
    secretClient;
    readStream;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Set sandbox secret command.
     */
    constructor(sandboxIdResolver, secretClient, readStream = process.stdin) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.secretClient = secretClient;
        this.readStream = readStream;
        this.command = 'set <secret-name>';
        this.describe = 'Set a sandbox secret';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const secretValue = await this.readSecretValue();
        const secretIdentifier = await this.secretClient.setSecret(await this.sandboxIdResolver.resolve(args.identifier), args.secretName, secretValue);
        printer.print(`Successfully created version ${secretIdentifier.version} of secret ${secretIdentifier.name}`);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs.positional('secret-name', {
            describe: 'Name of the secret to set',
            type: 'string',
            demandOption: true,
        });
    };
    /**
     * Prompt (or) read secret value from stdin based on terminal interactive mode
     */
    readSecretValue = async () => {
        let secretValue = '';
        if (this.readStream.isTTY) {
            // This input is for interactive mode.
            secretValue = await AmplifyPrompter.secretValue();
        }
        else {
            // This allows to accept secret value from redirected input `|` and `>`.
            this.readStream.on('readable', () => {
                const chunk = this.readStream.read();
                if (chunk !== null) {
                    secretValue += chunk;
                }
            });
            // Wait for the end of the input.
            await once(this.readStream, 'end');
        }
        return secretValue;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zZWNyZXRfc2V0X2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94LXNlY3JldC9zYW5kYm94X3NlY3JldF9zZXRfY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBR2pFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHOUI7O0dBRUc7QUFDSCxNQUFNLE9BQU8sdUJBQXVCO0lBaUJmO0lBQ0E7SUFDQTtJQWhCbkI7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUNtQixpQkFBMkMsRUFDM0MsWUFBMEIsRUFDMUIsYUFBeUIsT0FBTyxDQUFDLEtBQUs7UUFGdEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUEwQjtRQUMzQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixlQUFVLEdBQVYsVUFBVSxDQUE0QjtRQUV2RCxJQUFJLENBQUMsT0FBTyxHQUFHLG1CQUFtQixDQUFDO1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsc0JBQXNCLENBQUM7SUFDekMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTyxHQUFHLEtBQUssRUFDYixJQUEwRCxFQUMzQyxFQUFFO1FBQ2pCLE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRWpELE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FDeEQsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFDckQsSUFBSSxDQUFDLFVBQVUsRUFDZixXQUFXLENBQ1osQ0FBQztRQUNGLE9BQU8sQ0FBQyxLQUFLLENBQ1gsZ0NBQWdDLGdCQUFnQixDQUFDLE9BQU8sY0FBYyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FDOUYsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsT0FBTyxHQUFHLENBQUMsS0FBVyxFQUEwQyxFQUFFO1FBQ2hFLE9BQU8sS0FBSyxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUU7WUFDckMsUUFBUSxFQUFFLDJCQUEyQjtZQUNyQyxJQUFJLEVBQUUsUUFBUTtZQUNkLFlBQVksRUFBRSxJQUFJO1NBQ25CLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0ssZUFBZSxHQUFHLEtBQUssSUFBcUIsRUFBRTtRQUNwRCxJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUM7UUFDckIsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRTtZQUN6QixzQ0FBc0M7WUFDdEMsV0FBVyxHQUFHLE1BQU0sZUFBZSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ25EO2FBQU07WUFDTCx3RUFBd0U7WUFDeEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtnQkFDbEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDckMsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO29CQUNsQixXQUFXLElBQUksS0FBSyxDQUFDO2lCQUN0QjtZQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0gsaUNBQWlDO1lBQ2pDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDcEM7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFyZ3VtZW50c0NhbWVsQ2FzZSwgQXJndiwgQ29tbWFuZE1vZHVsZSB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IFNlY3JldENsaWVudCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLXNlY3JldCc7XG5pbXBvcnQgeyBTYW5kYm94QmFja2VuZElkUmVzb2x2ZXIgfSBmcm9tICcuLi9zYW5kYm94X2lkX3Jlc29sdmVyLmpzJztcbmltcG9ydCB7IEFtcGxpZnlQcm9tcHRlciwgcHJpbnRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5pbXBvcnQgeyBBcmd1bWVudHNLZWJhYkNhc2UgfSBmcm9tICcuLi8uLi8uLi9rZWJhYl9jYXNlLmpzJztcbmltcG9ydCB7IFNhbmRib3hDb21tYW5kR2xvYmFsT3B0aW9ucyB9IGZyb20gJy4uL29wdGlvbl90eXBlcy5qcyc7XG5pbXBvcnQgeyBvbmNlIH0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7IFJlYWRTdHJlYW0gfSBmcm9tICdub2RlOnR0eSc7XG5cbi8qKlxuICogQ29tbWFuZCB0byBzZXQgc2FuZGJveCBzZWNyZXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBTYW5kYm94U2VjcmV0U2V0Q29tbWFuZFxuICBpbXBsZW1lbnRzIENvbW1hbmRNb2R1bGU8b2JqZWN0LCBTZWNyZXRTZXRDb21tYW5kT3B0aW9uc0tlYmFiQ2FzZT5cbntcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBjb21tYW5kOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBkZXNjcmliZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTZXQgc2FuZGJveCBzZWNyZXQgY29tbWFuZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2FuZGJveElkUmVzb2x2ZXI6IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNlY3JldENsaWVudDogU2VjcmV0Q2xpZW50LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVhZFN0cmVhbTogUmVhZFN0cmVhbSA9IHByb2Nlc3Muc3RkaW5cbiAgKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ3NldCA8c2VjcmV0LW5hbWU+JztcbiAgICB0aGlzLmRlc2NyaWJlID0gJ1NldCBhIHNhbmRib3ggc2VjcmV0JztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaGFuZGxlciA9IGFzeW5jIChcbiAgICBhcmdzOiBBcmd1bWVudHNDYW1lbENhc2U8U2VjcmV0U2V0Q29tbWFuZE9wdGlvbnNLZWJhYkNhc2U+XG4gICk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IHNlY3JldFZhbHVlID0gYXdhaXQgdGhpcy5yZWFkU2VjcmV0VmFsdWUoKTtcblxuICAgIGNvbnN0IHNlY3JldElkZW50aWZpZXIgPSBhd2FpdCB0aGlzLnNlY3JldENsaWVudC5zZXRTZWNyZXQoXG4gICAgICBhd2FpdCB0aGlzLnNhbmRib3hJZFJlc29sdmVyLnJlc29sdmUoYXJncy5pZGVudGlmaWVyKSxcbiAgICAgIGFyZ3Muc2VjcmV0TmFtZSxcbiAgICAgIHNlY3JldFZhbHVlXG4gICAgKTtcbiAgICBwcmludGVyLnByaW50KFxuICAgICAgYFN1Y2Nlc3NmdWxseSBjcmVhdGVkIHZlcnNpb24gJHtzZWNyZXRJZGVudGlmaWVyLnZlcnNpb259IG9mIHNlY3JldCAke3NlY3JldElkZW50aWZpZXIubmFtZX1gXG4gICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGJ1aWxkZXIgPSAoeWFyZ3M6IEFyZ3YpOiBBcmd2PFNlY3JldFNldENvbW1hbmRPcHRpb25zS2ViYWJDYXNlPiA9PiB7XG4gICAgcmV0dXJuIHlhcmdzLnBvc2l0aW9uYWwoJ3NlY3JldC1uYW1lJywge1xuICAgICAgZGVzY3JpYmU6ICdOYW1lIG9mIHRoZSBzZWNyZXQgdG8gc2V0JyxcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgZGVtYW5kT3B0aW9uOiB0cnVlLFxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBQcm9tcHQgKG9yKSByZWFkIHNlY3JldCB2YWx1ZSBmcm9tIHN0ZGluIGJhc2VkIG9uIHRlcm1pbmFsIGludGVyYWN0aXZlIG1vZGVcbiAgICovXG4gIHByaXZhdGUgcmVhZFNlY3JldFZhbHVlID0gYXN5bmMgKCk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgbGV0IHNlY3JldFZhbHVlID0gJyc7XG4gICAgaWYgKHRoaXMucmVhZFN0cmVhbS5pc1RUWSkge1xuICAgICAgLy8gVGhpcyBpbnB1dCBpcyBmb3IgaW50ZXJhY3RpdmUgbW9kZS5cbiAgICAgIHNlY3JldFZhbHVlID0gYXdhaXQgQW1wbGlmeVByb21wdGVyLnNlY3JldFZhbHVlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoaXMgYWxsb3dzIHRvIGFjY2VwdCBzZWNyZXQgdmFsdWUgZnJvbSByZWRpcmVjdGVkIGlucHV0IGB8YCBhbmQgYD5gLlxuICAgICAgdGhpcy5yZWFkU3RyZWFtLm9uKCdyZWFkYWJsZScsICgpID0+IHtcbiAgICAgICAgY29uc3QgY2h1bmsgPSB0aGlzLnJlYWRTdHJlYW0ucmVhZCgpO1xuICAgICAgICBpZiAoY2h1bmsgIT09IG51bGwpIHtcbiAgICAgICAgICBzZWNyZXRWYWx1ZSArPSBjaHVuaztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBXYWl0IGZvciB0aGUgZW5kIG9mIHRoZSBpbnB1dC5cbiAgICAgIGF3YWl0IG9uY2UodGhpcy5yZWFkU3RyZWFtLCAnZW5kJyk7XG4gICAgfVxuICAgIHJldHVybiBzZWNyZXRWYWx1ZTtcbiAgfTtcbn1cblxudHlwZSBTZWNyZXRTZXRDb21tYW5kT3B0aW9uc0tlYmFiQ2FzZSA9IEFyZ3VtZW50c0tlYmFiQ2FzZTxcbiAge1xuICAgIHNlY3JldE5hbWU6IHN0cmluZztcbiAgfSAmIFNhbmRib3hDb21tYW5kR2xvYmFsT3B0aW9uc1xuPjtcbiJdfQ==