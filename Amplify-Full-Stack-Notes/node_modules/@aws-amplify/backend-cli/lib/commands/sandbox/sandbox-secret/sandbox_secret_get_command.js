import { format, printer } from '@aws-amplify/cli-core';
/**
 * Command to get sandbox secret.
 */
export class SandboxSecretGetCommand {
    sandboxIdResolver;
    secretClient;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Get sandbox secret command.
     */
    constructor(sandboxIdResolver, secretClient) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.secretClient = secretClient;
        this.command = 'get <secret-name>';
        this.describe = 'Get a sandbox secret';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const sandboxBackendIdentifier = await this.sandboxIdResolver.resolve(args.identifier);
        const secret = await this.secretClient.getSecret(sandboxBackendIdentifier, {
            name: args.secretName,
        });
        printer.print(format.record(secret));
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .positional('secret-name', {
            describe: 'Name of the secret to get',
            type: 'string',
            demandOption: true,
        })
            .help();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zZWNyZXRfZ2V0X2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94LXNlY3JldC9zYW5kYm94X3NlY3JldF9nZXRfY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBR3hEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHVCQUF1QjtJQWlCZjtJQUNBO0lBZm5COztPQUVHO0lBQ00sT0FBTyxDQUFTO0lBRXpCOztPQUVHO0lBQ00sUUFBUSxDQUFTO0lBRTFCOztPQUVHO0lBQ0gsWUFDbUIsaUJBQTJDLEVBQzNDLFlBQTBCO1FBRDFCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBMEI7UUFDM0MsaUJBQVksR0FBWixZQUFZLENBQWM7UUFFM0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxtQkFBbUIsQ0FBQztRQUNuQyxJQUFJLENBQUMsUUFBUSxHQUFHLHNCQUFzQixDQUFDO0lBQ3pDLENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU8sR0FBRyxLQUFLLEVBQ2IsSUFBMEQsRUFDM0MsRUFBRTtRQUNqQixNQUFNLHdCQUF3QixHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FDbkUsSUFBSSxDQUFDLFVBQVUsQ0FDaEIsQ0FBQztRQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsd0JBQXdCLEVBQUU7WUFDekUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO1NBQ3RCLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3ZDLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsT0FBTyxHQUFHLENBQUMsS0FBVyxFQUEwQyxFQUFFO1FBQ2hFLE9BQU8sS0FBSzthQUNULFVBQVUsQ0FBQyxhQUFhLEVBQUU7WUFDekIsUUFBUSxFQUFFLDJCQUEyQjtZQUNyQyxJQUFJLEVBQUUsUUFBUTtZQUNkLFlBQVksRUFBRSxJQUFJO1NBQ25CLENBQUM7YUFDRCxJQUFJLEVBQUUsQ0FBQztJQUNaLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJndW1lbnRzQ2FtZWxDYXNlLCBBcmd2LCBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgU2VjcmV0Q2xpZW50IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtc2VjcmV0JztcbmltcG9ydCB7IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlciB9IGZyb20gJy4uL3NhbmRib3hfaWRfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHsgQXJndW1lbnRzS2ViYWJDYXNlIH0gZnJvbSAnLi4vLi4vLi4va2ViYWJfY2FzZS5qcyc7XG5pbXBvcnQgeyBmb3JtYXQsIHByaW50ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuaW1wb3J0IHsgU2FuZGJveENvbW1hbmRHbG9iYWxPcHRpb25zIH0gZnJvbSAnLi4vb3B0aW9uX3R5cGVzLmpzJztcblxuLyoqXG4gKiBDb21tYW5kIHRvIGdldCBzYW5kYm94IHNlY3JldC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNhbmRib3hTZWNyZXRHZXRDb21tYW5kXG4gIGltcGxlbWVudHMgQ29tbWFuZE1vZHVsZTxvYmplY3QsIFNlY3JldEdldENvbW1hbmRPcHRpb25zS2ViYWJDYXNlPlxue1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGNvbW1hbmQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaWJlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEdldCBzYW5kYm94IHNlY3JldCBjb21tYW5kLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBzYW5kYm94SWRSZXNvbHZlcjogU2FuZGJveEJhY2tlbmRJZFJlc29sdmVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2VjcmV0Q2xpZW50OiBTZWNyZXRDbGllbnRcbiAgKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ2dldCA8c2VjcmV0LW5hbWU+JztcbiAgICB0aGlzLmRlc2NyaWJlID0gJ0dldCBhIHNhbmRib3ggc2VjcmV0JztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaGFuZGxlciA9IGFzeW5jIChcbiAgICBhcmdzOiBBcmd1bWVudHNDYW1lbENhc2U8U2VjcmV0R2V0Q29tbWFuZE9wdGlvbnNLZWJhYkNhc2U+XG4gICk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IHNhbmRib3hCYWNrZW5kSWRlbnRpZmllciA9IGF3YWl0IHRoaXMuc2FuZGJveElkUmVzb2x2ZXIucmVzb2x2ZShcbiAgICAgIGFyZ3MuaWRlbnRpZmllclxuICAgICk7XG4gICAgY29uc3Qgc2VjcmV0ID0gYXdhaXQgdGhpcy5zZWNyZXRDbGllbnQuZ2V0U2VjcmV0KHNhbmRib3hCYWNrZW5kSWRlbnRpZmllciwge1xuICAgICAgbmFtZTogYXJncy5zZWNyZXROYW1lLFxuICAgIH0pO1xuICAgIHByaW50ZXIucHJpbnQoZm9ybWF0LnJlY29yZChzZWNyZXQpKTtcbiAgfTtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGJ1aWxkZXIgPSAoeWFyZ3M6IEFyZ3YpOiBBcmd2PFNlY3JldEdldENvbW1hbmRPcHRpb25zS2ViYWJDYXNlPiA9PiB7XG4gICAgcmV0dXJuIHlhcmdzXG4gICAgICAucG9zaXRpb25hbCgnc2VjcmV0LW5hbWUnLCB7XG4gICAgICAgIGRlc2NyaWJlOiAnTmFtZSBvZiB0aGUgc2VjcmV0IHRvIGdldCcsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBkZW1hbmRPcHRpb246IHRydWUsXG4gICAgICB9KVxuICAgICAgLmhlbHAoKTtcbiAgfTtcbn1cblxudHlwZSBTZWNyZXRHZXRDb21tYW5kT3B0aW9uc0tlYmFiQ2FzZSA9IEFyZ3VtZW50c0tlYmFiQ2FzZTxcbiAge1xuICAgIHNlY3JldE5hbWU6IHN0cmluZztcbiAgfSAmIFNhbmRib3hDb21tYW5kR2xvYmFsT3B0aW9uc1xuPjtcbiJdfQ==