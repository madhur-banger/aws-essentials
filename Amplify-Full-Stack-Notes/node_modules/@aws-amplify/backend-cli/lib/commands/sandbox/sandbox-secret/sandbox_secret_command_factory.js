import { PackageJsonReader } from '@aws-amplify/platform-core';
import { getSecretClientWithAmplifyErrorHandling } from '@aws-amplify/backend-secret';
import { SandboxSecretCommand } from './sandbox_secret_command.js';
import { SandboxSecretSetCommand } from './sandbox_secret_set_command.js';
import { SandboxSecretRemoveCommand } from './sandbox_secret_remove_command.js';
import { SandboxSecretGetCommand } from './sandbox_secret_get_command.js';
import { SandboxSecretListCommand } from './sandbox_secret_list_command.js';
import { SandboxBackendIdResolver } from '../sandbox_id_resolver.js';
import { LocalNamespaceResolver } from '../../../backend-identifier/local_namespace_resolver.js';
/**
 * Creates sandbox secret commands.
 */
export const createSandboxSecretCommand = () => {
    const sandboxIdResolver = new SandboxBackendIdResolver(new LocalNamespaceResolver(new PackageJsonReader()));
    const secretClient = getSecretClientWithAmplifyErrorHandling();
    const setCommand = new SandboxSecretSetCommand(sandboxIdResolver, secretClient);
    const removeCommand = new SandboxSecretRemoveCommand(sandboxIdResolver, secretClient);
    const getCommand = new SandboxSecretGetCommand(sandboxIdResolver, secretClient);
    const listCommand = new SandboxSecretListCommand(sandboxIdResolver, secretClient);
    return new SandboxSecretCommand([
        setCommand,
        removeCommand,
        getCommand,
        listCommand,
    ]);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zZWNyZXRfY29tbWFuZF9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1hbmRzL3NhbmRib3gvc2FuZGJveC1zZWNyZXQvc2FuZGJveF9zZWNyZXRfY29tbWFuZF9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQy9ELE9BQU8sRUFBRSx1Q0FBdUMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ25FLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBRWpHOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsR0FBa0IsRUFBRTtJQUM1RCxNQUFNLGlCQUFpQixHQUFHLElBQUksd0JBQXdCLENBQ3BELElBQUksc0JBQXNCLENBQUMsSUFBSSxpQkFBaUIsRUFBRSxDQUFDLENBQ3BELENBQUM7SUFFRixNQUFNLFlBQVksR0FBRyx1Q0FBdUMsRUFBRSxDQUFDO0lBQy9ELE1BQU0sVUFBVSxHQUFHLElBQUksdUJBQXVCLENBQzVDLGlCQUFpQixFQUNqQixZQUFZLENBQ2IsQ0FBQztJQUNGLE1BQU0sYUFBYSxHQUFHLElBQUksMEJBQTBCLENBQ2xELGlCQUFpQixFQUNqQixZQUFZLENBQ2IsQ0FBQztJQUNGLE1BQU0sVUFBVSxHQUFHLElBQUksdUJBQXVCLENBQzVDLGlCQUFpQixFQUNqQixZQUFZLENBQ2IsQ0FBQztJQUNGLE1BQU0sV0FBVyxHQUFHLElBQUksd0JBQXdCLENBQzlDLGlCQUFpQixFQUNqQixZQUFZLENBQ2IsQ0FBQztJQUVGLE9BQU8sSUFBSSxvQkFBb0IsQ0FBQztRQUM5QixVQUFzQztRQUN0QyxhQUF5QztRQUN6QyxVQUFzQztRQUN0QyxXQUFXO0tBQ1osQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbWFuZE1vZHVsZSB9IGZyb20gJ3lhcmdzJztcblxuaW1wb3J0IHsgUGFja2FnZUpzb25SZWFkZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBnZXRTZWNyZXRDbGllbnRXaXRoQW1wbGlmeUVycm9ySGFuZGxpbmcgfSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1zZWNyZXQnO1xuaW1wb3J0IHsgU2FuZGJveFNlY3JldENvbW1hbmQgfSBmcm9tICcuL3NhbmRib3hfc2VjcmV0X2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgU2FuZGJveFNlY3JldFNldENvbW1hbmQgfSBmcm9tICcuL3NhbmRib3hfc2VjcmV0X3NldF9jb21tYW5kLmpzJztcbmltcG9ydCB7IFNhbmRib3hTZWNyZXRSZW1vdmVDb21tYW5kIH0gZnJvbSAnLi9zYW5kYm94X3NlY3JldF9yZW1vdmVfY29tbWFuZC5qcyc7XG5pbXBvcnQgeyBTYW5kYm94U2VjcmV0R2V0Q29tbWFuZCB9IGZyb20gJy4vc2FuZGJveF9zZWNyZXRfZ2V0X2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgU2FuZGJveFNlY3JldExpc3RDb21tYW5kIH0gZnJvbSAnLi9zYW5kYm94X3NlY3JldF9saXN0X2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgU2FuZGJveEJhY2tlbmRJZFJlc29sdmVyIH0gZnJvbSAnLi4vc2FuZGJveF9pZF9yZXNvbHZlci5qcyc7XG5pbXBvcnQgeyBMb2NhbE5hbWVzcGFjZVJlc29sdmVyIH0gZnJvbSAnLi4vLi4vLi4vYmFja2VuZC1pZGVudGlmaWVyL2xvY2FsX25hbWVzcGFjZV9yZXNvbHZlci5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBzYW5kYm94IHNlY3JldCBjb21tYW5kcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVNhbmRib3hTZWNyZXRDb21tYW5kID0gKCk6IENvbW1hbmRNb2R1bGUgPT4ge1xuICBjb25zdCBzYW5kYm94SWRSZXNvbHZlciA9IG5ldyBTYW5kYm94QmFja2VuZElkUmVzb2x2ZXIoXG4gICAgbmV3IExvY2FsTmFtZXNwYWNlUmVzb2x2ZXIobmV3IFBhY2thZ2VKc29uUmVhZGVyKCkpXG4gICk7XG5cbiAgY29uc3Qgc2VjcmV0Q2xpZW50ID0gZ2V0U2VjcmV0Q2xpZW50V2l0aEFtcGxpZnlFcnJvckhhbmRsaW5nKCk7XG4gIGNvbnN0IHNldENvbW1hbmQgPSBuZXcgU2FuZGJveFNlY3JldFNldENvbW1hbmQoXG4gICAgc2FuZGJveElkUmVzb2x2ZXIsXG4gICAgc2VjcmV0Q2xpZW50XG4gICk7XG4gIGNvbnN0IHJlbW92ZUNvbW1hbmQgPSBuZXcgU2FuZGJveFNlY3JldFJlbW92ZUNvbW1hbmQoXG4gICAgc2FuZGJveElkUmVzb2x2ZXIsXG4gICAgc2VjcmV0Q2xpZW50XG4gICk7XG4gIGNvbnN0IGdldENvbW1hbmQgPSBuZXcgU2FuZGJveFNlY3JldEdldENvbW1hbmQoXG4gICAgc2FuZGJveElkUmVzb2x2ZXIsXG4gICAgc2VjcmV0Q2xpZW50XG4gICk7XG4gIGNvbnN0IGxpc3RDb21tYW5kID0gbmV3IFNhbmRib3hTZWNyZXRMaXN0Q29tbWFuZChcbiAgICBzYW5kYm94SWRSZXNvbHZlcixcbiAgICBzZWNyZXRDbGllbnRcbiAgKTtcblxuICByZXR1cm4gbmV3IFNhbmRib3hTZWNyZXRDb21tYW5kKFtcbiAgICBzZXRDb21tYW5kIGFzIHVua25vd24gYXMgQ29tbWFuZE1vZHVsZSxcbiAgICByZW1vdmVDb21tYW5kIGFzIHVua25vd24gYXMgQ29tbWFuZE1vZHVsZSxcbiAgICBnZXRDb21tYW5kIGFzIHVua25vd24gYXMgQ29tbWFuZE1vZHVsZSxcbiAgICBsaXN0Q29tbWFuZCxcbiAgXSk7XG59O1xuIl19