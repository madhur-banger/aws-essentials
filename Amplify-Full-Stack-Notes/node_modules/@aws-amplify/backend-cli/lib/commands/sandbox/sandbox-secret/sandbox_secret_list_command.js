import { format, printer } from '@aws-amplify/cli-core';
/**
 * Command to list sandbox secrets.
 */
export class SandboxSecretListCommand {
    sandboxIdResolver;
    secretClient;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * List sandbox secret command.
     */
    constructor(sandboxIdResolver, secretClient) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.secretClient = secretClient;
        this.command = 'list';
        this.describe = 'List all sandbox secrets';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const sandboxBackendIdentifier = await this.sandboxIdResolver.resolve(args.identifier);
        const secrets = await this.secretClient.listSecrets(sandboxBackendIdentifier);
        if (secrets.length > 0) {
            printer.print(format.list(secrets.map((secret) => secret.name)));
        }
        else {
            printer.print(`No sandbox secrets found. To create a secret use ${format.normalizeAmpxCommand('sandbox secret set <secret-name>')}.`);
        }
        printer.printNewLine();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zZWNyZXRfbGlzdF9jb21tYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1hbmRzL3NhbmRib3gvc2FuZGJveC1zZWNyZXQvc2FuZGJveF9zZWNyZXRfbGlzdF9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFJeEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sd0JBQXdCO0lBa0JoQjtJQUNBO0lBZm5COztPQUVHO0lBQ00sT0FBTyxDQUFTO0lBRXpCOztPQUVHO0lBQ00sUUFBUSxDQUFTO0lBRTFCOztPQUVHO0lBQ0gsWUFDbUIsaUJBQTJDLEVBQzNDLFlBQTBCO1FBRDFCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBMEI7UUFDM0MsaUJBQVksR0FBWixZQUFZLENBQWM7UUFFM0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRywwQkFBMEIsQ0FBQztJQUM3QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxPQUFPLEdBQUcsS0FBSyxFQUNiLElBQXFELEVBQ3RDLEVBQUU7UUFDakIsTUFBTSx3QkFBd0IsR0FBRyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQ25FLElBQUksQ0FBQyxVQUFVLENBQ2hCLENBQUM7UUFDRixNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUNqRCx3QkFBd0IsQ0FDekIsQ0FBQztRQUVGLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEU7YUFBTTtZQUNMLE9BQU8sQ0FBQyxLQUFLLENBQ1gsb0RBQW9ELE1BQU0sQ0FBQyxvQkFBb0IsQ0FDN0Usa0NBQWtDLENBQ25DLEdBQUcsQ0FDTCxDQUFDO1NBQ0g7UUFDRCxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDekIsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcmd1bWVudHNDYW1lbENhc2UsIENvbW1hbmRNb2R1bGUgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBTZWNyZXRDbGllbnQgfSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1zZWNyZXQnO1xuaW1wb3J0IHsgU2FuZGJveEJhY2tlbmRJZFJlc29sdmVyIH0gZnJvbSAnLi4vc2FuZGJveF9pZF9yZXNvbHZlci5qcyc7XG5pbXBvcnQgeyBmb3JtYXQsIHByaW50ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuaW1wb3J0IHsgQXJndW1lbnRzS2ViYWJDYXNlIH0gZnJvbSAnLi4vLi4vLi4va2ViYWJfY2FzZS5qcyc7XG5pbXBvcnQgeyBTYW5kYm94Q29tbWFuZEdsb2JhbE9wdGlvbnMgfSBmcm9tICcuLi9vcHRpb25fdHlwZXMuanMnO1xuXG4vKipcbiAqIENvbW1hbmQgdG8gbGlzdCBzYW5kYm94IHNlY3JldHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBTYW5kYm94U2VjcmV0TGlzdENvbW1hbmRcbiAgaW1wbGVtZW50c1xuICAgIENvbW1hbmRNb2R1bGU8b2JqZWN0LCBBcmd1bWVudHNLZWJhYkNhc2U8U2FuZGJveENvbW1hbmRHbG9iYWxPcHRpb25zPj5cbntcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBjb21tYW5kOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBkZXNjcmliZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBMaXN0IHNhbmRib3ggc2VjcmV0IGNvbW1hbmQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNhbmRib3hJZFJlc29sdmVyOiBTYW5kYm94QmFja2VuZElkUmVzb2x2ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBzZWNyZXRDbGllbnQ6IFNlY3JldENsaWVudFxuICApIHtcbiAgICB0aGlzLmNvbW1hbmQgPSAnbGlzdCc7XG4gICAgdGhpcy5kZXNjcmliZSA9ICdMaXN0IGFsbCBzYW5kYm94IHNlY3JldHMnO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBoYW5kbGVyID0gYXN5bmMgKFxuICAgIGFyZ3M6IEFyZ3VtZW50c0NhbWVsQ2FzZTxTYW5kYm94Q29tbWFuZEdsb2JhbE9wdGlvbnM+XG4gICk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IHNhbmRib3hCYWNrZW5kSWRlbnRpZmllciA9IGF3YWl0IHRoaXMuc2FuZGJveElkUmVzb2x2ZXIucmVzb2x2ZShcbiAgICAgIGFyZ3MuaWRlbnRpZmllclxuICAgICk7XG4gICAgY29uc3Qgc2VjcmV0cyA9IGF3YWl0IHRoaXMuc2VjcmV0Q2xpZW50Lmxpc3RTZWNyZXRzKFxuICAgICAgc2FuZGJveEJhY2tlbmRJZGVudGlmaWVyXG4gICAgKTtcblxuICAgIGlmIChzZWNyZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHByaW50ZXIucHJpbnQoZm9ybWF0Lmxpc3Qoc2VjcmV0cy5tYXAoKHNlY3JldCkgPT4gc2VjcmV0Lm5hbWUpKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByaW50ZXIucHJpbnQoXG4gICAgICAgIGBObyBzYW5kYm94IHNlY3JldHMgZm91bmQuIFRvIGNyZWF0ZSBhIHNlY3JldCB1c2UgJHtmb3JtYXQubm9ybWFsaXplQW1weENvbW1hbmQoXG4gICAgICAgICAgJ3NhbmRib3ggc2VjcmV0IHNldCA8c2VjcmV0LW5hbWU+J1xuICAgICAgICApfS5gXG4gICAgICApO1xuICAgIH1cbiAgICBwcmludGVyLnByaW50TmV3TGluZSgpO1xuICB9O1xufVxuIl19