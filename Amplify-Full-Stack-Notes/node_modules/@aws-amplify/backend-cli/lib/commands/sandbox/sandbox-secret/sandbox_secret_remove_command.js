import { printer } from '@aws-amplify/cli-core';
/**
 * Command to remove sandbox secret.
 */
export class SandboxSecretRemoveCommand {
    sandboxIdResolver;
    secretClient;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Remove sandbox secret command.
     */
    constructor(sandboxIdResolver, secretClient) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.secretClient = secretClient;
        this.command = 'remove <secret-name>';
        this.describe = 'Remove a sandbox secret';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const sandboxBackendIdentifier = await this.sandboxIdResolver.resolve(args.identifier);
        await this.secretClient.removeSecret(sandboxBackendIdentifier, args.secretName);
        printer.print(`Successfully removed secret ${args.secretName}`);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs.positional('secret-name', {
            describe: 'Name of the secret to remove',
            type: 'string',
            demandOption: true,
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zZWNyZXRfcmVtb3ZlX2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94LXNlY3JldC9zYW5kYm94X3NlY3JldF9yZW1vdmVfY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFaEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMEJBQTBCO0lBaUJsQjtJQUNBO0lBZm5COztPQUVHO0lBQ00sT0FBTyxDQUFTO0lBRXpCOztPQUVHO0lBQ00sUUFBUSxDQUFTO0lBRTFCOztPQUVHO0lBQ0gsWUFDbUIsaUJBQTJDLEVBQzNDLFlBQTBCO1FBRDFCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBMEI7UUFDM0MsaUJBQVksR0FBWixZQUFZLENBQWM7UUFFM0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxzQkFBc0IsQ0FBQztRQUN0QyxJQUFJLENBQUMsUUFBUSxHQUFHLHlCQUF5QixDQUFDO0lBQzVDLENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU8sR0FBRyxLQUFLLEVBQ2IsSUFBNkQsRUFDOUMsRUFBRTtRQUNqQixNQUFNLHdCQUF3QixHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FDbkUsSUFBSSxDQUFDLFVBQVUsQ0FDaEIsQ0FBQztRQUNGLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQ2xDLHdCQUF3QixFQUN4QixJQUFJLENBQUMsVUFBVSxDQUNoQixDQUFDO1FBRUYsT0FBTyxDQUFDLEtBQUssQ0FBQywrQkFBK0IsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDbEUsQ0FBQyxDQUFDO0lBRUY7O09BRUc7SUFDSCxPQUFPLEdBQUcsQ0FBQyxLQUFXLEVBQTZDLEVBQUU7UUFDbkUsT0FBTyxLQUFLLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRTtZQUNyQyxRQUFRLEVBQUUsOEJBQThCO1lBQ3hDLElBQUksRUFBRSxRQUFRO1lBQ2QsWUFBWSxFQUFFLElBQUk7U0FDbkIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcmd1bWVudHNDYW1lbENhc2UsIEFyZ3YsIENvbW1hbmRNb2R1bGUgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBTZWNyZXRDbGllbnQgfSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1zZWNyZXQnO1xuaW1wb3J0IHsgU2FuZGJveEJhY2tlbmRJZFJlc29sdmVyIH0gZnJvbSAnLi4vc2FuZGJveF9pZF9yZXNvbHZlci5qcyc7XG5pbXBvcnQgeyBBcmd1bWVudHNLZWJhYkNhc2UgfSBmcm9tICcuLi8uLi8uLi9rZWJhYl9jYXNlLmpzJztcbmltcG9ydCB7IFNhbmRib3hDb21tYW5kR2xvYmFsT3B0aW9ucyB9IGZyb20gJy4uL29wdGlvbl90eXBlcy5qcyc7XG5pbXBvcnQgeyBwcmludGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcblxuLyoqXG4gKiBDb21tYW5kIHRvIHJlbW92ZSBzYW5kYm94IHNlY3JldC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNhbmRib3hTZWNyZXRSZW1vdmVDb21tYW5kXG4gIGltcGxlbWVudHMgQ29tbWFuZE1vZHVsZTxvYmplY3QsIFNlY3JldFJlbW92ZUNvbW1hbmRPcHRpb25zS2ViYWJDYXNlPlxue1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGNvbW1hbmQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaWJlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBzYW5kYm94IHNlY3JldCBjb21tYW5kLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBzYW5kYm94SWRSZXNvbHZlcjogU2FuZGJveEJhY2tlbmRJZFJlc29sdmVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2VjcmV0Q2xpZW50OiBTZWNyZXRDbGllbnRcbiAgKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ3JlbW92ZSA8c2VjcmV0LW5hbWU+JztcbiAgICB0aGlzLmRlc2NyaWJlID0gJ1JlbW92ZSBhIHNhbmRib3ggc2VjcmV0JztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaGFuZGxlciA9IGFzeW5jIChcbiAgICBhcmdzOiBBcmd1bWVudHNDYW1lbENhc2U8U2VjcmV0UmVtb3ZlQ29tbWFuZE9wdGlvbnNLZWJhYkNhc2U+XG4gICk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IHNhbmRib3hCYWNrZW5kSWRlbnRpZmllciA9IGF3YWl0IHRoaXMuc2FuZGJveElkUmVzb2x2ZXIucmVzb2x2ZShcbiAgICAgIGFyZ3MuaWRlbnRpZmllclxuICAgICk7XG4gICAgYXdhaXQgdGhpcy5zZWNyZXRDbGllbnQucmVtb3ZlU2VjcmV0KFxuICAgICAgc2FuZGJveEJhY2tlbmRJZGVudGlmaWVyLFxuICAgICAgYXJncy5zZWNyZXROYW1lXG4gICAgKTtcblxuICAgIHByaW50ZXIucHJpbnQoYFN1Y2Nlc3NmdWxseSByZW1vdmVkIHNlY3JldCAke2FyZ3Muc2VjcmV0TmFtZX1gKTtcbiAgfTtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGJ1aWxkZXIgPSAoeWFyZ3M6IEFyZ3YpOiBBcmd2PFNlY3JldFJlbW92ZUNvbW1hbmRPcHRpb25zS2ViYWJDYXNlPiA9PiB7XG4gICAgcmV0dXJuIHlhcmdzLnBvc2l0aW9uYWwoJ3NlY3JldC1uYW1lJywge1xuICAgICAgZGVzY3JpYmU6ICdOYW1lIG9mIHRoZSBzZWNyZXQgdG8gcmVtb3ZlJyxcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgZGVtYW5kT3B0aW9uOiB0cnVlLFxuICAgIH0pO1xuICB9O1xufVxuXG50eXBlIFNlY3JldFJlbW92ZUNvbW1hbmRPcHRpb25zS2ViYWJDYXNlID0gQXJndW1lbnRzS2ViYWJDYXNlPFxuICB7XG4gICAgc2VjcmV0TmFtZTogc3RyaW5nO1xuICB9ICYgU2FuZGJveENvbW1hbmRHbG9iYWxPcHRpb25zXG4+O1xuIl19