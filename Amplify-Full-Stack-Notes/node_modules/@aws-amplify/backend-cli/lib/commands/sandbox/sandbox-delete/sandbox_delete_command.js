import { AmplifyPrompter } from '@aws-amplify/cli-core';
/**
 * Command that deletes the sandbox environment.
 */
export class SandboxDeleteCommand {
    sandboxFactory;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Deletes sandbox environment.
     */
    constructor(sandboxFactory) {
        this.sandboxFactory = sandboxFactory;
        this.command = 'delete';
        this.describe = 'Deletes sandbox environment';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        let isConfirmed = args.yes;
        if (!isConfirmed) {
            isConfirmed = await AmplifyPrompter.yesOrNo({
                message: "Are you sure you want to delete all the resources in your sandbox environment (This can't be undone)?",
            });
        }
        if (isConfirmed) {
            await (await this.sandboxFactory.getInstance()).delete({ identifier: args.identifier, profile: args.profile });
        }
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs.option('yes', {
            describe: 'Do not ask for confirmation before deleting the sandbox environment',
            type: 'boolean',
            array: false,
            alias: 'y',
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9kZWxldGVfY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tYW5kcy9zYW5kYm94L3NhbmRib3gtZGVsZXRlL3NhbmRib3hfZGVsZXRlX2NvbW1hbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBSXhEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG9CQUFvQjtJQWdCRjtJQWI3Qjs7T0FFRztJQUNNLE9BQU8sQ0FBUztJQUV6Qjs7T0FFRztJQUNNLFFBQVEsQ0FBUztJQUUxQjs7T0FFRztJQUNILFlBQTZCLGNBQXVDO1FBQXZDLG1CQUFjLEdBQWQsY0FBYyxDQUF5QjtRQUNsRSxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQztRQUN4QixJQUFJLENBQUMsUUFBUSxHQUFHLDZCQUE2QixDQUFDO0lBQ2hELENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU8sR0FBRyxLQUFLLEVBQ2IsSUFBOEQsRUFDL0MsRUFBRTtRQUNqQixJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQzNCLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsV0FBVyxHQUFHLE1BQU0sZUFBZSxDQUFDLE9BQU8sQ0FBQztnQkFDMUMsT0FBTyxFQUNMLHVHQUF1RzthQUMxRyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksV0FBVyxFQUFFO1lBQ2YsTUFBTSxDQUNKLE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsQ0FDeEMsQ0FBQyxNQUFNLENBQUMsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDbEU7SUFDSCxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE9BQU8sR0FBRyxDQUFDLEtBQVcsRUFBOEMsRUFBRTtRQUNwRSxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ3pCLFFBQVEsRUFDTixxRUFBcUU7WUFDdkUsSUFBSSxFQUFFLFNBQVM7WUFDZixLQUFLLEVBQUUsS0FBSztZQUNaLEtBQUssRUFBRSxHQUFHO1NBQ1gsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcmd1bWVudHNDYW1lbENhc2UsIEFyZ3YsIENvbW1hbmRNb2R1bGUgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBTYW5kYm94U2luZ2xldG9uRmFjdG9yeSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9zYW5kYm94JztcbmltcG9ydCB7IEFtcGxpZnlQcm9tcHRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5pbXBvcnQgeyBTYW5kYm94Q29tbWFuZEdsb2JhbE9wdGlvbnMgfSBmcm9tICcuLi9vcHRpb25fdHlwZXMuanMnO1xuaW1wb3J0IHsgQXJndW1lbnRzS2ViYWJDYXNlIH0gZnJvbSAnLi4vLi4vLi4va2ViYWJfY2FzZS5qcyc7XG5cbi8qKlxuICogQ29tbWFuZCB0aGF0IGRlbGV0ZXMgdGhlIHNhbmRib3ggZW52aXJvbm1lbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBTYW5kYm94RGVsZXRlQ29tbWFuZFxuICBpbXBsZW1lbnRzIENvbW1hbmRNb2R1bGU8b2JqZWN0LCBTYW5kYm94RGVsZXRlQ29tbWFuZE9wdGlvbnNLZWJhYkNhc2U+XG57XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgY29tbWFuZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpYmU6IHN0cmluZztcblxuICAvKipcbiAgICogRGVsZXRlcyBzYW5kYm94IGVudmlyb25tZW50LlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBzYW5kYm94RmFjdG9yeTogU2FuZGJveFNpbmdsZXRvbkZhY3RvcnkpIHtcbiAgICB0aGlzLmNvbW1hbmQgPSAnZGVsZXRlJztcbiAgICB0aGlzLmRlc2NyaWJlID0gJ0RlbGV0ZXMgc2FuZGJveCBlbnZpcm9ubWVudCc7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGhhbmRsZXIgPSBhc3luYyAoXG4gICAgYXJnczogQXJndW1lbnRzQ2FtZWxDYXNlPFNhbmRib3hEZWxldGVDb21tYW5kT3B0aW9uc0tlYmFiQ2FzZT5cbiAgKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgbGV0IGlzQ29uZmlybWVkID0gYXJncy55ZXM7XG4gICAgaWYgKCFpc0NvbmZpcm1lZCkge1xuICAgICAgaXNDb25maXJtZWQgPSBhd2FpdCBBbXBsaWZ5UHJvbXB0ZXIueWVzT3JObyh7XG4gICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIGFsbCB0aGUgcmVzb3VyY2VzIGluIHlvdXIgc2FuZGJveCBlbnZpcm9ubWVudCAoVGhpcyBjYW4ndCBiZSB1bmRvbmUpP1wiLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGlzQ29uZmlybWVkKSB7XG4gICAgICBhd2FpdCAoXG4gICAgICAgIGF3YWl0IHRoaXMuc2FuZGJveEZhY3RvcnkuZ2V0SW5zdGFuY2UoKVxuICAgICAgKS5kZWxldGUoeyBpZGVudGlmaWVyOiBhcmdzLmlkZW50aWZpZXIsIHByb2ZpbGU6IGFyZ3MucHJvZmlsZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBidWlsZGVyID0gKHlhcmdzOiBBcmd2KTogQXJndjxTYW5kYm94RGVsZXRlQ29tbWFuZE9wdGlvbnNLZWJhYkNhc2U+ID0+IHtcbiAgICByZXR1cm4geWFyZ3Mub3B0aW9uKCd5ZXMnLCB7XG4gICAgICBkZXNjcmliZTpcbiAgICAgICAgJ0RvIG5vdCBhc2sgZm9yIGNvbmZpcm1hdGlvbiBiZWZvcmUgZGVsZXRpbmcgdGhlIHNhbmRib3ggZW52aXJvbm1lbnQnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgYWxpYXM6ICd5JyxcbiAgICB9KTtcbiAgfTtcbn1cblxudHlwZSBTYW5kYm94RGVsZXRlQ29tbWFuZE9wdGlvbnNLZWJhYkNhc2UgPSBBcmd1bWVudHNLZWJhYkNhc2U8XG4gIHtcbiAgICB5ZXM/OiBib29sZWFuO1xuICB9ICYgU2FuZGJveENvbW1hbmRHbG9iYWxPcHRpb25zXG4+O1xuIl19