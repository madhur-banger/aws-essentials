import { AmplifyUserError } from '@aws-amplify/platform-core';
const DEFAULT_OUTPUT = 'amplify/data/schema.sql.ts';
/**
 * Command that generates typescript data schema from sql schema.
 */
export class GenerateSchemaCommand {
    backendIdentifierResolver;
    secretClient;
    schemaGenerator;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates typescript data schema generation command.
     */
    constructor(backendIdentifierResolver, secretClient, schemaGenerator) {
        this.backendIdentifierResolver = backendIdentifierResolver;
        this.secretClient = secretClient;
        this.schemaGenerator = schemaGenerator;
        this.command = 'schema-from-database';
        this.describe = 'Generates typescript data schema from a SQL database';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const backendIdentifier = await this.backendIdentifierResolver.resolveBackendIdentifier(args);
        if (!backendIdentifier) {
            throw new AmplifyUserError('BackendIdentifierResolverError', {
                message: 'Could not resolve the backend identifier.',
                resolution: 'Ensure stack name or Amplify App ID and branch specified are correct and exists, then re-run this command.',
            });
        }
        const connectionUriSecretName = args.connectionUriSecret;
        const outputFile = args.out;
        const connectionUriSecret = await this.secretClient.getSecret(backendIdentifier, {
            name: connectionUriSecretName,
        });
        const sslCertSecretName = args.sslCertSecret;
        let sslCertSecret;
        if (sslCertSecretName) {
            sslCertSecret = await this.secretClient.getSecret(backendIdentifier, {
                name: sslCertSecretName,
            });
        }
        await this.schemaGenerator.generate({
            connectionUri: {
                secretName: connectionUriSecretName,
                value: connectionUriSecret.value,
            },
            ...(sslCertSecret && {
                sslCert: {
                    secretName: sslCertSecretName,
                    value: sslCertSecret.value,
                },
            }),
            out: outputFile,
        });
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .option('stack', {
            conflicts: ['app-id', 'branch'],
            describe: 'A stack name that contains an Amplify backend',
            type: 'string',
            array: false,
            group: 'Stack identifier',
        })
            .option('app-id', {
            conflicts: ['stack'],
            describe: 'The Amplify App ID of the project',
            type: 'string',
            array: false,
            implies: 'branch',
            group: 'Project identifier',
        })
            .option('branch', {
            conflicts: ['stack'],
            describe: 'A git branch of the Amplify project',
            type: 'string',
            array: false,
            group: 'Project identifier',
            implies: 'appId',
        })
            .option('out', {
            describe: 'A path to directory where generated schema is written.',
            default: DEFAULT_OUTPUT,
            type: 'string',
            array: false,
            group: 'Schema Generation',
        })
            .option('connection-uri-secret', {
            describe: 'Amplify secret name for the database connection uri',
            type: 'string',
            array: false,
            group: 'Schema Generation',
            demandOption: true,
        })
            .option('ssl-cert-secret', {
            describe: 'Amplify secret name for the ssl certificate',
            type: 'string',
            array: false,
            group: 'Schema Generation',
            demandOption: false,
        });
    };
}
//# sourceMappingURL=data:application/json;base64,