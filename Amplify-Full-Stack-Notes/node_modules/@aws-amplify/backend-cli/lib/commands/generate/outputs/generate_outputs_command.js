import { ClientConfigFormat, ClientConfigVersionOption, DEFAULT_CLIENT_CONFIG_VERSION, } from '@aws-amplify/client-config';
import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * Command that generates client config aka amplify_outputs.
 */
export class GenerateOutputsCommand {
    clientConfigGenerator;
    backendIdentifierResolver;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates client config (amplify-outputs.json) generation command.
     */
    constructor(clientConfigGenerator, backendIdentifierResolver) {
        this.clientConfigGenerator = clientConfigGenerator;
        this.backendIdentifierResolver = backendIdentifierResolver;
        this.command = 'outputs';
        this.describe = 'Generates Amplify backend outputs';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const backendIdentifier = await this.backendIdentifierResolver.resolveDeployedBackendIdentifier(args);
        if (!backendIdentifier) {
            throw new AmplifyUserError('BackendIdentifierResolverError', {
                message: 'Could not resolve the backend identifier.',
                resolution: 'Ensure stack name or Amplify App ID and branch specified are correct and exists, then re-run this command.',
            });
        }
        await this.clientConfigGenerator.generateClientConfigToFile(backendIdentifier, args.outputsVersion, args.outDir, args.format);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .option('stack', {
            conflicts: ['app-id', 'branch'],
            describe: 'A stack name that contains an Amplify backend',
            type: 'string',
            array: false,
            group: 'Stack identifier',
        })
            .option('app-id', {
            conflicts: ['stack'],
            describe: 'The Amplify App ID of the project',
            type: 'string',
            array: false,
            implies: 'branch',
            group: 'Project identifier',
        })
            .option('branch', {
            conflicts: ['stack'],
            describe: 'A git branch of the Amplify project',
            type: 'string',
            array: false,
            group: 'Project identifier',
        })
            .option('format', {
            describe: 'The format which the configuration should be exported into.',
            type: 'string',
            array: false,
            choices: Object.values(ClientConfigFormat),
        })
            .option('out-dir', {
            describe: 'A path to directory where config is written. If not provided defaults to current process working directory.',
            type: 'string',
            array: false,
        })
            .option('outputs-version', {
            describe: 'Version of the configuration. Version 0 represents classic amplify-cli config file amplify-configuration and 1 represents newer config file amplify_outputs',
            type: 'string',
            array: false,
            choices: Object.values(ClientConfigVersionOption),
            default: DEFAULT_CLIENT_CONFIG_VERSION,
        });
    };
}
//# sourceMappingURL=data:application/json;base64,