/**
 * An entry point for generate command.
 */
export class GenerateCommand {
    generateOutputsCommand;
    generateFormsCommand;
    generateGraphqlClientCodeCommand;
    generateSchemaCommand;
    commandMiddleware;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates top level entry point for generate command.
     */
    constructor(generateOutputsCommand, generateFormsCommand, generateGraphqlClientCodeCommand, generateSchemaCommand, commandMiddleware) {
        this.generateOutputsCommand = generateOutputsCommand;
        this.generateFormsCommand = generateFormsCommand;
        this.generateGraphqlClientCodeCommand = generateGraphqlClientCodeCommand;
        this.generateSchemaCommand = generateSchemaCommand;
        this.commandMiddleware = commandMiddleware;
        this.command = 'generate';
        this.describe = 'Generates post deployment artifacts';
    }
    /**
     * @inheritDoc
     */
    handler = () => {
        // CommandModule requires handler implementation. But this is never called if top level command
        // is configured to require subcommand.
        // Help is printed by default in that case before ever attempting to call handler.
        throw new Error('Top level generate handler should never be called');
    };
    builder = (yargs) => {
        return (yargs
            .version(false)
            // Cast to erase options types used in internal sub command implementation. Otherwise, compiler fails here.
            .command(this.generateOutputsCommand)
            .command(this.generateFormsCommand)
            .command(this.generateGraphqlClientCodeCommand)
            .command(this.generateSchemaCommand)
            .demandCommand()
            .strictCommands()
            .recommendCommands()
            .option('profile', {
            describe: 'An AWS profile name.',
            type: 'string',
            array: false,
        })
            .middleware([this.commandMiddleware.ensureAwsCredentialAndRegion]));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9nZW5lcmF0ZS9nZW5lcmF0ZV9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGVBQWU7SUFlUDtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBbEJuQjs7T0FFRztJQUNNLE9BQU8sQ0FBUztJQUV6Qjs7T0FFRztJQUNNLFFBQVEsQ0FBUztJQUUxQjs7T0FFRztJQUNILFlBQ21CLHNCQUE4QyxFQUM5QyxvQkFBMEMsRUFDMUMsZ0NBQWtFLEVBQ2xFLHFCQUE0QyxFQUM1QyxpQkFBb0M7UUFKcEMsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUM5Qyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBQzFDLHFDQUFnQyxHQUFoQyxnQ0FBZ0MsQ0FBa0M7UUFDbEUsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQUM1QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBRXJELElBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcscUNBQXFDLENBQUM7SUFDeEQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTyxHQUFHLEdBQXlCLEVBQUU7UUFDbkMsK0ZBQStGO1FBQy9GLHVDQUF1QztRQUN2QyxrRkFBa0Y7UUFDbEYsTUFBTSxJQUFJLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO0lBQ3ZFLENBQUMsQ0FBQztJQUVGLE9BQU8sR0FBRyxDQUFDLEtBQVcsRUFBUSxFQUFFO1FBQzlCLE9BQU8sQ0FDTCxLQUFLO2FBQ0YsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUNmLDJHQUEyRzthQUMxRyxPQUFPLENBQUMsSUFBSSxDQUFDLHNCQUFrRCxDQUFDO2FBQ2hFLE9BQU8sQ0FBQyxJQUFJLENBQUMsb0JBQWdELENBQUM7YUFDOUQsT0FBTyxDQUNOLElBQUksQ0FBQyxnQ0FBNEQsQ0FDbEU7YUFDQSxPQUFPLENBQUMsSUFBSSxDQUFDLHFCQUFpRCxDQUFDO2FBQy9ELGFBQWEsRUFBRTthQUNmLGNBQWMsRUFBRTthQUNoQixpQkFBaUIsRUFBRTthQUNuQixNQUFNLENBQUMsU0FBUyxFQUFFO1lBQ2pCLFFBQVEsRUFBRSxzQkFBc0I7WUFDaEMsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztTQUNiLENBQUM7YUFDRCxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxDQUNyRSxDQUFDO0lBQ0osQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcmd2LCBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgR2VuZXJhdGVPdXRwdXRzQ29tbWFuZCB9IGZyb20gJy4vb3V0cHV0cy9nZW5lcmF0ZV9vdXRwdXRzX2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgR2VuZXJhdGVGb3Jtc0NvbW1hbmQgfSBmcm9tICcuL2Zvcm1zL2dlbmVyYXRlX2Zvcm1zX2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgR2VuZXJhdGVHcmFwaHFsQ2xpZW50Q29kZUNvbW1hbmQgfSBmcm9tICcuL2dyYXBocWwtY2xpZW50LWNvZGUvZ2VuZXJhdGVfZ3JhcGhxbF9jbGllbnRfY29kZV9jb21tYW5kLmpzJztcbmltcG9ydCB7IENvbW1hbmRNaWRkbGV3YXJlIH0gZnJvbSAnLi4vLi4vY29tbWFuZF9taWRkbGV3YXJlLmpzJztcbmltcG9ydCB7IEdlbmVyYXRlU2NoZW1hQ29tbWFuZCB9IGZyb20gJy4vc2NoZW1hLWZyb20tZGF0YWJhc2UvZ2VuZXJhdGVfc2NoZW1hX2NvbW1hbmQuanMnO1xuXG4vKipcbiAqIEFuIGVudHJ5IHBvaW50IGZvciBnZW5lcmF0ZSBjb21tYW5kLlxuICovXG5leHBvcnQgY2xhc3MgR2VuZXJhdGVDb21tYW5kIGltcGxlbWVudHMgQ29tbWFuZE1vZHVsZSB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgY29tbWFuZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpYmU6IHN0cmluZztcblxuICAvKipcbiAgICogQ3JlYXRlcyB0b3AgbGV2ZWwgZW50cnkgcG9pbnQgZm9yIGdlbmVyYXRlIGNvbW1hbmQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGdlbmVyYXRlT3V0cHV0c0NvbW1hbmQ6IEdlbmVyYXRlT3V0cHV0c0NvbW1hbmQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBnZW5lcmF0ZUZvcm1zQ29tbWFuZDogR2VuZXJhdGVGb3Jtc0NvbW1hbmQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBnZW5lcmF0ZUdyYXBocWxDbGllbnRDb2RlQ29tbWFuZDogR2VuZXJhdGVHcmFwaHFsQ2xpZW50Q29kZUNvbW1hbmQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBnZW5lcmF0ZVNjaGVtYUNvbW1hbmQ6IEdlbmVyYXRlU2NoZW1hQ29tbWFuZCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbW1hbmRNaWRkbGV3YXJlOiBDb21tYW5kTWlkZGxld2FyZVxuICApIHtcbiAgICB0aGlzLmNvbW1hbmQgPSAnZ2VuZXJhdGUnO1xuICAgIHRoaXMuZGVzY3JpYmUgPSAnR2VuZXJhdGVzIHBvc3QgZGVwbG95bWVudCBhcnRpZmFjdHMnO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBoYW5kbGVyID0gKCk6IHZvaWQgfCBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAvLyBDb21tYW5kTW9kdWxlIHJlcXVpcmVzIGhhbmRsZXIgaW1wbGVtZW50YXRpb24uIEJ1dCB0aGlzIGlzIG5ldmVyIGNhbGxlZCBpZiB0b3AgbGV2ZWwgY29tbWFuZFxuICAgIC8vIGlzIGNvbmZpZ3VyZWQgdG8gcmVxdWlyZSBzdWJjb21tYW5kLlxuICAgIC8vIEhlbHAgaXMgcHJpbnRlZCBieSBkZWZhdWx0IGluIHRoYXQgY2FzZSBiZWZvcmUgZXZlciBhdHRlbXB0aW5nIHRvIGNhbGwgaGFuZGxlci5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvcCBsZXZlbCBnZW5lcmF0ZSBoYW5kbGVyIHNob3VsZCBuZXZlciBiZSBjYWxsZWQnKTtcbiAgfTtcblxuICBidWlsZGVyID0gKHlhcmdzOiBBcmd2KTogQXJndiA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHlhcmdzXG4gICAgICAgIC52ZXJzaW9uKGZhbHNlKVxuICAgICAgICAvLyBDYXN0IHRvIGVyYXNlIG9wdGlvbnMgdHlwZXMgdXNlZCBpbiBpbnRlcm5hbCBzdWIgY29tbWFuZCBpbXBsZW1lbnRhdGlvbi4gT3RoZXJ3aXNlLCBjb21waWxlciBmYWlscyBoZXJlLlxuICAgICAgICAuY29tbWFuZCh0aGlzLmdlbmVyYXRlT3V0cHV0c0NvbW1hbmQgYXMgdW5rbm93biBhcyBDb21tYW5kTW9kdWxlKVxuICAgICAgICAuY29tbWFuZCh0aGlzLmdlbmVyYXRlRm9ybXNDb21tYW5kIGFzIHVua25vd24gYXMgQ29tbWFuZE1vZHVsZSlcbiAgICAgICAgLmNvbW1hbmQoXG4gICAgICAgICAgdGhpcy5nZW5lcmF0ZUdyYXBocWxDbGllbnRDb2RlQ29tbWFuZCBhcyB1bmtub3duIGFzIENvbW1hbmRNb2R1bGVcbiAgICAgICAgKVxuICAgICAgICAuY29tbWFuZCh0aGlzLmdlbmVyYXRlU2NoZW1hQ29tbWFuZCBhcyB1bmtub3duIGFzIENvbW1hbmRNb2R1bGUpXG4gICAgICAgIC5kZW1hbmRDb21tYW5kKClcbiAgICAgICAgLnN0cmljdENvbW1hbmRzKClcbiAgICAgICAgLnJlY29tbWVuZENvbW1hbmRzKClcbiAgICAgICAgLm9wdGlvbigncHJvZmlsZScsIHtcbiAgICAgICAgICBkZXNjcmliZTogJ0FuIEFXUyBwcm9maWxlIG5hbWUuJyxcbiAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICAgIH0pXG4gICAgICAgIC5taWRkbGV3YXJlKFt0aGlzLmNvbW1hbmRNaWRkbGV3YXJlLmVuc3VyZUF3c0NyZWRlbnRpYWxBbmRSZWdpb25dKVxuICAgICk7XG4gIH07XG59XG4iXX0=