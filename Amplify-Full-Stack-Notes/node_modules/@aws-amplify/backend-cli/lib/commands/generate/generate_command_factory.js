import { GenerateCommand } from './generate_command.js';
import { GenerateOutputsCommand } from './outputs/generate_outputs_command.js';
import { GenerateFormsCommand } from './forms/generate_forms_command.js';
import { PackageJsonReader } from '@aws-amplify/platform-core';
import { GenerateGraphqlClientCodeCommand } from './graphql-client-code/generate_graphql_client_code_command.js';
import { LocalNamespaceResolver } from '../../backend-identifier/local_namespace_resolver.js';
import { ClientConfigGeneratorAdapter } from '../../client-config/client_config_generator_adapter.js';
import { GenerateApiCodeAdapter } from './graphql-client-code/generate_api_code_adapter.js';
import { FormGenerationHandler } from '../../form-generation/form_generation_handler.js';
import { BackendOutputClientFactory } from '@aws-amplify/deployed-backend-client';
import { SandboxBackendIdResolver } from '../sandbox/sandbox_id_resolver.js';
import { CommandMiddleware } from '../../command_middleware.js';
import { BackendIdentifierResolverWithFallback } from '../../backend-identifier/backend_identifier_with_sandbox_fallback.js';
import { AppBackendIdentifierResolver } from '../../backend-identifier/backend_identifier_resolver.js';
import { GenerateSchemaCommand } from './schema-from-database/generate_schema_command.js';
import { getSecretClientWithAmplifyErrorHandling } from '@aws-amplify/backend-secret';
import { SchemaGenerator } from '@aws-amplify/schema-generator';
import { printer } from '@aws-amplify/cli-core';
import { AmplifyClient } from '@aws-sdk/client-amplify';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
import { S3Client } from '@aws-sdk/client-s3';
/**
 * Creates wired generate command.
 */
export const createGenerateCommand = () => {
    const s3Client = new S3Client();
    const amplifyClient = new AmplifyClient();
    const cloudFormationClient = new CloudFormationClient();
    const awsClientProvider = {
        getS3Client: () => s3Client,
        getAmplifyClient: () => amplifyClient,
        getCloudFormationClient: () => cloudFormationClient,
    };
    const secretClient = getSecretClientWithAmplifyErrorHandling();
    const clientConfigGenerator = new ClientConfigGeneratorAdapter(awsClientProvider);
    const namespaceResolver = new LocalNamespaceResolver(new PackageJsonReader());
    const backendIdentifierResolver = new BackendIdentifierResolverWithFallback(new AppBackendIdentifierResolver(namespaceResolver), new SandboxBackendIdResolver(namespaceResolver));
    const generateOutputsCommand = new GenerateOutputsCommand(clientConfigGenerator, backendIdentifierResolver);
    const generateFormsCommand = new GenerateFormsCommand(backendIdentifierResolver, () => BackendOutputClientFactory.getInstance(awsClientProvider), new FormGenerationHandler({ awsClientProvider }));
    const generateApiCodeAdapter = new GenerateApiCodeAdapter(awsClientProvider);
    const generateGraphqlClientCodeCommand = new GenerateGraphqlClientCodeCommand(generateApiCodeAdapter, backendIdentifierResolver);
    const generateSchemaCommand = new GenerateSchemaCommand(backendIdentifierResolver, secretClient, new SchemaGenerator());
    const commandMiddleware = new CommandMiddleware(printer);
    return new GenerateCommand(generateOutputsCommand, generateFormsCommand, generateGraphqlClientCodeCommand, generateSchemaCommand, commandMiddleware);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfY29tbWFuZF9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL2dlbmVyYXRlL2dlbmVyYXRlX2NvbW1hbmRfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDeEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDL0UsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDekUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sK0RBQStELENBQUM7QUFDakgsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0RBQXNELENBQUM7QUFDOUYsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDdEcsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFDNUYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDekYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDbEYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDN0UsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDaEUsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLE1BQU0sc0VBQXNFLENBQUM7QUFDN0gsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0seURBQXlELENBQUM7QUFDdkcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFDMUYsT0FBTyxFQUFFLHVDQUF1QyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDeEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDdEUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTlDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsR0FBa0IsRUFBRTtJQUN2RCxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO0lBQ2hDLE1BQU0sYUFBYSxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7SUFDMUMsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLG9CQUFvQixFQUFFLENBQUM7SUFFeEQsTUFBTSxpQkFBaUIsR0FBRztRQUN4QixXQUFXLEVBQUUsR0FBRyxFQUFFLENBQUMsUUFBUTtRQUMzQixnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxhQUFhO1FBQ3JDLHVCQUF1QixFQUFFLEdBQUcsRUFBRSxDQUFDLG9CQUFvQjtLQUNwRCxDQUFDO0lBQ0YsTUFBTSxZQUFZLEdBQUcsdUNBQXVDLEVBQUUsQ0FBQztJQUUvRCxNQUFNLHFCQUFxQixHQUFHLElBQUksNEJBQTRCLENBQzVELGlCQUFpQixDQUNsQixDQUFDO0lBRUYsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLHNCQUFzQixDQUFDLElBQUksaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBRTlFLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxxQ0FBcUMsQ0FDekUsSUFBSSw0QkFBNEIsQ0FBQyxpQkFBaUIsQ0FBQyxFQUNuRCxJQUFJLHdCQUF3QixDQUFDLGlCQUFpQixDQUFDLENBQ2hELENBQUM7SUFFRixNQUFNLHNCQUFzQixHQUFHLElBQUksc0JBQXNCLENBQ3ZELHFCQUFxQixFQUNyQix5QkFBeUIsQ0FDMUIsQ0FBQztJQUVGLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxvQkFBb0IsQ0FDbkQseUJBQXlCLEVBQ3pCLEdBQUcsRUFBRSxDQUFDLDBCQUEwQixDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxFQUMvRCxJQUFJLHFCQUFxQixDQUFDLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxDQUNqRCxDQUFDO0lBRUYsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLHNCQUFzQixDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFFN0UsTUFBTSxnQ0FBZ0MsR0FBRyxJQUFJLGdDQUFnQyxDQUMzRSxzQkFBc0IsRUFDdEIseUJBQXlCLENBQzFCLENBQUM7SUFFRixNQUFNLHFCQUFxQixHQUFHLElBQUkscUJBQXFCLENBQ3JELHlCQUF5QixFQUN6QixZQUFZLEVBQ1osSUFBSSxlQUFlLEVBQUUsQ0FDdEIsQ0FBQztJQUVGLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUV6RCxPQUFPLElBQUksZUFBZSxDQUN4QixzQkFBc0IsRUFDdEIsb0JBQW9CLEVBQ3BCLGdDQUFnQyxFQUNoQyxxQkFBcUIsRUFDckIsaUJBQWlCLENBQ2xCLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgR2VuZXJhdGVDb21tYW5kIH0gZnJvbSAnLi9nZW5lcmF0ZV9jb21tYW5kLmpzJztcbmltcG9ydCB7IEdlbmVyYXRlT3V0cHV0c0NvbW1hbmQgfSBmcm9tICcuL291dHB1dHMvZ2VuZXJhdGVfb3V0cHV0c19jb21tYW5kLmpzJztcbmltcG9ydCB7IEdlbmVyYXRlRm9ybXNDb21tYW5kIH0gZnJvbSAnLi9mb3Jtcy9nZW5lcmF0ZV9mb3Jtc19jb21tYW5kLmpzJztcbmltcG9ydCB7IFBhY2thZ2VKc29uUmVhZGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuaW1wb3J0IHsgR2VuZXJhdGVHcmFwaHFsQ2xpZW50Q29kZUNvbW1hbmQgfSBmcm9tICcuL2dyYXBocWwtY2xpZW50LWNvZGUvZ2VuZXJhdGVfZ3JhcGhxbF9jbGllbnRfY29kZV9jb21tYW5kLmpzJztcbmltcG9ydCB7IExvY2FsTmFtZXNwYWNlUmVzb2x2ZXIgfSBmcm9tICcuLi8uLi9iYWNrZW5kLWlkZW50aWZpZXIvbG9jYWxfbmFtZXNwYWNlX3Jlc29sdmVyLmpzJztcbmltcG9ydCB7IENsaWVudENvbmZpZ0dlbmVyYXRvckFkYXB0ZXIgfSBmcm9tICcuLi8uLi9jbGllbnQtY29uZmlnL2NsaWVudF9jb25maWdfZ2VuZXJhdG9yX2FkYXB0ZXIuanMnO1xuaW1wb3J0IHsgR2VuZXJhdGVBcGlDb2RlQWRhcHRlciB9IGZyb20gJy4vZ3JhcGhxbC1jbGllbnQtY29kZS9nZW5lcmF0ZV9hcGlfY29kZV9hZGFwdGVyLmpzJztcbmltcG9ydCB7IEZvcm1HZW5lcmF0aW9uSGFuZGxlciB9IGZyb20gJy4uLy4uL2Zvcm0tZ2VuZXJhdGlvbi9mb3JtX2dlbmVyYXRpb25faGFuZGxlci5qcyc7XG5pbXBvcnQgeyBCYWNrZW5kT3V0cHV0Q2xpZW50RmFjdG9yeSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9kZXBsb3llZC1iYWNrZW5kLWNsaWVudCc7XG5pbXBvcnQgeyBTYW5kYm94QmFja2VuZElkUmVzb2x2ZXIgfSBmcm9tICcuLi9zYW5kYm94L3NhbmRib3hfaWRfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHsgQ29tbWFuZE1pZGRsZXdhcmUgfSBmcm9tICcuLi8uLi9jb21tYW5kX21pZGRsZXdhcmUuanMnO1xuaW1wb3J0IHsgQmFja2VuZElkZW50aWZpZXJSZXNvbHZlcldpdGhGYWxsYmFjayB9IGZyb20gJy4uLy4uL2JhY2tlbmQtaWRlbnRpZmllci9iYWNrZW5kX2lkZW50aWZpZXJfd2l0aF9zYW5kYm94X2ZhbGxiYWNrLmpzJztcbmltcG9ydCB7IEFwcEJhY2tlbmRJZGVudGlmaWVyUmVzb2x2ZXIgfSBmcm9tICcuLi8uLi9iYWNrZW5kLWlkZW50aWZpZXIvYmFja2VuZF9pZGVudGlmaWVyX3Jlc29sdmVyLmpzJztcbmltcG9ydCB7IEdlbmVyYXRlU2NoZW1hQ29tbWFuZCB9IGZyb20gJy4vc2NoZW1hLWZyb20tZGF0YWJhc2UvZ2VuZXJhdGVfc2NoZW1hX2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgZ2V0U2VjcmV0Q2xpZW50V2l0aEFtcGxpZnlFcnJvckhhbmRsaW5nIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtc2VjcmV0JztcbmltcG9ydCB7IFNjaGVtYUdlbmVyYXRvciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9zY2hlbWEtZ2VuZXJhdG9yJztcbmltcG9ydCB7IHByaW50ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuaW1wb3J0IHsgQW1wbGlmeUNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1hbXBsaWZ5JztcbmltcG9ydCB7IENsb3VkRm9ybWF0aW9uQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3VkZm9ybWF0aW9uJztcbmltcG9ydCB7IFMzQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LXMzJztcblxuLyoqXG4gKiBDcmVhdGVzIHdpcmVkIGdlbmVyYXRlIGNvbW1hbmQuXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVHZW5lcmF0ZUNvbW1hbmQgPSAoKTogQ29tbWFuZE1vZHVsZSA9PiB7XG4gIGNvbnN0IHMzQ2xpZW50ID0gbmV3IFMzQ2xpZW50KCk7XG4gIGNvbnN0IGFtcGxpZnlDbGllbnQgPSBuZXcgQW1wbGlmeUNsaWVudCgpO1xuICBjb25zdCBjbG91ZEZvcm1hdGlvbkNsaWVudCA9IG5ldyBDbG91ZEZvcm1hdGlvbkNsaWVudCgpO1xuXG4gIGNvbnN0IGF3c0NsaWVudFByb3ZpZGVyID0ge1xuICAgIGdldFMzQ2xpZW50OiAoKSA9PiBzM0NsaWVudCxcbiAgICBnZXRBbXBsaWZ5Q2xpZW50OiAoKSA9PiBhbXBsaWZ5Q2xpZW50LFxuICAgIGdldENsb3VkRm9ybWF0aW9uQ2xpZW50OiAoKSA9PiBjbG91ZEZvcm1hdGlvbkNsaWVudCxcbiAgfTtcbiAgY29uc3Qgc2VjcmV0Q2xpZW50ID0gZ2V0U2VjcmV0Q2xpZW50V2l0aEFtcGxpZnlFcnJvckhhbmRsaW5nKCk7XG5cbiAgY29uc3QgY2xpZW50Q29uZmlnR2VuZXJhdG9yID0gbmV3IENsaWVudENvbmZpZ0dlbmVyYXRvckFkYXB0ZXIoXG4gICAgYXdzQ2xpZW50UHJvdmlkZXJcbiAgKTtcblxuICBjb25zdCBuYW1lc3BhY2VSZXNvbHZlciA9IG5ldyBMb2NhbE5hbWVzcGFjZVJlc29sdmVyKG5ldyBQYWNrYWdlSnNvblJlYWRlcigpKTtcblxuICBjb25zdCBiYWNrZW5kSWRlbnRpZmllclJlc29sdmVyID0gbmV3IEJhY2tlbmRJZGVudGlmaWVyUmVzb2x2ZXJXaXRoRmFsbGJhY2soXG4gICAgbmV3IEFwcEJhY2tlbmRJZGVudGlmaWVyUmVzb2x2ZXIobmFtZXNwYWNlUmVzb2x2ZXIpLFxuICAgIG5ldyBTYW5kYm94QmFja2VuZElkUmVzb2x2ZXIobmFtZXNwYWNlUmVzb2x2ZXIpXG4gICk7XG5cbiAgY29uc3QgZ2VuZXJhdGVPdXRwdXRzQ29tbWFuZCA9IG5ldyBHZW5lcmF0ZU91dHB1dHNDb21tYW5kKFxuICAgIGNsaWVudENvbmZpZ0dlbmVyYXRvcixcbiAgICBiYWNrZW5kSWRlbnRpZmllclJlc29sdmVyXG4gICk7XG5cbiAgY29uc3QgZ2VuZXJhdGVGb3Jtc0NvbW1hbmQgPSBuZXcgR2VuZXJhdGVGb3Jtc0NvbW1hbmQoXG4gICAgYmFja2VuZElkZW50aWZpZXJSZXNvbHZlcixcbiAgICAoKSA9PiBCYWNrZW5kT3V0cHV0Q2xpZW50RmFjdG9yeS5nZXRJbnN0YW5jZShhd3NDbGllbnRQcm92aWRlciksXG4gICAgbmV3IEZvcm1HZW5lcmF0aW9uSGFuZGxlcih7IGF3c0NsaWVudFByb3ZpZGVyIH0pXG4gICk7XG5cbiAgY29uc3QgZ2VuZXJhdGVBcGlDb2RlQWRhcHRlciA9IG5ldyBHZW5lcmF0ZUFwaUNvZGVBZGFwdGVyKGF3c0NsaWVudFByb3ZpZGVyKTtcblxuICBjb25zdCBnZW5lcmF0ZUdyYXBocWxDbGllbnRDb2RlQ29tbWFuZCA9IG5ldyBHZW5lcmF0ZUdyYXBocWxDbGllbnRDb2RlQ29tbWFuZChcbiAgICBnZW5lcmF0ZUFwaUNvZGVBZGFwdGVyLFxuICAgIGJhY2tlbmRJZGVudGlmaWVyUmVzb2x2ZXJcbiAgKTtcblxuICBjb25zdCBnZW5lcmF0ZVNjaGVtYUNvbW1hbmQgPSBuZXcgR2VuZXJhdGVTY2hlbWFDb21tYW5kKFxuICAgIGJhY2tlbmRJZGVudGlmaWVyUmVzb2x2ZXIsXG4gICAgc2VjcmV0Q2xpZW50LFxuICAgIG5ldyBTY2hlbWFHZW5lcmF0b3IoKVxuICApO1xuXG4gIGNvbnN0IGNvbW1hbmRNaWRkbGV3YXJlID0gbmV3IENvbW1hbmRNaWRkbGV3YXJlKHByaW50ZXIpO1xuXG4gIHJldHVybiBuZXcgR2VuZXJhdGVDb21tYW5kKFxuICAgIGdlbmVyYXRlT3V0cHV0c0NvbW1hbmQsXG4gICAgZ2VuZXJhdGVGb3Jtc0NvbW1hbmQsXG4gICAgZ2VuZXJhdGVHcmFwaHFsQ2xpZW50Q29kZUNvbW1hbmQsXG4gICAgZ2VuZXJhdGVTY2hlbWFDb21tYW5kLFxuICAgIGNvbW1hbmRNaWRkbGV3YXJlXG4gICk7XG59O1xuIl19