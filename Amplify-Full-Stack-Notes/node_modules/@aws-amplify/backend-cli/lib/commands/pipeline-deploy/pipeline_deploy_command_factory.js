import { BackendDeployerFactory } from '@aws-amplify/backend-deployer';
import { PackageManagerControllerFactory, format } from '@aws-amplify/cli-core';
import { PipelineDeployCommand, } from './pipeline_deploy_command.js';
import { ClientConfigGeneratorAdapter } from '../../client-config/client_config_generator_adapter.js';
import { S3Client } from '@aws-sdk/client-s3';
import { AmplifyClient } from '@aws-sdk/client-amplify';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
/**
 * Creates pipeline deploy command
 */
export const createPipelineDeployCommand = () => {
    const s3Client = new S3Client();
    const amplifyClient = new AmplifyClient();
    const cloudFormationClient = new CloudFormationClient();
    const awsClientProvider = {
        getS3Client: () => s3Client,
        getAmplifyClient: () => amplifyClient,
        getCloudFormationClient: () => cloudFormationClient,
    };
    const clientConfigGenerator = new ClientConfigGeneratorAdapter(awsClientProvider);
    const packageManagerControllerFactory = new PackageManagerControllerFactory();
    const backendDeployerFactory = new BackendDeployerFactory(packageManagerControllerFactory.getPackageManagerController(), format);
    const backendDeployer = backendDeployerFactory.getInstance();
    return new PipelineDeployCommand(clientConfigGenerator, backendDeployer);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmVfZGVwbG95X2NvbW1hbmRfZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9waXBlbGluZS1kZXBsb3kvcGlwZWxpbmVfZGVwbG95X2NvbW1hbmRfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN2RSxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFaEYsT0FBTyxFQUNMLHFCQUFxQixHQUV0QixNQUFNLDhCQUE4QixDQUFDO0FBQ3RDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBQ3RHLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDeEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFdEU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxHQUd6QyxFQUFFO0lBQ0YsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztJQUNoQyxNQUFNLGFBQWEsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0lBQzFDLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxvQkFBb0IsRUFBRSxDQUFDO0lBRXhELE1BQU0saUJBQWlCLEdBQUc7UUFDeEIsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLFFBQVE7UUFDM0IsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLENBQUMsYUFBYTtRQUNyQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxvQkFBb0I7S0FDcEQsQ0FBQztJQUNGLE1BQU0scUJBQXFCLEdBQUcsSUFBSSw0QkFBNEIsQ0FDNUQsaUJBQWlCLENBQ2xCLENBQUM7SUFDRixNQUFNLCtCQUErQixHQUFHLElBQUksK0JBQStCLEVBQUUsQ0FBQztJQUM5RSxNQUFNLHNCQUFzQixHQUFHLElBQUksc0JBQXNCLENBQ3ZELCtCQUErQixDQUFDLDJCQUEyQixFQUFFLEVBQzdELE1BQU0sQ0FDUCxDQUFDO0lBQ0YsTUFBTSxlQUFlLEdBQUcsc0JBQXNCLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDN0QsT0FBTyxJQUFJLHFCQUFxQixDQUFDLHFCQUFxQixFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQzNFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1hbmRNb2R1bGUgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBCYWNrZW5kRGVwbG95ZXJGYWN0b3J5IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtZGVwbG95ZXInO1xuaW1wb3J0IHsgUGFja2FnZU1hbmFnZXJDb250cm9sbGVyRmFjdG9yeSwgZm9ybWF0IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcblxuaW1wb3J0IHtcbiAgUGlwZWxpbmVEZXBsb3lDb21tYW5kLFxuICBQaXBlbGluZURlcGxveUNvbW1hbmRPcHRpb25zLFxufSBmcm9tICcuL3BpcGVsaW5lX2RlcGxveV9jb21tYW5kLmpzJztcbmltcG9ydCB7IENsaWVudENvbmZpZ0dlbmVyYXRvckFkYXB0ZXIgfSBmcm9tICcuLi8uLi9jbGllbnQtY29uZmlnL2NsaWVudF9jb25maWdfZ2VuZXJhdG9yX2FkYXB0ZXIuanMnO1xuaW1wb3J0IHsgUzNDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtczMnO1xuaW1wb3J0IHsgQW1wbGlmeUNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1hbXBsaWZ5JztcbmltcG9ydCB7IENsb3VkRm9ybWF0aW9uQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3VkZm9ybWF0aW9uJztcblxuLyoqXG4gKiBDcmVhdGVzIHBpcGVsaW5lIGRlcGxveSBjb21tYW5kXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVQaXBlbGluZURlcGxveUNvbW1hbmQgPSAoKTogQ29tbWFuZE1vZHVsZTxcbiAgb2JqZWN0LFxuICBQaXBlbGluZURlcGxveUNvbW1hbmRPcHRpb25zXG4+ID0+IHtcbiAgY29uc3QgczNDbGllbnQgPSBuZXcgUzNDbGllbnQoKTtcbiAgY29uc3QgYW1wbGlmeUNsaWVudCA9IG5ldyBBbXBsaWZ5Q2xpZW50KCk7XG4gIGNvbnN0IGNsb3VkRm9ybWF0aW9uQ2xpZW50ID0gbmV3IENsb3VkRm9ybWF0aW9uQ2xpZW50KCk7XG5cbiAgY29uc3QgYXdzQ2xpZW50UHJvdmlkZXIgPSB7XG4gICAgZ2V0UzNDbGllbnQ6ICgpID0+IHMzQ2xpZW50LFxuICAgIGdldEFtcGxpZnlDbGllbnQ6ICgpID0+IGFtcGxpZnlDbGllbnQsXG4gICAgZ2V0Q2xvdWRGb3JtYXRpb25DbGllbnQ6ICgpID0+IGNsb3VkRm9ybWF0aW9uQ2xpZW50LFxuICB9O1xuICBjb25zdCBjbGllbnRDb25maWdHZW5lcmF0b3IgPSBuZXcgQ2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlcihcbiAgICBhd3NDbGllbnRQcm92aWRlclxuICApO1xuICBjb25zdCBwYWNrYWdlTWFuYWdlckNvbnRyb2xsZXJGYWN0b3J5ID0gbmV3IFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3RvcnkoKTtcbiAgY29uc3QgYmFja2VuZERlcGxveWVyRmFjdG9yeSA9IG5ldyBCYWNrZW5kRGVwbG95ZXJGYWN0b3J5KFxuICAgIHBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3RvcnkuZ2V0UGFja2FnZU1hbmFnZXJDb250cm9sbGVyKCksXG4gICAgZm9ybWF0XG4gICk7XG4gIGNvbnN0IGJhY2tlbmREZXBsb3llciA9IGJhY2tlbmREZXBsb3llckZhY3RvcnkuZ2V0SW5zdGFuY2UoKTtcbiAgcmV0dXJuIG5ldyBQaXBlbGluZURlcGxveUNvbW1hbmQoY2xpZW50Q29uZmlnR2VuZXJhdG9yLCBiYWNrZW5kRGVwbG95ZXIpO1xufTtcbiJdfQ==