import _isCI from 'is-ci';
import { ClientConfigFormat, ClientConfigVersionOption, DEFAULT_CLIENT_CONFIG_VERSION, } from '@aws-amplify/client-config';
import { AmplifyUserError } from '@aws-amplify/platform-core';
import { format } from '@aws-amplify/cli-core';
/**
 * An entry point for deploy command.
 */
export class PipelineDeployCommand {
    clientConfigGenerator;
    backendDeployer;
    isCiEnvironment;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates top level entry point for deploy command.
     */
    constructor(clientConfigGenerator, backendDeployer, isCiEnvironment = _isCI) {
        this.clientConfigGenerator = clientConfigGenerator;
        this.backendDeployer = backendDeployer;
        this.isCiEnvironment = isCiEnvironment;
        this.command = 'pipeline-deploy';
        this.describe =
            'Command to deploy backends in a custom CI/CD pipeline. This command is not intended to be used locally.';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        if (!this.isCiEnvironment) {
            throw new AmplifyUserError('RunningPipelineDeployNotInCiError', {
                message: 'It looks like this command is being run outside of a CI/CD workflow.',
                resolution: `To deploy locally use ${format.normalizeAmpxCommand('sandbox')} instead.`,
            });
        }
        const backendId = {
            namespace: args.appId,
            name: args.branch,
            type: 'branch',
        };
        await this.backendDeployer.deploy(backendId, {
            validateAppSources: true,
        });
        await this.clientConfigGenerator.generateClientConfigToFile(backendId, args.outputsVersion, args.outputsOutDir, args.outputsFormat);
    };
    builder = (yargs) => {
        return yargs
            .version(false)
            .option('branch', {
            describe: 'Name of the git branch being deployed',
            demandOption: true,
            type: 'string',
            array: false,
        })
            .option('app-id', {
            describe: 'The app id of the target Amplify app',
            demandOption: true,
            type: 'string',
            array: false,
        })
            .option('outputs-out-dir', {
            describe: 'A path to directory where amplify_outputs is written. If not provided defaults to current process working directory.',
            type: 'string',
            array: false,
        })
            .option('outputs-version', {
            describe: 'Version of the configuration. Version 0 represents classic amplify-cli config file amplify-configuration and 1 represents newer config file amplify_outputs',
            type: 'string',
            array: false,
            choices: Object.values(ClientConfigVersionOption),
            default: DEFAULT_CLIENT_CONFIG_VERSION,
        })
            .option('outputs-format', {
            describe: 'amplify_outputs file format',
            type: 'string',
            array: false,
            choices: Object.values(ClientConfigFormat),
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmVfZGVwbG95X2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvcGlwZWxpbmUtZGVwbG95L3BpcGVsaW5lX2RlcGxveV9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQU0xQixPQUFPLEVBQ0wsa0JBQWtCLEVBRWxCLHlCQUF5QixFQUN6Qiw2QkFBNkIsR0FDOUIsTUFBTSw0QkFBNEIsQ0FBQztBQUNwQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFhL0M7O0dBRUc7QUFDSCxNQUFNLE9BQU8scUJBQXFCO0lBaUJiO0lBQ0E7SUFDQTtJQWhCbkI7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUNtQixxQkFBbUQsRUFDbkQsZUFBZ0MsRUFDaEMsa0JBQWdDLEtBQUs7UUFGckMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUE4QjtRQUNuRCxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsb0JBQWUsR0FBZixlQUFlLENBQXNCO1FBRXRELElBQUksQ0FBQyxPQUFPLEdBQUcsaUJBQWlCLENBQUM7UUFDakMsSUFBSSxDQUFDLFFBQVE7WUFDWCx5R0FBeUcsQ0FBQztJQUM5RyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxPQUFPLEdBQUcsS0FBSyxFQUNiLElBQXNELEVBQ3ZDLEVBQUU7UUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDekIsTUFBTSxJQUFJLGdCQUFnQixDQUFDLG1DQUFtQyxFQUFFO2dCQUM5RCxPQUFPLEVBQ0wsc0VBQXNFO2dCQUN4RSxVQUFVLEVBQUUseUJBQXlCLE1BQU0sQ0FBQyxvQkFBb0IsQ0FDOUQsU0FBUyxDQUNWLFdBQVc7YUFDYixDQUFDLENBQUM7U0FDSjtRQUVELE1BQU0sU0FBUyxHQUFzQjtZQUNuQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDckIsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ2pCLElBQUksRUFBRSxRQUFRO1NBQ2YsQ0FBQztRQUNGLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO1lBQzNDLGtCQUFrQixFQUFFLElBQUk7U0FDekIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxJQUFJLENBQUMscUJBQXFCLENBQUMsMEJBQTBCLENBQ3pELFNBQVMsRUFDVCxJQUFJLENBQUMsY0FBcUMsRUFDMUMsSUFBSSxDQUFDLGFBQWEsRUFDbEIsSUFBSSxDQUFDLGFBQWEsQ0FDbkIsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGLE9BQU8sR0FBRyxDQUFDLEtBQVcsRUFBc0MsRUFBRTtRQUM1RCxPQUFPLEtBQUs7YUFDVCxPQUFPLENBQUMsS0FBSyxDQUFDO2FBQ2QsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUNoQixRQUFRLEVBQUUsdUNBQXVDO1lBQ2pELFlBQVksRUFBRSxJQUFJO1lBQ2xCLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLEtBQUs7U0FDYixDQUFDO2FBQ0QsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUNoQixRQUFRLEVBQUUsc0NBQXNDO1lBQ2hELFlBQVksRUFBRSxJQUFJO1lBQ2xCLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLEtBQUs7U0FDYixDQUFDO2FBQ0QsTUFBTSxDQUFDLGlCQUFpQixFQUFFO1lBQ3pCLFFBQVEsRUFDTixzSEFBc0g7WUFDeEgsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztTQUNiLENBQUM7YUFDRCxNQUFNLENBQUMsaUJBQWlCLEVBQUU7WUFDekIsUUFBUSxFQUNOLDZKQUE2SjtZQUMvSixJQUFJLEVBQUUsUUFBUTtZQUNkLEtBQUssRUFBRSxLQUFLO1lBQ1osT0FBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMseUJBQXlCLENBQUM7WUFDakQsT0FBTyxFQUFFLDZCQUE2QjtTQUN2QyxDQUFDO2FBQ0QsTUFBTSxDQUFDLGdCQUFnQixFQUFFO1lBQ3hCLFFBQVEsRUFBRSw2QkFBNkI7WUFDdkMsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztZQUNaLE9BQU8sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDO1NBQzNDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9pc0NJIGZyb20gJ2lzLWNpJztcbmltcG9ydCB7IEFyZ3VtZW50c0NhbWVsQ2FzZSwgQXJndiwgQ29tbWFuZE1vZHVsZSB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IEJhY2tlbmREZXBsb3llciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLWRlcGxveWVyJztcbmltcG9ydCB7IENsaWVudENvbmZpZ0dlbmVyYXRvckFkYXB0ZXIgfSBmcm9tICcuLi8uLi9jbGllbnQtY29uZmlnL2NsaWVudF9jb25maWdfZ2VuZXJhdG9yX2FkYXB0ZXIuanMnO1xuaW1wb3J0IHsgQXJndW1lbnRzS2ViYWJDYXNlIH0gZnJvbSAnLi4vLi4va2ViYWJfY2FzZS5qcyc7XG5pbXBvcnQgeyBCYWNrZW5kSWRlbnRpZmllciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHtcbiAgQ2xpZW50Q29uZmlnRm9ybWF0LFxuICBDbGllbnRDb25maWdWZXJzaW9uLFxuICBDbGllbnRDb25maWdWZXJzaW9uT3B0aW9uLFxuICBERUZBVUxUX0NMSUVOVF9DT05GSUdfVkVSU0lPTixcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaWVudC1jb25maWcnO1xuaW1wb3J0IHsgQW1wbGlmeVVzZXJFcnJvciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcbmltcG9ydCB7IGZvcm1hdCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5cbmV4cG9ydCB0eXBlIFBpcGVsaW5lRGVwbG95Q29tbWFuZE9wdGlvbnMgPVxuICBBcmd1bWVudHNLZWJhYkNhc2U8UGlwZWxpbmVEZXBsb3lDb21tYW5kT3B0aW9uc0NhbWVsQ2FzZT47XG5cbnR5cGUgUGlwZWxpbmVEZXBsb3lDb21tYW5kT3B0aW9uc0NhbWVsQ2FzZSA9IHtcbiAgYnJhbmNoOiBzdHJpbmc7XG4gIGFwcElkOiBzdHJpbmc7XG4gIG91dHB1dHNGb3JtYXQ6IENsaWVudENvbmZpZ0Zvcm1hdCB8IHVuZGVmaW5lZDtcbiAgb3V0cHV0c1ZlcnNpb246IHN0cmluZztcbiAgb3V0cHV0c091dERpcj86IHN0cmluZztcbn07XG5cbi8qKlxuICogQW4gZW50cnkgcG9pbnQgZm9yIGRlcGxveSBjb21tYW5kLlxuICovXG5leHBvcnQgY2xhc3MgUGlwZWxpbmVEZXBsb3lDb21tYW5kXG4gIGltcGxlbWVudHMgQ29tbWFuZE1vZHVsZTxvYmplY3QsIFBpcGVsaW5lRGVwbG95Q29tbWFuZE9wdGlvbnM+XG57XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgY29tbWFuZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpYmU6IHN0cmluZztcblxuICAvKipcbiAgICogQ3JlYXRlcyB0b3AgbGV2ZWwgZW50cnkgcG9pbnQgZm9yIGRlcGxveSBjb21tYW5kLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBjbGllbnRDb25maWdHZW5lcmF0b3I6IENsaWVudENvbmZpZ0dlbmVyYXRvckFkYXB0ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBiYWNrZW5kRGVwbG95ZXI6IEJhY2tlbmREZXBsb3llcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGlzQ2lFbnZpcm9ubWVudDogdHlwZW9mIF9pc0NJID0gX2lzQ0lcbiAgKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ3BpcGVsaW5lLWRlcGxveSc7XG4gICAgdGhpcy5kZXNjcmliZSA9XG4gICAgICAnQ29tbWFuZCB0byBkZXBsb3kgYmFja2VuZHMgaW4gYSBjdXN0b20gQ0kvQ0QgcGlwZWxpbmUuIFRoaXMgY29tbWFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBsb2NhbGx5Lic7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGhhbmRsZXIgPSBhc3luYyAoXG4gICAgYXJnczogQXJndW1lbnRzQ2FtZWxDYXNlPFBpcGVsaW5lRGVwbG95Q29tbWFuZE9wdGlvbnM+XG4gICk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGlmICghdGhpcy5pc0NpRW52aXJvbm1lbnQpIHtcbiAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKCdSdW5uaW5nUGlwZWxpbmVEZXBsb3lOb3RJbkNpRXJyb3InLCB7XG4gICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgJ0l0IGxvb2tzIGxpa2UgdGhpcyBjb21tYW5kIGlzIGJlaW5nIHJ1biBvdXRzaWRlIG9mIGEgQ0kvQ0Qgd29ya2Zsb3cuJyxcbiAgICAgICAgcmVzb2x1dGlvbjogYFRvIGRlcGxveSBsb2NhbGx5IHVzZSAke2Zvcm1hdC5ub3JtYWxpemVBbXB4Q29tbWFuZChcbiAgICAgICAgICAnc2FuZGJveCdcbiAgICAgICAgKX0gaW5zdGVhZC5gLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgYmFja2VuZElkOiBCYWNrZW5kSWRlbnRpZmllciA9IHtcbiAgICAgIG5hbWVzcGFjZTogYXJncy5hcHBJZCxcbiAgICAgIG5hbWU6IGFyZ3MuYnJhbmNoLFxuICAgICAgdHlwZTogJ2JyYW5jaCcsXG4gICAgfTtcbiAgICBhd2FpdCB0aGlzLmJhY2tlbmREZXBsb3llci5kZXBsb3koYmFja2VuZElkLCB7XG4gICAgICB2YWxpZGF0ZUFwcFNvdXJjZXM6IHRydWUsXG4gICAgfSk7XG4gICAgYXdhaXQgdGhpcy5jbGllbnRDb25maWdHZW5lcmF0b3IuZ2VuZXJhdGVDbGllbnRDb25maWdUb0ZpbGUoXG4gICAgICBiYWNrZW5kSWQsXG4gICAgICBhcmdzLm91dHB1dHNWZXJzaW9uIGFzIENsaWVudENvbmZpZ1ZlcnNpb24sXG4gICAgICBhcmdzLm91dHB1dHNPdXREaXIsXG4gICAgICBhcmdzLm91dHB1dHNGb3JtYXRcbiAgICApO1xuICB9O1xuXG4gIGJ1aWxkZXIgPSAoeWFyZ3M6IEFyZ3YpOiBBcmd2PFBpcGVsaW5lRGVwbG95Q29tbWFuZE9wdGlvbnM+ID0+IHtcbiAgICByZXR1cm4geWFyZ3NcbiAgICAgIC52ZXJzaW9uKGZhbHNlKVxuICAgICAgLm9wdGlvbignYnJhbmNoJywge1xuICAgICAgICBkZXNjcmliZTogJ05hbWUgb2YgdGhlIGdpdCBicmFuY2ggYmVpbmcgZGVwbG95ZWQnLFxuICAgICAgICBkZW1hbmRPcHRpb246IHRydWUsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbignYXBwLWlkJywge1xuICAgICAgICBkZXNjcmliZTogJ1RoZSBhcHAgaWQgb2YgdGhlIHRhcmdldCBBbXBsaWZ5IGFwcCcsXG4gICAgICAgIGRlbWFuZE9wdGlvbjogdHJ1ZSxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGFycmF5OiBmYWxzZSxcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKCdvdXRwdXRzLW91dC1kaXInLCB7XG4gICAgICAgIGRlc2NyaWJlOlxuICAgICAgICAgICdBIHBhdGggdG8gZGlyZWN0b3J5IHdoZXJlIGFtcGxpZnlfb3V0cHV0cyBpcyB3cml0dGVuLiBJZiBub3QgcHJvdmlkZWQgZGVmYXVsdHMgdG8gY3VycmVudCBwcm9jZXNzIHdvcmtpbmcgZGlyZWN0b3J5LicsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbignb3V0cHV0cy12ZXJzaW9uJywge1xuICAgICAgICBkZXNjcmliZTpcbiAgICAgICAgICAnVmVyc2lvbiBvZiB0aGUgY29uZmlndXJhdGlvbi4gVmVyc2lvbiAwIHJlcHJlc2VudHMgY2xhc3NpYyBhbXBsaWZ5LWNsaSBjb25maWcgZmlsZSBhbXBsaWZ5LWNvbmZpZ3VyYXRpb24gYW5kIDEgcmVwcmVzZW50cyBuZXdlciBjb25maWcgZmlsZSBhbXBsaWZ5X291dHB1dHMnLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgICBjaG9pY2VzOiBPYmplY3QudmFsdWVzKENsaWVudENvbmZpZ1ZlcnNpb25PcHRpb24pLFxuICAgICAgICBkZWZhdWx0OiBERUZBVUxUX0NMSUVOVF9DT05GSUdfVkVSU0lPTixcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKCdvdXRwdXRzLWZvcm1hdCcsIHtcbiAgICAgICAgZGVzY3JpYmU6ICdhbXBsaWZ5X291dHB1dHMgZmlsZSBmb3JtYXQnLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgICBjaG9pY2VzOiBPYmplY3QudmFsdWVzKENsaWVudENvbmZpZ0Zvcm1hdCksXG4gICAgICB9KTtcbiAgfTtcbn1cbiJdfQ==