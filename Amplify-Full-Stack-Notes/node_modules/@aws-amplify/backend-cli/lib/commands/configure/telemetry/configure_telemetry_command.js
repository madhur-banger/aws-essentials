import { USAGE_DATA_TRACKING_ENABLED, } from '@aws-amplify/platform-core';
import { printer } from '@aws-amplify/cli-core';
/**
 * Command to configure AWS Amplify profile.
 */
export class ConfigureTelemetryCommand {
    configController;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Configure profile command.
     */
    constructor(configController) {
        this.configController = configController;
        this.command = 'telemetry';
        this.describe = 'Configure anonymous usage data collection';
    }
    /**
     * @inheritDoc
     */
    handler = () => {
        // CommandModule requires handler implementation. But this is never called if top level command
        // is configured to require subcommand.
        // Help is printed by default in that case before ever attempting to call handler.
        throw new Error('Top level generate handler should never be called');
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .command('enable', 'Enable anonymous data collection', {}, async () => {
            await this.configController.set(USAGE_DATA_TRACKING_ENABLED, true);
            printer.log('You have enabled telemetry data collection');
        })
            .command('disable', 'Disable anonymous data collection', {}, async () => {
            await this.configController.set(USAGE_DATA_TRACKING_ENABLED, false);
            printer.log('You have disabled telemetry data collection');
        })
            .demandCommand()
            .strictCommands()
            .recommendCommands();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlX3RlbGVtZXRyeV9jb21tYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1hbmRzL2NvbmZpZ3VyZS90ZWxlbWV0cnkvY29uZmlndXJlX3RlbGVtZXRyeV9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCwyQkFBMkIsR0FDNUIsTUFBTSw0QkFBNEIsQ0FBQztBQUVwQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDaEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8seUJBQXlCO0lBY1A7SUFiN0I7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUE2QixnQkFBeUM7UUFBekMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUF5QjtRQUNwRSxJQUFJLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQztRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLDJDQUEyQyxDQUFDO0lBQzlELENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU8sR0FBRyxHQUFHLEVBQUU7UUFDYiwrRkFBK0Y7UUFDL0YsdUNBQXVDO1FBQ3ZDLGtGQUFrRjtRQUNsRixNQUFNLElBQUksS0FBSyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7SUFDdkUsQ0FBQyxDQUFDO0lBRUY7O09BRUc7SUFDSCxPQUFPLEdBQUcsQ0FBQyxLQUFXLEVBQUUsRUFBRTtRQUN4QixPQUFPLEtBQUs7YUFDVCxPQUFPLENBQUMsUUFBUSxFQUFFLGtDQUFrQyxFQUFFLEVBQUUsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNwRSxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDbkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1FBQzVELENBQUMsQ0FBQzthQUNELE9BQU8sQ0FBQyxTQUFTLEVBQUUsbUNBQW1DLEVBQUUsRUFBRSxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3RFLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQywyQkFBMkIsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNwRSxPQUFPLENBQUMsR0FBRyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7UUFDN0QsQ0FBQyxDQUFDO2FBQ0QsYUFBYSxFQUFFO2FBQ2YsY0FBYyxFQUFFO2FBQ2hCLGlCQUFpQixFQUFFLENBQUM7SUFDekIsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb25maWd1cmF0aW9uQ29udHJvbGxlcixcbiAgVVNBR0VfREFUQV9UUkFDS0lOR19FTkFCTEVELFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBBcmd2LCBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgcHJpbnRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG4vKipcbiAqIENvbW1hbmQgdG8gY29uZmlndXJlIEFXUyBBbXBsaWZ5IHByb2ZpbGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb25maWd1cmVUZWxlbWV0cnlDb21tYW5kIGltcGxlbWVudHMgQ29tbWFuZE1vZHVsZTxvYmplY3Q+IHtcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBjb21tYW5kOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBkZXNjcmliZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmUgcHJvZmlsZSBjb21tYW5kLlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjb25maWdDb250cm9sbGVyOiBDb25maWd1cmF0aW9uQ29udHJvbGxlcikge1xuICAgIHRoaXMuY29tbWFuZCA9ICd0ZWxlbWV0cnknO1xuICAgIHRoaXMuZGVzY3JpYmUgPSAnQ29uZmlndXJlIGFub255bW91cyB1c2FnZSBkYXRhIGNvbGxlY3Rpb24nO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBoYW5kbGVyID0gKCkgPT4ge1xuICAgIC8vIENvbW1hbmRNb2R1bGUgcmVxdWlyZXMgaGFuZGxlciBpbXBsZW1lbnRhdGlvbi4gQnV0IHRoaXMgaXMgbmV2ZXIgY2FsbGVkIGlmIHRvcCBsZXZlbCBjb21tYW5kXG4gICAgLy8gaXMgY29uZmlndXJlZCB0byByZXF1aXJlIHN1YmNvbW1hbmQuXG4gICAgLy8gSGVscCBpcyBwcmludGVkIGJ5IGRlZmF1bHQgaW4gdGhhdCBjYXNlIGJlZm9yZSBldmVyIGF0dGVtcHRpbmcgdG8gY2FsbCBoYW5kbGVyLlxuICAgIHRocm93IG5ldyBFcnJvcignVG9wIGxldmVsIGdlbmVyYXRlIGhhbmRsZXIgc2hvdWxkIG5ldmVyIGJlIGNhbGxlZCcpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgYnVpbGRlciA9ICh5YXJnczogQXJndikgPT4ge1xuICAgIHJldHVybiB5YXJnc1xuICAgICAgLmNvbW1hbmQoJ2VuYWJsZScsICdFbmFibGUgYW5vbnltb3VzIGRhdGEgY29sbGVjdGlvbicsIHt9LCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHRoaXMuY29uZmlnQ29udHJvbGxlci5zZXQoVVNBR0VfREFUQV9UUkFDS0lOR19FTkFCTEVELCB0cnVlKTtcbiAgICAgICAgcHJpbnRlci5sb2coJ1lvdSBoYXZlIGVuYWJsZWQgdGVsZW1ldHJ5IGRhdGEgY29sbGVjdGlvbicpO1xuICAgICAgfSlcbiAgICAgIC5jb21tYW5kKCdkaXNhYmxlJywgJ0Rpc2FibGUgYW5vbnltb3VzIGRhdGEgY29sbGVjdGlvbicsIHt9LCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHRoaXMuY29uZmlnQ29udHJvbGxlci5zZXQoVVNBR0VfREFUQV9UUkFDS0lOR19FTkFCTEVELCBmYWxzZSk7XG4gICAgICAgIHByaW50ZXIubG9nKCdZb3UgaGF2ZSBkaXNhYmxlZCB0ZWxlbWV0cnkgZGF0YSBjb2xsZWN0aW9uJyk7XG4gICAgICB9KVxuICAgICAgLmRlbWFuZENvbW1hbmQoKVxuICAgICAgLnN0cmljdENvbW1hbmRzKClcbiAgICAgIC5yZWNvbW1lbmRDb21tYW5kcygpO1xuICB9O1xufVxuIl19