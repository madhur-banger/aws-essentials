import { AmplifyPrompter, printer } from '@aws-amplify/cli-core';
import { DEFAULT_PROFILE } from '@smithy/shared-ini-file-loader';
import { EOL } from 'os';
import { Open } from '../open/open.js';
const configureAccountUrl = 'https://docs.amplify.aws/gen2/start/account-setup/';
const profileSetupInstruction = `Follow the instructions at ${configureAccountUrl}${EOL}to configure Amplify IAM user and credentials.${EOL}`;
/**
 * Command to configure AWS Amplify profile.
 */
export class ConfigureProfileCommand {
    profileController;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Configure profile command.
     */
    constructor(profileController) {
        this.profileController = profileController;
        this.command = 'profile';
        this.describe = 'Configure an AWS Amplify profile';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const profileName = args.name;
        const profileExists = await this.profileController.profileExists(profileName);
        if (profileExists) {
            printer.print(`Profile '${profileName}' already exists!${EOL}${profileSetupInstruction}`);
            return;
        }
        const hasIAMUser = await AmplifyPrompter.yesOrNo({
            message: 'Do you already have IAM User credentials?',
        });
        if (!hasIAMUser) {
            printer.print(profileSetupInstruction);
            await Open.open(configureAccountUrl, { wait: false });
            await AmplifyPrompter.input({
                message: `Hit [enter] when complete`,
            });
        }
        const accessKeyId = await AmplifyPrompter.secretValue('Enter Access Key ID:');
        const secretAccessKey = await AmplifyPrompter.secretValue('Enter Secret Access Key:');
        const region = await AmplifyPrompter.input({
            message: `Enter the AWS region to use with the '${profileName}' profile (eg us-east-1, us-west-2, etc):`,
        });
        await this.profileController.createOrAppendAWSFiles({
            profile: profileName,
            region,
            accessKeyId,
            secretAccessKey,
        });
        printer.print(`Created profile ${profileName} successfully!`);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs.option('name', {
            describe: 'An AWS profile name',
            type: 'string',
            array: false,
            default: DEFAULT_PROFILE,
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlX3Byb2ZpbGVfY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9jb25maWd1cmUvY29uZmlndXJlX3Byb2ZpbGVfY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNqRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3pCLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUl2QyxNQUFNLG1CQUFtQixHQUN2QixvREFBb0QsQ0FBQztBQUV2RCxNQUFNLHVCQUF1QixHQUFHLDhCQUE4QixtQkFBbUIsR0FBRyxHQUFHLGlEQUFpRCxHQUFHLEVBQUUsQ0FBQztBQUU5STs7R0FFRztBQUNILE1BQU0sT0FBTyx1QkFBdUI7SUFnQkw7SUFiN0I7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUE2QixpQkFBb0M7UUFBcEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUMvRCxJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLGtDQUFrQyxDQUFDO0lBQ3JELENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU8sR0FBRyxLQUFLLEVBQ2IsSUFBd0QsRUFDekMsRUFBRTtRQUNqQixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQzlCLE1BQU0sYUFBYSxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FDOUQsV0FBVyxDQUNaLENBQUM7UUFDRixJQUFJLGFBQWEsRUFBRTtZQUNqQixPQUFPLENBQUMsS0FBSyxDQUNYLFlBQVksV0FBVyxvQkFBb0IsR0FBRyxHQUFHLHVCQUF1QixFQUFFLENBQzNFLENBQUM7WUFDRixPQUFPO1NBQ1I7UUFDRCxNQUFNLFVBQVUsR0FBRyxNQUFNLGVBQWUsQ0FBQyxPQUFPLENBQUM7WUFDL0MsT0FBTyxFQUFFLDJDQUEyQztTQUNyRCxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBRXZDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ3RELE1BQU0sZUFBZSxDQUFDLEtBQUssQ0FBQztnQkFDMUIsT0FBTyxFQUFFLDJCQUEyQjthQUNyQyxDQUFDLENBQUM7U0FDSjtRQUVELE1BQU0sV0FBVyxHQUFHLE1BQU0sZUFBZSxDQUFDLFdBQVcsQ0FDbkQsc0JBQXNCLENBQ3ZCLENBQUM7UUFDRixNQUFNLGVBQWUsR0FBRyxNQUFNLGVBQWUsQ0FBQyxXQUFXLENBQ3ZELDBCQUEwQixDQUMzQixDQUFDO1FBRUYsTUFBTSxNQUFNLEdBQUcsTUFBTSxlQUFlLENBQUMsS0FBSyxDQUFDO1lBQ3pDLE9BQU8sRUFBRSx5Q0FBeUMsV0FBVywyQ0FBMkM7U0FDekcsQ0FBQyxDQUFDO1FBRUgsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsc0JBQXNCLENBQUM7WUFDbEQsT0FBTyxFQUFFLFdBQVc7WUFDcEIsTUFBTTtZQUNOLFdBQVc7WUFDWCxlQUFlO1NBQ2hCLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxLQUFLLENBQUMsbUJBQW1CLFdBQVcsZ0JBQWdCLENBQUMsQ0FBQztJQUNoRSxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE9BQU8sR0FBRyxDQUFDLEtBQVcsRUFBd0MsRUFBRTtRQUM5RCxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQzFCLFFBQVEsRUFBRSxxQkFBcUI7WUFDL0IsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztZQUNaLE9BQU8sRUFBRSxlQUFlO1NBQ3pCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJndW1lbnRzQ2FtZWxDYXNlLCBBcmd2LCBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgQW1wbGlmeVByb21wdGVyLCBwcmludGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcbmltcG9ydCB7IERFRkFVTFRfUFJPRklMRSB9IGZyb20gJ0BzbWl0aHkvc2hhcmVkLWluaS1maWxlLWxvYWRlcic7XG5pbXBvcnQgeyBFT0wgfSBmcm9tICdvcyc7XG5pbXBvcnQgeyBPcGVuIH0gZnJvbSAnLi4vb3Blbi9vcGVuLmpzJztcbmltcG9ydCB7IEFyZ3VtZW50c0tlYmFiQ2FzZSB9IGZyb20gJy4uLy4uL2tlYmFiX2Nhc2UuanMnO1xuaW1wb3J0IHsgUHJvZmlsZUNvbnRyb2xsZXIgfSBmcm9tICcuL3Byb2ZpbGVfY29udHJvbGxlci5qcyc7XG5cbmNvbnN0IGNvbmZpZ3VyZUFjY291bnRVcmwgPVxuICAnaHR0cHM6Ly9kb2NzLmFtcGxpZnkuYXdzL2dlbjIvc3RhcnQvYWNjb3VudC1zZXR1cC8nO1xuXG5jb25zdCBwcm9maWxlU2V0dXBJbnN0cnVjdGlvbiA9IGBGb2xsb3cgdGhlIGluc3RydWN0aW9ucyBhdCAke2NvbmZpZ3VyZUFjY291bnRVcmx9JHtFT0x9dG8gY29uZmlndXJlIEFtcGxpZnkgSUFNIHVzZXIgYW5kIGNyZWRlbnRpYWxzLiR7RU9MfWA7XG5cbi8qKlxuICogQ29tbWFuZCB0byBjb25maWd1cmUgQVdTIEFtcGxpZnkgcHJvZmlsZS5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbmZpZ3VyZVByb2ZpbGVDb21tYW5kXG4gIGltcGxlbWVudHMgQ29tbWFuZE1vZHVsZTxvYmplY3QsIENvbmZpZ3VyZVByb2ZpbGVDb21tYW5kT3B0aW9ucz5cbntcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBjb21tYW5kOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBkZXNjcmliZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmUgcHJvZmlsZSBjb21tYW5kLlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBwcm9maWxlQ29udHJvbGxlcjogUHJvZmlsZUNvbnRyb2xsZXIpIHtcbiAgICB0aGlzLmNvbW1hbmQgPSAncHJvZmlsZSc7XG4gICAgdGhpcy5kZXNjcmliZSA9ICdDb25maWd1cmUgYW4gQVdTIEFtcGxpZnkgcHJvZmlsZSc7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGhhbmRsZXIgPSBhc3luYyAoXG4gICAgYXJnczogQXJndW1lbnRzQ2FtZWxDYXNlPENvbmZpZ3VyZVByb2ZpbGVDb21tYW5kT3B0aW9ucz5cbiAgKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgY29uc3QgcHJvZmlsZU5hbWUgPSBhcmdzLm5hbWU7XG4gICAgY29uc3QgcHJvZmlsZUV4aXN0cyA9IGF3YWl0IHRoaXMucHJvZmlsZUNvbnRyb2xsZXIucHJvZmlsZUV4aXN0cyhcbiAgICAgIHByb2ZpbGVOYW1lXG4gICAgKTtcbiAgICBpZiAocHJvZmlsZUV4aXN0cykge1xuICAgICAgcHJpbnRlci5wcmludChcbiAgICAgICAgYFByb2ZpbGUgJyR7cHJvZmlsZU5hbWV9JyBhbHJlYWR5IGV4aXN0cyEke0VPTH0ke3Byb2ZpbGVTZXR1cEluc3RydWN0aW9ufWBcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGhhc0lBTVVzZXIgPSBhd2FpdCBBbXBsaWZ5UHJvbXB0ZXIueWVzT3JObyh7XG4gICAgICBtZXNzYWdlOiAnRG8geW91IGFscmVhZHkgaGF2ZSBJQU0gVXNlciBjcmVkZW50aWFscz8nLFxuICAgIH0pO1xuXG4gICAgaWYgKCFoYXNJQU1Vc2VyKSB7XG4gICAgICBwcmludGVyLnByaW50KHByb2ZpbGVTZXR1cEluc3RydWN0aW9uKTtcblxuICAgICAgYXdhaXQgT3Blbi5vcGVuKGNvbmZpZ3VyZUFjY291bnRVcmwsIHsgd2FpdDogZmFsc2UgfSk7XG4gICAgICBhd2FpdCBBbXBsaWZ5UHJvbXB0ZXIuaW5wdXQoe1xuICAgICAgICBtZXNzYWdlOiBgSGl0IFtlbnRlcl0gd2hlbiBjb21wbGV0ZWAsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBhY2Nlc3NLZXlJZCA9IGF3YWl0IEFtcGxpZnlQcm9tcHRlci5zZWNyZXRWYWx1ZShcbiAgICAgICdFbnRlciBBY2Nlc3MgS2V5IElEOidcbiAgICApO1xuICAgIGNvbnN0IHNlY3JldEFjY2Vzc0tleSA9IGF3YWl0IEFtcGxpZnlQcm9tcHRlci5zZWNyZXRWYWx1ZShcbiAgICAgICdFbnRlciBTZWNyZXQgQWNjZXNzIEtleTonXG4gICAgKTtcblxuICAgIGNvbnN0IHJlZ2lvbiA9IGF3YWl0IEFtcGxpZnlQcm9tcHRlci5pbnB1dCh7XG4gICAgICBtZXNzYWdlOiBgRW50ZXIgdGhlIEFXUyByZWdpb24gdG8gdXNlIHdpdGggdGhlICcke3Byb2ZpbGVOYW1lfScgcHJvZmlsZSAoZWcgdXMtZWFzdC0xLCB1cy13ZXN0LTIsIGV0Yyk6YCxcbiAgICB9KTtcblxuICAgIGF3YWl0IHRoaXMucHJvZmlsZUNvbnRyb2xsZXIuY3JlYXRlT3JBcHBlbmRBV1NGaWxlcyh7XG4gICAgICBwcm9maWxlOiBwcm9maWxlTmFtZSxcbiAgICAgIHJlZ2lvbixcbiAgICAgIGFjY2Vzc0tleUlkLFxuICAgICAgc2VjcmV0QWNjZXNzS2V5LFxuICAgIH0pO1xuXG4gICAgcHJpbnRlci5wcmludChgQ3JlYXRlZCBwcm9maWxlICR7cHJvZmlsZU5hbWV9IHN1Y2Nlc3NmdWxseSFgKTtcbiAgfTtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGJ1aWxkZXIgPSAoeWFyZ3M6IEFyZ3YpOiBBcmd2PENvbmZpZ3VyZVByb2ZpbGVDb21tYW5kT3B0aW9ucz4gPT4ge1xuICAgIHJldHVybiB5YXJncy5vcHRpb24oJ25hbWUnLCB7XG4gICAgICBkZXNjcmliZTogJ0FuIEFXUyBwcm9maWxlIG5hbWUnLFxuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICBhcnJheTogZmFsc2UsXG4gICAgICBkZWZhdWx0OiBERUZBVUxUX1BST0ZJTEUsXG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCB0eXBlIENvbmZpZ3VyZVByb2ZpbGVDb21tYW5kT3B0aW9ucyA9XG4gIEFyZ3VtZW50c0tlYmFiQ2FzZTxDb25maWd1cmVQcm9maWxlQ29tbWFuZE9wdGlvbnNDYW1lbENhc2U+O1xuXG50eXBlIENvbmZpZ3VyZVByb2ZpbGVDb21tYW5kT3B0aW9uc0NhbWVsQ2FzZSA9IHtcbiAgbmFtZTogc3RyaW5nO1xufTtcbiJdfQ==