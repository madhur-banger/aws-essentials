import { generateClientConfig, generateClientConfigToFile, } from '@aws-amplify/client-config';
import { printer } from '@aws-amplify/cli-core';
/**
 * Adapts static generateClientConfigToFile from @aws-amplify/client-config call to make it injectable and testable.
 */
export class ClientConfigGeneratorAdapter {
    awsClientProvider;
    /**
     * Creates new adapter for generateClientConfigToFile from @aws-amplify/client-config.
     */
    constructor(awsClientProvider) {
        this.awsClientProvider = awsClientProvider;
    }
    /**
     * Generates the client configuration for a given backend
     */
    generateClientConfig = async (backendIdentifier, version) => {
        return generateClientConfig(backendIdentifier, version, this.awsClientProvider);
    };
    /**
     * Calls generateClientConfigToFile from @aws-amplify/client-config.
     * @see generateClientConfigToFile for more information.
     */
    generateClientConfigToFile = async (backendIdentifier, version, outDir, format) => {
        const { filesWritten } = await generateClientConfigToFile(backendIdentifier, version, outDir, format, this.awsClientProvider);
        filesWritten.forEach((file) => printer.log(`File written: ${file}`));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50X2NvbmZpZ19nZW5lcmF0b3JfYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGllbnQtY29uZmlnL2NsaWVudF9jb25maWdfZ2VuZXJhdG9yX2FkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUlMLG9CQUFvQixFQUNwQiwwQkFBMEIsR0FDM0IsTUFBTSw0QkFBNEIsQ0FBQztBQUVwQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFNaEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sNEJBQTRCO0lBS3BCO0lBSm5COztPQUVHO0lBQ0gsWUFDbUIsaUJBSWY7UUFKZSxzQkFBaUIsR0FBakIsaUJBQWlCLENBSWhDO0lBQ0QsQ0FBQztJQUNKOztPQUVHO0lBQ0gsb0JBQW9CLEdBQUcsS0FBSyxFQUMxQixpQkFBNEMsRUFDNUMsT0FBNEIsRUFDTCxFQUFFO1FBQ3pCLE9BQU8sb0JBQW9CLENBQ3pCLGlCQUFpQixFQUNqQixPQUFPLEVBQ1AsSUFBSSxDQUFDLGlCQUFpQixDQUN2QixDQUFDO0lBQ0osQ0FBQyxDQUFDO0lBRUY7OztPQUdHO0lBQ0gsMEJBQTBCLEdBQUcsS0FBSyxFQUNoQyxpQkFBNEMsRUFDNUMsT0FBNEIsRUFDNUIsTUFBZSxFQUNmLE1BQTJCLEVBQ1osRUFBRTtRQUNqQixNQUFNLEVBQUUsWUFBWSxFQUFFLEdBQUcsTUFBTSwwQkFBMEIsQ0FDdkQsaUJBQWlCLEVBQ2pCLE9BQU8sRUFDUCxNQUFNLEVBQ04sTUFBTSxFQUNOLElBQUksQ0FBQyxpQkFBaUIsQ0FDdkIsQ0FBQztRQUVGLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENsaWVudENvbmZpZyxcbiAgQ2xpZW50Q29uZmlnRm9ybWF0LFxuICBDbGllbnRDb25maWdWZXJzaW9uLFxuICBnZW5lcmF0ZUNsaWVudENvbmZpZyxcbiAgZ2VuZXJhdGVDbGllbnRDb25maWdUb0ZpbGUsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGllbnQtY29uZmlnJztcbmltcG9ydCB7IERlcGxveWVkQmFja2VuZElkZW50aWZpZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvZGVwbG95ZWQtYmFja2VuZC1jbGllbnQnO1xuaW1wb3J0IHsgcHJpbnRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5pbXBvcnQgeyBBV1NDbGllbnRQcm92aWRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgUzNDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtczMnO1xuaW1wb3J0IHsgQW1wbGlmeUNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1hbXBsaWZ5JztcbmltcG9ydCB7IENsb3VkRm9ybWF0aW9uQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3VkZm9ybWF0aW9uJztcblxuLyoqXG4gKiBBZGFwdHMgc3RhdGljIGdlbmVyYXRlQ2xpZW50Q29uZmlnVG9GaWxlIGZyb20gQGF3cy1hbXBsaWZ5L2NsaWVudC1jb25maWcgY2FsbCB0byBtYWtlIGl0IGluamVjdGFibGUgYW5kIHRlc3RhYmxlLlxuICovXG5leHBvcnQgY2xhc3MgQ2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIG5ldyBhZGFwdGVyIGZvciBnZW5lcmF0ZUNsaWVudENvbmZpZ1RvRmlsZSBmcm9tIEBhd3MtYW1wbGlmeS9jbGllbnQtY29uZmlnLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBhd3NDbGllbnRQcm92aWRlcjogQVdTQ2xpZW50UHJvdmlkZXI8e1xuICAgICAgZ2V0UzNDbGllbnQ6IFMzQ2xpZW50O1xuICAgICAgZ2V0QW1wbGlmeUNsaWVudDogQW1wbGlmeUNsaWVudDtcbiAgICAgIGdldENsb3VkRm9ybWF0aW9uQ2xpZW50OiBDbG91ZEZvcm1hdGlvbkNsaWVudDtcbiAgICB9PlxuICApIHt9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgdGhlIGNsaWVudCBjb25maWd1cmF0aW9uIGZvciBhIGdpdmVuIGJhY2tlbmRcbiAgICovXG4gIGdlbmVyYXRlQ2xpZW50Q29uZmlnID0gYXN5bmMgKFxuICAgIGJhY2tlbmRJZGVudGlmaWVyOiBEZXBsb3llZEJhY2tlbmRJZGVudGlmaWVyLFxuICAgIHZlcnNpb246IENsaWVudENvbmZpZ1ZlcnNpb25cbiAgKTogUHJvbWlzZTxDbGllbnRDb25maWc+ID0+IHtcbiAgICByZXR1cm4gZ2VuZXJhdGVDbGllbnRDb25maWcoXG4gICAgICBiYWNrZW5kSWRlbnRpZmllcixcbiAgICAgIHZlcnNpb24sXG4gICAgICB0aGlzLmF3c0NsaWVudFByb3ZpZGVyXG4gICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogQ2FsbHMgZ2VuZXJhdGVDbGllbnRDb25maWdUb0ZpbGUgZnJvbSBAYXdzLWFtcGxpZnkvY2xpZW50LWNvbmZpZy5cbiAgICogQHNlZSBnZW5lcmF0ZUNsaWVudENvbmZpZ1RvRmlsZSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICovXG4gIGdlbmVyYXRlQ2xpZW50Q29uZmlnVG9GaWxlID0gYXN5bmMgKFxuICAgIGJhY2tlbmRJZGVudGlmaWVyOiBEZXBsb3llZEJhY2tlbmRJZGVudGlmaWVyLFxuICAgIHZlcnNpb246IENsaWVudENvbmZpZ1ZlcnNpb24sXG4gICAgb3V0RGlyPzogc3RyaW5nLFxuICAgIGZvcm1hdD86IENsaWVudENvbmZpZ0Zvcm1hdFxuICApOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCB7IGZpbGVzV3JpdHRlbiB9ID0gYXdhaXQgZ2VuZXJhdGVDbGllbnRDb25maWdUb0ZpbGUoXG4gICAgICBiYWNrZW5kSWRlbnRpZmllcixcbiAgICAgIHZlcnNpb24sXG4gICAgICBvdXREaXIsXG4gICAgICBmb3JtYXQsXG4gICAgICB0aGlzLmF3c0NsaWVudFByb3ZpZGVyXG4gICAgKTtcblxuICAgIGZpbGVzV3JpdHRlbi5mb3JFYWNoKChmaWxlKSA9PiBwcmludGVyLmxvZyhgRmlsZSB3cml0dGVuOiAke2ZpbGV9YCkpO1xuICB9O1xufVxuIl19