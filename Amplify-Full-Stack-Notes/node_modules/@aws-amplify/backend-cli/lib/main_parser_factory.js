import yargs from 'yargs';
import { createGenerateCommand } from './commands/generate/generate_command_factory.js';
import { createSandboxCommand } from './commands/sandbox/sandbox_command_factory.js';
import { createPipelineDeployCommand } from './commands/pipeline-deploy/pipeline_deploy_command_factory.js';
import { createConfigureCommand } from './commands/configure/configure_command_factory.js';
import { createInfoCommand } from './commands/info/info_command_factory.js';
import * as path from 'path';
/**
 * Creates main parser.
 */
export const createMainParser = (libraryVersion) => {
    const parser = yargs()
        .version(libraryVersion)
        // This option is being used indirectly to configure the log level of the Printer instance.
        // refer: https://github.com/aws-amplify/amplify-backend/blob/main/packages/cli/src/printer.ts
        .options('debug', {
        type: 'boolean',
        default: false,
        description: 'Print debug logs to the console',
    })
        .strict()
        // pnpm places the command bin file in `ampx.js` instead of `ampx` which causes yargs to think the command name is `ampx.js`.
        // This tells yargs that the command name is `ampx`.
        .scriptName(path.parse(process.argv[1]).name)
        .command(createGenerateCommand())
        .command(createSandboxCommand())
        .command(createPipelineDeployCommand())
        .command(createConfigureCommand())
        .command(createInfoCommand())
        .help()
        .demandCommand()
        .strictCommands()
        .recommendCommands()
        .fail(false);
    return parser;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbl9wYXJzZXJfZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluX3BhcnNlcl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBZSxNQUFNLE9BQU8sQ0FBQztBQUNwQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUN4RixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUNyRixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwrREFBK0QsQ0FBQztBQUM1RyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUMzRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUM1RSxPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUU3Qjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsY0FBc0IsRUFBUSxFQUFFO0lBQy9ELE1BQU0sTUFBTSxHQUFHLEtBQUssRUFBRTtTQUNuQixPQUFPLENBQUMsY0FBYyxDQUFDO1FBQ3hCLDJGQUEyRjtRQUMzRiw4RkFBOEY7U0FDN0YsT0FBTyxDQUFDLE9BQU8sRUFBRTtRQUNoQixJQUFJLEVBQUUsU0FBUztRQUNmLE9BQU8sRUFBRSxLQUFLO1FBQ2QsV0FBVyxFQUFFLGlDQUFpQztLQUMvQyxDQUFDO1NBQ0QsTUFBTSxFQUFFO1FBQ1QsNkhBQTZIO1FBQzdILG9EQUFvRDtTQUNuRCxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1NBQzVDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1NBQ2hDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1NBQy9CLE9BQU8sQ0FBQywyQkFBMkIsRUFBRSxDQUFDO1NBQ3RDLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1NBQ2pDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1NBQzVCLElBQUksRUFBRTtTQUNOLGFBQWEsRUFBRTtTQUNmLGNBQWMsRUFBRTtTQUNoQixpQkFBaUIsRUFBRTtTQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFZixPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeWFyZ3MsIHsgQXJndiB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IGNyZWF0ZUdlbmVyYXRlQ29tbWFuZCB9IGZyb20gJy4vY29tbWFuZHMvZ2VuZXJhdGUvZ2VuZXJhdGVfY29tbWFuZF9mYWN0b3J5LmpzJztcbmltcG9ydCB7IGNyZWF0ZVNhbmRib3hDb21tYW5kIH0gZnJvbSAnLi9jb21tYW5kcy9zYW5kYm94L3NhbmRib3hfY29tbWFuZF9mYWN0b3J5LmpzJztcbmltcG9ydCB7IGNyZWF0ZVBpcGVsaW5lRGVwbG95Q29tbWFuZCB9IGZyb20gJy4vY29tbWFuZHMvcGlwZWxpbmUtZGVwbG95L3BpcGVsaW5lX2RlcGxveV9jb21tYW5kX2ZhY3RvcnkuanMnO1xuaW1wb3J0IHsgY3JlYXRlQ29uZmlndXJlQ29tbWFuZCB9IGZyb20gJy4vY29tbWFuZHMvY29uZmlndXJlL2NvbmZpZ3VyZV9jb21tYW5kX2ZhY3RvcnkuanMnO1xuaW1wb3J0IHsgY3JlYXRlSW5mb0NvbW1hbmQgfSBmcm9tICcuL2NvbW1hbmRzL2luZm8vaW5mb19jb21tYW5kX2ZhY3RvcnkuanMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcblxuLyoqXG4gKiBDcmVhdGVzIG1haW4gcGFyc2VyLlxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlTWFpblBhcnNlciA9IChsaWJyYXJ5VmVyc2lvbjogc3RyaW5nKTogQXJndiA9PiB7XG4gIGNvbnN0IHBhcnNlciA9IHlhcmdzKClcbiAgICAudmVyc2lvbihsaWJyYXJ5VmVyc2lvbilcbiAgICAvLyBUaGlzIG9wdGlvbiBpcyBiZWluZyB1c2VkIGluZGlyZWN0bHkgdG8gY29uZmlndXJlIHRoZSBsb2cgbGV2ZWwgb2YgdGhlIFByaW50ZXIgaW5zdGFuY2UuXG4gICAgLy8gcmVmZXI6IGh0dHBzOi8vZ2l0aHViLmNvbS9hd3MtYW1wbGlmeS9hbXBsaWZ5LWJhY2tlbmQvYmxvYi9tYWluL3BhY2thZ2VzL2NsaS9zcmMvcHJpbnRlci50c1xuICAgIC5vcHRpb25zKCdkZWJ1ZycsIHtcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgZGVzY3JpcHRpb246ICdQcmludCBkZWJ1ZyBsb2dzIHRvIHRoZSBjb25zb2xlJyxcbiAgICB9KVxuICAgIC5zdHJpY3QoKVxuICAgIC8vIHBucG0gcGxhY2VzIHRoZSBjb21tYW5kIGJpbiBmaWxlIGluIGBhbXB4LmpzYCBpbnN0ZWFkIG9mIGBhbXB4YCB3aGljaCBjYXVzZXMgeWFyZ3MgdG8gdGhpbmsgdGhlIGNvbW1hbmQgbmFtZSBpcyBgYW1weC5qc2AuXG4gICAgLy8gVGhpcyB0ZWxscyB5YXJncyB0aGF0IHRoZSBjb21tYW5kIG5hbWUgaXMgYGFtcHhgLlxuICAgIC5zY3JpcHROYW1lKHBhdGgucGFyc2UocHJvY2Vzcy5hcmd2WzFdKS5uYW1lKVxuICAgIC5jb21tYW5kKGNyZWF0ZUdlbmVyYXRlQ29tbWFuZCgpKVxuICAgIC5jb21tYW5kKGNyZWF0ZVNhbmRib3hDb21tYW5kKCkpXG4gICAgLmNvbW1hbmQoY3JlYXRlUGlwZWxpbmVEZXBsb3lDb21tYW5kKCkpXG4gICAgLmNvbW1hbmQoY3JlYXRlQ29uZmlndXJlQ29tbWFuZCgpKVxuICAgIC5jb21tYW5kKGNyZWF0ZUluZm9Db21tYW5kKCkpXG4gICAgLmhlbHAoKVxuICAgIC5kZW1hbmRDb21tYW5kKClcbiAgICAuc3RyaWN0Q29tbWFuZHMoKVxuICAgIC5yZWNvbW1lbmRDb21tYW5kcygpXG4gICAgLmZhaWwoZmFsc2UpO1xuXG4gIHJldHVybiBwYXJzZXI7XG59O1xuIl19