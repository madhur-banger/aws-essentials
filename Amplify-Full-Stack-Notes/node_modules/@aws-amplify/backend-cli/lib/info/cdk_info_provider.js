import { execa as _execa } from 'execa';
import { format } from '@aws-amplify/cli-core';
/**
 * Provides information about CDK.
 */
export class CdkInfoProvider {
    execa;
    /**
     * execa to run the cdk command and testing.
     */
    constructor(execa = _execa) {
        this.execa = execa;
    }
    /**
     * Format CDK information.
     * @returns The cdk doctor output.
     */
    async getCdkInfo() {
        const cdkDoctorArgs = [
            'cdk',
            'doctor',
            '--no-notices',
            '--',
            ' --no-color',
        ];
        const output = await this.execa('npx', cdkDoctorArgs, {
            all: true,
        });
        return this.formatCdkInfo(output.all ?? output.stderr);
    }
    /**
     * Format CDK information.
     * @param info - The CDK information to format.
     * @returns The formatted CDK information.
     */
    formatCdkInfo(info) {
        const sensitiveKeys = [
            'AWS_ACCESS_KEY_ID',
            'AWS_SECRET_ACCESS_KEY',
            'AWS_SESSION_TOKEN',
        ];
        const lines = info.split(/\r\n|\r|\n/);
        const formattedLines = lines
            .filter((line) => !sensitiveKeys.some((key) => line.includes(key)))
            .map((line) => {
            //removes emoji from output
            let formattedLine = line.replace(/[^\x20-\x7E]/g, '').trim();
            if (formattedLine.startsWith('AWS_') ||
                formattedLine.startsWith('CDK_')) {
                formattedLine = format.indent(formattedLine);
            }
            else if (formattedLine.startsWith('- ')) {
                formattedLine = format.indent(formattedLine.substring(2));
            }
            return formattedLine;
        });
        return formattedLines
            .filter((line) => !line.startsWith('CDK Version'))
            .join('\n');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrX2luZm9fcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5mby9jZGtfaW5mb19wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxJQUFJLE1BQU0sRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUN4QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFL0M7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBZTtJQUlHO0lBSDdCOztPQUVHO0lBQ0gsWUFBNkIsUUFBUSxNQUFNO1FBQWQsVUFBSyxHQUFMLEtBQUssQ0FBUztJQUFHLENBQUM7SUFFL0M7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLFVBQVU7UUFDZCxNQUFNLGFBQWEsR0FBYTtZQUM5QixLQUFLO1lBQ0wsUUFBUTtZQUNSLGNBQWM7WUFDZCxJQUFJO1lBQ0osYUFBYTtTQUNkLENBQUM7UUFFRixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRTtZQUNwRCxHQUFHLEVBQUUsSUFBSTtTQUNWLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLGFBQWEsQ0FBQyxJQUFZO1FBQ2hDLE1BQU0sYUFBYSxHQUFHO1lBQ3BCLG1CQUFtQjtZQUNuQix1QkFBdUI7WUFDdkIsbUJBQW1CO1NBQ3BCLENBQUM7UUFFRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sY0FBYyxHQUFHLEtBQUs7YUFDekIsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUNsRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNaLDJCQUEyQjtZQUMzQixJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUU3RCxJQUNFLGFBQWEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO2dCQUNoQyxhQUFhLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUNoQztnQkFDQSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUM5QztpQkFBTSxJQUFJLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3pDLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMzRDtZQUVELE9BQU8sYUFBYSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO1FBRUwsT0FBTyxjQUFjO2FBQ2xCLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQ2pELElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjYSBhcyBfZXhlY2EgfSBmcm9tICdleGVjYSc7XG5pbXBvcnQgeyBmb3JtYXQgfSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuXG4vKipcbiAqIFByb3ZpZGVzIGluZm9ybWF0aW9uIGFib3V0IENESy5cbiAqL1xuZXhwb3J0IGNsYXNzIENka0luZm9Qcm92aWRlciB7XG4gIC8qKlxuICAgKiBleGVjYSB0byBydW4gdGhlIGNkayBjb21tYW5kIGFuZCB0ZXN0aW5nLlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBleGVjYSA9IF9leGVjYSkge31cblxuICAvKipcbiAgICogRm9ybWF0IENESyBpbmZvcm1hdGlvbi5cbiAgICogQHJldHVybnMgVGhlIGNkayBkb2N0b3Igb3V0cHV0LlxuICAgKi9cbiAgYXN5bmMgZ2V0Q2RrSW5mbygpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IGNka0RvY3RvckFyZ3M6IHN0cmluZ1tdID0gW1xuICAgICAgJ2NkaycsXG4gICAgICAnZG9jdG9yJyxcbiAgICAgICctLW5vLW5vdGljZXMnLFxuICAgICAgJy0tJyxcbiAgICAgICcgLS1uby1jb2xvcicsXG4gICAgXTtcblxuICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IHRoaXMuZXhlY2EoJ25weCcsIGNka0RvY3RvckFyZ3MsIHtcbiAgICAgIGFsbDogdHJ1ZSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLmZvcm1hdENka0luZm8ob3V0cHV0LmFsbCA/PyBvdXRwdXQuc3RkZXJyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JtYXQgQ0RLIGluZm9ybWF0aW9uLlxuICAgKiBAcGFyYW0gaW5mbyAtIFRoZSBDREsgaW5mb3JtYXRpb24gdG8gZm9ybWF0LlxuICAgKiBAcmV0dXJucyBUaGUgZm9ybWF0dGVkIENESyBpbmZvcm1hdGlvbi5cbiAgICovXG4gIHByaXZhdGUgZm9ybWF0Q2RrSW5mbyhpbmZvOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IHNlbnNpdGl2ZUtleXMgPSBbXG4gICAgICAnQVdTX0FDQ0VTU19LRVlfSUQnLFxuICAgICAgJ0FXU19TRUNSRVRfQUNDRVNTX0tFWScsXG4gICAgICAnQVdTX1NFU1NJT05fVE9LRU4nLFxuICAgIF07XG5cbiAgICBjb25zdCBsaW5lcyA9IGluZm8uc3BsaXQoL1xcclxcbnxcXHJ8XFxuLyk7XG4gICAgY29uc3QgZm9ybWF0dGVkTGluZXMgPSBsaW5lc1xuICAgICAgLmZpbHRlcigobGluZSkgPT4gIXNlbnNpdGl2ZUtleXMuc29tZSgoa2V5KSA9PiBsaW5lLmluY2x1ZGVzKGtleSkpKVxuICAgICAgLm1hcCgobGluZSkgPT4ge1xuICAgICAgICAvL3JlbW92ZXMgZW1vamkgZnJvbSBvdXRwdXRcbiAgICAgICAgbGV0IGZvcm1hdHRlZExpbmUgPSBsaW5lLnJlcGxhY2UoL1teXFx4MjAtXFx4N0VdL2csICcnKS50cmltKCk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGZvcm1hdHRlZExpbmUuc3RhcnRzV2l0aCgnQVdTXycpIHx8XG4gICAgICAgICAgZm9ybWF0dGVkTGluZS5zdGFydHNXaXRoKCdDREtfJylcbiAgICAgICAgKSB7XG4gICAgICAgICAgZm9ybWF0dGVkTGluZSA9IGZvcm1hdC5pbmRlbnQoZm9ybWF0dGVkTGluZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0dGVkTGluZS5zdGFydHNXaXRoKCctICcpKSB7XG4gICAgICAgICAgZm9ybWF0dGVkTGluZSA9IGZvcm1hdC5pbmRlbnQoZm9ybWF0dGVkTGluZS5zdWJzdHJpbmcoMikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlZExpbmU7XG4gICAgICB9KTtcblxuICAgIHJldHVybiBmb3JtYXR0ZWRMaW5lc1xuICAgICAgLmZpbHRlcigobGluZSkgPT4gIWxpbmUuc3RhcnRzV2l0aCgnQ0RLIFZlcnNpb24nKSlcbiAgICAgIC5qb2luKCdcXG4nKTtcbiAgfVxufVxuIl19