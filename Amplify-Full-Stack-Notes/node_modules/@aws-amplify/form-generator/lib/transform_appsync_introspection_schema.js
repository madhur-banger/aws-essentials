import os from 'os';
import { getGenericFromDataStore, } from '@aws-amplify/codegen-ui';
import { parse } from 'graphql';
import * as graphqlCodegen from '@graphql-codegen/core';
import * as appsync from '@aws-amplify/appsync-modelgen-plugin';
import { DefaultDirectives } from '@aws-amplify/graphql-directives';
/**
 * Transforms an AppSync introspection schema for use in form generation
 */
export const transformIntrospectionSchema = async (modelIntrospectionSchema) => {
    const result = await appsync.preset.buildGeneratesSection({
        baseOutputDir: './',
        schema: parse(modelIntrospectionSchema),
        config: {
            directives: DefaultDirectives.map((directive) => directive.definition).join(os.EOL),
            isTimestampFieldsAdded: true,
            emitAuthProvider: true,
            generateIndexRules: true,
            handleListNullabilityTransparently: true,
            usePipelinedTransformer: true,
            transformerVersion: 2,
            respectPrimaryKeyAttributesOnConnectionField: true,
            improvePluralization: false,
            generateModelsForLazyLoadAndCustomSelectionSet: false,
            target: 'introspection',
            overrideOutputDir: './',
        },
        documents: [],
        pluginMap: {},
        presetConfig: {
            overrideOutputDir: null,
            target: 'typescript',
        },
        plugins: [],
    });
    const results = result.map((cfg) => {
        return graphqlCodegen.codegen({
            ...cfg,
            config: {
                ...cfg.config,
            },
            plugins: [
                {
                    appSyncLocalCodeGen: {},
                },
            ],
            pluginMap: {
                appSyncLocalCodeGen: appsync,
            },
        });
    });
    const [synced] = await Promise.all(results);
    return getGenericFromDataStore(JSON.parse(synced));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtX2FwcHN5bmNfaW50cm9zcGVjdGlvbl9zY2hlbWEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHJhbnNmb3JtX2FwcHN5bmNfaW50cm9zcGVjdGlvbl9zY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3BCLE9BQU8sRUFFTCx1QkFBdUIsR0FDeEIsTUFBTSx5QkFBeUIsQ0FBQztBQUNqQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ2hDLE9BQU8sS0FBSyxjQUFjLE1BQU0sdUJBQXVCLENBQUM7QUFDeEQsT0FBTyxLQUFLLE9BQU8sTUFBTSxzQ0FBc0MsQ0FBQztBQUNoRSxPQUFPLEVBQUUsaUJBQWlCLEVBQWEsTUFBTSxpQ0FBaUMsQ0FBQztBQUUvRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLEtBQUssRUFDL0Msd0JBQWdDLEVBQ0osRUFBRTtJQUM5QixNQUFNLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUM7UUFDeEQsYUFBYSxFQUFFLElBQUk7UUFDbkIsTUFBTSxFQUFFLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQztRQUN2QyxNQUFNLEVBQUU7WUFDTixVQUFVLEVBQUUsaUJBQWlCLENBQUMsR0FBRyxDQUMvQixDQUFDLFNBQW9CLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQy9DLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7WUFDZCxzQkFBc0IsRUFBRSxJQUFJO1lBQzVCLGdCQUFnQixFQUFFLElBQUk7WUFDdEIsa0JBQWtCLEVBQUUsSUFBSTtZQUN4QixrQ0FBa0MsRUFBRSxJQUFJO1lBQ3hDLHVCQUF1QixFQUFFLElBQUk7WUFDN0Isa0JBQWtCLEVBQUUsQ0FBQztZQUNyQiw0Q0FBNEMsRUFBRSxJQUFJO1lBQ2xELG9CQUFvQixFQUFFLEtBQUs7WUFDM0IsOENBQThDLEVBQUUsS0FBSztZQUNyRCxNQUFNLEVBQUUsZUFBZTtZQUN2QixpQkFBaUIsRUFBRSxJQUFJO1NBQ3hCO1FBQ0QsU0FBUyxFQUFFLEVBQUU7UUFDYixTQUFTLEVBQUUsRUFBRTtRQUNiLFlBQVksRUFBRTtZQUNaLGlCQUFpQixFQUFFLElBQUk7WUFDdkIsTUFBTSxFQUFFLFlBQVk7U0FDckI7UUFDRCxPQUFPLEVBQUUsRUFBRTtLQUNaLENBQUMsQ0FBQztJQUNILE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtRQUNqQyxPQUFPLGNBQWMsQ0FBQyxPQUFPLENBQUM7WUFDNUIsR0FBRyxHQUFHO1lBQ04sTUFBTSxFQUFFO2dCQUNOLEdBQUcsR0FBRyxDQUFDLE1BQU07YUFDZDtZQUNELE9BQU8sRUFBRTtnQkFDUDtvQkFDRSxtQkFBbUIsRUFBRSxFQUFFO2lCQUN4QjthQUNGO1lBQ0QsU0FBUyxFQUFFO2dCQUNULG1CQUFtQixFQUFFLE9BQU87YUFDN0I7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDNUMsT0FBTyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDckQsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCB7XG4gIEdlbmVyaWNEYXRhU2NoZW1hLFxuICBnZXRHZW5lcmljRnJvbURhdGFTdG9yZSxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NvZGVnZW4tdWknO1xuaW1wb3J0IHsgcGFyc2UgfSBmcm9tICdncmFwaHFsJztcbmltcG9ydCAqIGFzIGdyYXBocWxDb2RlZ2VuIGZyb20gJ0BncmFwaHFsLWNvZGVnZW4vY29yZSc7XG5pbXBvcnQgKiBhcyBhcHBzeW5jIGZyb20gJ0Bhd3MtYW1wbGlmeS9hcHBzeW5jLW1vZGVsZ2VuLXBsdWdpbic7XG5pbXBvcnQgeyBEZWZhdWx0RGlyZWN0aXZlcywgRGlyZWN0aXZlIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2dyYXBocWwtZGlyZWN0aXZlcyc7XG5cbi8qKlxuICogVHJhbnNmb3JtcyBhbiBBcHBTeW5jIGludHJvc3BlY3Rpb24gc2NoZW1hIGZvciB1c2UgaW4gZm9ybSBnZW5lcmF0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCB0cmFuc2Zvcm1JbnRyb3NwZWN0aW9uU2NoZW1hID0gYXN5bmMgKFxuICBtb2RlbEludHJvc3BlY3Rpb25TY2hlbWE6IHN0cmluZ1xuKTogUHJvbWlzZTxHZW5lcmljRGF0YVNjaGVtYT4gPT4ge1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCBhcHBzeW5jLnByZXNldC5idWlsZEdlbmVyYXRlc1NlY3Rpb24oe1xuICAgIGJhc2VPdXRwdXREaXI6ICcuLycsXG4gICAgc2NoZW1hOiBwYXJzZShtb2RlbEludHJvc3BlY3Rpb25TY2hlbWEpLFxuICAgIGNvbmZpZzoge1xuICAgICAgZGlyZWN0aXZlczogRGVmYXVsdERpcmVjdGl2ZXMubWFwKFxuICAgICAgICAoZGlyZWN0aXZlOiBEaXJlY3RpdmUpID0+IGRpcmVjdGl2ZS5kZWZpbml0aW9uXG4gICAgICApLmpvaW4ob3MuRU9MKSxcbiAgICAgIGlzVGltZXN0YW1wRmllbGRzQWRkZWQ6IHRydWUsXG4gICAgICBlbWl0QXV0aFByb3ZpZGVyOiB0cnVlLFxuICAgICAgZ2VuZXJhdGVJbmRleFJ1bGVzOiB0cnVlLFxuICAgICAgaGFuZGxlTGlzdE51bGxhYmlsaXR5VHJhbnNwYXJlbnRseTogdHJ1ZSxcbiAgICAgIHVzZVBpcGVsaW5lZFRyYW5zZm9ybWVyOiB0cnVlLFxuICAgICAgdHJhbnNmb3JtZXJWZXJzaW9uOiAyLFxuICAgICAgcmVzcGVjdFByaW1hcnlLZXlBdHRyaWJ1dGVzT25Db25uZWN0aW9uRmllbGQ6IHRydWUsXG4gICAgICBpbXByb3ZlUGx1cmFsaXphdGlvbjogZmFsc2UsXG4gICAgICBnZW5lcmF0ZU1vZGVsc0ZvckxhenlMb2FkQW5kQ3VzdG9tU2VsZWN0aW9uU2V0OiBmYWxzZSxcbiAgICAgIHRhcmdldDogJ2ludHJvc3BlY3Rpb24nLFxuICAgICAgb3ZlcnJpZGVPdXRwdXREaXI6ICcuLycsXG4gICAgfSxcbiAgICBkb2N1bWVudHM6IFtdLFxuICAgIHBsdWdpbk1hcDoge30sXG4gICAgcHJlc2V0Q29uZmlnOiB7XG4gICAgICBvdmVycmlkZU91dHB1dERpcjogbnVsbCxcbiAgICAgIHRhcmdldDogJ3R5cGVzY3JpcHQnLFxuICAgIH0sXG4gICAgcGx1Z2luczogW10sXG4gIH0pO1xuICBjb25zdCByZXN1bHRzID0gcmVzdWx0Lm1hcCgoY2ZnKSA9PiB7XG4gICAgcmV0dXJuIGdyYXBocWxDb2RlZ2VuLmNvZGVnZW4oe1xuICAgICAgLi4uY2ZnLFxuICAgICAgY29uZmlnOiB7XG4gICAgICAgIC4uLmNmZy5jb25maWcsXG4gICAgICB9LFxuICAgICAgcGx1Z2luczogW1xuICAgICAgICB7XG4gICAgICAgICAgYXBwU3luY0xvY2FsQ29kZUdlbjoge30sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgcGx1Z2luTWFwOiB7XG4gICAgICAgIGFwcFN5bmNMb2NhbENvZGVHZW46IGFwcHN5bmMsXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICBjb25zdCBbc3luY2VkXSA9IGF3YWl0IFByb21pc2UuYWxsKHJlc3VsdHMpO1xuICByZXR1cm4gZ2V0R2VuZXJpY0Zyb21EYXRhU3RvcmUoSlNPTi5wYXJzZShzeW5jZWQpKTtcbn07XG4iXX0=