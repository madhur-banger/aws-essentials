import { GenericDataSchema } from '@aws-amplify/codegen-ui';
import { FormGenerationOptions, GraphqlFormGenerator, GraphqlGenerationResult } from './graphql_form_generator.js';
/**
 * Render Configuration Options for react forms
 */
export type RenderOptions = {
    graphqlDir: string;
};
export type ResultBuilder = (fileMap: Record<string, string>) => GraphqlGenerationResult;
export type SchemaFetcher = () => Promise<GenericDataSchema>;
/**
 * Generates GraphQL-compatible forms in React by directly leveraging @aws-amplify/codegen-ui-react
 */
export declare class LocalGraphqlFormGenerator implements GraphqlFormGenerator {
    private schemaFetcher;
    private renderOptions;
    private resultBuilder;
    private static defaultConfig;
    /**
     * Instantiates a LocalGraphqlFormGenerator for a provided schema
     */
    constructor(schemaFetcher: SchemaFetcher, renderOptions: RenderOptions, resultBuilder: ResultBuilder);
    /**
     * Gets the react render config
     */
    private get config();
    generateIndexFile: (schemas: {
        name: string;
    }[]) => {
        schemaName: string;
        componentText: string;
        fileName: string;
        declaration: undefined;
        error: undefined;
    };
    generateForms: (options?: FormGenerationOptions) => Promise<GraphqlGenerationResult>;
    /**
     * reduces the dataSchema to a map of models
     */
    private getModelMapForDataSchema;
    private getSchema;
    private generateBaseForms;
    private renderGraphqlPath;
    private createUiBuilderForm;
    private filterModelsByName;
    private codegenForm;
    private getFilteredModels;
    private transformModelListToMap;
    private createUtilFile;
    /**
     * Return utils file text
     */
    private generateUtilFile;
    private createIndexFile;
}
//# sourceMappingURL=local_codegen_graphql_form_generator.d.ts.map