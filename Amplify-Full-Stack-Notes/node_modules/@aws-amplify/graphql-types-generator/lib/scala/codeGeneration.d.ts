export function generateSource(context: any, options: any): string;
export function classDeclarationForOperation(generator: any, { operationName, operationType, rootType, variables, fields, inlineFragments, fragmentSpreads, fragmentsReferenced, source, sourceWithFragments, operationId, }: {
    operationName: any;
    operationType: any;
    rootType: any;
    variables: any;
    fields: any;
    inlineFragments: any;
    fragmentSpreads: any;
    fragmentsReferenced: any;
    source: any;
    sourceWithFragments: any;
    operationId: any;
}): void;
export function caseClassDeclarationForFragment(generator: any, { fragmentName, typeCondition, fields, inlineFragments, fragmentSpreads, source }: {
    fragmentName: any;
    typeCondition: any;
    fields: any;
    inlineFragments: any;
    fragmentSpreads: any;
    source: any;
}): void;
export function caseClassDeclarationForSelectionSet(generator: any, { caseClassName, parentType, fields, inlineFragments, fragmentSpreads, viewableAs }: {
    caseClassName: any;
    parentType: any;
    fields: any;
    inlineFragments: any;
    fragmentSpreads: any;
    viewableAs: any;
}, beforeClosure: any, objectClosure: any): void;
export function typeDeclarationForGraphQLType(generator: any, type: any): void;
