import { DeepPartialAmplifyGeneratedConfigs } from '@aws-amplify/plugin-types';
/**
 * This error is thrown when there's a collision in the object keys
 */
export declare class ObjectAccumulatorPropertyAlreadyExistsError extends Error {
    readonly key: string;
    readonly existingValue: unknown;
    readonly incomingValue: unknown;
    /**
     * Creates property already exists error.
     */
    constructor(key: string, existingValue: unknown, incomingValue: unknown);
}
/**
 * This error is thrown when partial objects with different versions are being accumulated
 */
export declare class ObjectAccumulatorVersionMismatchError extends Error {
    readonly existingVersion: string;
    readonly newVersion: string;
    /**
     * Creates property already exists error.
     */
    constructor(existingVersion: string, newVersion: string);
}
/**
 * A class that can accumulate (squash merge) objects into single instance.
 */
export declare class ObjectAccumulator<T> {
    private readonly accumulator;
    private readonly versionKey;
    /**
     * creates object accumulator.
     */
    constructor(accumulator: DeepPartialAmplifyGeneratedConfigs<T>, versionKey?: string);
    /**
     * Accumulate a new object part with accumulator.
     * This method throws if there is any intersection between the object parts
     * except for the versionKey, which should be the same across all object parts (nested objects included)
     * @param part a new object part to accumulate
     * @returns the accumulator object for easy chaining
     */
    accumulate: (part: DeepPartialAmplifyGeneratedConfigs<T>) => ObjectAccumulator<T>;
    getAccumulatedObject: () => DeepPartialAmplifyGeneratedConfigs<T>;
}
//# sourceMappingURL=object_accumulator.d.ts.map