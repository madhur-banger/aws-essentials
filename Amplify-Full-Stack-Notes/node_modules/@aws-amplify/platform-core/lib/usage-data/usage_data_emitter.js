"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultUsageDataEmitter = void 0;
const uuid_1 = require("uuid");
const account_id_fetcher_js_1 = require("./account_id_fetcher.js");
const os_1 = __importDefault(require("os"));
const https_1 = __importDefault(require("https"));
const get_installation_id_js_1 = require("./get_installation_id.js");
const constants_js_1 = require("./constants.js");
const get_usage_data_url_js_1 = require("./get_usage_data_url.js");
const is_ci_1 = __importDefault(require("is-ci"));
const serializable_error_js_1 = require("./serializable_error.js");
/**
 * Entry point for sending usage data metrics
 */
class DefaultUsageDataEmitter {
    libraryVersion;
    sessionUuid;
    url;
    accountIdFetcher;
    /**
     * Constructor for UsageDataEmitter
     */
    constructor(libraryVersion, sessionUuid = (0, uuid_1.v4)(), url = (0, get_usage_data_url_js_1.getUrl)(), accountIdFetcher = new account_id_fetcher_js_1.AccountIdFetcher()) {
        this.libraryVersion = libraryVersion;
        this.sessionUuid = sessionUuid;
        this.url = url;
        this.accountIdFetcher = accountIdFetcher;
    }
    emitSuccess = async (metrics, dimensions) => {
        try {
            const data = await this.getUsageData({
                state: 'SUCCEEDED',
                metrics,
                dimensions,
            });
            await this.send(data);
            // eslint-disable-next-line amplify-backend-rules/no-empty-catch
        }
        catch {
            // Don't propagate errors related to not being able to send telemetry
        }
    };
    emitFailure = async (error, dimensions) => {
        try {
            const data = await this.getUsageData({
                state: 'FAILED',
                error,
                dimensions,
            });
            await this.send(data);
            // eslint-disable-next-line amplify-backend-rules/no-empty-catch
        }
        catch {
            // Don't propagate errors related to not being able to send telemetry
        }
    };
    getUsageData = async (options) => {
        return {
            accountId: await this.accountIdFetcher.fetch(),
            sessionUuid: this.sessionUuid,
            installationUuid: (0, get_installation_id_js_1.getInstallationUuid)(),
            amplifyCliVersion: this.libraryVersion,
            timestamp: new Date().toISOString(),
            error: options.error ? new serializable_error_js_1.SerializableError(options.error) : undefined,
            downstreamException: options.error &&
                options.error.cause &&
                options.error.cause instanceof Error
                ? new serializable_error_js_1.SerializableError(options.error.cause)
                : undefined,
            payloadVersion: constants_js_1.latestPayloadVersion,
            osPlatform: os_1.default.platform(),
            osRelease: os_1.default.release(),
            nodeVersion: process.versions.node,
            state: options.state,
            codePathDurations: this.translateMetricsToUsageData(options.metrics),
            input: this.translateDimensionsToUsageData(options.dimensions),
            isCi: is_ci_1.default,
        };
    };
    send = (data) => {
        return new Promise((resolve) => {
            const payload = JSON.stringify(data);
            const req = https_1.default.request({
                hostname: this.url.hostname,
                port: this.url.port,
                path: this.url.path,
                method: 'POST',
                headers: {
                    'content-type': 'application/json',
                    'content-length': payload.length,
                },
            });
            req.on('error', () => {
                /* noop */
            });
            req.setTimeout(2000, () => {
                // 2 seconds
                resolve();
            });
            req.write(payload);
            req.end(() => {
                resolve();
            });
        });
    };
    translateMetricsToUsageData = (metrics) => {
        if (!metrics)
            return {};
        let totalDuration, platformStartup;
        for (const [name, data] of Object.entries(metrics)) {
            if (name === 'totalTime') {
                totalDuration = Math.round(data);
            }
            else if (name === 'synthesisTime') {
                platformStartup = Math.round(data);
            }
        }
        return { totalDuration, platformStartup };
    };
    translateDimensionsToUsageData = (dimensions) => {
        let command = '';
        if (dimensions) {
            for (const [name, data] of Object.entries(dimensions)) {
                if (name === 'command') {
                    command = data;
                }
            }
        }
        return { command, plugin: 'Gen2' };
    };
}
exports.DefaultUsageDataEmitter = DefaultUsageDataEmitter;
//# sourceMappingURL=data:application/json;base64,