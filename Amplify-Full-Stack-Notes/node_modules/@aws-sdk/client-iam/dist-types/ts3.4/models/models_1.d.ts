import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { IAMServiceException as __BaseException } from "./IAMServiceException";
import {
  Role,
  ServerCertificateMetadata,
  SigningCertificate,
  SSHPublicKey,
  StatusType,
  Tag,
} from "./models_0";
export interface UntagInstanceProfileRequest {
  InstanceProfileName: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagMFADeviceRequest {
  SerialNumber: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagOpenIDConnectProviderRequest {
  OpenIDConnectProviderArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagPolicyRequest {
  PolicyArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagRoleRequest {
  RoleName: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagSAMLProviderRequest {
  SAMLProviderArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagServerCertificateRequest {
  ServerCertificateName: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagUserRequest {
  UserName: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UpdateAccessKeyRequest {
  UserName?: string;
  AccessKeyId: string | undefined;
  Status: StatusType | undefined;
}
export interface UpdateAccountPasswordPolicyRequest {
  MinimumPasswordLength?: number;
  RequireSymbols?: boolean;
  RequireNumbers?: boolean;
  RequireUppercaseCharacters?: boolean;
  RequireLowercaseCharacters?: boolean;
  AllowUsersToChangePassword?: boolean;
  MaxPasswordAge?: number;
  PasswordReusePrevention?: number;
  HardExpiry?: boolean;
}
export interface UpdateAssumeRolePolicyRequest {
  RoleName: string | undefined;
  PolicyDocument: string | undefined;
}
export interface UpdateGroupRequest {
  GroupName: string | undefined;
  NewPath?: string;
  NewGroupName?: string;
}
export interface UpdateLoginProfileRequest {
  UserName: string | undefined;
  Password?: string;
  PasswordResetRequired?: boolean;
}
export interface UpdateOpenIDConnectProviderThumbprintRequest {
  OpenIDConnectProviderArn: string | undefined;
  ThumbprintList: string[] | undefined;
}
export interface UpdateRoleRequest {
  RoleName: string | undefined;
  Description?: string;
  MaxSessionDuration?: number;
}
export interface UpdateRoleResponse {}
export interface UpdateRoleDescriptionRequest {
  RoleName: string | undefined;
  Description: string | undefined;
}
export interface UpdateRoleDescriptionResponse {
  Role?: Role;
}
export interface UpdateSAMLProviderRequest {
  SAMLMetadataDocument: string | undefined;
  SAMLProviderArn: string | undefined;
}
export interface UpdateSAMLProviderResponse {
  SAMLProviderArn?: string;
}
export interface UpdateServerCertificateRequest {
  ServerCertificateName: string | undefined;
  NewPath?: string;
  NewServerCertificateName?: string;
}
export interface UpdateServiceSpecificCredentialRequest {
  UserName?: string;
  ServiceSpecificCredentialId: string | undefined;
  Status: StatusType | undefined;
}
export interface UpdateSigningCertificateRequest {
  UserName?: string;
  CertificateId: string | undefined;
  Status: StatusType | undefined;
}
export interface UpdateSSHPublicKeyRequest {
  UserName: string | undefined;
  SSHPublicKeyId: string | undefined;
  Status: StatusType | undefined;
}
export interface UpdateUserRequest {
  UserName: string | undefined;
  NewPath?: string;
  NewUserName?: string;
}
export declare class KeyPairMismatchException extends __BaseException {
  readonly name: "KeyPairMismatchException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<KeyPairMismatchException, __BaseException>
  );
}
export declare class MalformedCertificateException extends __BaseException {
  readonly name: "MalformedCertificateException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<MalformedCertificateException, __BaseException>
  );
}
export interface UploadServerCertificateRequest {
  Path?: string;
  ServerCertificateName: string | undefined;
  CertificateBody: string | undefined;
  PrivateKey: string | undefined;
  CertificateChain?: string;
  Tags?: Tag[];
}
export interface UploadServerCertificateResponse {
  ServerCertificateMetadata?: ServerCertificateMetadata;
  Tags?: Tag[];
}
export declare class DuplicateCertificateException extends __BaseException {
  readonly name: "DuplicateCertificateException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DuplicateCertificateException, __BaseException>
  );
}
export declare class InvalidCertificateException extends __BaseException {
  readonly name: "InvalidCertificateException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidCertificateException, __BaseException>
  );
}
export interface UploadSigningCertificateRequest {
  UserName?: string;
  CertificateBody: string | undefined;
}
export interface UploadSigningCertificateResponse {
  Certificate: SigningCertificate | undefined;
}
export declare class DuplicateSSHPublicKeyException extends __BaseException {
  readonly name: "DuplicateSSHPublicKeyException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DuplicateSSHPublicKeyException, __BaseException>
  );
}
export declare class InvalidPublicKeyException extends __BaseException {
  readonly name: "InvalidPublicKeyException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidPublicKeyException, __BaseException>
  );
}
export interface UploadSSHPublicKeyRequest {
  UserName: string | undefined;
  SSHPublicKeyBody: string | undefined;
}
export interface UploadSSHPublicKeyResponse {
  SSHPublicKey?: SSHPublicKey;
}
export declare const UpdateLoginProfileRequestFilterSensitiveLog: (
  obj: UpdateLoginProfileRequest
) => any;
export declare const UploadServerCertificateRequestFilterSensitiveLog: (
  obj: UploadServerCertificateRequest
) => any;
