import { awsExpectUnion as __expectUnion, loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody, } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, limitedParseFloat32 as __limitedParseFloat32, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { AmplifyUIBuilderServiceException as __BaseException } from "../models/AmplifyUIBuilderServiceException";
import { InternalServerException, InvalidParameterException, ResourceConflictException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, UnauthorizedException, } from "../models/models_0";
export const se_CreateComponentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app/{appId}/environment/{environmentName}/components");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = map({
        [_cT]: [, input[_cT] ?? generateIdempotencyToken()],
    });
    let body;
    if (input.componentToCreate !== undefined) {
        body = se_CreateComponentData(input.componentToCreate, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_CreateFormCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app/{appId}/environment/{environmentName}/forms");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = map({
        [_cT]: [, input[_cT] ?? generateIdempotencyToken()],
    });
    let body;
    if (input.formToCreate !== undefined) {
        body = se_CreateFormData(input.formToCreate, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_CreateThemeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app/{appId}/environment/{environmentName}/themes");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = map({
        [_cT]: [, input[_cT] ?? generateIdempotencyToken()],
    });
    let body;
    if (input.themeToCreate !== undefined) {
        body = se_CreateThemeData(input.themeToCreate, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteComponentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/components/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteFormCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/forms/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteThemeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/themes/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_ExchangeCodeForTokenCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tokens/{provider}");
    b.p("provider", () => input.provider, "{provider}", false);
    let body;
    if (input.request !== undefined) {
        body = _json(input.request);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ExportComponentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/export/app/{appId}/environment/{environmentName}/components");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = map({
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ExportFormsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/export/app/{appId}/environment/{environmentName}/forms");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = map({
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ExportThemesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/export/app/{appId}/environment/{environmentName}/themes");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = map({
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetCodegenJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/codegen-jobs/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetComponentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/components/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetFormCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/forms/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetMetadataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/metadata");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetThemeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/themes/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListCodegenJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/codegen-jobs");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListComponentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/components");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListFormsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/forms");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListThemesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/themes");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_PutMetadataFlagCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app/{appId}/environment/{environmentName}/metadata/features/{featureName}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("featureName", () => input.featureName, "{featureName}", false);
    let body;
    if (input.body !== undefined) {
        body = _json(input.body);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_RefreshTokenCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tokens/{provider}/refresh");
    b.p("provider", () => input.provider, "{provider}", false);
    let body;
    if (input.refreshTokenBody !== undefined) {
        body = _json(input.refreshTokenBody);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartCodegenJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app/{appId}/environment/{environmentName}/codegen-jobs");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = map({
        [_cT]: [, input[_cT] ?? generateIdempotencyToken()],
    });
    let body;
    if (input.codegenJobToCreate !== undefined) {
        body = _json(input.codegenJobToCreate);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [__expectNonNull(input.tagKeys, `tagKeys`) != null, () => input[_tK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateComponentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app/{appId}/environment/{environmentName}/components/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    const query = map({
        [_cT]: [, input[_cT] ?? generateIdempotencyToken()],
    });
    let body;
    if (input.updatedComponent !== undefined) {
        body = se_UpdateComponentData(input.updatedComponent, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PATCH").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateFormCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app/{appId}/environment/{environmentName}/forms/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    const query = map({
        [_cT]: [, input[_cT] ?? generateIdempotencyToken()],
    });
    let body;
    if (input.updatedForm !== undefined) {
        body = se_UpdateFormData(input.updatedForm, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PATCH").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateThemeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app/{appId}/environment/{environmentName}/themes/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    const query = map({
        [_cT]: [, input[_cT] ?? generateIdempotencyToken()],
    });
    let body;
    if (input.updatedTheme !== undefined) {
        body = se_UpdateThemeData(input.updatedTheme, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PATCH").h(headers).q(query).b(body);
    return b.build();
};
export const de_CreateComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.entity = de_Component(data, context);
    return contents;
};
export const de_CreateFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.entity = de_Form(data, context);
    return contents;
};
export const de_CreateThemeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.entity = de_Theme(data, context);
    return contents;
};
export const de_DeleteComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteThemeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_ExchangeCodeForTokenCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        accessToken: __expectString,
        expiresIn: __expectInt32,
        refreshToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ExportComponentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        entities: (_) => de_ComponentList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ExportFormsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        entities: (_) => de_FormList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ExportThemesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        entities: (_) => de_ThemeList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCodegenJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.job = de_CodegenJob(data, context);
    return contents;
};
export const de_GetComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.component = de_Component(data, context);
    return contents;
};
export const de_GetFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.form = de_Form(data, context);
    return contents;
};
export const de_GetMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        features: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetThemeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.theme = de_Theme(data, context);
    return contents;
};
export const de_ListCodegenJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        entities: (_) => de_CodegenJobSummaryList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListComponentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        entities: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFormsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        entities: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListThemesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        entities: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutMetadataFlagCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_RefreshTokenCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        accessToken: __expectString,
        expiresIn: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartCodegenJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.entity = de_CodegenJob(data, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.entity = de_Component(data, context);
    return contents;
};
export const de_UpdateFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.entity = de_Form(data, context);
    return contents;
};
export const de_UpdateThemeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.entity = de_Theme(data, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.amplifyuibuilder#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.amplifyuibuilder#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.amplifyuibuilder#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.amplifyuibuilder#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.amplifyuibuilder#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_ActionParameters = (input, context) => {
    return take(input, {
        anchor: (_) => se_ComponentProperty(_, context),
        fields: (_) => se_ComponentProperties(_, context),
        global: (_) => se_ComponentProperty(_, context),
        id: (_) => se_ComponentProperty(_, context),
        model: [],
        state: (_) => se_MutationActionSetStateParameter(_, context),
        target: (_) => se_ComponentProperty(_, context),
        type: (_) => se_ComponentProperty(_, context),
        url: (_) => se_ComponentProperty(_, context),
    });
};
const se_ComponentBindingProperties = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ComponentBindingPropertiesValue(value, context);
        return acc;
    }, {});
};
const se_ComponentBindingPropertiesValue = (input, context) => {
    return take(input, {
        bindingProperties: (_) => se_ComponentBindingPropertiesValueProperties(_, context),
        defaultValue: [],
        type: [],
    });
};
const se_ComponentBindingPropertiesValueProperties = (input, context) => {
    return take(input, {
        bucket: [],
        defaultValue: [],
        field: [],
        key: [],
        model: [],
        predicates: (_) => se_PredicateList(_, context),
        slotName: [],
        userAttribute: [],
    });
};
const se_ComponentChild = (input, context) => {
    return take(input, {
        children: (_) => se_ComponentChildList(_, context),
        componentType: [],
        events: (_) => se_ComponentEvents(_, context),
        name: [],
        properties: (_) => se_ComponentProperties(_, context),
        sourceId: [],
    });
};
const se_ComponentChildList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ComponentChild(entry, context);
    });
};
const se_ComponentCollectionProperties = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ComponentDataConfiguration(value, context);
        return acc;
    }, {});
};
const se_ComponentConditionProperty = (input, context) => {
    return take(input, {
        else: (_) => se_ComponentProperty(_, context),
        field: [],
        operand: [],
        operandType: [],
        operator: [],
        property: [],
        then: (_) => se_ComponentProperty(_, context),
    });
};
const se_ComponentDataConfiguration = (input, context) => {
    return take(input, {
        identifiers: _json,
        model: [],
        predicate: (_) => se_Predicate(_, context),
        sort: _json,
    });
};
const se_ComponentEvent = (input, context) => {
    return take(input, {
        action: [],
        bindingEvent: [],
        parameters: (_) => se_ActionParameters(_, context),
    });
};
const se_ComponentEvents = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ComponentEvent(value, context);
        return acc;
    }, {});
};
const se_ComponentProperties = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ComponentProperty(value, context);
        return acc;
    }, {});
};
const se_ComponentProperty = (input, context) => {
    return take(input, {
        bindingProperties: _json,
        bindings: _json,
        collectionBindingProperties: _json,
        componentName: [],
        concat: (_) => se_ComponentPropertyList(_, context),
        condition: (_) => se_ComponentConditionProperty(_, context),
        configured: [],
        defaultValue: [],
        event: [],
        importedValue: [],
        model: [],
        property: [],
        type: [],
        userAttribute: [],
        value: [],
    });
};
const se_ComponentPropertyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ComponentProperty(entry, context);
    });
};
const se_CreateComponentData = (input, context) => {
    return take(input, {
        bindingProperties: (_) => se_ComponentBindingProperties(_, context),
        children: (_) => se_ComponentChildList(_, context),
        collectionProperties: (_) => se_ComponentCollectionProperties(_, context),
        componentType: [],
        events: (_) => se_ComponentEvents(_, context),
        name: [],
        overrides: _json,
        properties: (_) => se_ComponentProperties(_, context),
        schemaVersion: [],
        sourceId: [],
        tags: _json,
        variants: _json,
    });
};
const se_CreateFormData = (input, context) => {
    return take(input, {
        cta: _json,
        dataType: _json,
        fields: (_) => se_FieldsMap(_, context),
        formActionType: [],
        labelDecorator: [],
        name: [],
        schemaVersion: [],
        sectionalElements: _json,
        style: _json,
        tags: _json,
    });
};
const se_CreateThemeData = (input, context) => {
    return take(input, {
        name: [],
        overrides: (_) => se_ThemeValuesList(_, context),
        tags: _json,
        values: (_) => se_ThemeValuesList(_, context),
    });
};
const se_FieldConfig = (input, context) => {
    return take(input, {
        excluded: [],
        inputType: (_) => se_FieldInputConfig(_, context),
        label: [],
        position: _json,
        validations: _json,
    });
};
const se_FieldInputConfig = (input, context) => {
    return take(input, {
        defaultChecked: [],
        defaultCountryCode: [],
        defaultValue: [],
        descriptiveText: [],
        fileUploaderConfig: _json,
        isArray: [],
        maxValue: __serializeFloat,
        minValue: __serializeFloat,
        name: [],
        placeholder: [],
        readOnly: [],
        required: [],
        step: __serializeFloat,
        type: [],
        value: [],
        valueMappings: (_) => se_ValueMappings(_, context),
    });
};
const se_FieldsMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_FieldConfig(value, context);
        return acc;
    }, {});
};
const se_FormInputValueProperty = (input, context) => {
    return take(input, {
        bindingProperties: _json,
        concat: (_) => se_FormInputValuePropertyList(_, context),
        value: [],
    });
};
const se_FormInputValuePropertyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_FormInputValueProperty(entry, context);
    });
};
const se_MutationActionSetStateParameter = (input, context) => {
    return take(input, {
        componentName: [],
        property: [],
        set: (_) => se_ComponentProperty(_, context),
    });
};
const se_Predicate = (input, context) => {
    return take(input, {
        and: (_) => se_PredicateList(_, context),
        field: [],
        operand: [],
        operandType: [],
        operator: [],
        or: (_) => se_PredicateList(_, context),
    });
};
const se_PredicateList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Predicate(entry, context);
    });
};
const se_ThemeValue = (input, context) => {
    return take(input, {
        children: (_) => se_ThemeValuesList(_, context),
        value: [],
    });
};
const se_ThemeValues = (input, context) => {
    return take(input, {
        key: [],
        value: (_) => se_ThemeValue(_, context),
    });
};
const se_ThemeValuesList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ThemeValues(entry, context);
    });
};
const se_UpdateComponentData = (input, context) => {
    return take(input, {
        bindingProperties: (_) => se_ComponentBindingProperties(_, context),
        children: (_) => se_ComponentChildList(_, context),
        collectionProperties: (_) => se_ComponentCollectionProperties(_, context),
        componentType: [],
        events: (_) => se_ComponentEvents(_, context),
        id: [],
        name: [],
        overrides: _json,
        properties: (_) => se_ComponentProperties(_, context),
        schemaVersion: [],
        sourceId: [],
        variants: _json,
    });
};
const se_UpdateFormData = (input, context) => {
    return take(input, {
        cta: _json,
        dataType: _json,
        fields: (_) => se_FieldsMap(_, context),
        formActionType: [],
        labelDecorator: [],
        name: [],
        schemaVersion: [],
        sectionalElements: _json,
        style: _json,
    });
};
const se_UpdateThemeData = (input, context) => {
    return take(input, {
        id: [],
        name: [],
        overrides: (_) => se_ThemeValuesList(_, context),
        values: (_) => se_ThemeValuesList(_, context),
    });
};
const se_ValueMapping = (input, context) => {
    return take(input, {
        displayValue: (_) => se_FormInputValueProperty(_, context),
        value: (_) => se_FormInputValueProperty(_, context),
    });
};
const se_ValueMappingList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ValueMapping(entry, context);
    });
};
const se_ValueMappings = (input, context) => {
    return take(input, {
        bindingProperties: _json,
        values: (_) => se_ValueMappingList(_, context),
    });
};
const de_ActionParameters = (output, context) => {
    return take(output, {
        anchor: (_) => de_ComponentProperty(_, context),
        fields: (_) => de_ComponentProperties(_, context),
        global: (_) => de_ComponentProperty(_, context),
        id: (_) => de_ComponentProperty(_, context),
        model: __expectString,
        state: (_) => de_MutationActionSetStateParameter(_, context),
        target: (_) => de_ComponentProperty(_, context),
        type: (_) => de_ComponentProperty(_, context),
        url: (_) => de_ComponentProperty(_, context),
    });
};
const de_CodegenJob = (output, context) => {
    return take(output, {
        appId: __expectString,
        asset: _json,
        autoGenerateForms: __expectBoolean,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        dependencies: _json,
        environmentName: __expectString,
        features: _json,
        genericDataSchema: _json,
        id: __expectString,
        modifiedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        renderConfig: (_) => _json(__expectUnion(_)),
        status: __expectString,
        statusMessage: __expectString,
        tags: _json,
    });
};
const de_CodegenJobSummary = (output, context) => {
    return take(output, {
        appId: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        environmentName: __expectString,
        id: __expectString,
        modifiedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_CodegenJobSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CodegenJobSummary(entry, context);
    });
    return retVal;
};
const de_Component = (output, context) => {
    return take(output, {
        appId: __expectString,
        bindingProperties: (_) => de_ComponentBindingProperties(_, context),
        children: (_) => de_ComponentChildList(_, context),
        collectionProperties: (_) => de_ComponentCollectionProperties(_, context),
        componentType: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        environmentName: __expectString,
        events: (_) => de_ComponentEvents(_, context),
        id: __expectString,
        modifiedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        name: __expectString,
        overrides: _json,
        properties: (_) => de_ComponentProperties(_, context),
        schemaVersion: __expectString,
        sourceId: __expectString,
        tags: _json,
        variants: _json,
    });
};
const de_ComponentBindingProperties = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ComponentBindingPropertiesValue(value, context);
        return acc;
    }, {});
};
const de_ComponentBindingPropertiesValue = (output, context) => {
    return take(output, {
        bindingProperties: (_) => de_ComponentBindingPropertiesValueProperties(_, context),
        defaultValue: __expectString,
        type: __expectString,
    });
};
const de_ComponentBindingPropertiesValueProperties = (output, context) => {
    return take(output, {
        bucket: __expectString,
        defaultValue: __expectString,
        field: __expectString,
        key: __expectString,
        model: __expectString,
        predicates: (_) => de_PredicateList(_, context),
        slotName: __expectString,
        userAttribute: __expectString,
    });
};
const de_ComponentChild = (output, context) => {
    return take(output, {
        children: (_) => de_ComponentChildList(_, context),
        componentType: __expectString,
        events: (_) => de_ComponentEvents(_, context),
        name: __expectString,
        properties: (_) => de_ComponentProperties(_, context),
        sourceId: __expectString,
    });
};
const de_ComponentChildList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ComponentChild(entry, context);
    });
    return retVal;
};
const de_ComponentCollectionProperties = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ComponentDataConfiguration(value, context);
        return acc;
    }, {});
};
const de_ComponentConditionProperty = (output, context) => {
    return take(output, {
        else: (_) => de_ComponentProperty(_, context),
        field: __expectString,
        operand: __expectString,
        operandType: __expectString,
        operator: __expectString,
        property: __expectString,
        then: (_) => de_ComponentProperty(_, context),
    });
};
const de_ComponentDataConfiguration = (output, context) => {
    return take(output, {
        identifiers: _json,
        model: __expectString,
        predicate: (_) => de_Predicate(_, context),
        sort: _json,
    });
};
const de_ComponentEvent = (output, context) => {
    return take(output, {
        action: __expectString,
        bindingEvent: __expectString,
        parameters: (_) => de_ActionParameters(_, context),
    });
};
const de_ComponentEvents = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ComponentEvent(value, context);
        return acc;
    }, {});
};
const de_ComponentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Component(entry, context);
    });
    return retVal;
};
const de_ComponentProperties = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ComponentProperty(value, context);
        return acc;
    }, {});
};
const de_ComponentProperty = (output, context) => {
    return take(output, {
        bindingProperties: _json,
        bindings: _json,
        collectionBindingProperties: _json,
        componentName: __expectString,
        concat: (_) => de_ComponentPropertyList(_, context),
        condition: (_) => de_ComponentConditionProperty(_, context),
        configured: __expectBoolean,
        defaultValue: __expectString,
        event: __expectString,
        importedValue: __expectString,
        model: __expectString,
        property: __expectString,
        type: __expectString,
        userAttribute: __expectString,
        value: __expectString,
    });
};
const de_ComponentPropertyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ComponentProperty(entry, context);
    });
    return retVal;
};
const de_FieldConfig = (output, context) => {
    return take(output, {
        excluded: __expectBoolean,
        inputType: (_) => de_FieldInputConfig(_, context),
        label: __expectString,
        position: (_) => _json(__expectUnion(_)),
        validations: _json,
    });
};
const de_FieldInputConfig = (output, context) => {
    return take(output, {
        defaultChecked: __expectBoolean,
        defaultCountryCode: __expectString,
        defaultValue: __expectString,
        descriptiveText: __expectString,
        fileUploaderConfig: _json,
        isArray: __expectBoolean,
        maxValue: __limitedParseFloat32,
        minValue: __limitedParseFloat32,
        name: __expectString,
        placeholder: __expectString,
        readOnly: __expectBoolean,
        required: __expectBoolean,
        step: __limitedParseFloat32,
        type: __expectString,
        value: __expectString,
        valueMappings: (_) => de_ValueMappings(_, context),
    });
};
const de_FieldsMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_FieldConfig(value, context);
        return acc;
    }, {});
};
const de_Form = (output, context) => {
    return take(output, {
        appId: __expectString,
        cta: _json,
        dataType: _json,
        environmentName: __expectString,
        fields: (_) => de_FieldsMap(_, context),
        formActionType: __expectString,
        id: __expectString,
        labelDecorator: __expectString,
        name: __expectString,
        schemaVersion: __expectString,
        sectionalElements: _json,
        style: _json,
        tags: _json,
    });
};
const de_FormInputValueProperty = (output, context) => {
    return take(output, {
        bindingProperties: _json,
        concat: (_) => de_FormInputValuePropertyList(_, context),
        value: __expectString,
    });
};
const de_FormInputValuePropertyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FormInputValueProperty(entry, context);
    });
    return retVal;
};
const de_FormList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Form(entry, context);
    });
    return retVal;
};
const de_MutationActionSetStateParameter = (output, context) => {
    return take(output, {
        componentName: __expectString,
        property: __expectString,
        set: (_) => de_ComponentProperty(_, context),
    });
};
const de_Predicate = (output, context) => {
    return take(output, {
        and: (_) => de_PredicateList(_, context),
        field: __expectString,
        operand: __expectString,
        operandType: __expectString,
        operator: __expectString,
        or: (_) => de_PredicateList(_, context),
    });
};
const de_PredicateList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Predicate(entry, context);
    });
    return retVal;
};
const de_Theme = (output, context) => {
    return take(output, {
        appId: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        environmentName: __expectString,
        id: __expectString,
        modifiedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        name: __expectString,
        overrides: (_) => de_ThemeValuesList(_, context),
        tags: _json,
        values: (_) => de_ThemeValuesList(_, context),
    });
};
const de_ThemeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Theme(entry, context);
    });
    return retVal;
};
const de_ThemeValue = (output, context) => {
    return take(output, {
        children: (_) => de_ThemeValuesList(_, context),
        value: __expectString,
    });
};
const de_ThemeValues = (output, context) => {
    return take(output, {
        key: __expectString,
        value: (_) => de_ThemeValue(_, context),
    });
};
const de_ThemeValuesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ThemeValues(entry, context);
    });
    return retVal;
};
const de_ValueMapping = (output, context) => {
    return take(output, {
        displayValue: (_) => de_FormInputValueProperty(_, context),
        value: (_) => de_FormInputValueProperty(_, context),
    });
};
const de_ValueMappingList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ValueMapping(entry, context);
    });
    return retVal;
};
const de_ValueMappings = (output, context) => {
    return take(output, {
        bindingProperties: _json,
        values: (_) => de_ValueMappingList(_, context),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const _cT = "clientToken";
const _mR = "maxResults";
const _nT = "nextToken";
const _tK = "tagKeys";
