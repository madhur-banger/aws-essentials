import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { AmplifyUIBuilderServiceException as __BaseException } from "./AmplifyUIBuilderServiceException";
export interface ComponentPropertyBindingProperties {
  property: string | undefined;
  field?: string;
}
export interface FormBindingElement {
  element: string | undefined;
  property: string | undefined;
}
export interface GetCodegenJobRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  id: string | undefined;
}
export interface CodegenJobAsset {
  downloadUrl?: string;
}
export interface CodegenDependency {
  name?: string;
  supportedVersion?: string;
  isSemVer?: boolean;
  reason?: string;
}
export interface CodegenFeatureFlags {
  isRelationshipSupported?: boolean;
  isNonModelSupported?: boolean;
}
export declare const CodegenJobGenericDataSourceType: {
  readonly DATA_STORE: "DataStore";
};
export type CodegenJobGenericDataSourceType =
  (typeof CodegenJobGenericDataSourceType)[keyof typeof CodegenJobGenericDataSourceType];
export interface CodegenGenericDataEnum {
  values: string[] | undefined;
}
export declare const CodegenGenericDataFieldDataType: {
  readonly AWS_DATE: "AWSDate";
  readonly AWS_DATE_TIME: "AWSDateTime";
  readonly AWS_EMAIL: "AWSEmail";
  readonly AWS_IP_ADDRESS: "AWSIPAddress";
  readonly AWS_JSON: "AWSJSON";
  readonly AWS_PHONE: "AWSPhone";
  readonly AWS_TIME: "AWSTime";
  readonly AWS_TIMESTAMP: "AWSTimestamp";
  readonly AWS_URL: "AWSURL";
  readonly BOOLEAN: "Boolean";
  readonly ENUM: "Enum";
  readonly FLOAT: "Float";
  readonly ID: "ID";
  readonly INT: "Int";
  readonly MODEL: "Model";
  readonly NON_MODEL: "NonModel";
  readonly STRING: "String";
};
export type CodegenGenericDataFieldDataType =
  (typeof CodegenGenericDataFieldDataType)[keyof typeof CodegenGenericDataFieldDataType];
export declare const GenericDataRelationshipType: {
  readonly BELONGS_TO: "BELONGS_TO";
  readonly HAS_MANY: "HAS_MANY";
  readonly HAS_ONE: "HAS_ONE";
};
export type GenericDataRelationshipType =
  (typeof GenericDataRelationshipType)[keyof typeof GenericDataRelationshipType];
export interface CodegenGenericDataRelationshipType {
  type: GenericDataRelationshipType | undefined;
  relatedModelName: string | undefined;
  relatedModelFields?: string[];
  canUnlinkAssociatedModel?: boolean;
  relatedJoinFieldName?: string;
  relatedJoinTableName?: string;
  belongsToFieldOnRelatedModel?: string;
  associatedFields?: string[];
  isHasManyIndex?: boolean;
}
export interface CodegenGenericDataField {
  dataType: CodegenGenericDataFieldDataType | undefined;
  dataTypeValue: string | undefined;
  required: boolean | undefined;
  readOnly: boolean | undefined;
  isArray: boolean | undefined;
  relationship?: CodegenGenericDataRelationshipType;
}
export interface CodegenGenericDataModel {
  fields: Record<string, CodegenGenericDataField> | undefined;
  isJoinTable?: boolean;
  primaryKeys: string[] | undefined;
}
export interface CodegenGenericDataNonModel {
  fields: Record<string, CodegenGenericDataField> | undefined;
}
export interface CodegenJobGenericDataSchema {
  dataSourceType: CodegenJobGenericDataSourceType | undefined;
  models: Record<string, CodegenGenericDataModel> | undefined;
  enums: Record<string, CodegenGenericDataEnum> | undefined;
  nonModels: Record<string, CodegenGenericDataNonModel> | undefined;
}
export interface DataStoreRenderConfig {}
export interface GraphQLRenderConfig {
  typesFilePath: string | undefined;
  queriesFilePath: string | undefined;
  mutationsFilePath: string | undefined;
  subscriptionsFilePath: string | undefined;
  fragmentsFilePath: string | undefined;
}
export interface NoApiRenderConfig {}
export type ApiConfiguration =
  | ApiConfiguration.DataStoreConfigMember
  | ApiConfiguration.GraphQLConfigMember
  | ApiConfiguration.NoApiConfigMember
  | ApiConfiguration.$UnknownMember;
export declare namespace ApiConfiguration {
  interface GraphQLConfigMember {
    graphQLConfig: GraphQLRenderConfig;
    dataStoreConfig?: never;
    noApiConfig?: never;
    $unknown?: never;
  }
  interface DataStoreConfigMember {
    graphQLConfig?: never;
    dataStoreConfig: DataStoreRenderConfig;
    noApiConfig?: never;
    $unknown?: never;
  }
  interface NoApiConfigMember {
    graphQLConfig?: never;
    dataStoreConfig?: never;
    noApiConfig: NoApiRenderConfig;
    $unknown?: never;
  }
  interface $UnknownMember {
    graphQLConfig?: never;
    dataStoreConfig?: never;
    noApiConfig?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    graphQLConfig: (value: GraphQLRenderConfig) => T;
    dataStoreConfig: (value: DataStoreRenderConfig) => T;
    noApiConfig: (value: NoApiRenderConfig) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ApiConfiguration, visitor: Visitor<T>) => T;
}
export declare const JSModule: {
  readonly ES2020: "es2020";
  readonly ESNEXT: "esnext";
};
export type JSModule = (typeof JSModule)[keyof typeof JSModule];
export declare const JSScript: {
  readonly JS: "js";
  readonly JSX: "jsx";
  readonly TSX: "tsx";
};
export type JSScript = (typeof JSScript)[keyof typeof JSScript];
export declare const JSTarget: {
  readonly ES2015: "es2015";
  readonly ES2020: "es2020";
};
export type JSTarget = (typeof JSTarget)[keyof typeof JSTarget];
export interface ReactStartCodegenJobData {
  module?: JSModule;
  target?: JSTarget;
  script?: JSScript;
  renderTypeDeclarations?: boolean;
  inlineSourceMap?: boolean;
  apiConfiguration?: ApiConfiguration;
  dependencies?: Record<string, string>;
}
export type CodegenJobRenderConfig =
  | CodegenJobRenderConfig.ReactMember
  | CodegenJobRenderConfig.$UnknownMember;
export declare namespace CodegenJobRenderConfig {
  interface ReactMember {
    react: ReactStartCodegenJobData;
    $unknown?: never;
  }
  interface $UnknownMember {
    react?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    react: (value: ReactStartCodegenJobData) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: CodegenJobRenderConfig, visitor: Visitor<T>) => T;
}
export declare const CodegenJobStatus: {
  readonly FAILED: "failed";
  readonly IN_PROGRESS: "in_progress";
  readonly SUCCEEDED: "succeeded";
};
export type CodegenJobStatus =
  (typeof CodegenJobStatus)[keyof typeof CodegenJobStatus];
export interface CodegenJob {
  id: string | undefined;
  appId: string | undefined;
  environmentName: string | undefined;
  renderConfig?: CodegenJobRenderConfig;
  genericDataSchema?: CodegenJobGenericDataSchema;
  autoGenerateForms?: boolean;
  features?: CodegenFeatureFlags;
  status?: CodegenJobStatus;
  statusMessage?: string;
  asset?: CodegenJobAsset;
  tags?: Record<string, string>;
  createdAt?: Date;
  modifiedAt?: Date;
  dependencies?: CodegenDependency[];
}
export interface GetCodegenJobResponse {
  job?: CodegenJob;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class InvalidParameterException extends __BaseException {
  readonly name: "InvalidParameterException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidParameterException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface ListCodegenJobsRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface CodegenJobSummary {
  appId: string | undefined;
  environmentName: string | undefined;
  id: string | undefined;
  createdAt?: Date;
  modifiedAt?: Date;
}
export interface ListCodegenJobsResponse {
  entities: CodegenJobSummary[] | undefined;
  nextToken?: string;
}
export interface StartCodegenJobData {
  renderConfig: CodegenJobRenderConfig | undefined;
  genericDataSchema?: CodegenJobGenericDataSchema;
  autoGenerateForms?: boolean;
  features?: CodegenFeatureFlags;
  tags?: Record<string, string>;
}
export interface StartCodegenJobRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  clientToken?: string;
  codegenJobToCreate: StartCodegenJobData | undefined;
}
export interface StartCodegenJobResponse {
  entity?: CodegenJob;
}
export declare const SortDirection: {
  readonly ASC: "ASC";
  readonly DESC: "DESC";
};
export type SortDirection = (typeof SortDirection)[keyof typeof SortDirection];
export interface SortProperty {
  field: string | undefined;
  direction: SortDirection | undefined;
}
export interface ComponentVariant {
  variantValues?: Record<string, string>;
  overrides?: Record<string, Record<string, string>>;
}
export declare class ResourceConflictException extends __BaseException {
  readonly name: "ResourceConflictException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceConflictException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export interface DeleteComponentRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  id: string | undefined;
}
export interface ExportComponentsRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  nextToken?: string;
}
export interface GetComponentRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  id: string | undefined;
}
export interface ListComponentsRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ComponentSummary {
  appId: string | undefined;
  environmentName: string | undefined;
  id: string | undefined;
  name: string | undefined;
  componentType: string | undefined;
}
export interface ListComponentsResponse {
  entities: ComponentSummary[] | undefined;
  nextToken?: string;
}
export declare const TokenProviders: {
  readonly FIGMA: "figma";
};
export type TokenProviders =
  (typeof TokenProviders)[keyof typeof TokenProviders];
export interface ExchangeCodeForTokenRequestBody {
  code: string | undefined;
  redirectUri: string | undefined;
  clientId?: string;
}
export interface ExchangeCodeForTokenRequest {
  provider: TokenProviders | undefined;
  request: ExchangeCodeForTokenRequestBody | undefined;
}
export interface ExchangeCodeForTokenResponse {
  accessToken: string | undefined;
  expiresIn: number | undefined;
  refreshToken: string | undefined;
}
export declare const FixedPosition: {
  readonly FIRST: "first";
};
export type FixedPosition = (typeof FixedPosition)[keyof typeof FixedPosition];
export type FieldPosition =
  | FieldPosition.BelowMember
  | FieldPosition.FixedMember
  | FieldPosition.RightOfMember
  | FieldPosition.$UnknownMember;
export declare namespace FieldPosition {
  interface FixedMember {
    fixed: FixedPosition;
    rightOf?: never;
    below?: never;
    $unknown?: never;
  }
  interface RightOfMember {
    fixed?: never;
    rightOf: string;
    below?: never;
    $unknown?: never;
  }
  interface BelowMember {
    fixed?: never;
    rightOf?: never;
    below: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    fixed?: never;
    rightOf?: never;
    below?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    fixed: (value: FixedPosition) => T;
    rightOf: (value: string) => T;
    below: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: FieldPosition, visitor: Visitor<T>) => T;
}
export interface FormButton {
  excluded?: boolean;
  children?: string;
  position?: FieldPosition;
}
export declare const FormButtonsPosition: {
  readonly BOTTOM: "bottom";
  readonly TOP: "top";
  readonly TOP_AND_BOTTOM: "top_and_bottom";
};
export type FormButtonsPosition =
  (typeof FormButtonsPosition)[keyof typeof FormButtonsPosition];
export interface FormCTA {
  position?: FormButtonsPosition;
  clear?: FormButton;
  cancel?: FormButton;
  submit?: FormButton;
}
export declare const FormDataSourceType: {
  readonly CUSTOM: "Custom";
  readonly DATASTORE: "DataStore";
};
export type FormDataSourceType =
  (typeof FormDataSourceType)[keyof typeof FormDataSourceType];
export interface FormDataTypeConfig {
  dataSourceType: FormDataSourceType | undefined;
  dataTypeName: string | undefined;
}
export declare const StorageAccessLevel: {
  readonly PRIVATE: "private";
  readonly PROTECTED: "protected";
  readonly PUBLIC: "public";
};
export type StorageAccessLevel =
  (typeof StorageAccessLevel)[keyof typeof StorageAccessLevel];
export interface FileUploaderFieldConfig {
  accessLevel: StorageAccessLevel | undefined;
  acceptedFileTypes: string[] | undefined;
  showThumbnails?: boolean;
  isResumable?: boolean;
  maxFileCount?: number;
  maxSize?: number;
}
export interface FormInputBindingPropertiesValueProperties {
  model?: string;
}
export interface FormInputBindingPropertiesValue {
  type?: string;
  bindingProperties?: FormInputBindingPropertiesValueProperties;
}
export interface FormInputValuePropertyBindingProperties {
  property: string | undefined;
  field?: string;
}
export interface FieldValidationConfiguration {
  type: string | undefined;
  strValues?: string[];
  numValues?: number[];
  validationMessage?: string;
}
export declare const FormActionType: {
  readonly CREATE: "create";
  readonly UPDATE: "update";
};
export type FormActionType =
  (typeof FormActionType)[keyof typeof FormActionType];
export declare const LabelDecorator: {
  readonly NONE: "none";
  readonly OPTIONAL: "optional";
  readonly REQUIRED: "required";
};
export type LabelDecorator =
  (typeof LabelDecorator)[keyof typeof LabelDecorator];
export interface SectionalElement {
  type: string | undefined;
  position?: FieldPosition;
  text?: string;
  level?: number;
  orientation?: string;
  excluded?: boolean;
}
export type FormStyleConfig =
  | FormStyleConfig.TokenReferenceMember
  | FormStyleConfig.ValueMember
  | FormStyleConfig.$UnknownMember;
export declare namespace FormStyleConfig {
  interface TokenReferenceMember {
    tokenReference: string;
    value?: never;
    $unknown?: never;
  }
  interface ValueMember {
    tokenReference?: never;
    value: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    tokenReference?: never;
    value?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    tokenReference: (value: string) => T;
    value: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: FormStyleConfig, visitor: Visitor<T>) => T;
}
export interface FormStyle {
  horizontalGap?: FormStyleConfig;
  verticalGap?: FormStyleConfig;
  outerPadding?: FormStyleConfig;
}
export interface DeleteFormRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  id: string | undefined;
}
export interface ExportFormsRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  nextToken?: string;
}
export interface GetFormRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  id: string | undefined;
}
export interface ListFormsRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface FormSummary {
  appId: string | undefined;
  dataType: FormDataTypeConfig | undefined;
  environmentName: string | undefined;
  formActionType: FormActionType | undefined;
  id: string | undefined;
  name: string | undefined;
}
export interface ListFormsResponse {
  entities: FormSummary[] | undefined;
  nextToken?: string;
}
export interface GetMetadataRequest {
  appId: string | undefined;
  environmentName: string | undefined;
}
export interface GetMetadataResponse {
  features: Record<string, string> | undefined;
}
export declare class UnauthorizedException extends __BaseException {
  readonly name: "UnauthorizedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UnauthorizedException, __BaseException>
  );
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags: Record<string, string> | undefined;
}
export interface PutMetadataFlagBody {
  newValue: string | undefined;
}
export interface PutMetadataFlagRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  featureName: string | undefined;
  body: PutMetadataFlagBody | undefined;
}
export interface RefreshTokenRequestBody {
  token: string | undefined;
  clientId?: string;
}
export interface RefreshTokenRequest {
  provider: TokenProviders | undefined;
  refreshTokenBody: RefreshTokenRequestBody | undefined;
}
export interface RefreshTokenResponse {
  accessToken: string | undefined;
  expiresIn: number | undefined;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface DeleteThemeRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  id: string | undefined;
}
export interface ExportThemesRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  nextToken?: string;
}
export interface GetThemeRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  id: string | undefined;
}
export interface ListThemesRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ThemeSummary {
  appId: string | undefined;
  environmentName: string | undefined;
  id: string | undefined;
  name: string | undefined;
}
export interface ListThemesResponse {
  entities: ThemeSummary[] | undefined;
  nextToken?: string;
}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface FormInputValueProperty {
  value?: string;
  bindingProperties?: FormInputValuePropertyBindingProperties;
  concat?: FormInputValueProperty[];
}
export interface ThemeValue {
  value?: string;
  children?: ThemeValues[];
}
export interface ThemeValues {
  key?: string;
  value?: ThemeValue;
}
export interface Predicate {
  or?: Predicate[];
  and?: Predicate[];
  field?: string;
  operator?: string;
  operand?: string;
  operandType?: string;
}
export interface ComponentBindingPropertiesValueProperties {
  model?: string;
  field?: string;
  predicates?: Predicate[];
  userAttribute?: string;
  bucket?: string;
  key?: string;
  defaultValue?: string;
  slotName?: string;
}
export interface ComponentDataConfiguration {
  model: string | undefined;
  sort?: SortProperty[];
  predicate?: Predicate;
  identifiers?: string[];
}
export interface ComponentProperty {
  value?: string;
  bindingProperties?: ComponentPropertyBindingProperties;
  collectionBindingProperties?: ComponentPropertyBindingProperties;
  defaultValue?: string;
  model?: string;
  bindings?: Record<string, FormBindingElement>;
  event?: string;
  userAttribute?: string;
  concat?: ComponentProperty[];
  condition?: ComponentConditionProperty;
  configured?: boolean;
  type?: string;
  importedValue?: string;
  componentName?: string;
  property?: string;
}
export interface ValueMapping {
  displayValue?: FormInputValueProperty;
  value: FormInputValueProperty | undefined;
}
export interface ComponentBindingPropertiesValue {
  type?: string;
  bindingProperties?: ComponentBindingPropertiesValueProperties;
  defaultValue?: string;
}
export interface CreateThemeData {
  name: string | undefined;
  values: ThemeValues[] | undefined;
  overrides?: ThemeValues[];
  tags?: Record<string, string>;
}
export interface Theme {
  appId: string | undefined;
  environmentName: string | undefined;
  id: string | undefined;
  name: string | undefined;
  createdAt: Date | undefined;
  modifiedAt?: Date;
  values: ThemeValues[] | undefined;
  overrides?: ThemeValues[];
  tags?: Record<string, string>;
}
export interface UpdateThemeData {
  id?: string;
  name?: string;
  values: ThemeValues[] | undefined;
  overrides?: ThemeValues[];
}
export interface MutationActionSetStateParameter {
  componentName: string | undefined;
  property: string | undefined;
  set: ComponentProperty | undefined;
}
export interface ComponentConditionProperty {
  property?: string;
  field?: string;
  operator?: string;
  operand?: string;
  then?: ComponentProperty;
  else?: ComponentProperty;
  operandType?: string;
}
export interface CreateThemeRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  clientToken?: string;
  themeToCreate: CreateThemeData | undefined;
}
export interface CreateThemeResponse {
  entity?: Theme;
}
export interface GetThemeResponse {
  theme?: Theme;
}
export interface UpdateThemeRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  id: string | undefined;
  clientToken?: string;
  updatedTheme: UpdateThemeData | undefined;
}
export interface UpdateThemeResponse {
  entity?: Theme;
}
export interface ValueMappings {
  values: ValueMapping[] | undefined;
  bindingProperties?: Record<string, FormInputBindingPropertiesValue>;
}
export interface ExportThemesResponse {
  entities: Theme[] | undefined;
  nextToken?: string;
}
export interface FieldInputConfig {
  type: string | undefined;
  required?: boolean;
  readOnly?: boolean;
  placeholder?: string;
  defaultValue?: string;
  descriptiveText?: string;
  defaultChecked?: boolean;
  defaultCountryCode?: string;
  valueMappings?: ValueMappings;
  name?: string;
  minValue?: number;
  maxValue?: number;
  step?: number;
  value?: string;
  isArray?: boolean;
  fileUploaderConfig?: FileUploaderFieldConfig;
}
export interface FieldConfig {
  label?: string;
  position?: FieldPosition;
  excluded?: boolean;
  inputType?: FieldInputConfig;
  validations?: FieldValidationConfiguration[];
}
export interface CreateFormData {
  name: string | undefined;
  dataType: FormDataTypeConfig | undefined;
  formActionType: FormActionType | undefined;
  fields: Record<string, FieldConfig> | undefined;
  style: FormStyle | undefined;
  sectionalElements: Record<string, SectionalElement> | undefined;
  schemaVersion: string | undefined;
  cta?: FormCTA;
  tags?: Record<string, string>;
  labelDecorator?: LabelDecorator;
}
export interface Form {
  appId: string | undefined;
  environmentName: string | undefined;
  id: string | undefined;
  name: string | undefined;
  formActionType: FormActionType | undefined;
  style: FormStyle | undefined;
  dataType: FormDataTypeConfig | undefined;
  fields: Record<string, FieldConfig> | undefined;
  sectionalElements: Record<string, SectionalElement> | undefined;
  schemaVersion: string | undefined;
  tags?: Record<string, string>;
  cta?: FormCTA;
  labelDecorator?: LabelDecorator;
}
export interface UpdateFormData {
  name?: string;
  dataType?: FormDataTypeConfig;
  formActionType?: FormActionType;
  fields?: Record<string, FieldConfig>;
  style?: FormStyle;
  sectionalElements?: Record<string, SectionalElement>;
  schemaVersion?: string;
  cta?: FormCTA;
  labelDecorator?: LabelDecorator;
}
export interface CreateFormRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  clientToken?: string;
  formToCreate: CreateFormData | undefined;
}
export interface CreateFormResponse {
  entity?: Form;
}
export interface GetFormResponse {
  form?: Form;
}
export interface UpdateFormRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  id: string | undefined;
  clientToken?: string;
  updatedForm: UpdateFormData | undefined;
}
export interface UpdateFormResponse {
  entity?: Form;
}
export interface ExportFormsResponse {
  entities: Form[] | undefined;
  nextToken?: string;
}
export interface ActionParameters {
  type?: ComponentProperty;
  url?: ComponentProperty;
  anchor?: ComponentProperty;
  target?: ComponentProperty;
  global?: ComponentProperty;
  model?: string;
  id?: ComponentProperty;
  fields?: Record<string, ComponentProperty>;
  state?: MutationActionSetStateParameter;
}
export interface ComponentEvent {
  action?: string;
  parameters?: ActionParameters;
  bindingEvent?: string;
}
export interface ComponentChild {
  componentType: string | undefined;
  name: string | undefined;
  properties: Record<string, ComponentProperty> | undefined;
  children?: ComponentChild[];
  events?: Record<string, ComponentEvent>;
  sourceId?: string;
}
export interface Component {
  appId: string | undefined;
  environmentName: string | undefined;
  sourceId?: string;
  id: string | undefined;
  name: string | undefined;
  componentType: string | undefined;
  properties: Record<string, ComponentProperty> | undefined;
  children?: ComponentChild[];
  variants: ComponentVariant[] | undefined;
  overrides: Record<string, Record<string, string>> | undefined;
  bindingProperties:
    | Record<string, ComponentBindingPropertiesValue>
    | undefined;
  collectionProperties?: Record<string, ComponentDataConfiguration>;
  createdAt: Date | undefined;
  modifiedAt?: Date;
  tags?: Record<string, string>;
  events?: Record<string, ComponentEvent>;
  schemaVersion?: string;
}
export interface CreateComponentData {
  name: string | undefined;
  sourceId?: string;
  componentType: string | undefined;
  properties: Record<string, ComponentProperty> | undefined;
  children?: ComponentChild[];
  variants: ComponentVariant[] | undefined;
  overrides: Record<string, Record<string, string>> | undefined;
  bindingProperties:
    | Record<string, ComponentBindingPropertiesValue>
    | undefined;
  collectionProperties?: Record<string, ComponentDataConfiguration>;
  tags?: Record<string, string>;
  events?: Record<string, ComponentEvent>;
  schemaVersion?: string;
}
export interface UpdateComponentData {
  id?: string;
  name?: string;
  sourceId?: string;
  componentType?: string;
  properties?: Record<string, ComponentProperty>;
  children?: ComponentChild[];
  variants?: ComponentVariant[];
  overrides?: Record<string, Record<string, string>>;
  bindingProperties?: Record<string, ComponentBindingPropertiesValue>;
  collectionProperties?: Record<string, ComponentDataConfiguration>;
  events?: Record<string, ComponentEvent>;
  schemaVersion?: string;
}
export interface CreateComponentRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  clientToken?: string;
  componentToCreate: CreateComponentData | undefined;
}
export interface CreateComponentResponse {
  entity?: Component;
}
export interface GetComponentResponse {
  component?: Component;
}
export interface UpdateComponentRequest {
  appId: string | undefined;
  environmentName: string | undefined;
  id: string | undefined;
  clientToken?: string;
  updatedComponent: UpdateComponentData | undefined;
}
export interface UpdateComponentResponse {
  entity?: Component;
}
export interface ExportComponentsResponse {
  entities: Component[] | undefined;
  nextToken?: string;
}
export declare const ExchangeCodeForTokenRequestBodyFilterSensitiveLog: (
  obj: ExchangeCodeForTokenRequestBody
) => any;
export declare const ExchangeCodeForTokenRequestFilterSensitiveLog: (
  obj: ExchangeCodeForTokenRequest
) => any;
export declare const ExchangeCodeForTokenResponseFilterSensitiveLog: (
  obj: ExchangeCodeForTokenResponse
) => any;
export declare const RefreshTokenRequestBodyFilterSensitiveLog: (
  obj: RefreshTokenRequestBody
) => any;
export declare const RefreshTokenRequestFilterSensitiveLog: (
  obj: RefreshTokenRequest
) => any;
export declare const RefreshTokenResponseFilterSensitiveLog: (
  obj: RefreshTokenResponse
) => any;
