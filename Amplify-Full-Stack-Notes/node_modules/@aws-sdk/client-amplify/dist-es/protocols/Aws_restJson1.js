import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { AmplifyServiceException as __BaseException } from "../models/AmplifyServiceException";
import { BadRequestException, DependentServiceFailureException, InternalFailureException, LimitExceededException, NotFoundException, ResourceNotFoundException, UnauthorizedException, } from "../models/models_0";
export const se_CreateAppCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps");
    let body;
    body = JSON.stringify(take(input, {
        accessToken: [],
        autoBranchCreationConfig: (_) => _json(_),
        autoBranchCreationPatterns: (_) => _json(_),
        basicAuthCredentials: [],
        buildSpec: [],
        cacheConfig: (_) => _json(_),
        customHeaders: [],
        customRules: (_) => _json(_),
        description: [],
        enableAutoBranchCreation: [],
        enableBasicAuth: [],
        enableBranchAutoBuild: [],
        enableBranchAutoDeletion: [],
        environmentVariables: (_) => _json(_),
        iamServiceRoleArn: [],
        name: [],
        oauthToken: [],
        platform: [],
        repository: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateBackendEnvironmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/backendenvironments");
    b.p("appId", () => input.appId, "{appId}", false);
    let body;
    body = JSON.stringify(take(input, {
        deploymentArtifacts: [],
        environmentName: [],
        stackName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateBranchCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/branches");
    b.p("appId", () => input.appId, "{appId}", false);
    let body;
    body = JSON.stringify(take(input, {
        backend: (_) => _json(_),
        backendEnvironmentArn: [],
        basicAuthCredentials: [],
        branchName: [],
        buildSpec: [],
        description: [],
        displayName: [],
        enableAutoBuild: [],
        enableBasicAuth: [],
        enableNotification: [],
        enablePerformanceMode: [],
        enablePullRequestPreview: [],
        environmentVariables: (_) => _json(_),
        framework: [],
        pullRequestEnvironmentName: [],
        stage: [],
        tags: (_) => _json(_),
        ttl: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDeploymentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/branches/{branchName}/deployments");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    let body;
    body = JSON.stringify(take(input, {
        fileMap: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDomainAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/domains");
    b.p("appId", () => input.appId, "{appId}", false);
    let body;
    body = JSON.stringify(take(input, {
        autoSubDomainCreationPatterns: (_) => _json(_),
        autoSubDomainIAMRole: [],
        certificateSettings: (_) => _json(_),
        domainName: [],
        enableAutoSubDomain: [],
        subDomainSettings: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateWebhookCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/webhooks");
    b.p("appId", () => input.appId, "{appId}", false);
    let body;
    body = JSON.stringify(take(input, {
        branchName: [],
        description: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAppCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/apps/{appId}");
    b.p("appId", () => input.appId, "{appId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteBackendEnvironmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/apps/{appId}/backendenvironments/{environmentName}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteBranchCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/apps/{appId}/branches/{branchName}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteDomainAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/apps/{appId}/domains/{domainName}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("domainName", () => input.domainName, "{domainName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/apps/{appId}/branches/{branchName}/jobs/{jobId}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    b.p("jobId", () => input.jobId, "{jobId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteWebhookCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/webhooks/{webhookId}");
    b.p("webhookId", () => input.webhookId, "{webhookId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GenerateAccessLogsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/accesslogs");
    b.p("appId", () => input.appId, "{appId}", false);
    let body;
    body = JSON.stringify(take(input, {
        domainName: [],
        endTime: (_) => _.getTime() / 1000,
        startTime: (_) => _.getTime() / 1000,
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetAppCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/apps/{appId}");
    b.p("appId", () => input.appId, "{appId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetArtifactUrlCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/artifacts/{artifactId}");
    b.p("artifactId", () => input.artifactId, "{artifactId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetBackendEnvironmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/apps/{appId}/backendenvironments/{environmentName}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetBranchCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/apps/{appId}/branches/{branchName}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDomainAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/apps/{appId}/domains/{domainName}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("domainName", () => input.domainName, "{domainName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/apps/{appId}/branches/{branchName}/jobs/{jobId}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    b.p("jobId", () => input.jobId, "{jobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetWebhookCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/webhooks/{webhookId}");
    b.p("webhookId", () => input.webhookId, "{webhookId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListAppsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/apps");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListArtifactsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/apps/{appId}/branches/{branchName}/jobs/{jobId}/artifacts");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    b.p("jobId", () => input.jobId, "{jobId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListBackendEnvironmentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/apps/{appId}/backendenvironments");
    b.p("appId", () => input.appId, "{appId}", false);
    const query = map({
        [_eN]: [, input[_eN]],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListBranchesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/apps/{appId}/branches");
    b.p("appId", () => input.appId, "{appId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDomainAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/apps/{appId}/domains");
    b.p("appId", () => input.appId, "{appId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/apps/{appId}/branches/{branchName}/jobs");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListWebhooksCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/apps/{appId}/webhooks");
    b.p("appId", () => input.appId, "{appId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_StartDeploymentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/branches/{branchName}/deployments/start");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    let body;
    body = JSON.stringify(take(input, {
        jobId: [],
        sourceUrl: [],
        sourceUrlType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/branches/{branchName}/jobs");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    let body;
    body = JSON.stringify(take(input, {
        commitId: [],
        commitMessage: [],
        commitTime: (_) => _.getTime() / 1000,
        jobId: [],
        jobReason: [],
        jobType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/apps/{appId}/branches/{branchName}/jobs/{jobId}/stop");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    b.p("jobId", () => input.jobId, "{jobId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [__expectNonNull(input.tagKeys, `tagKeys`) != null, () => input[_tK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateAppCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}");
    b.p("appId", () => input.appId, "{appId}", false);
    let body;
    body = JSON.stringify(take(input, {
        accessToken: [],
        autoBranchCreationConfig: (_) => _json(_),
        autoBranchCreationPatterns: (_) => _json(_),
        basicAuthCredentials: [],
        buildSpec: [],
        cacheConfig: (_) => _json(_),
        customHeaders: [],
        customRules: (_) => _json(_),
        description: [],
        enableAutoBranchCreation: [],
        enableBasicAuth: [],
        enableBranchAutoBuild: [],
        enableBranchAutoDeletion: [],
        environmentVariables: (_) => _json(_),
        iamServiceRoleArn: [],
        name: [],
        oauthToken: [],
        platform: [],
        repository: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateBranchCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/branches/{branchName}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    let body;
    body = JSON.stringify(take(input, {
        backend: (_) => _json(_),
        backendEnvironmentArn: [],
        basicAuthCredentials: [],
        buildSpec: [],
        description: [],
        displayName: [],
        enableAutoBuild: [],
        enableBasicAuth: [],
        enableNotification: [],
        enablePerformanceMode: [],
        enablePullRequestPreview: [],
        environmentVariables: (_) => _json(_),
        framework: [],
        pullRequestEnvironmentName: [],
        stage: [],
        ttl: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateDomainAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/domains/{domainName}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("domainName", () => input.domainName, "{domainName}", false);
    let body;
    body = JSON.stringify(take(input, {
        autoSubDomainCreationPatterns: (_) => _json(_),
        autoSubDomainIAMRole: [],
        certificateSettings: (_) => _json(_),
        enableAutoSubDomain: [],
        subDomainSettings: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateWebhookCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/webhooks/{webhookId}");
    b.p("webhookId", () => input.webhookId, "{webhookId}", false);
    let body;
    body = JSON.stringify(take(input, {
        branchName: [],
        description: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_CreateAppCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        app: (_) => de_App(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateBackendEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        backendEnvironment: (_) => de_BackendEnvironment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateBranchCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        branch: (_) => de_Branch(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        fileUploadUrls: _json,
        jobId: __expectString,
        zipUploadUrl: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDomainAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        domainAssociation: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateWebhookCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        webhook: (_) => de_Webhook(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAppCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        app: (_) => de_App(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteBackendEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        backendEnvironment: (_) => de_BackendEnvironment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteBranchCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        branch: (_) => de_Branch(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteDomainAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        domainAssociation: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobSummary: (_) => de_JobSummary(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteWebhookCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        webhook: (_) => de_Webhook(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GenerateAccessLogsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        logUrl: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAppCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        app: (_) => de_App(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetArtifactUrlCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        artifactId: __expectString,
        artifactUrl: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBackendEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        backendEnvironment: (_) => de_BackendEnvironment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBranchCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        branch: (_) => de_Branch(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDomainAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        domainAssociation: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        job: (_) => de_Job(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetWebhookCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        webhook: (_) => de_Webhook(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAppsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        apps: (_) => de_Apps(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListArtifactsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        artifacts: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListBackendEnvironmentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        backendEnvironments: (_) => de_BackendEnvironments(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListBranchesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        branches: (_) => de_Branches(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDomainAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        domainAssociations: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobSummaries: (_) => de_JobSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWebhooksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        webhooks: (_) => de_Webhooks(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobSummary: (_) => de_JobSummary(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobSummary: (_) => de_JobSummary(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobSummary: (_) => de_JobSummary(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateAppCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        app: (_) => de_App(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateBranchCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        branch: (_) => de_Branch(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateDomainAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        domainAssociation: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateWebhookCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        webhook: (_) => de_Webhook(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.amplify#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "DependentServiceFailureException":
        case "com.amazonaws.amplify#DependentServiceFailureException":
            throw await de_DependentServiceFailureExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.amplify#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.amplify#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.amplify#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.amplify#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.amplify#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_DependentServiceFailureExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new DependentServiceFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalFailureExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_App = (output, context) => {
    return take(output, {
        appArn: __expectString,
        appId: __expectString,
        autoBranchCreationConfig: _json,
        autoBranchCreationPatterns: _json,
        basicAuthCredentials: __expectString,
        buildSpec: __expectString,
        cacheConfig: _json,
        createTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        customHeaders: __expectString,
        customRules: _json,
        defaultDomain: __expectString,
        description: __expectString,
        enableAutoBranchCreation: __expectBoolean,
        enableBasicAuth: __expectBoolean,
        enableBranchAutoBuild: __expectBoolean,
        enableBranchAutoDeletion: __expectBoolean,
        environmentVariables: _json,
        iamServiceRoleArn: __expectString,
        name: __expectString,
        platform: __expectString,
        productionBranch: (_) => de_ProductionBranch(_, context),
        repository: __expectString,
        repositoryCloneMethod: __expectString,
        tags: _json,
        updateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Apps = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_App(entry, context);
    });
    return retVal;
};
const de_BackendEnvironment = (output, context) => {
    return take(output, {
        backendEnvironmentArn: __expectString,
        createTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deploymentArtifacts: __expectString,
        environmentName: __expectString,
        stackName: __expectString,
        updateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_BackendEnvironments = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BackendEnvironment(entry, context);
    });
    return retVal;
};
const de_Branch = (output, context) => {
    return take(output, {
        activeJobId: __expectString,
        associatedResources: _json,
        backend: _json,
        backendEnvironmentArn: __expectString,
        basicAuthCredentials: __expectString,
        branchArn: __expectString,
        branchName: __expectString,
        buildSpec: __expectString,
        createTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        customDomains: _json,
        description: __expectString,
        destinationBranch: __expectString,
        displayName: __expectString,
        enableAutoBuild: __expectBoolean,
        enableBasicAuth: __expectBoolean,
        enableNotification: __expectBoolean,
        enablePerformanceMode: __expectBoolean,
        enablePullRequestPreview: __expectBoolean,
        environmentVariables: _json,
        framework: __expectString,
        pullRequestEnvironmentName: __expectString,
        sourceBranch: __expectString,
        stage: __expectString,
        tags: _json,
        thumbnailUrl: __expectString,
        totalNumberOfJobs: __expectString,
        ttl: __expectString,
        updateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Branches = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Branch(entry, context);
    });
    return retVal;
};
const de_Job = (output, context) => {
    return take(output, {
        steps: (_) => de_Steps(_, context),
        summary: (_) => de_JobSummary(_, context),
    });
};
const de_JobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobSummary(entry, context);
    });
    return retVal;
};
const de_JobSummary = (output, context) => {
    return take(output, {
        commitId: __expectString,
        commitMessage: __expectString,
        commitTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        jobArn: __expectString,
        jobId: __expectString,
        jobType: __expectString,
        sourceUrl: __expectString,
        sourceUrlType: __expectString,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
    });
};
const de_ProductionBranch = (output, context) => {
    return take(output, {
        branchName: __expectString,
        lastDeployTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        thumbnailUrl: __expectString,
    });
};
const de_Step = (output, context) => {
    return take(output, {
        artifactsUrl: __expectString,
        context: __expectString,
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        logUrl: __expectString,
        screenshots: _json,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        statusReason: __expectString,
        stepName: __expectString,
        testArtifactsUrl: __expectString,
        testConfigUrl: __expectString,
    });
};
const de_Steps = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Step(entry, context);
    });
    return retVal;
};
const de_Webhook = (output, context) => {
    return take(output, {
        branchName: __expectString,
        createTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        updateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        webhookArn: __expectString,
        webhookId: __expectString,
        webhookUrl: __expectString,
    });
};
const de_Webhooks = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Webhook(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const _eN = "environmentName";
const _mR = "maxResults";
const _nT = "nextToken";
const _tK = "tagKeys";
