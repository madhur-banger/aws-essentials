import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { TenantDatabaseFilterSensitiveLog, } from "./models_0";
import { RDSServiceException as __BaseException } from "./RDSServiceException";
export class DBProxyTargetNotFoundFault extends __BaseException {
    constructor(opts) {
        super({
            name: "DBProxyTargetNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBProxyTargetNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyTargetNotFoundFault.prototype);
    }
}
export class DBClusterBacktrackNotFoundFault extends __BaseException {
    constructor(opts) {
        super({
            name: "DBClusterBacktrackNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterBacktrackNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterBacktrackNotFoundFault.prototype);
    }
}
export const ApplyMethod = {
    immediate: "immediate",
    pending_reboot: "pending-reboot",
};
export const TargetRole = {
    READ_ONLY: "READ_ONLY",
    READ_WRITE: "READ_WRITE",
    UNKNOWN: "UNKNOWN",
};
export const TargetHealthReason = {
    AUTH_FAILURE: "AUTH_FAILURE",
    CONNECTION_FAILED: "CONNECTION_FAILED",
    INVALID_REPLICATION_STATE: "INVALID_REPLICATION_STATE",
    PENDING_PROXY_CAPACITY: "PENDING_PROXY_CAPACITY",
    UNREACHABLE: "UNREACHABLE",
};
export const TargetState = {
    available: "AVAILABLE",
    registering: "REGISTERING",
    unavailable: "UNAVAILABLE",
};
export const TargetType = {
    RDS_INSTANCE: "RDS_INSTANCE",
    RDS_SERVERLESS_ENDPOINT: "RDS_SERVERLESS_ENDPOINT",
    TRACKED_CLUSTER: "TRACKED_CLUSTER",
};
export const SourceType = {
    blue_green_deployment: "blue-green-deployment",
    custom_engine_version: "custom-engine-version",
    db_cluster: "db-cluster",
    db_cluster_snapshot: "db-cluster-snapshot",
    db_instance: "db-instance",
    db_parameter_group: "db-parameter-group",
    db_proxy: "db-proxy",
    db_security_group: "db-security-group",
    db_snapshot: "db-snapshot",
};
export class ReservedDBInstanceNotFoundFault extends __BaseException {
    constructor(opts) {
        super({
            name: "ReservedDBInstanceNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ReservedDBInstanceNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReservedDBInstanceNotFoundFault.prototype);
    }
}
export class ReservedDBInstancesOfferingNotFoundFault extends __BaseException {
    constructor(opts) {
        super({
            name: "ReservedDBInstancesOfferingNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ReservedDBInstancesOfferingNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReservedDBInstancesOfferingNotFoundFault.prototype);
    }
}
export class InvalidResourceStateFault extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidResourceStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidResourceStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidResourceStateFault.prototype);
    }
}
export class DBLogFileNotFoundFault extends __BaseException {
    constructor(opts) {
        super({
            name: "DBLogFileNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBLogFileNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBLogFileNotFoundFault.prototype);
    }
}
export const AuditPolicyState = {
    LOCKED_POLICY: "locked",
    UNLOCKED_POLICY: "unlocked",
};
export class InvalidDBClusterCapacityFault extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidDBClusterCapacityFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBClusterCapacityFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBClusterCapacityFault.prototype);
    }
}
export const CustomEngineVersionStatus = {
    available: "available",
    inactive: "inactive",
    inactive_except_restore: "inactive-except-restore",
};
export class StorageTypeNotAvailableFault extends __BaseException {
    constructor(opts) {
        super({
            name: "StorageTypeNotAvailableFault",
            $fault: "client",
            ...opts,
        });
        this.name = "StorageTypeNotAvailableFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, StorageTypeNotAvailableFault.prototype);
    }
}
export class SharedSnapshotQuotaExceededFault extends __BaseException {
    constructor(opts) {
        super({
            name: "SharedSnapshotQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SharedSnapshotQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SharedSnapshotQuotaExceededFault.prototype);
    }
}
export class DBUpgradeDependencyFailureFault extends __BaseException {
    constructor(opts) {
        super({
            name: "DBUpgradeDependencyFailureFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBUpgradeDependencyFailureFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBUpgradeDependencyFailureFault.prototype);
    }
}
export class SubnetAlreadyInUse extends __BaseException {
    constructor(opts) {
        super({
            name: "SubnetAlreadyInUse",
            $fault: "client",
            ...opts,
        });
        this.name = "SubnetAlreadyInUse";
        this.$fault = "client";
        Object.setPrototypeOf(this, SubnetAlreadyInUse.prototype);
    }
}
export class ReservedDBInstanceAlreadyExistsFault extends __BaseException {
    constructor(opts) {
        super({
            name: "ReservedDBInstanceAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ReservedDBInstanceAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReservedDBInstanceAlreadyExistsFault.prototype);
    }
}
export class ReservedDBInstanceQuotaExceededFault extends __BaseException {
    constructor(opts) {
        super({
            name: "ReservedDBInstanceQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ReservedDBInstanceQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReservedDBInstanceQuotaExceededFault.prototype);
    }
}
export class DBProxyTargetAlreadyRegisteredFault extends __BaseException {
    constructor(opts) {
        super({
            name: "DBProxyTargetAlreadyRegisteredFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBProxyTargetAlreadyRegisteredFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyTargetAlreadyRegisteredFault.prototype);
    }
}
export class InsufficientAvailableIPsInSubnetFault extends __BaseException {
    constructor(opts) {
        super({
            name: "InsufficientAvailableIPsInSubnetFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InsufficientAvailableIPsInSubnetFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InsufficientAvailableIPsInSubnetFault.prototype);
    }
}
export class DBClusterRoleNotFoundFault extends __BaseException {
    constructor(opts) {
        super({
            name: "DBClusterRoleNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterRoleNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterRoleNotFoundFault.prototype);
    }
}
export class DBInstanceRoleNotFoundFault extends __BaseException {
    constructor(opts) {
        super({
            name: "DBInstanceRoleNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBInstanceRoleNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceRoleNotFoundFault.prototype);
    }
}
export class InvalidS3BucketFault extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidS3BucketFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidS3BucketFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidS3BucketFault.prototype);
    }
}
export class InsufficientDBClusterCapacityFault extends __BaseException {
    constructor(opts) {
        super({
            name: "InsufficientDBClusterCapacityFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InsufficientDBClusterCapacityFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InsufficientDBClusterCapacityFault.prototype);
    }
}
export class InvalidRestoreFault extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRestoreFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRestoreFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRestoreFault.prototype);
    }
}
export class PointInTimeRestoreNotEnabledFault extends __BaseException {
    constructor(opts) {
        super({
            name: "PointInTimeRestoreNotEnabledFault",
            $fault: "client",
            ...opts,
        });
        this.name = "PointInTimeRestoreNotEnabledFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, PointInTimeRestoreNotEnabledFault.prototype);
    }
}
export class ExportTaskAlreadyExistsFault extends __BaseException {
    constructor(opts) {
        super({
            name: "ExportTaskAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ExportTaskAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExportTaskAlreadyExistsFault.prototype);
    }
}
export class IamRoleMissingPermissionsFault extends __BaseException {
    constructor(opts) {
        super({
            name: "IamRoleMissingPermissionsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "IamRoleMissingPermissionsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, IamRoleMissingPermissionsFault.prototype);
    }
}
export class IamRoleNotFoundFault extends __BaseException {
    constructor(opts) {
        super({
            name: "IamRoleNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "IamRoleNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, IamRoleNotFoundFault.prototype);
    }
}
export class InvalidExportOnlyFault extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidExportOnlyFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidExportOnlyFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidExportOnlyFault.prototype);
    }
}
export class InvalidExportSourceStateFault extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidExportSourceStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidExportSourceStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidExportSourceStateFault.prototype);
    }
}
export const DeleteTenantDatabaseResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TenantDatabase && { TenantDatabase: TenantDatabaseFilterSensitiveLog(obj.TenantDatabase) }),
});
export const TenantDatabasesMessageFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TenantDatabases && {
        TenantDatabases: obj.TenantDatabases.map((item) => TenantDatabaseFilterSensitiveLog(item)),
    }),
});
export const ModifyTenantDatabaseMessageFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.MasterUserPassword && { MasterUserPassword: SENSITIVE_STRING }),
});
export const ModifyTenantDatabaseResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TenantDatabase && { TenantDatabase: TenantDatabaseFilterSensitiveLog(obj.TenantDatabase) }),
});
