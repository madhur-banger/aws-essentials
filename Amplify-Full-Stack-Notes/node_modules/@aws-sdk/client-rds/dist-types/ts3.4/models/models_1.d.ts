import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import {
  ActivityStreamMode,
  ActivityStreamPolicyStatus,
  ActivityStreamStatus,
  AutomationMode,
  AvailabilityZone,
  BlueGreenDeployment,
  DBCluster,
  DBClusterAutomatedBackup,
  DBClusterBacktrack,
  DBClusterEndpoint,
  DBClusterParameterGroup,
  DBClusterSnapshot,
  DBEngineVersion,
  DBInstance,
  DBInstanceAutomatedBackup,
  DBParameterGroup,
  DBProxy,
  DBProxyEndpoint,
  DBSecurityGroup,
  DBShardGroup,
  DBSnapshot,
  DBSubnetGroup,
  EventSubscription,
  ExportSourceType,
  ExportTask,
  GlobalCluster,
  Integration,
  OptionGroup,
  OptionSetting,
  ProcessorFeature,
  RdsCustomClusterConfiguration,
  ReplicaMode,
  ResourcePendingMaintenanceActions,
  ScalingConfiguration,
  ServerlessV2ScalingConfiguration,
  Tag,
  TenantDatabase,
  UserAuthConfig,
} from "./models_0";
import { RDSServiceException as __BaseException } from "./RDSServiceException";
export interface DeleteTenantDatabaseResult {
  TenantDatabase?: TenantDatabase;
}
export declare class DBProxyTargetNotFoundFault extends __BaseException {
  readonly name: "DBProxyTargetNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBProxyTargetNotFoundFault, __BaseException>
  );
}
export interface DeregisterDBProxyTargetsRequest {
  DBProxyName: string | undefined;
  TargetGroupName?: string;
  DBInstanceIdentifiers?: string[];
  DBClusterIdentifiers?: string[];
}
export interface DeregisterDBProxyTargetsResponse {}
export interface DescribeAccountAttributesMessage {}
export interface Filter {
  Name: string | undefined;
  Values: string[] | undefined;
}
export interface DescribeBlueGreenDeploymentsRequest {
  BlueGreenDeploymentIdentifier?: string;
  Filters?: Filter[];
  Marker?: string;
  MaxRecords?: number;
}
export interface DescribeBlueGreenDeploymentsResponse {
  BlueGreenDeployments?: BlueGreenDeployment[];
  Marker?: string;
}
export interface Certificate {
  CertificateIdentifier?: string;
  CertificateType?: string;
  Thumbprint?: string;
  ValidFrom?: Date;
  ValidTill?: Date;
  CertificateArn?: string;
  CustomerOverride?: boolean;
  CustomerOverrideValidTill?: Date;
}
export interface CertificateMessage {
  DefaultCertificateForNewLaunches?: string;
  Certificates?: Certificate[];
  Marker?: string;
}
export interface DescribeCertificatesMessage {
  CertificateIdentifier?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DBClusterAutomatedBackupMessage {
  Marker?: string;
  DBClusterAutomatedBackups?: DBClusterAutomatedBackup[];
}
export interface DescribeDBClusterAutomatedBackupsMessage {
  DbClusterResourceId?: string;
  DBClusterIdentifier?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DBClusterBacktrackMessage {
  Marker?: string;
  DBClusterBacktracks?: DBClusterBacktrack[];
}
export declare class DBClusterBacktrackNotFoundFault extends __BaseException {
  readonly name: "DBClusterBacktrackNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBClusterBacktrackNotFoundFault,
      __BaseException
    >
  );
}
export interface DescribeDBClusterBacktracksMessage {
  DBClusterIdentifier: string | undefined;
  BacktrackIdentifier?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DBClusterEndpointMessage {
  Marker?: string;
  DBClusterEndpoints?: DBClusterEndpoint[];
}
export interface DescribeDBClusterEndpointsMessage {
  DBClusterIdentifier?: string;
  DBClusterEndpointIdentifier?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DBClusterParameterGroupsMessage {
  Marker?: string;
  DBClusterParameterGroups?: DBClusterParameterGroup[];
}
export interface DescribeDBClusterParameterGroupsMessage {
  DBClusterParameterGroupName?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export declare const ApplyMethod: {
  readonly immediate: "immediate";
  readonly pending_reboot: "pending-reboot";
};
export type ApplyMethod = (typeof ApplyMethod)[keyof typeof ApplyMethod];
export interface Parameter {
  ParameterName?: string;
  ParameterValue?: string;
  Description?: string;
  Source?: string;
  ApplyType?: string;
  DataType?: string;
  AllowedValues?: string;
  IsModifiable?: boolean;
  MinimumEngineVersion?: string;
  ApplyMethod?: ApplyMethod;
  SupportedEngineModes?: string[];
}
export interface DBClusterParameterGroupDetails {
  Parameters?: Parameter[];
  Marker?: string;
}
export interface DescribeDBClusterParametersMessage {
  DBClusterParameterGroupName: string | undefined;
  Source?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DBClusterMessage {
  Marker?: string;
  DBClusters?: DBCluster[];
}
export interface DescribeDBClustersMessage {
  DBClusterIdentifier?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
  IncludeShared?: boolean;
}
export interface DescribeDBClusterSnapshotAttributesMessage {
  DBClusterSnapshotIdentifier: string | undefined;
}
export interface DBClusterSnapshotAttribute {
  AttributeName?: string;
  AttributeValues?: string[];
}
export interface DBClusterSnapshotAttributesResult {
  DBClusterSnapshotIdentifier?: string;
  DBClusterSnapshotAttributes?: DBClusterSnapshotAttribute[];
}
export interface DescribeDBClusterSnapshotAttributesResult {
  DBClusterSnapshotAttributesResult?: DBClusterSnapshotAttributesResult;
}
export interface DBClusterSnapshotMessage {
  Marker?: string;
  DBClusterSnapshots?: DBClusterSnapshot[];
}
export interface DescribeDBClusterSnapshotsMessage {
  DBClusterIdentifier?: string;
  DBClusterSnapshotIdentifier?: string;
  SnapshotType?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
  IncludeShared?: boolean;
  IncludePublic?: boolean;
  DbClusterResourceId?: string;
}
export interface DBEngineVersionMessage {
  Marker?: string;
  DBEngineVersions?: DBEngineVersion[];
}
export interface DescribeDBEngineVersionsMessage {
  Engine?: string;
  EngineVersion?: string;
  DBParameterGroupFamily?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
  DefaultOnly?: boolean;
  ListSupportedCharacterSets?: boolean;
  ListSupportedTimezones?: boolean;
  IncludeAll?: boolean;
}
export interface DBInstanceAutomatedBackupMessage {
  Marker?: string;
  DBInstanceAutomatedBackups?: DBInstanceAutomatedBackup[];
}
export interface DescribeDBInstanceAutomatedBackupsMessage {
  DbiResourceId?: string;
  DBInstanceIdentifier?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
  DBInstanceAutomatedBackupsArn?: string;
}
export interface DBInstanceMessage {
  Marker?: string;
  DBInstances?: DBInstance[];
}
export interface DescribeDBInstancesMessage {
  DBInstanceIdentifier?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DescribeDBLogFilesMessage {
  DBInstanceIdentifier: string | undefined;
  FilenameContains?: string;
  FileLastWritten?: number;
  FileSize?: number;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DescribeDBLogFilesDetails {
  LogFileName?: string;
  LastWritten?: number;
  Size?: number;
}
export interface DescribeDBLogFilesResponse {
  DescribeDBLogFiles?: DescribeDBLogFilesDetails[];
  Marker?: string;
}
export interface DBParameterGroupsMessage {
  Marker?: string;
  DBParameterGroups?: DBParameterGroup[];
}
export interface DescribeDBParameterGroupsMessage {
  DBParameterGroupName?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DBParameterGroupDetails {
  Parameters?: Parameter[];
  Marker?: string;
}
export interface DescribeDBParametersMessage {
  DBParameterGroupName: string | undefined;
  Source?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DescribeDBProxiesRequest {
  DBProxyName?: string;
  Filters?: Filter[];
  Marker?: string;
  MaxRecords?: number;
}
export interface DescribeDBProxiesResponse {
  DBProxies?: DBProxy[];
  Marker?: string;
}
export interface DescribeDBProxyEndpointsRequest {
  DBProxyName?: string;
  DBProxyEndpointName?: string;
  Filters?: Filter[];
  Marker?: string;
  MaxRecords?: number;
}
export interface DescribeDBProxyEndpointsResponse {
  DBProxyEndpoints?: DBProxyEndpoint[];
  Marker?: string;
}
export interface DescribeDBProxyTargetGroupsRequest {
  DBProxyName: string | undefined;
  TargetGroupName?: string;
  Filters?: Filter[];
  Marker?: string;
  MaxRecords?: number;
}
export interface ConnectionPoolConfigurationInfo {
  MaxConnectionsPercent?: number;
  MaxIdleConnectionsPercent?: number;
  ConnectionBorrowTimeout?: number;
  SessionPinningFilters?: string[];
  InitQuery?: string;
}
export interface DBProxyTargetGroup {
  DBProxyName?: string;
  TargetGroupName?: string;
  TargetGroupArn?: string;
  IsDefault?: boolean;
  Status?: string;
  ConnectionPoolConfig?: ConnectionPoolConfigurationInfo;
  CreatedDate?: Date;
  UpdatedDate?: Date;
}
export interface DescribeDBProxyTargetGroupsResponse {
  TargetGroups?: DBProxyTargetGroup[];
  Marker?: string;
}
export interface DescribeDBProxyTargetsRequest {
  DBProxyName: string | undefined;
  TargetGroupName?: string;
  Filters?: Filter[];
  Marker?: string;
  MaxRecords?: number;
}
export declare const TargetRole: {
  readonly READ_ONLY: "READ_ONLY";
  readonly READ_WRITE: "READ_WRITE";
  readonly UNKNOWN: "UNKNOWN";
};
export type TargetRole = (typeof TargetRole)[keyof typeof TargetRole];
export declare const TargetHealthReason: {
  readonly AUTH_FAILURE: "AUTH_FAILURE";
  readonly CONNECTION_FAILED: "CONNECTION_FAILED";
  readonly INVALID_REPLICATION_STATE: "INVALID_REPLICATION_STATE";
  readonly PENDING_PROXY_CAPACITY: "PENDING_PROXY_CAPACITY";
  readonly UNREACHABLE: "UNREACHABLE";
};
export type TargetHealthReason =
  (typeof TargetHealthReason)[keyof typeof TargetHealthReason];
export declare const TargetState: {
  readonly available: "AVAILABLE";
  readonly registering: "REGISTERING";
  readonly unavailable: "UNAVAILABLE";
};
export type TargetState = (typeof TargetState)[keyof typeof TargetState];
export interface TargetHealth {
  State?: TargetState;
  Reason?: TargetHealthReason;
  Description?: string;
}
export declare const TargetType: {
  readonly RDS_INSTANCE: "RDS_INSTANCE";
  readonly RDS_SERVERLESS_ENDPOINT: "RDS_SERVERLESS_ENDPOINT";
  readonly TRACKED_CLUSTER: "TRACKED_CLUSTER";
};
export type TargetType = (typeof TargetType)[keyof typeof TargetType];
export interface DBProxyTarget {
  TargetArn?: string;
  Endpoint?: string;
  TrackedClusterId?: string;
  RdsResourceId?: string;
  Port?: number;
  Type?: TargetType;
  Role?: TargetRole;
  TargetHealth?: TargetHealth;
}
export interface DescribeDBProxyTargetsResponse {
  Targets?: DBProxyTarget[];
  Marker?: string;
}
export interface PerformanceInsightsMetricDimensionGroup {
  Dimensions?: string[];
  Group?: string;
  Limit?: number;
}
export interface PerformanceInsightsMetricQuery {
  GroupBy?: PerformanceInsightsMetricDimensionGroup;
  Metric?: string;
}
export interface MetricQuery {
  PerformanceInsightsMetricQuery?: PerformanceInsightsMetricQuery;
}
export interface ScalarReferenceDetails {
  Value?: number;
}
export interface ReferenceDetails {
  ScalarReferenceDetails?: ScalarReferenceDetails;
}
export interface MetricReference {
  Name?: string;
  ReferenceDetails?: ReferenceDetails;
}
export interface Metric {
  Name?: string;
  References?: MetricReference[];
  StatisticsDetails?: string;
  MetricQuery?: MetricQuery;
}
export interface PerformanceIssueDetails {
  StartTime?: Date;
  EndTime?: Date;
  Metrics?: Metric[];
  Analysis?: string;
}
export interface IssueDetails {
  PerformanceIssueDetails?: PerformanceIssueDetails;
}
export interface DocLink {
  Text?: string;
  Url?: string;
}
export interface ContextAttribute {
  Key?: string;
  Value?: string;
}
export interface RecommendedActionParameter {
  Key?: string;
  Value?: string;
}
export interface RecommendedAction {
  ActionId?: string;
  Title?: string;
  Description?: string;
  Operation?: string;
  Parameters?: RecommendedActionParameter[];
  ApplyModes?: string[];
  Status?: string;
  IssueDetails?: IssueDetails;
  ContextAttributes?: ContextAttribute[];
}
export interface DBRecommendation {
  RecommendationId?: string;
  TypeId?: string;
  Severity?: string;
  ResourceArn?: string;
  Status?: string;
  CreatedTime?: Date;
  UpdatedTime?: Date;
  Detection?: string;
  Recommendation?: string;
  Description?: string;
  Reason?: string;
  RecommendedActions?: RecommendedAction[];
  Category?: string;
  Source?: string;
  TypeDetection?: string;
  TypeRecommendation?: string;
  Impact?: string;
  AdditionalInfo?: string;
  Links?: DocLink[];
  IssueDetails?: IssueDetails;
}
export interface DBRecommendationsMessage {
  DBRecommendations?: DBRecommendation[];
  Marker?: string;
}
export interface DescribeDBRecommendationsMessage {
  LastUpdatedAfter?: Date;
  LastUpdatedBefore?: Date;
  Locale?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DBSecurityGroupMessage {
  Marker?: string;
  DBSecurityGroups?: DBSecurityGroup[];
}
export interface DescribeDBSecurityGroupsMessage {
  DBSecurityGroupName?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DescribeDBShardGroupsMessage {
  DBShardGroupIdentifier?: string;
  Filters?: Filter[];
  Marker?: string;
  MaxRecords?: number;
}
export interface DescribeDBShardGroupsResponse {
  DBShardGroups?: DBShardGroup[];
  Marker?: string;
}
export interface DescribeDBSnapshotAttributesMessage {
  DBSnapshotIdentifier: string | undefined;
}
export interface DBSnapshotAttribute {
  AttributeName?: string;
  AttributeValues?: string[];
}
export interface DBSnapshotAttributesResult {
  DBSnapshotIdentifier?: string;
  DBSnapshotAttributes?: DBSnapshotAttribute[];
}
export interface DescribeDBSnapshotAttributesResult {
  DBSnapshotAttributesResult?: DBSnapshotAttributesResult;
}
export interface DBSnapshotMessage {
  Marker?: string;
  DBSnapshots?: DBSnapshot[];
}
export interface DescribeDBSnapshotsMessage {
  DBInstanceIdentifier?: string;
  DBSnapshotIdentifier?: string;
  SnapshotType?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
  IncludeShared?: boolean;
  IncludePublic?: boolean;
  DbiResourceId?: string;
}
export interface DBSnapshotTenantDatabase {
  DBSnapshotIdentifier?: string;
  DBInstanceIdentifier?: string;
  DbiResourceId?: string;
  EngineName?: string;
  SnapshotType?: string;
  TenantDatabaseCreateTime?: Date;
  TenantDBName?: string;
  MasterUsername?: string;
  TenantDatabaseResourceId?: string;
  CharacterSetName?: string;
  DBSnapshotTenantDatabaseARN?: string;
  NcharCharacterSetName?: string;
  TagList?: Tag[];
}
export interface DBSnapshotTenantDatabasesMessage {
  Marker?: string;
  DBSnapshotTenantDatabases?: DBSnapshotTenantDatabase[];
}
export interface DescribeDBSnapshotTenantDatabasesMessage {
  DBInstanceIdentifier?: string;
  DBSnapshotIdentifier?: string;
  SnapshotType?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
  DbiResourceId?: string;
}
export interface DBSubnetGroupMessage {
  Marker?: string;
  DBSubnetGroups?: DBSubnetGroup[];
}
export interface DescribeDBSubnetGroupsMessage {
  DBSubnetGroupName?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DescribeEngineDefaultClusterParametersMessage {
  DBParameterGroupFamily: string | undefined;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface EngineDefaults {
  DBParameterGroupFamily?: string;
  Marker?: string;
  Parameters?: Parameter[];
}
export interface DescribeEngineDefaultClusterParametersResult {
  EngineDefaults?: EngineDefaults;
}
export interface DescribeEngineDefaultParametersMessage {
  DBParameterGroupFamily: string | undefined;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DescribeEngineDefaultParametersResult {
  EngineDefaults?: EngineDefaults;
}
export interface DescribeEventCategoriesMessage {
  SourceType?: string;
  Filters?: Filter[];
}
export interface EventCategoriesMap {
  SourceType?: string;
  EventCategories?: string[];
}
export interface EventCategoriesMessage {
  EventCategoriesMapList?: EventCategoriesMap[];
}
export declare const SourceType: {
  readonly blue_green_deployment: "blue-green-deployment";
  readonly custom_engine_version: "custom-engine-version";
  readonly db_cluster: "db-cluster";
  readonly db_cluster_snapshot: "db-cluster-snapshot";
  readonly db_instance: "db-instance";
  readonly db_parameter_group: "db-parameter-group";
  readonly db_proxy: "db-proxy";
  readonly db_security_group: "db-security-group";
  readonly db_snapshot: "db-snapshot";
};
export type SourceType = (typeof SourceType)[keyof typeof SourceType];
export interface DescribeEventsMessage {
  SourceIdentifier?: string;
  SourceType?: SourceType;
  StartTime?: Date;
  EndTime?: Date;
  Duration?: number;
  EventCategories?: string[];
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface Event {
  SourceIdentifier?: string;
  SourceType?: SourceType;
  Message?: string;
  EventCategories?: string[];
  Date?: Date;
  SourceArn?: string;
}
export interface EventsMessage {
  Marker?: string;
  Events?: Event[];
}
export interface DescribeEventSubscriptionsMessage {
  SubscriptionName?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface EventSubscriptionsMessage {
  Marker?: string;
  EventSubscriptionsList?: EventSubscription[];
}
export interface DescribeExportTasksMessage {
  ExportTaskIdentifier?: string;
  SourceArn?: string;
  Filters?: Filter[];
  Marker?: string;
  MaxRecords?: number;
  SourceType?: ExportSourceType;
}
export interface ExportTasksMessage {
  Marker?: string;
  ExportTasks?: ExportTask[];
}
export interface DescribeGlobalClustersMessage {
  GlobalClusterIdentifier?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface GlobalClustersMessage {
  Marker?: string;
  GlobalClusters?: GlobalCluster[];
}
export interface DescribeIntegrationsMessage {
  IntegrationIdentifier?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DescribeIntegrationsResponse {
  Marker?: string;
  Integrations?: Integration[];
}
export interface DescribeOptionGroupOptionsMessage {
  EngineName: string | undefined;
  MajorEngineVersion?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface MinimumEngineVersionPerAllowedValue {
  AllowedValue?: string;
  MinimumEngineVersion?: string;
}
export interface OptionGroupOptionSetting {
  SettingName?: string;
  SettingDescription?: string;
  DefaultValue?: string;
  ApplyType?: string;
  AllowedValues?: string;
  IsModifiable?: boolean;
  IsRequired?: boolean;
  MinimumEngineVersionPerAllowedValue?: MinimumEngineVersionPerAllowedValue[];
}
export interface OptionVersion {
  Version?: string;
  IsDefault?: boolean;
}
export interface OptionGroupOption {
  Name?: string;
  Description?: string;
  EngineName?: string;
  MajorEngineVersion?: string;
  MinimumRequiredMinorEngineVersion?: string;
  PortRequired?: boolean;
  DefaultPort?: number;
  OptionsDependedOn?: string[];
  OptionsConflictsWith?: string[];
  Persistent?: boolean;
  Permanent?: boolean;
  RequiresAutoMinorEngineVersionUpgrade?: boolean;
  VpcOnly?: boolean;
  SupportsOptionVersionDowngrade?: boolean;
  OptionGroupOptionSettings?: OptionGroupOptionSetting[];
  OptionGroupOptionVersions?: OptionVersion[];
  CopyableCrossAccount?: boolean;
}
export interface OptionGroupOptionsMessage {
  OptionGroupOptions?: OptionGroupOption[];
  Marker?: string;
}
export interface DescribeOptionGroupsMessage {
  OptionGroupName?: string;
  Filters?: Filter[];
  Marker?: string;
  MaxRecords?: number;
  EngineName?: string;
  MajorEngineVersion?: string;
}
export interface OptionGroups {
  OptionGroupsList?: OptionGroup[];
  Marker?: string;
}
export interface DescribeOrderableDBInstanceOptionsMessage {
  Engine: string | undefined;
  EngineVersion?: string;
  DBInstanceClass?: string;
  LicenseModel?: string;
  AvailabilityZoneGroup?: string;
  Vpc?: boolean;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface AvailableProcessorFeature {
  Name?: string;
  DefaultValue?: string;
  AllowedValues?: string;
}
export interface OrderableDBInstanceOption {
  Engine?: string;
  EngineVersion?: string;
  DBInstanceClass?: string;
  LicenseModel?: string;
  AvailabilityZoneGroup?: string;
  AvailabilityZones?: AvailabilityZone[];
  MultiAZCapable?: boolean;
  ReadReplicaCapable?: boolean;
  Vpc?: boolean;
  SupportsStorageEncryption?: boolean;
  StorageType?: string;
  SupportsIops?: boolean;
  SupportsEnhancedMonitoring?: boolean;
  SupportsIAMDatabaseAuthentication?: boolean;
  SupportsPerformanceInsights?: boolean;
  MinStorageSize?: number;
  MaxStorageSize?: number;
  MinIopsPerDbInstance?: number;
  MaxIopsPerDbInstance?: number;
  MinIopsPerGib?: number;
  MaxIopsPerGib?: number;
  AvailableProcessorFeatures?: AvailableProcessorFeature[];
  SupportedEngineModes?: string[];
  SupportsStorageAutoscaling?: boolean;
  SupportsKerberosAuthentication?: boolean;
  OutpostCapable?: boolean;
  SupportedActivityStreamModes?: string[];
  SupportsGlobalDatabases?: boolean;
  SupportsClusters?: boolean;
  SupportedNetworkTypes?: string[];
  SupportsStorageThroughput?: boolean;
  MinStorageThroughputPerDbInstance?: number;
  MaxStorageThroughputPerDbInstance?: number;
  MinStorageThroughputPerIops?: number;
  MaxStorageThroughputPerIops?: number;
  SupportsDedicatedLogVolume?: boolean;
}
export interface OrderableDBInstanceOptionsMessage {
  OrderableDBInstanceOptions?: OrderableDBInstanceOption[];
  Marker?: string;
}
export interface DescribePendingMaintenanceActionsMessage {
  ResourceIdentifier?: string;
  Filters?: Filter[];
  Marker?: string;
  MaxRecords?: number;
}
export interface PendingMaintenanceActionsMessage {
  PendingMaintenanceActions?: ResourcePendingMaintenanceActions[];
  Marker?: string;
}
export interface DescribeReservedDBInstancesMessage {
  ReservedDBInstanceId?: string;
  ReservedDBInstancesOfferingId?: string;
  DBInstanceClass?: string;
  Duration?: string;
  ProductDescription?: string;
  OfferingType?: string;
  MultiAZ?: boolean;
  LeaseId?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface RecurringCharge {
  RecurringChargeAmount?: number;
  RecurringChargeFrequency?: string;
}
export interface ReservedDBInstance {
  ReservedDBInstanceId?: string;
  ReservedDBInstancesOfferingId?: string;
  DBInstanceClass?: string;
  StartTime?: Date;
  Duration?: number;
  FixedPrice?: number;
  UsagePrice?: number;
  CurrencyCode?: string;
  DBInstanceCount?: number;
  ProductDescription?: string;
  OfferingType?: string;
  MultiAZ?: boolean;
  State?: string;
  RecurringCharges?: RecurringCharge[];
  ReservedDBInstanceArn?: string;
  LeaseId?: string;
}
export interface ReservedDBInstanceMessage {
  Marker?: string;
  ReservedDBInstances?: ReservedDBInstance[];
}
export declare class ReservedDBInstanceNotFoundFault extends __BaseException {
  readonly name: "ReservedDBInstanceNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ReservedDBInstanceNotFoundFault,
      __BaseException
    >
  );
}
export interface DescribeReservedDBInstancesOfferingsMessage {
  ReservedDBInstancesOfferingId?: string;
  DBInstanceClass?: string;
  Duration?: string;
  ProductDescription?: string;
  OfferingType?: string;
  MultiAZ?: boolean;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface ReservedDBInstancesOffering {
  ReservedDBInstancesOfferingId?: string;
  DBInstanceClass?: string;
  Duration?: number;
  FixedPrice?: number;
  UsagePrice?: number;
  CurrencyCode?: string;
  ProductDescription?: string;
  OfferingType?: string;
  MultiAZ?: boolean;
  RecurringCharges?: RecurringCharge[];
}
export interface ReservedDBInstancesOfferingMessage {
  Marker?: string;
  ReservedDBInstancesOfferings?: ReservedDBInstancesOffering[];
}
export declare class ReservedDBInstancesOfferingNotFoundFault extends __BaseException {
  readonly name: "ReservedDBInstancesOfferingNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ReservedDBInstancesOfferingNotFoundFault,
      __BaseException
    >
  );
}
export interface DescribeSourceRegionsMessage {
  RegionName?: string;
  MaxRecords?: number;
  Marker?: string;
  Filters?: Filter[];
}
export interface SourceRegion {
  RegionName?: string;
  Endpoint?: string;
  Status?: string;
  SupportsDBInstanceAutomatedBackupsReplication?: boolean;
}
export interface SourceRegionMessage {
  Marker?: string;
  SourceRegions?: SourceRegion[];
}
export interface DescribeTenantDatabasesMessage {
  DBInstanceIdentifier?: string;
  TenantDBName?: string;
  Filters?: Filter[];
  Marker?: string;
  MaxRecords?: number;
}
export interface TenantDatabasesMessage {
  Marker?: string;
  TenantDatabases?: TenantDatabase[];
}
export interface DescribeValidDBInstanceModificationsMessage {
  DBInstanceIdentifier: string | undefined;
}
export interface DoubleRange {
  From?: number;
  To?: number;
}
export interface Range {
  From?: number;
  To?: number;
  Step?: number;
}
export interface ValidStorageOptions {
  StorageType?: string;
  StorageSize?: Range[];
  ProvisionedIops?: Range[];
  IopsToStorageRatio?: DoubleRange[];
  SupportsStorageAutoscaling?: boolean;
  ProvisionedStorageThroughput?: Range[];
  StorageThroughputToIopsRatio?: DoubleRange[];
}
export interface ValidDBInstanceModificationsMessage {
  Storage?: ValidStorageOptions[];
  ValidProcessorFeatures?: AvailableProcessorFeature[];
  SupportsDedicatedLogVolume?: boolean;
}
export interface DescribeValidDBInstanceModificationsResult {
  ValidDBInstanceModificationsMessage?: ValidDBInstanceModificationsMessage;
}
export interface DisableHttpEndpointRequest {
  ResourceArn: string | undefined;
}
export interface DisableHttpEndpointResponse {
  ResourceArn?: string;
  HttpEndpointEnabled?: boolean;
}
export declare class InvalidResourceStateFault extends __BaseException {
  readonly name: "InvalidResourceStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidResourceStateFault, __BaseException>
  );
}
export declare class DBLogFileNotFoundFault extends __BaseException {
  readonly name: "DBLogFileNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBLogFileNotFoundFault, __BaseException>
  );
}
export interface DownloadDBLogFilePortionDetails {
  LogFileData?: string;
  Marker?: string;
  AdditionalDataPending?: boolean;
}
export interface DownloadDBLogFilePortionMessage {
  DBInstanceIdentifier: string | undefined;
  LogFileName: string | undefined;
  Marker?: string;
  NumberOfLines?: number;
}
export interface EnableHttpEndpointRequest {
  ResourceArn: string | undefined;
}
export interface EnableHttpEndpointResponse {
  ResourceArn?: string;
  HttpEndpointEnabled?: boolean;
}
export interface FailoverDBClusterMessage {
  DBClusterIdentifier: string | undefined;
  TargetDBInstanceIdentifier?: string;
}
export interface FailoverDBClusterResult {
  DBCluster?: DBCluster;
}
export interface FailoverGlobalClusterMessage {
  GlobalClusterIdentifier: string | undefined;
  TargetDbClusterIdentifier: string | undefined;
  AllowDataLoss?: boolean;
  Switchover?: boolean;
}
export interface FailoverGlobalClusterResult {
  GlobalCluster?: GlobalCluster;
}
export interface ListTagsForResourceMessage {
  ResourceName: string | undefined;
  Filters?: Filter[];
}
export interface TagListMessage {
  TagList?: Tag[];
}
export declare const AuditPolicyState: {
  readonly LOCKED_POLICY: "locked";
  readonly UNLOCKED_POLICY: "unlocked";
};
export type AuditPolicyState =
  (typeof AuditPolicyState)[keyof typeof AuditPolicyState];
export interface ModifyActivityStreamRequest {
  ResourceArn?: string;
  AuditPolicyState?: AuditPolicyState;
}
export interface ModifyActivityStreamResponse {
  KmsKeyId?: string;
  KinesisStreamName?: string;
  Status?: ActivityStreamStatus;
  Mode?: ActivityStreamMode;
  EngineNativeAuditFieldsIncluded?: boolean;
  PolicyStatus?: ActivityStreamPolicyStatus;
}
export interface ModifyCertificatesMessage {
  CertificateIdentifier?: string;
  RemoveCustomerOverride?: boolean;
}
export interface ModifyCertificatesResult {
  Certificate?: Certificate;
}
export interface DBClusterCapacityInfo {
  DBClusterIdentifier?: string;
  PendingCapacity?: number;
  CurrentCapacity?: number;
  SecondsBeforeTimeout?: number;
  TimeoutAction?: string;
}
export declare class InvalidDBClusterCapacityFault extends __BaseException {
  readonly name: "InvalidDBClusterCapacityFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidDBClusterCapacityFault, __BaseException>
  );
}
export interface ModifyCurrentDBClusterCapacityMessage {
  DBClusterIdentifier: string | undefined;
  Capacity?: number;
  SecondsBeforeTimeout?: number;
  TimeoutAction?: string;
}
export declare const CustomEngineVersionStatus: {
  readonly available: "available";
  readonly inactive: "inactive";
  readonly inactive_except_restore: "inactive-except-restore";
};
export type CustomEngineVersionStatus =
  (typeof CustomEngineVersionStatus)[keyof typeof CustomEngineVersionStatus];
export interface ModifyCustomDBEngineVersionMessage {
  Engine: string | undefined;
  EngineVersion: string | undefined;
  Description?: string;
  Status?: CustomEngineVersionStatus;
}
export interface CloudwatchLogsExportConfiguration {
  EnableLogTypes?: string[];
  DisableLogTypes?: string[];
}
export interface ModifyDBClusterMessage {
  DBClusterIdentifier: string | undefined;
  NewDBClusterIdentifier?: string;
  ApplyImmediately?: boolean;
  BackupRetentionPeriod?: number;
  DBClusterParameterGroupName?: string;
  VpcSecurityGroupIds?: string[];
  Port?: number;
  MasterUserPassword?: string;
  OptionGroupName?: string;
  PreferredBackupWindow?: string;
  PreferredMaintenanceWindow?: string;
  EnableIAMDatabaseAuthentication?: boolean;
  BacktrackWindow?: number;
  CloudwatchLogsExportConfiguration?: CloudwatchLogsExportConfiguration;
  EngineVersion?: string;
  AllowMajorVersionUpgrade?: boolean;
  DBInstanceParameterGroupName?: string;
  Domain?: string;
  DomainIAMRoleName?: string;
  ScalingConfiguration?: ScalingConfiguration;
  DeletionProtection?: boolean;
  EnableHttpEndpoint?: boolean;
  CopyTagsToSnapshot?: boolean;
  EnableGlobalWriteForwarding?: boolean;
  DBClusterInstanceClass?: string;
  AllocatedStorage?: number;
  StorageType?: string;
  Iops?: number;
  AutoMinorVersionUpgrade?: boolean;
  MonitoringInterval?: number;
  MonitoringRoleArn?: string;
  EnablePerformanceInsights?: boolean;
  PerformanceInsightsKMSKeyId?: string;
  PerformanceInsightsRetentionPeriod?: number;
  ServerlessV2ScalingConfiguration?: ServerlessV2ScalingConfiguration;
  NetworkType?: string;
  ManageMasterUserPassword?: boolean;
  RotateMasterUserPassword?: boolean;
  MasterUserSecretKmsKeyId?: string;
  EngineMode?: string;
  AllowEngineModeChange?: boolean;
  EnableLocalWriteForwarding?: boolean;
  AwsBackupRecoveryPointArn?: string;
  EnableLimitlessDatabase?: boolean;
  CACertificateIdentifier?: string;
}
export interface ModifyDBClusterResult {
  DBCluster?: DBCluster;
}
export declare class StorageTypeNotAvailableFault extends __BaseException {
  readonly name: "StorageTypeNotAvailableFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<StorageTypeNotAvailableFault, __BaseException>
  );
}
export interface ModifyDBClusterEndpointMessage {
  DBClusterEndpointIdentifier: string | undefined;
  EndpointType?: string;
  StaticMembers?: string[];
  ExcludedMembers?: string[];
}
export interface DBClusterParameterGroupNameMessage {
  DBClusterParameterGroupName?: string;
}
export interface ModifyDBClusterParameterGroupMessage {
  DBClusterParameterGroupName: string | undefined;
  Parameters: Parameter[] | undefined;
}
export interface ModifyDBClusterSnapshotAttributeMessage {
  DBClusterSnapshotIdentifier: string | undefined;
  AttributeName: string | undefined;
  ValuesToAdd?: string[];
  ValuesToRemove?: string[];
}
export interface ModifyDBClusterSnapshotAttributeResult {
  DBClusterSnapshotAttributesResult?: DBClusterSnapshotAttributesResult;
}
export declare class SharedSnapshotQuotaExceededFault extends __BaseException {
  readonly name: "SharedSnapshotQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      SharedSnapshotQuotaExceededFault,
      __BaseException
    >
  );
}
export declare class DBUpgradeDependencyFailureFault extends __BaseException {
  readonly name: "DBUpgradeDependencyFailureFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBUpgradeDependencyFailureFault,
      __BaseException
    >
  );
}
export interface ModifyDBInstanceMessage {
  DBInstanceIdentifier: string | undefined;
  AllocatedStorage?: number;
  DBInstanceClass?: string;
  DBSubnetGroupName?: string;
  DBSecurityGroups?: string[];
  VpcSecurityGroupIds?: string[];
  ApplyImmediately?: boolean;
  MasterUserPassword?: string;
  DBParameterGroupName?: string;
  BackupRetentionPeriod?: number;
  PreferredBackupWindow?: string;
  PreferredMaintenanceWindow?: string;
  MultiAZ?: boolean;
  EngineVersion?: string;
  AllowMajorVersionUpgrade?: boolean;
  AutoMinorVersionUpgrade?: boolean;
  LicenseModel?: string;
  Iops?: number;
  OptionGroupName?: string;
  NewDBInstanceIdentifier?: string;
  StorageType?: string;
  TdeCredentialArn?: string;
  TdeCredentialPassword?: string;
  CACertificateIdentifier?: string;
  Domain?: string;
  DomainFqdn?: string;
  DomainOu?: string;
  DomainAuthSecretArn?: string;
  DomainDnsIps?: string[];
  CopyTagsToSnapshot?: boolean;
  MonitoringInterval?: number;
  DBPortNumber?: number;
  PubliclyAccessible?: boolean;
  MonitoringRoleArn?: string;
  DomainIAMRoleName?: string;
  DisableDomain?: boolean;
  PromotionTier?: number;
  EnableIAMDatabaseAuthentication?: boolean;
  EnablePerformanceInsights?: boolean;
  PerformanceInsightsKMSKeyId?: string;
  PerformanceInsightsRetentionPeriod?: number;
  CloudwatchLogsExportConfiguration?: CloudwatchLogsExportConfiguration;
  ProcessorFeatures?: ProcessorFeature[];
  UseDefaultProcessorFeatures?: boolean;
  DeletionProtection?: boolean;
  MaxAllocatedStorage?: number;
  CertificateRotationRestart?: boolean;
  ReplicaMode?: ReplicaMode;
  EnableCustomerOwnedIp?: boolean;
  AwsBackupRecoveryPointArn?: string;
  AutomationMode?: AutomationMode;
  ResumeFullAutomationModeMinutes?: number;
  NetworkType?: string;
  StorageThroughput?: number;
  ManageMasterUserPassword?: boolean;
  RotateMasterUserPassword?: boolean;
  MasterUserSecretKmsKeyId?: string;
  Engine?: string;
  DedicatedLogVolume?: boolean;
  MultiTenant?: boolean;
}
export interface ModifyDBInstanceResult {
  DBInstance?: DBInstance;
}
export interface DBParameterGroupNameMessage {
  DBParameterGroupName?: string;
}
export interface ModifyDBParameterGroupMessage {
  DBParameterGroupName: string | undefined;
  Parameters: Parameter[] | undefined;
}
export interface ModifyDBProxyRequest {
  DBProxyName: string | undefined;
  NewDBProxyName?: string;
  Auth?: UserAuthConfig[];
  RequireTLS?: boolean;
  IdleClientTimeout?: number;
  DebugLogging?: boolean;
  RoleArn?: string;
  SecurityGroups?: string[];
}
export interface ModifyDBProxyResponse {
  DBProxy?: DBProxy;
}
export interface ModifyDBProxyEndpointRequest {
  DBProxyEndpointName: string | undefined;
  NewDBProxyEndpointName?: string;
  VpcSecurityGroupIds?: string[];
}
export interface ModifyDBProxyEndpointResponse {
  DBProxyEndpoint?: DBProxyEndpoint;
}
export interface ConnectionPoolConfiguration {
  MaxConnectionsPercent?: number;
  MaxIdleConnectionsPercent?: number;
  ConnectionBorrowTimeout?: number;
  SessionPinningFilters?: string[];
  InitQuery?: string;
}
export interface ModifyDBProxyTargetGroupRequest {
  TargetGroupName: string | undefined;
  DBProxyName: string | undefined;
  ConnectionPoolConfig?: ConnectionPoolConfiguration;
  NewName?: string;
}
export interface ModifyDBProxyTargetGroupResponse {
  DBProxyTargetGroup?: DBProxyTargetGroup;
}
export interface DBRecommendationMessage {
  DBRecommendation?: DBRecommendation;
}
export interface RecommendedActionUpdate {
  ActionId: string | undefined;
  Status: string | undefined;
}
export interface ModifyDBRecommendationMessage {
  RecommendationId: string | undefined;
  Locale?: string;
  Status?: string;
  RecommendedActionUpdates?: RecommendedActionUpdate[];
}
export interface ModifyDBShardGroupMessage {
  DBShardGroupIdentifier: string | undefined;
  MaxACU?: number;
  MinACU?: number;
}
export interface ModifyDBSnapshotMessage {
  DBSnapshotIdentifier: string | undefined;
  EngineVersion?: string;
  OptionGroupName?: string;
}
export interface ModifyDBSnapshotResult {
  DBSnapshot?: DBSnapshot;
}
export interface ModifyDBSnapshotAttributeMessage {
  DBSnapshotIdentifier: string | undefined;
  AttributeName: string | undefined;
  ValuesToAdd?: string[];
  ValuesToRemove?: string[];
}
export interface ModifyDBSnapshotAttributeResult {
  DBSnapshotAttributesResult?: DBSnapshotAttributesResult;
}
export interface ModifyDBSubnetGroupMessage {
  DBSubnetGroupName: string | undefined;
  DBSubnetGroupDescription?: string;
  SubnetIds: string[] | undefined;
}
export interface ModifyDBSubnetGroupResult {
  DBSubnetGroup?: DBSubnetGroup;
}
export declare class SubnetAlreadyInUse extends __BaseException {
  readonly name: "SubnetAlreadyInUse";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<SubnetAlreadyInUse, __BaseException>);
}
export interface ModifyEventSubscriptionMessage {
  SubscriptionName: string | undefined;
  SnsTopicArn?: string;
  SourceType?: string;
  EventCategories?: string[];
  Enabled?: boolean;
}
export interface ModifyEventSubscriptionResult {
  EventSubscription?: EventSubscription;
}
export interface ModifyGlobalClusterMessage {
  GlobalClusterIdentifier?: string;
  NewGlobalClusterIdentifier?: string;
  DeletionProtection?: boolean;
  EngineVersion?: string;
  AllowMajorVersionUpgrade?: boolean;
}
export interface ModifyGlobalClusterResult {
  GlobalCluster?: GlobalCluster;
}
export interface ModifyIntegrationMessage {
  IntegrationIdentifier: string | undefined;
  IntegrationName?: string;
  DataFilter?: string;
  Description?: string;
}
export interface OptionConfiguration {
  OptionName: string | undefined;
  Port?: number;
  OptionVersion?: string;
  DBSecurityGroupMemberships?: string[];
  VpcSecurityGroupMemberships?: string[];
  OptionSettings?: OptionSetting[];
}
export interface ModifyOptionGroupMessage {
  OptionGroupName: string | undefined;
  OptionsToInclude?: OptionConfiguration[];
  OptionsToRemove?: string[];
  ApplyImmediately?: boolean;
}
export interface ModifyOptionGroupResult {
  OptionGroup?: OptionGroup;
}
export interface ModifyTenantDatabaseMessage {
  DBInstanceIdentifier: string | undefined;
  TenantDBName: string | undefined;
  MasterUserPassword?: string;
  NewTenantDBName?: string;
}
export interface ModifyTenantDatabaseResult {
  TenantDatabase?: TenantDatabase;
}
export interface PromoteReadReplicaMessage {
  DBInstanceIdentifier: string | undefined;
  BackupRetentionPeriod?: number;
  PreferredBackupWindow?: string;
}
export interface PromoteReadReplicaResult {
  DBInstance?: DBInstance;
}
export interface PromoteReadReplicaDBClusterMessage {
  DBClusterIdentifier: string | undefined;
}
export interface PromoteReadReplicaDBClusterResult {
  DBCluster?: DBCluster;
}
export interface PurchaseReservedDBInstancesOfferingMessage {
  ReservedDBInstancesOfferingId: string | undefined;
  ReservedDBInstanceId?: string;
  DBInstanceCount?: number;
  Tags?: Tag[];
}
export interface PurchaseReservedDBInstancesOfferingResult {
  ReservedDBInstance?: ReservedDBInstance;
}
export declare class ReservedDBInstanceAlreadyExistsFault extends __BaseException {
  readonly name: "ReservedDBInstanceAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ReservedDBInstanceAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class ReservedDBInstanceQuotaExceededFault extends __BaseException {
  readonly name: "ReservedDBInstanceQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ReservedDBInstanceQuotaExceededFault,
      __BaseException
    >
  );
}
export interface RebootDBClusterMessage {
  DBClusterIdentifier: string | undefined;
}
export interface RebootDBClusterResult {
  DBCluster?: DBCluster;
}
export interface RebootDBInstanceMessage {
  DBInstanceIdentifier: string | undefined;
  ForceFailover?: boolean;
}
export interface RebootDBInstanceResult {
  DBInstance?: DBInstance;
}
export interface RebootDBShardGroupMessage {
  DBShardGroupIdentifier: string | undefined;
}
export declare class DBProxyTargetAlreadyRegisteredFault extends __BaseException {
  readonly name: "DBProxyTargetAlreadyRegisteredFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBProxyTargetAlreadyRegisteredFault,
      __BaseException
    >
  );
}
export declare class InsufficientAvailableIPsInSubnetFault extends __BaseException {
  readonly name: "InsufficientAvailableIPsInSubnetFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InsufficientAvailableIPsInSubnetFault,
      __BaseException
    >
  );
}
export interface RegisterDBProxyTargetsRequest {
  DBProxyName: string | undefined;
  TargetGroupName?: string;
  DBInstanceIdentifiers?: string[];
  DBClusterIdentifiers?: string[];
}
export interface RegisterDBProxyTargetsResponse {
  DBProxyTargets?: DBProxyTarget[];
}
export interface RemoveFromGlobalClusterMessage {
  GlobalClusterIdentifier?: string;
  DbClusterIdentifier?: string;
}
export interface RemoveFromGlobalClusterResult {
  GlobalCluster?: GlobalCluster;
}
export declare class DBClusterRoleNotFoundFault extends __BaseException {
  readonly name: "DBClusterRoleNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBClusterRoleNotFoundFault, __BaseException>
  );
}
export interface RemoveRoleFromDBClusterMessage {
  DBClusterIdentifier: string | undefined;
  RoleArn: string | undefined;
  FeatureName?: string;
}
export declare class DBInstanceRoleNotFoundFault extends __BaseException {
  readonly name: "DBInstanceRoleNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBInstanceRoleNotFoundFault, __BaseException>
  );
}
export interface RemoveRoleFromDBInstanceMessage {
  DBInstanceIdentifier: string | undefined;
  RoleArn: string | undefined;
  FeatureName: string | undefined;
}
export interface RemoveSourceIdentifierFromSubscriptionMessage {
  SubscriptionName: string | undefined;
  SourceIdentifier: string | undefined;
}
export interface RemoveSourceIdentifierFromSubscriptionResult {
  EventSubscription?: EventSubscription;
}
export interface RemoveTagsFromResourceMessage {
  ResourceName: string | undefined;
  TagKeys: string[] | undefined;
}
export interface ResetDBClusterParameterGroupMessage {
  DBClusterParameterGroupName: string | undefined;
  ResetAllParameters?: boolean;
  Parameters?: Parameter[];
}
export interface ResetDBParameterGroupMessage {
  DBParameterGroupName: string | undefined;
  ResetAllParameters?: boolean;
  Parameters?: Parameter[];
}
export declare class InvalidS3BucketFault extends __BaseException {
  readonly name: "InvalidS3BucketFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidS3BucketFault, __BaseException>
  );
}
export interface RestoreDBClusterFromS3Message {
  AvailabilityZones?: string[];
  BackupRetentionPeriod?: number;
  CharacterSetName?: string;
  DatabaseName?: string;
  DBClusterIdentifier: string | undefined;
  DBClusterParameterGroupName?: string;
  VpcSecurityGroupIds?: string[];
  DBSubnetGroupName?: string;
  Engine: string | undefined;
  EngineVersion?: string;
  Port?: number;
  MasterUsername: string | undefined;
  MasterUserPassword?: string;
  OptionGroupName?: string;
  PreferredBackupWindow?: string;
  PreferredMaintenanceWindow?: string;
  Tags?: Tag[];
  StorageEncrypted?: boolean;
  KmsKeyId?: string;
  EnableIAMDatabaseAuthentication?: boolean;
  SourceEngine: string | undefined;
  SourceEngineVersion: string | undefined;
  S3BucketName: string | undefined;
  S3Prefix?: string;
  S3IngestionRoleArn: string | undefined;
  BacktrackWindow?: number;
  EnableCloudwatchLogsExports?: string[];
  DeletionProtection?: boolean;
  CopyTagsToSnapshot?: boolean;
  Domain?: string;
  DomainIAMRoleName?: string;
  ServerlessV2ScalingConfiguration?: ServerlessV2ScalingConfiguration;
  NetworkType?: string;
  ManageMasterUserPassword?: boolean;
  MasterUserSecretKmsKeyId?: string;
  StorageType?: string;
  EngineLifecycleSupport?: string;
}
export interface RestoreDBClusterFromS3Result {
  DBCluster?: DBCluster;
}
export declare class InsufficientDBClusterCapacityFault extends __BaseException {
  readonly name: "InsufficientDBClusterCapacityFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InsufficientDBClusterCapacityFault,
      __BaseException
    >
  );
}
export declare class InvalidRestoreFault extends __BaseException {
  readonly name: "InvalidRestoreFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidRestoreFault, __BaseException>
  );
}
export interface RestoreDBClusterFromSnapshotMessage {
  AvailabilityZones?: string[];
  DBClusterIdentifier: string | undefined;
  SnapshotIdentifier: string | undefined;
  Engine: string | undefined;
  EngineVersion?: string;
  Port?: number;
  DBSubnetGroupName?: string;
  DatabaseName?: string;
  OptionGroupName?: string;
  VpcSecurityGroupIds?: string[];
  Tags?: Tag[];
  KmsKeyId?: string;
  EnableIAMDatabaseAuthentication?: boolean;
  BacktrackWindow?: number;
  EnableCloudwatchLogsExports?: string[];
  EngineMode?: string;
  ScalingConfiguration?: ScalingConfiguration;
  DBClusterParameterGroupName?: string;
  DeletionProtection?: boolean;
  CopyTagsToSnapshot?: boolean;
  Domain?: string;
  DomainIAMRoleName?: string;
  DBClusterInstanceClass?: string;
  StorageType?: string;
  Iops?: number;
  PubliclyAccessible?: boolean;
  ServerlessV2ScalingConfiguration?: ServerlessV2ScalingConfiguration;
  NetworkType?: string;
  RdsCustomClusterConfiguration?: RdsCustomClusterConfiguration;
  EngineLifecycleSupport?: string;
}
export interface RestoreDBClusterFromSnapshotResult {
  DBCluster?: DBCluster;
}
export interface RestoreDBClusterToPointInTimeMessage {
  DBClusterIdentifier: string | undefined;
  RestoreType?: string;
  SourceDBClusterIdentifier?: string;
  RestoreToTime?: Date;
  UseLatestRestorableTime?: boolean;
  Port?: number;
  DBSubnetGroupName?: string;
  OptionGroupName?: string;
  VpcSecurityGroupIds?: string[];
  Tags?: Tag[];
  KmsKeyId?: string;
  EnableIAMDatabaseAuthentication?: boolean;
  BacktrackWindow?: number;
  EnableCloudwatchLogsExports?: string[];
  DBClusterParameterGroupName?: string;
  DeletionProtection?: boolean;
  CopyTagsToSnapshot?: boolean;
  Domain?: string;
  DomainIAMRoleName?: string;
  ScalingConfiguration?: ScalingConfiguration;
  EngineMode?: string;
  DBClusterInstanceClass?: string;
  StorageType?: string;
  PubliclyAccessible?: boolean;
  Iops?: number;
  ServerlessV2ScalingConfiguration?: ServerlessV2ScalingConfiguration;
  NetworkType?: string;
  SourceDbClusterResourceId?: string;
  RdsCustomClusterConfiguration?: RdsCustomClusterConfiguration;
  EngineLifecycleSupport?: string;
}
export interface RestoreDBClusterToPointInTimeResult {
  DBCluster?: DBCluster;
}
export interface RestoreDBInstanceFromDBSnapshotMessage {
  DBInstanceIdentifier: string | undefined;
  DBSnapshotIdentifier?: string;
  DBInstanceClass?: string;
  Port?: number;
  AvailabilityZone?: string;
  DBSubnetGroupName?: string;
  MultiAZ?: boolean;
  PubliclyAccessible?: boolean;
  AutoMinorVersionUpgrade?: boolean;
  LicenseModel?: string;
  DBName?: string;
  Engine?: string;
  Iops?: number;
  OptionGroupName?: string;
  Tags?: Tag[];
  StorageType?: string;
  TdeCredentialArn?: string;
  TdeCredentialPassword?: string;
  VpcSecurityGroupIds?: string[];
  Domain?: string;
  DomainFqdn?: string;
  DomainOu?: string;
  DomainAuthSecretArn?: string;
  DomainDnsIps?: string[];
  CopyTagsToSnapshot?: boolean;
  DomainIAMRoleName?: string;
  EnableIAMDatabaseAuthentication?: boolean;
  EnableCloudwatchLogsExports?: string[];
  ProcessorFeatures?: ProcessorFeature[];
  UseDefaultProcessorFeatures?: boolean;
  DBParameterGroupName?: string;
  DeletionProtection?: boolean;
  EnableCustomerOwnedIp?: boolean;
  CustomIamInstanceProfile?: string;
  BackupTarget?: string;
  NetworkType?: string;
  StorageThroughput?: number;
  DBClusterSnapshotIdentifier?: string;
  AllocatedStorage?: number;
  DedicatedLogVolume?: boolean;
  CACertificateIdentifier?: string;
  EngineLifecycleSupport?: string;
}
export interface RestoreDBInstanceFromDBSnapshotResult {
  DBInstance?: DBInstance;
}
export interface RestoreDBInstanceFromS3Message {
  DBName?: string;
  DBInstanceIdentifier: string | undefined;
  AllocatedStorage?: number;
  DBInstanceClass: string | undefined;
  Engine: string | undefined;
  MasterUsername?: string;
  MasterUserPassword?: string;
  DBSecurityGroups?: string[];
  VpcSecurityGroupIds?: string[];
  AvailabilityZone?: string;
  DBSubnetGroupName?: string;
  PreferredMaintenanceWindow?: string;
  DBParameterGroupName?: string;
  BackupRetentionPeriod?: number;
  PreferredBackupWindow?: string;
  Port?: number;
  MultiAZ?: boolean;
  EngineVersion?: string;
  AutoMinorVersionUpgrade?: boolean;
  LicenseModel?: string;
  Iops?: number;
  OptionGroupName?: string;
  PubliclyAccessible?: boolean;
  Tags?: Tag[];
  StorageType?: string;
  StorageEncrypted?: boolean;
  KmsKeyId?: string;
  CopyTagsToSnapshot?: boolean;
  MonitoringInterval?: number;
  MonitoringRoleArn?: string;
  EnableIAMDatabaseAuthentication?: boolean;
  SourceEngine: string | undefined;
  SourceEngineVersion: string | undefined;
  S3BucketName: string | undefined;
  S3Prefix?: string;
  S3IngestionRoleArn: string | undefined;
  EnablePerformanceInsights?: boolean;
  PerformanceInsightsKMSKeyId?: string;
  PerformanceInsightsRetentionPeriod?: number;
  EnableCloudwatchLogsExports?: string[];
  ProcessorFeatures?: ProcessorFeature[];
  UseDefaultProcessorFeatures?: boolean;
  DeletionProtection?: boolean;
  MaxAllocatedStorage?: number;
  NetworkType?: string;
  StorageThroughput?: number;
  ManageMasterUserPassword?: boolean;
  MasterUserSecretKmsKeyId?: string;
  DedicatedLogVolume?: boolean;
  CACertificateIdentifier?: string;
  EngineLifecycleSupport?: string;
}
export interface RestoreDBInstanceFromS3Result {
  DBInstance?: DBInstance;
}
export declare class PointInTimeRestoreNotEnabledFault extends __BaseException {
  readonly name: "PointInTimeRestoreNotEnabledFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      PointInTimeRestoreNotEnabledFault,
      __BaseException
    >
  );
}
export interface RestoreDBInstanceToPointInTimeMessage {
  SourceDBInstanceIdentifier?: string;
  TargetDBInstanceIdentifier: string | undefined;
  RestoreTime?: Date;
  UseLatestRestorableTime?: boolean;
  DBInstanceClass?: string;
  Port?: number;
  AvailabilityZone?: string;
  DBSubnetGroupName?: string;
  MultiAZ?: boolean;
  PubliclyAccessible?: boolean;
  AutoMinorVersionUpgrade?: boolean;
  LicenseModel?: string;
  DBName?: string;
  Engine?: string;
  Iops?: number;
  OptionGroupName?: string;
  CopyTagsToSnapshot?: boolean;
  Tags?: Tag[];
  StorageType?: string;
  TdeCredentialArn?: string;
  TdeCredentialPassword?: string;
  VpcSecurityGroupIds?: string[];
  Domain?: string;
  DomainIAMRoleName?: string;
  DomainFqdn?: string;
  DomainOu?: string;
  DomainAuthSecretArn?: string;
  DomainDnsIps?: string[];
  EnableIAMDatabaseAuthentication?: boolean;
  EnableCloudwatchLogsExports?: string[];
  ProcessorFeatures?: ProcessorFeature[];
  UseDefaultProcessorFeatures?: boolean;
  DBParameterGroupName?: string;
  DeletionProtection?: boolean;
  SourceDbiResourceId?: string;
  MaxAllocatedStorage?: number;
  SourceDBInstanceAutomatedBackupsArn?: string;
  EnableCustomerOwnedIp?: boolean;
  CustomIamInstanceProfile?: string;
  BackupTarget?: string;
  NetworkType?: string;
  StorageThroughput?: number;
  AllocatedStorage?: number;
  DedicatedLogVolume?: boolean;
  CACertificateIdentifier?: string;
  EngineLifecycleSupport?: string;
}
export interface RestoreDBInstanceToPointInTimeResult {
  DBInstance?: DBInstance;
}
export interface RevokeDBSecurityGroupIngressMessage {
  DBSecurityGroupName: string | undefined;
  CIDRIP?: string;
  EC2SecurityGroupName?: string;
  EC2SecurityGroupId?: string;
  EC2SecurityGroupOwnerId?: string;
}
export interface RevokeDBSecurityGroupIngressResult {
  DBSecurityGroup?: DBSecurityGroup;
}
export interface StartActivityStreamRequest {
  ResourceArn: string | undefined;
  Mode: ActivityStreamMode | undefined;
  KmsKeyId: string | undefined;
  ApplyImmediately?: boolean;
  EngineNativeAuditFieldsIncluded?: boolean;
}
export interface StartActivityStreamResponse {
  KmsKeyId?: string;
  KinesisStreamName?: string;
  Status?: ActivityStreamStatus;
  Mode?: ActivityStreamMode;
  ApplyImmediately?: boolean;
  EngineNativeAuditFieldsIncluded?: boolean;
}
export interface StartDBClusterMessage {
  DBClusterIdentifier: string | undefined;
}
export interface StartDBClusterResult {
  DBCluster?: DBCluster;
}
export interface StartDBInstanceMessage {
  DBInstanceIdentifier: string | undefined;
}
export interface StartDBInstanceResult {
  DBInstance?: DBInstance;
}
export interface StartDBInstanceAutomatedBackupsReplicationMessage {
  SourceDBInstanceArn: string | undefined;
  BackupRetentionPeriod?: number;
  KmsKeyId?: string;
  PreSignedUrl?: string;
}
export interface StartDBInstanceAutomatedBackupsReplicationResult {
  DBInstanceAutomatedBackup?: DBInstanceAutomatedBackup;
}
export declare class ExportTaskAlreadyExistsFault extends __BaseException {
  readonly name: "ExportTaskAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ExportTaskAlreadyExistsFault, __BaseException>
  );
}
export declare class IamRoleMissingPermissionsFault extends __BaseException {
  readonly name: "IamRoleMissingPermissionsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<IamRoleMissingPermissionsFault, __BaseException>
  );
}
export declare class IamRoleNotFoundFault extends __BaseException {
  readonly name: "IamRoleNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<IamRoleNotFoundFault, __BaseException>
  );
}
export declare class InvalidExportOnlyFault extends __BaseException {
  readonly name: "InvalidExportOnlyFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidExportOnlyFault, __BaseException>
  );
}
export declare class InvalidExportSourceStateFault extends __BaseException {
  readonly name: "InvalidExportSourceStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidExportSourceStateFault, __BaseException>
  );
}
export interface StartExportTaskMessage {
  ExportTaskIdentifier: string | undefined;
  SourceArn: string | undefined;
  S3BucketName: string | undefined;
  IamRoleArn: string | undefined;
  KmsKeyId: string | undefined;
  S3Prefix?: string;
  ExportOnly?: string[];
}
export interface StopActivityStreamRequest {
  ResourceArn: string | undefined;
  ApplyImmediately?: boolean;
}
export interface StopActivityStreamResponse {
  KmsKeyId?: string;
  KinesisStreamName?: string;
  Status?: ActivityStreamStatus;
}
export interface StopDBClusterMessage {
  DBClusterIdentifier: string | undefined;
}
export interface StopDBClusterResult {
  DBCluster?: DBCluster;
}
export interface StopDBInstanceMessage {
  DBInstanceIdentifier: string | undefined;
  DBSnapshotIdentifier?: string;
}
export interface StopDBInstanceResult {
  DBInstance?: DBInstance;
}
export interface StopDBInstanceAutomatedBackupsReplicationMessage {
  SourceDBInstanceArn: string | undefined;
}
export interface StopDBInstanceAutomatedBackupsReplicationResult {
  DBInstanceAutomatedBackup?: DBInstanceAutomatedBackup;
}
export interface SwitchoverBlueGreenDeploymentRequest {
  BlueGreenDeploymentIdentifier: string | undefined;
  SwitchoverTimeout?: number;
}
export interface SwitchoverBlueGreenDeploymentResponse {
  BlueGreenDeployment?: BlueGreenDeployment;
}
export interface SwitchoverGlobalClusterMessage {
  GlobalClusterIdentifier: string | undefined;
  TargetDbClusterIdentifier: string | undefined;
}
export interface SwitchoverGlobalClusterResult {
  GlobalCluster?: GlobalCluster;
}
export interface SwitchoverReadReplicaMessage {
  DBInstanceIdentifier: string | undefined;
}
export interface SwitchoverReadReplicaResult {
  DBInstance?: DBInstance;
}
export declare const DeleteTenantDatabaseResultFilterSensitiveLog: (
  obj: DeleteTenantDatabaseResult
) => any;
export declare const TenantDatabasesMessageFilterSensitiveLog: (
  obj: TenantDatabasesMessage
) => any;
export declare const ModifyTenantDatabaseMessageFilterSensitiveLog: (
  obj: ModifyTenantDatabaseMessage
) => any;
export declare const ModifyTenantDatabaseResultFilterSensitiveLog: (
  obj: ModifyTenantDatabaseResult
) => any;
