import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { RDSServiceException as __BaseException } from "./RDSServiceException";
export interface AccountQuota {
  AccountQuotaName?: string;
  Used?: number;
  Max?: number;
}
export interface AccountAttributesMessage {
  AccountQuotas?: AccountQuota[];
}
export declare const ActivityStreamMode: {
  readonly async: "async";
  readonly sync: "sync";
};
export type ActivityStreamMode =
  (typeof ActivityStreamMode)[keyof typeof ActivityStreamMode];
export declare const ActivityStreamPolicyStatus: {
  readonly locked: "locked";
  readonly locking_policy: "locking-policy";
  readonly unlocked: "unlocked";
  readonly unlocking_policy: "unlocking-policy";
};
export type ActivityStreamPolicyStatus =
  (typeof ActivityStreamPolicyStatus)[keyof typeof ActivityStreamPolicyStatus];
export declare const ActivityStreamStatus: {
  readonly started: "started";
  readonly starting: "starting";
  readonly stopped: "stopped";
  readonly stopping: "stopping";
};
export type ActivityStreamStatus =
  (typeof ActivityStreamStatus)[keyof typeof ActivityStreamStatus];
export interface AddRoleToDBClusterMessage {
  DBClusterIdentifier: string | undefined;
  RoleArn: string | undefined;
  FeatureName?: string;
}
export declare class DBClusterNotFoundFault extends __BaseException {
  readonly name: "DBClusterNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBClusterNotFoundFault, __BaseException>
  );
}
export declare class DBClusterRoleAlreadyExistsFault extends __BaseException {
  readonly name: "DBClusterRoleAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBClusterRoleAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class DBClusterRoleQuotaExceededFault extends __BaseException {
  readonly name: "DBClusterRoleQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBClusterRoleQuotaExceededFault,
      __BaseException
    >
  );
}
export declare class InvalidDBClusterStateFault extends __BaseException {
  readonly name: "InvalidDBClusterStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidDBClusterStateFault, __BaseException>
  );
}
export interface AddRoleToDBInstanceMessage {
  DBInstanceIdentifier: string | undefined;
  RoleArn: string | undefined;
  FeatureName: string | undefined;
}
export declare class DBInstanceNotFoundFault extends __BaseException {
  readonly name: "DBInstanceNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBInstanceNotFoundFault, __BaseException>
  );
}
export declare class DBInstanceRoleAlreadyExistsFault extends __BaseException {
  readonly name: "DBInstanceRoleAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBInstanceRoleAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class DBInstanceRoleQuotaExceededFault extends __BaseException {
  readonly name: "DBInstanceRoleQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBInstanceRoleQuotaExceededFault,
      __BaseException
    >
  );
}
export declare class InvalidDBInstanceStateFault extends __BaseException {
  readonly name: "InvalidDBInstanceStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidDBInstanceStateFault, __BaseException>
  );
}
export interface AddSourceIdentifierToSubscriptionMessage {
  SubscriptionName: string | undefined;
  SourceIdentifier: string | undefined;
}
export interface EventSubscription {
  CustomerAwsId?: string;
  CustSubscriptionId?: string;
  SnsTopicArn?: string;
  Status?: string;
  SubscriptionCreationTime?: string;
  SourceType?: string;
  SourceIdsList?: string[];
  EventCategoriesList?: string[];
  Enabled?: boolean;
  EventSubscriptionArn?: string;
}
export interface AddSourceIdentifierToSubscriptionResult {
  EventSubscription?: EventSubscription;
}
export declare class SourceNotFoundFault extends __BaseException {
  readonly name: "SourceNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<SourceNotFoundFault, __BaseException>
  );
}
export declare class SubscriptionNotFoundFault extends __BaseException {
  readonly name: "SubscriptionNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<SubscriptionNotFoundFault, __BaseException>
  );
}
export interface Tag {
  Key?: string;
  Value?: string;
}
export interface AddTagsToResourceMessage {
  ResourceName: string | undefined;
  Tags: Tag[] | undefined;
}
export declare class BlueGreenDeploymentNotFoundFault extends __BaseException {
  readonly name: "BlueGreenDeploymentNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      BlueGreenDeploymentNotFoundFault,
      __BaseException
    >
  );
}
export declare class DBProxyNotFoundFault extends __BaseException {
  readonly name: "DBProxyNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBProxyNotFoundFault, __BaseException>
  );
}
export declare class DBProxyTargetGroupNotFoundFault extends __BaseException {
  readonly name: "DBProxyTargetGroupNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBProxyTargetGroupNotFoundFault,
      __BaseException
    >
  );
}
export declare class DBSnapshotNotFoundFault extends __BaseException {
  readonly name: "DBSnapshotNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBSnapshotNotFoundFault, __BaseException>
  );
}
export declare class DBSnapshotTenantDatabaseNotFoundFault extends __BaseException {
  readonly name: "DBSnapshotTenantDatabaseNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBSnapshotTenantDatabaseNotFoundFault,
      __BaseException
    >
  );
}
export declare class IntegrationNotFoundFault extends __BaseException {
  readonly name: "IntegrationNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<IntegrationNotFoundFault, __BaseException>
  );
}
export declare class TenantDatabaseNotFoundFault extends __BaseException {
  readonly name: "TenantDatabaseNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<TenantDatabaseNotFoundFault, __BaseException>
  );
}
export interface ApplyPendingMaintenanceActionMessage {
  ResourceIdentifier: string | undefined;
  ApplyAction: string | undefined;
  OptInType: string | undefined;
}
export interface PendingMaintenanceAction {
  Action?: string;
  AutoAppliedAfterDate?: Date;
  ForcedApplyDate?: Date;
  OptInStatus?: string;
  CurrentApplyDate?: Date;
  Description?: string;
}
export interface ResourcePendingMaintenanceActions {
  ResourceIdentifier?: string;
  PendingMaintenanceActionDetails?: PendingMaintenanceAction[];
}
export interface ApplyPendingMaintenanceActionResult {
  ResourcePendingMaintenanceActions?: ResourcePendingMaintenanceActions;
}
export declare class ResourceNotFoundFault extends __BaseException {
  readonly name: "ResourceNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundFault, __BaseException>
  );
}
export declare class AuthorizationAlreadyExistsFault extends __BaseException {
  readonly name: "AuthorizationAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      AuthorizationAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class AuthorizationQuotaExceededFault extends __BaseException {
  readonly name: "AuthorizationQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      AuthorizationQuotaExceededFault,
      __BaseException
    >
  );
}
export interface AuthorizeDBSecurityGroupIngressMessage {
  DBSecurityGroupName: string | undefined;
  CIDRIP?: string;
  EC2SecurityGroupName?: string;
  EC2SecurityGroupId?: string;
  EC2SecurityGroupOwnerId?: string;
}
export interface EC2SecurityGroup {
  Status?: string;
  EC2SecurityGroupName?: string;
  EC2SecurityGroupId?: string;
  EC2SecurityGroupOwnerId?: string;
}
export interface IPRange {
  Status?: string;
  CIDRIP?: string;
}
export interface DBSecurityGroup {
  OwnerId?: string;
  DBSecurityGroupName?: string;
  DBSecurityGroupDescription?: string;
  VpcId?: string;
  EC2SecurityGroups?: EC2SecurityGroup[];
  IPRanges?: IPRange[];
  DBSecurityGroupArn?: string;
}
export interface AuthorizeDBSecurityGroupIngressResult {
  DBSecurityGroup?: DBSecurityGroup;
}
export declare class DBSecurityGroupNotFoundFault extends __BaseException {
  readonly name: "DBSecurityGroupNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBSecurityGroupNotFoundFault, __BaseException>
  );
}
export declare class InvalidDBSecurityGroupStateFault extends __BaseException {
  readonly name: "InvalidDBSecurityGroupStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidDBSecurityGroupStateFault,
      __BaseException
    >
  );
}
export interface BacktrackDBClusterMessage {
  DBClusterIdentifier: string | undefined;
  BacktrackTo: Date | undefined;
  Force?: boolean;
  UseEarliestTimeOnPointInTimeUnavailable?: boolean;
}
export interface DBClusterBacktrack {
  DBClusterIdentifier?: string;
  BacktrackIdentifier?: string;
  BacktrackTo?: Date;
  BacktrackedFrom?: Date;
  BacktrackRequestCreationTime?: Date;
  Status?: string;
}
export interface CancelExportTaskMessage {
  ExportTaskIdentifier: string | undefined;
}
export declare const ExportSourceType: {
  readonly CLUSTER: "CLUSTER";
  readonly SNAPSHOT: "SNAPSHOT";
};
export type ExportSourceType =
  (typeof ExportSourceType)[keyof typeof ExportSourceType];
export interface ExportTask {
  ExportTaskIdentifier?: string;
  SourceArn?: string;
  ExportOnly?: string[];
  SnapshotTime?: Date;
  TaskStartTime?: Date;
  TaskEndTime?: Date;
  S3Bucket?: string;
  S3Prefix?: string;
  IamRoleArn?: string;
  KmsKeyId?: string;
  Status?: string;
  PercentProgress?: number;
  TotalExtractedDataInGB?: number;
  FailureCause?: string;
  WarningMessage?: string;
  SourceType?: ExportSourceType;
}
export declare class ExportTaskNotFoundFault extends __BaseException {
  readonly name: "ExportTaskNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ExportTaskNotFoundFault, __BaseException>
  );
}
export declare class InvalidExportTaskStateFault extends __BaseException {
  readonly name: "InvalidExportTaskStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidExportTaskStateFault, __BaseException>
  );
}
export interface CopyDBClusterParameterGroupMessage {
  SourceDBClusterParameterGroupIdentifier: string | undefined;
  TargetDBClusterParameterGroupIdentifier: string | undefined;
  TargetDBClusterParameterGroupDescription: string | undefined;
  Tags?: Tag[];
}
export interface DBClusterParameterGroup {
  DBClusterParameterGroupName?: string;
  DBParameterGroupFamily?: string;
  Description?: string;
  DBClusterParameterGroupArn?: string;
}
export interface CopyDBClusterParameterGroupResult {
  DBClusterParameterGroup?: DBClusterParameterGroup;
}
export declare class DBParameterGroupAlreadyExistsFault extends __BaseException {
  readonly name: "DBParameterGroupAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBParameterGroupAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class DBParameterGroupNotFoundFault extends __BaseException {
  readonly name: "DBParameterGroupNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBParameterGroupNotFoundFault, __BaseException>
  );
}
export declare class DBParameterGroupQuotaExceededFault extends __BaseException {
  readonly name: "DBParameterGroupQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBParameterGroupQuotaExceededFault,
      __BaseException
    >
  );
}
export interface CopyDBClusterSnapshotMessage {
  SourceDBClusterSnapshotIdentifier: string | undefined;
  TargetDBClusterSnapshotIdentifier: string | undefined;
  KmsKeyId?: string;
  PreSignedUrl?: string;
  CopyTags?: boolean;
  Tags?: Tag[];
}
export interface DBClusterSnapshot {
  AvailabilityZones?: string[];
  DBClusterSnapshotIdentifier?: string;
  DBClusterIdentifier?: string;
  SnapshotCreateTime?: Date;
  Engine?: string;
  EngineMode?: string;
  AllocatedStorage?: number;
  Status?: string;
  Port?: number;
  VpcId?: string;
  ClusterCreateTime?: Date;
  MasterUsername?: string;
  EngineVersion?: string;
  LicenseModel?: string;
  SnapshotType?: string;
  PercentProgress?: number;
  StorageEncrypted?: boolean;
  KmsKeyId?: string;
  DBClusterSnapshotArn?: string;
  SourceDBClusterSnapshotArn?: string;
  IAMDatabaseAuthenticationEnabled?: boolean;
  TagList?: Tag[];
  DBSystemId?: string;
  StorageType?: string;
  DbClusterResourceId?: string;
  StorageThroughput?: number;
}
export interface CopyDBClusterSnapshotResult {
  DBClusterSnapshot?: DBClusterSnapshot;
}
export declare class DBClusterSnapshotAlreadyExistsFault extends __BaseException {
  readonly name: "DBClusterSnapshotAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBClusterSnapshotAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class DBClusterSnapshotNotFoundFault extends __BaseException {
  readonly name: "DBClusterSnapshotNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBClusterSnapshotNotFoundFault, __BaseException>
  );
}
export declare class InvalidDBClusterSnapshotStateFault extends __BaseException {
  readonly name: "InvalidDBClusterSnapshotStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidDBClusterSnapshotStateFault,
      __BaseException
    >
  );
}
export declare class KMSKeyNotAccessibleFault extends __BaseException {
  readonly name: "KMSKeyNotAccessibleFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<KMSKeyNotAccessibleFault, __BaseException>
  );
}
export declare class SnapshotQuotaExceededFault extends __BaseException {
  readonly name: "SnapshotQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<SnapshotQuotaExceededFault, __BaseException>
  );
}
export interface CopyDBParameterGroupMessage {
  SourceDBParameterGroupIdentifier: string | undefined;
  TargetDBParameterGroupIdentifier: string | undefined;
  TargetDBParameterGroupDescription: string | undefined;
  Tags?: Tag[];
}
export interface DBParameterGroup {
  DBParameterGroupName?: string;
  DBParameterGroupFamily?: string;
  Description?: string;
  DBParameterGroupArn?: string;
}
export interface CopyDBParameterGroupResult {
  DBParameterGroup?: DBParameterGroup;
}
export interface CopyDBSnapshotMessage {
  SourceDBSnapshotIdentifier: string | undefined;
  TargetDBSnapshotIdentifier: string | undefined;
  KmsKeyId?: string;
  Tags?: Tag[];
  CopyTags?: boolean;
  PreSignedUrl?: string;
  OptionGroupName?: string;
  TargetCustomAvailabilityZone?: string;
  CopyOptionGroup?: boolean;
}
export interface ProcessorFeature {
  Name?: string;
  Value?: string;
}
export interface DBSnapshot {
  DBSnapshotIdentifier?: string;
  DBInstanceIdentifier?: string;
  SnapshotCreateTime?: Date;
  Engine?: string;
  AllocatedStorage?: number;
  Status?: string;
  Port?: number;
  AvailabilityZone?: string;
  VpcId?: string;
  InstanceCreateTime?: Date;
  MasterUsername?: string;
  EngineVersion?: string;
  LicenseModel?: string;
  SnapshotType?: string;
  Iops?: number;
  OptionGroupName?: string;
  PercentProgress?: number;
  SourceRegion?: string;
  SourceDBSnapshotIdentifier?: string;
  StorageType?: string;
  TdeCredentialArn?: string;
  Encrypted?: boolean;
  KmsKeyId?: string;
  DBSnapshotArn?: string;
  Timezone?: string;
  IAMDatabaseAuthenticationEnabled?: boolean;
  ProcessorFeatures?: ProcessorFeature[];
  DbiResourceId?: string;
  TagList?: Tag[];
  OriginalSnapshotCreateTime?: Date;
  SnapshotDatabaseTime?: Date;
  SnapshotTarget?: string;
  StorageThroughput?: number;
  DBSystemId?: string;
  DedicatedLogVolume?: boolean;
  MultiTenant?: boolean;
}
export interface CopyDBSnapshotResult {
  DBSnapshot?: DBSnapshot;
}
export declare class CustomAvailabilityZoneNotFoundFault extends __BaseException {
  readonly name: "CustomAvailabilityZoneNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      CustomAvailabilityZoneNotFoundFault,
      __BaseException
    >
  );
}
export declare class DBSnapshotAlreadyExistsFault extends __BaseException {
  readonly name: "DBSnapshotAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBSnapshotAlreadyExistsFault, __BaseException>
  );
}
export declare class InvalidDBSnapshotStateFault extends __BaseException {
  readonly name: "InvalidDBSnapshotStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidDBSnapshotStateFault, __BaseException>
  );
}
export interface CopyOptionGroupMessage {
  SourceOptionGroupIdentifier: string | undefined;
  TargetOptionGroupIdentifier: string | undefined;
  TargetOptionGroupDescription: string | undefined;
  Tags?: Tag[];
}
export interface DBSecurityGroupMembership {
  DBSecurityGroupName?: string;
  Status?: string;
}
export interface OptionSetting {
  Name?: string;
  Value?: string;
  DefaultValue?: string;
  Description?: string;
  ApplyType?: string;
  DataType?: string;
  AllowedValues?: string;
  IsModifiable?: boolean;
  IsCollection?: boolean;
}
export interface VpcSecurityGroupMembership {
  VpcSecurityGroupId?: string;
  Status?: string;
}
export interface Option {
  OptionName?: string;
  OptionDescription?: string;
  Persistent?: boolean;
  Permanent?: boolean;
  Port?: number;
  OptionVersion?: string;
  OptionSettings?: OptionSetting[];
  DBSecurityGroupMemberships?: DBSecurityGroupMembership[];
  VpcSecurityGroupMemberships?: VpcSecurityGroupMembership[];
}
export interface OptionGroup {
  OptionGroupName?: string;
  OptionGroupDescription?: string;
  EngineName?: string;
  MajorEngineVersion?: string;
  Options?: Option[];
  AllowsVpcAndNonVpcInstanceMemberships?: boolean;
  VpcId?: string;
  OptionGroupArn?: string;
  SourceOptionGroup?: string;
  SourceAccountId?: string;
  CopyTimestamp?: Date;
}
export interface CopyOptionGroupResult {
  OptionGroup?: OptionGroup;
}
export declare class OptionGroupAlreadyExistsFault extends __BaseException {
  readonly name: "OptionGroupAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<OptionGroupAlreadyExistsFault, __BaseException>
  );
}
export declare class OptionGroupNotFoundFault extends __BaseException {
  readonly name: "OptionGroupNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<OptionGroupNotFoundFault, __BaseException>
  );
}
export declare class OptionGroupQuotaExceededFault extends __BaseException {
  readonly name: "OptionGroupQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<OptionGroupQuotaExceededFault, __BaseException>
  );
}
export declare class BlueGreenDeploymentAlreadyExistsFault extends __BaseException {
  readonly name: "BlueGreenDeploymentAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      BlueGreenDeploymentAlreadyExistsFault,
      __BaseException
    >
  );
}
export interface CreateBlueGreenDeploymentRequest {
  BlueGreenDeploymentName: string | undefined;
  Source: string | undefined;
  TargetEngineVersion?: string;
  TargetDBParameterGroupName?: string;
  TargetDBClusterParameterGroupName?: string;
  Tags?: Tag[];
  TargetDBInstanceClass?: string;
  UpgradeTargetStorageConfig?: boolean;
}
export interface SwitchoverDetail {
  SourceMember?: string;
  TargetMember?: string;
  Status?: string;
}
export interface BlueGreenDeploymentTask {
  Name?: string;
  Status?: string;
}
export interface BlueGreenDeployment {
  BlueGreenDeploymentIdentifier?: string;
  BlueGreenDeploymentName?: string;
  Source?: string;
  Target?: string;
  SwitchoverDetails?: SwitchoverDetail[];
  Tasks?: BlueGreenDeploymentTask[];
  Status?: string;
  StatusDetails?: string;
  CreateTime?: Date;
  DeleteTime?: Date;
  TagList?: Tag[];
}
export interface CreateBlueGreenDeploymentResponse {
  BlueGreenDeployment?: BlueGreenDeployment;
}
export declare class DBClusterParameterGroupNotFoundFault extends __BaseException {
  readonly name: "DBClusterParameterGroupNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBClusterParameterGroupNotFoundFault,
      __BaseException
    >
  );
}
export declare class DBClusterQuotaExceededFault extends __BaseException {
  readonly name: "DBClusterQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBClusterQuotaExceededFault, __BaseException>
  );
}
export declare class InstanceQuotaExceededFault extends __BaseException {
  readonly name: "InstanceQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InstanceQuotaExceededFault, __BaseException>
  );
}
export declare class SourceClusterNotSupportedFault extends __BaseException {
  readonly name: "SourceClusterNotSupportedFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<SourceClusterNotSupportedFault, __BaseException>
  );
}
export declare class SourceDatabaseNotSupportedFault extends __BaseException {
  readonly name: "SourceDatabaseNotSupportedFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      SourceDatabaseNotSupportedFault,
      __BaseException
    >
  );
}
export declare class CreateCustomDBEngineVersionFault extends __BaseException {
  readonly name: "CreateCustomDBEngineVersionFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      CreateCustomDBEngineVersionFault,
      __BaseException
    >
  );
}
export interface CreateCustomDBEngineVersionMessage {
  Engine: string | undefined;
  EngineVersion: string | undefined;
  DatabaseInstallationFilesS3BucketName?: string;
  DatabaseInstallationFilesS3Prefix?: string;
  ImageId?: string;
  KMSKeyId?: string;
  Description?: string;
  Manifest?: string;
  Tags?: Tag[];
  SourceCustomDbEngineVersionIdentifier?: string;
  UseAwsProvidedLatestImage?: boolean;
}
export declare class CustomDBEngineVersionAlreadyExistsFault extends __BaseException {
  readonly name: "CustomDBEngineVersionAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      CustomDBEngineVersionAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class CustomDBEngineVersionQuotaExceededFault extends __BaseException {
  readonly name: "CustomDBEngineVersionQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      CustomDBEngineVersionQuotaExceededFault,
      __BaseException
    >
  );
}
export interface CharacterSet {
  CharacterSetName?: string;
  CharacterSetDescription?: string;
}
export interface CustomDBEngineVersionAMI {
  ImageId?: string;
  Status?: string;
}
export interface Timezone {
  TimezoneName?: string;
}
export interface UpgradeTarget {
  Engine?: string;
  EngineVersion?: string;
  Description?: string;
  AutoUpgrade?: boolean;
  IsMajorVersionUpgrade?: boolean;
  SupportedEngineModes?: string[];
  SupportsParallelQuery?: boolean;
  SupportsGlobalDatabases?: boolean;
  SupportsBabelfish?: boolean;
  SupportsLimitlessDatabase?: boolean;
  SupportsLocalWriteForwarding?: boolean;
  SupportsIntegrations?: boolean;
}
export interface DBEngineVersion {
  Engine?: string;
  EngineVersion?: string;
  DBParameterGroupFamily?: string;
  DBEngineDescription?: string;
  DBEngineVersionDescription?: string;
  DefaultCharacterSet?: CharacterSet;
  Image?: CustomDBEngineVersionAMI;
  DBEngineMediaType?: string;
  SupportedCharacterSets?: CharacterSet[];
  SupportedNcharCharacterSets?: CharacterSet[];
  ValidUpgradeTarget?: UpgradeTarget[];
  SupportedTimezones?: Timezone[];
  ExportableLogTypes?: string[];
  SupportsLogExportsToCloudwatchLogs?: boolean;
  SupportsReadReplica?: boolean;
  SupportedEngineModes?: string[];
  SupportedFeatureNames?: string[];
  Status?: string;
  SupportsParallelQuery?: boolean;
  SupportsGlobalDatabases?: boolean;
  MajorEngineVersion?: string;
  DatabaseInstallationFilesS3BucketName?: string;
  DatabaseInstallationFilesS3Prefix?: string;
  DBEngineVersionArn?: string;
  KMSKeyId?: string;
  CreateTime?: Date;
  TagList?: Tag[];
  SupportsBabelfish?: boolean;
  CustomDBEngineVersionManifest?: string;
  SupportsLimitlessDatabase?: boolean;
  SupportsCertificateRotationWithoutRestart?: boolean;
  SupportedCACertificateIdentifiers?: string[];
  SupportsLocalWriteForwarding?: boolean;
  SupportsIntegrations?: boolean;
}
export declare class Ec2ImagePropertiesNotSupportedFault extends __BaseException {
  readonly name: "Ec2ImagePropertiesNotSupportedFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      Ec2ImagePropertiesNotSupportedFault,
      __BaseException
    >
  );
}
export declare const ReplicaMode: {
  readonly MOUNTED: "mounted";
  readonly OPEN_READ_ONLY: "open-read-only";
};
export type ReplicaMode = (typeof ReplicaMode)[keyof typeof ReplicaMode];
export interface RdsCustomClusterConfiguration {
  InterconnectSubnetId?: string;
  TransitGatewayMulticastDomainId?: string;
  ReplicaMode?: ReplicaMode;
}
export interface ScalingConfiguration {
  MinCapacity?: number;
  MaxCapacity?: number;
  AutoPause?: boolean;
  SecondsUntilAutoPause?: number;
  TimeoutAction?: string;
  SecondsBeforeTimeout?: number;
}
export interface ServerlessV2ScalingConfiguration {
  MinCapacity?: number;
  MaxCapacity?: number;
}
export interface CreateDBClusterMessage {
  AvailabilityZones?: string[];
  BackupRetentionPeriod?: number;
  CharacterSetName?: string;
  DatabaseName?: string;
  DBClusterIdentifier: string | undefined;
  DBClusterParameterGroupName?: string;
  VpcSecurityGroupIds?: string[];
  DBSubnetGroupName?: string;
  Engine: string | undefined;
  EngineVersion?: string;
  Port?: number;
  MasterUsername?: string;
  MasterUserPassword?: string;
  OptionGroupName?: string;
  PreferredBackupWindow?: string;
  PreferredMaintenanceWindow?: string;
  ReplicationSourceIdentifier?: string;
  Tags?: Tag[];
  StorageEncrypted?: boolean;
  KmsKeyId?: string;
  PreSignedUrl?: string;
  EnableIAMDatabaseAuthentication?: boolean;
  BacktrackWindow?: number;
  EnableCloudwatchLogsExports?: string[];
  EngineMode?: string;
  ScalingConfiguration?: ScalingConfiguration;
  RdsCustomClusterConfiguration?: RdsCustomClusterConfiguration;
  DeletionProtection?: boolean;
  GlobalClusterIdentifier?: string;
  EnableHttpEndpoint?: boolean;
  CopyTagsToSnapshot?: boolean;
  Domain?: string;
  DomainIAMRoleName?: string;
  EnableGlobalWriteForwarding?: boolean;
  DBClusterInstanceClass?: string;
  AllocatedStorage?: number;
  StorageType?: string;
  Iops?: number;
  PubliclyAccessible?: boolean;
  AutoMinorVersionUpgrade?: boolean;
  MonitoringInterval?: number;
  MonitoringRoleArn?: string;
  EnablePerformanceInsights?: boolean;
  PerformanceInsightsKMSKeyId?: string;
  PerformanceInsightsRetentionPeriod?: number;
  EnableLimitlessDatabase?: boolean;
  ServerlessV2ScalingConfiguration?: ServerlessV2ScalingConfiguration;
  NetworkType?: string;
  DBSystemId?: string;
  ManageMasterUserPassword?: boolean;
  MasterUserSecretKmsKeyId?: string;
  EnableLocalWriteForwarding?: boolean;
  CACertificateIdentifier?: string;
  EngineLifecycleSupport?: string;
}
export interface DBClusterRole {
  RoleArn?: string;
  Status?: string;
  FeatureName?: string;
}
export interface CertificateDetails {
  CAIdentifier?: string;
  ValidTill?: Date;
}
export interface DBClusterMember {
  DBInstanceIdentifier?: string;
  IsClusterWriter?: boolean;
  DBClusterParameterGroupStatus?: string;
  PromotionTier?: number;
}
export interface DBClusterOptionGroupStatus {
  DBClusterOptionGroupName?: string;
  Status?: string;
}
export interface DomainMembership {
  Domain?: string;
  Status?: string;
  FQDN?: string;
  IAMRoleName?: string;
  OU?: string;
  AuthSecretArn?: string;
  DnsIps?: string[];
}
export declare const WriteForwardingStatus: {
  readonly DISABLED: "disabled";
  readonly DISABLING: "disabling";
  readonly ENABLED: "enabled";
  readonly ENABLING: "enabling";
  readonly UNKNOWN: "unknown";
};
export type WriteForwardingStatus =
  (typeof WriteForwardingStatus)[keyof typeof WriteForwardingStatus];
export declare const LimitlessDatabaseStatus: {
  readonly ACTIVE: "active";
  readonly DISABLED: "disabled";
  readonly DISABLING: "disabling";
  readonly ENABLED: "enabled";
  readonly ENABLING: "enabling";
  readonly ERROR: "error";
  readonly MODIFYING_MAX_CAPACITY: "modifying-max-capacity";
  readonly NOT_IN_USE: "not-in-use";
};
export type LimitlessDatabaseStatus =
  (typeof LimitlessDatabaseStatus)[keyof typeof LimitlessDatabaseStatus];
export interface LimitlessDatabase {
  Status?: LimitlessDatabaseStatus;
  MinRequiredACU?: number;
}
export declare const LocalWriteForwardingStatus: {
  readonly DISABLED: "disabled";
  readonly DISABLING: "disabling";
  readonly ENABLED: "enabled";
  readonly ENABLING: "enabling";
  readonly REQUESTED: "requested";
};
export type LocalWriteForwardingStatus =
  (typeof LocalWriteForwardingStatus)[keyof typeof LocalWriteForwardingStatus];
export interface MasterUserSecret {
  SecretArn?: string;
  SecretStatus?: string;
  KmsKeyId?: string;
}
export interface PendingCloudwatchLogsExports {
  LogTypesToEnable?: string[];
  LogTypesToDisable?: string[];
}
export interface ClusterPendingModifiedValues {
  PendingCloudwatchLogsExports?: PendingCloudwatchLogsExports;
  DBClusterIdentifier?: string;
  MasterUserPassword?: string;
  IAMDatabaseAuthenticationEnabled?: boolean;
  EngineVersion?: string;
  BackupRetentionPeriod?: number;
  AllocatedStorage?: number;
  RdsCustomClusterConfiguration?: RdsCustomClusterConfiguration;
  Iops?: number;
  StorageType?: string;
  CertificateDetails?: CertificateDetails;
}
export interface ScalingConfigurationInfo {
  MinCapacity?: number;
  MaxCapacity?: number;
  AutoPause?: boolean;
  SecondsUntilAutoPause?: number;
  TimeoutAction?: string;
  SecondsBeforeTimeout?: number;
}
export interface ServerlessV2ScalingConfigurationInfo {
  MinCapacity?: number;
  MaxCapacity?: number;
}
export interface DBClusterStatusInfo {
  StatusType?: string;
  Normal?: boolean;
  Status?: string;
  Message?: string;
}
export interface DBCluster {
  AllocatedStorage?: number;
  AvailabilityZones?: string[];
  BackupRetentionPeriod?: number;
  CharacterSetName?: string;
  DatabaseName?: string;
  DBClusterIdentifier?: string;
  DBClusterParameterGroup?: string;
  DBSubnetGroup?: string;
  Status?: string;
  AutomaticRestartTime?: Date;
  PercentProgress?: string;
  EarliestRestorableTime?: Date;
  Endpoint?: string;
  ReaderEndpoint?: string;
  CustomEndpoints?: string[];
  MultiAZ?: boolean;
  Engine?: string;
  EngineVersion?: string;
  LatestRestorableTime?: Date;
  Port?: number;
  MasterUsername?: string;
  DBClusterOptionGroupMemberships?: DBClusterOptionGroupStatus[];
  PreferredBackupWindow?: string;
  PreferredMaintenanceWindow?: string;
  ReplicationSourceIdentifier?: string;
  ReadReplicaIdentifiers?: string[];
  StatusInfos?: DBClusterStatusInfo[];
  DBClusterMembers?: DBClusterMember[];
  VpcSecurityGroups?: VpcSecurityGroupMembership[];
  HostedZoneId?: string;
  StorageEncrypted?: boolean;
  KmsKeyId?: string;
  DbClusterResourceId?: string;
  DBClusterArn?: string;
  AssociatedRoles?: DBClusterRole[];
  IAMDatabaseAuthenticationEnabled?: boolean;
  CloneGroupId?: string;
  ClusterCreateTime?: Date;
  EarliestBacktrackTime?: Date;
  BacktrackWindow?: number;
  BacktrackConsumedChangeRecords?: number;
  EnabledCloudwatchLogsExports?: string[];
  Capacity?: number;
  EngineMode?: string;
  ScalingConfigurationInfo?: ScalingConfigurationInfo;
  RdsCustomClusterConfiguration?: RdsCustomClusterConfiguration;
  DeletionProtection?: boolean;
  HttpEndpointEnabled?: boolean;
  ActivityStreamMode?: ActivityStreamMode;
  ActivityStreamStatus?: ActivityStreamStatus;
  ActivityStreamKmsKeyId?: string;
  ActivityStreamKinesisStreamName?: string;
  CopyTagsToSnapshot?: boolean;
  CrossAccountClone?: boolean;
  DomainMemberships?: DomainMembership[];
  TagList?: Tag[];
  GlobalWriteForwardingStatus?: WriteForwardingStatus;
  GlobalWriteForwardingRequested?: boolean;
  PendingModifiedValues?: ClusterPendingModifiedValues;
  DBClusterInstanceClass?: string;
  StorageType?: string;
  Iops?: number;
  PubliclyAccessible?: boolean;
  AutoMinorVersionUpgrade?: boolean;
  MonitoringInterval?: number;
  MonitoringRoleArn?: string;
  PerformanceInsightsEnabled?: boolean;
  PerformanceInsightsKMSKeyId?: string;
  PerformanceInsightsRetentionPeriod?: number;
  ServerlessV2ScalingConfiguration?: ServerlessV2ScalingConfigurationInfo;
  NetworkType?: string;
  DBSystemId?: string;
  MasterUserSecret?: MasterUserSecret;
  IOOptimizedNextAllowedModificationTime?: Date;
  LocalWriteForwardingStatus?: LocalWriteForwardingStatus;
  AwsBackupRecoveryPointArn?: string;
  LimitlessDatabase?: LimitlessDatabase;
  StorageThroughput?: number;
  CertificateDetails?: CertificateDetails;
  EngineLifecycleSupport?: string;
}
export interface CreateDBClusterResult {
  DBCluster?: DBCluster;
}
export declare class DBClusterAlreadyExistsFault extends __BaseException {
  readonly name: "DBClusterAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBClusterAlreadyExistsFault, __BaseException>
  );
}
export declare class DBSubnetGroupDoesNotCoverEnoughAZs extends __BaseException {
  readonly name: "DBSubnetGroupDoesNotCoverEnoughAZs";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBSubnetGroupDoesNotCoverEnoughAZs,
      __BaseException
    >
  );
}
export declare class DBSubnetGroupNotFoundFault extends __BaseException {
  readonly name: "DBSubnetGroupNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBSubnetGroupNotFoundFault, __BaseException>
  );
}
export declare class DomainNotFoundFault extends __BaseException {
  readonly name: "DomainNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DomainNotFoundFault, __BaseException>
  );
}
export declare class GlobalClusterNotFoundFault extends __BaseException {
  readonly name: "GlobalClusterNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<GlobalClusterNotFoundFault, __BaseException>
  );
}
export declare class InsufficientDBInstanceCapacityFault extends __BaseException {
  readonly name: "InsufficientDBInstanceCapacityFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InsufficientDBInstanceCapacityFault,
      __BaseException
    >
  );
}
export declare class InsufficientStorageClusterCapacityFault extends __BaseException {
  readonly name: "InsufficientStorageClusterCapacityFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InsufficientStorageClusterCapacityFault,
      __BaseException
    >
  );
}
export declare class InvalidDBSubnetGroupFault extends __BaseException {
  readonly name: "InvalidDBSubnetGroupFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidDBSubnetGroupFault, __BaseException>
  );
}
export declare class InvalidDBSubnetGroupStateFault extends __BaseException {
  readonly name: "InvalidDBSubnetGroupStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidDBSubnetGroupStateFault, __BaseException>
  );
}
export declare class InvalidGlobalClusterStateFault extends __BaseException {
  readonly name: "InvalidGlobalClusterStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidGlobalClusterStateFault, __BaseException>
  );
}
export declare class InvalidSubnet extends __BaseException {
  readonly name: "InvalidSubnet";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<InvalidSubnet, __BaseException>);
}
export declare class InvalidVPCNetworkStateFault extends __BaseException {
  readonly name: "InvalidVPCNetworkStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidVPCNetworkStateFault, __BaseException>
  );
}
export declare class StorageQuotaExceededFault extends __BaseException {
  readonly name: "StorageQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<StorageQuotaExceededFault, __BaseException>
  );
}
export interface CreateDBClusterEndpointMessage {
  DBClusterIdentifier: string | undefined;
  DBClusterEndpointIdentifier: string | undefined;
  EndpointType: string | undefined;
  StaticMembers?: string[];
  ExcludedMembers?: string[];
  Tags?: Tag[];
}
export interface DBClusterEndpoint {
  DBClusterEndpointIdentifier?: string;
  DBClusterIdentifier?: string;
  DBClusterEndpointResourceIdentifier?: string;
  Endpoint?: string;
  Status?: string;
  EndpointType?: string;
  CustomEndpointType?: string;
  StaticMembers?: string[];
  ExcludedMembers?: string[];
  DBClusterEndpointArn?: string;
}
export declare class DBClusterEndpointAlreadyExistsFault extends __BaseException {
  readonly name: "DBClusterEndpointAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBClusterEndpointAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class DBClusterEndpointQuotaExceededFault extends __BaseException {
  readonly name: "DBClusterEndpointQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBClusterEndpointQuotaExceededFault,
      __BaseException
    >
  );
}
export interface CreateDBClusterParameterGroupMessage {
  DBClusterParameterGroupName: string | undefined;
  DBParameterGroupFamily: string | undefined;
  Description: string | undefined;
  Tags?: Tag[];
}
export interface CreateDBClusterParameterGroupResult {
  DBClusterParameterGroup?: DBClusterParameterGroup;
}
export interface CreateDBClusterSnapshotMessage {
  DBClusterSnapshotIdentifier: string | undefined;
  DBClusterIdentifier: string | undefined;
  Tags?: Tag[];
}
export interface CreateDBClusterSnapshotResult {
  DBClusterSnapshot?: DBClusterSnapshot;
}
export declare class AuthorizationNotFoundFault extends __BaseException {
  readonly name: "AuthorizationNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AuthorizationNotFoundFault, __BaseException>
  );
}
export declare class BackupPolicyNotFoundFault extends __BaseException {
  readonly name: "BackupPolicyNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<BackupPolicyNotFoundFault, __BaseException>
  );
}
export declare class CertificateNotFoundFault extends __BaseException {
  readonly name: "CertificateNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<CertificateNotFoundFault, __BaseException>
  );
}
export interface CreateDBInstanceMessage {
  DBName?: string;
  DBInstanceIdentifier: string | undefined;
  AllocatedStorage?: number;
  DBInstanceClass: string | undefined;
  Engine: string | undefined;
  MasterUsername?: string;
  MasterUserPassword?: string;
  DBSecurityGroups?: string[];
  VpcSecurityGroupIds?: string[];
  AvailabilityZone?: string;
  DBSubnetGroupName?: string;
  PreferredMaintenanceWindow?: string;
  DBParameterGroupName?: string;
  BackupRetentionPeriod?: number;
  PreferredBackupWindow?: string;
  Port?: number;
  MultiAZ?: boolean;
  EngineVersion?: string;
  AutoMinorVersionUpgrade?: boolean;
  LicenseModel?: string;
  Iops?: number;
  OptionGroupName?: string;
  CharacterSetName?: string;
  NcharCharacterSetName?: string;
  PubliclyAccessible?: boolean;
  Tags?: Tag[];
  DBClusterIdentifier?: string;
  StorageType?: string;
  TdeCredentialArn?: string;
  TdeCredentialPassword?: string;
  StorageEncrypted?: boolean;
  KmsKeyId?: string;
  Domain?: string;
  DomainFqdn?: string;
  DomainOu?: string;
  DomainAuthSecretArn?: string;
  DomainDnsIps?: string[];
  CopyTagsToSnapshot?: boolean;
  MonitoringInterval?: number;
  MonitoringRoleArn?: string;
  DomainIAMRoleName?: string;
  PromotionTier?: number;
  Timezone?: string;
  EnableIAMDatabaseAuthentication?: boolean;
  EnablePerformanceInsights?: boolean;
  PerformanceInsightsKMSKeyId?: string;
  PerformanceInsightsRetentionPeriod?: number;
  EnableCloudwatchLogsExports?: string[];
  ProcessorFeatures?: ProcessorFeature[];
  DeletionProtection?: boolean;
  MaxAllocatedStorage?: number;
  EnableCustomerOwnedIp?: boolean;
  CustomIamInstanceProfile?: string;
  BackupTarget?: string;
  NetworkType?: string;
  StorageThroughput?: number;
  ManageMasterUserPassword?: boolean;
  MasterUserSecretKmsKeyId?: string;
  CACertificateIdentifier?: string;
  DBSystemId?: string;
  DedicatedLogVolume?: boolean;
  MultiTenant?: boolean;
  EngineLifecycleSupport?: string;
}
export interface DBInstanceRole {
  RoleArn?: string;
  FeatureName?: string;
  Status?: string;
}
export declare const AutomationMode: {
  readonly ALL_PAUSED: "all-paused";
  readonly FULL: "full";
};
export type AutomationMode =
  (typeof AutomationMode)[keyof typeof AutomationMode];
export interface DBInstanceAutomatedBackupsReplication {
  DBInstanceAutomatedBackupsArn?: string;
}
export interface DBParameterGroupStatus {
  DBParameterGroupName?: string;
  ParameterApplyStatus?: string;
}
export interface AvailabilityZone {
  Name?: string;
}
export interface Outpost {
  Arn?: string;
}
export interface Subnet {
  SubnetIdentifier?: string;
  SubnetAvailabilityZone?: AvailabilityZone;
  SubnetOutpost?: Outpost;
  SubnetStatus?: string;
}
export interface DBSubnetGroup {
  DBSubnetGroupName?: string;
  DBSubnetGroupDescription?: string;
  VpcId?: string;
  SubnetGroupStatus?: string;
  Subnets?: Subnet[];
  DBSubnetGroupArn?: string;
  SupportedNetworkTypes?: string[];
}
export interface Endpoint {
  Address?: string;
  Port?: number;
  HostedZoneId?: string;
}
export interface OptionGroupMembership {
  OptionGroupName?: string;
  Status?: string;
}
export interface PendingModifiedValues {
  DBInstanceClass?: string;
  AllocatedStorage?: number;
  MasterUserPassword?: string;
  Port?: number;
  BackupRetentionPeriod?: number;
  MultiAZ?: boolean;
  EngineVersion?: string;
  LicenseModel?: string;
  Iops?: number;
  DBInstanceIdentifier?: string;
  StorageType?: string;
  CACertificateIdentifier?: string;
  DBSubnetGroupName?: string;
  PendingCloudwatchLogsExports?: PendingCloudwatchLogsExports;
  ProcessorFeatures?: ProcessorFeature[];
  IAMDatabaseAuthenticationEnabled?: boolean;
  AutomationMode?: AutomationMode;
  ResumeFullAutomationModeTime?: Date;
  StorageThroughput?: number;
  Engine?: string;
  DedicatedLogVolume?: boolean;
  MultiTenant?: boolean;
}
export interface DBInstanceStatusInfo {
  StatusType?: string;
  Normal?: boolean;
  Status?: string;
  Message?: string;
}
export interface DBInstance {
  DBInstanceIdentifier?: string;
  DBInstanceClass?: string;
  Engine?: string;
  DBInstanceStatus?: string;
  AutomaticRestartTime?: Date;
  MasterUsername?: string;
  DBName?: string;
  Endpoint?: Endpoint;
  AllocatedStorage?: number;
  InstanceCreateTime?: Date;
  PreferredBackupWindow?: string;
  BackupRetentionPeriod?: number;
  DBSecurityGroups?: DBSecurityGroupMembership[];
  VpcSecurityGroups?: VpcSecurityGroupMembership[];
  DBParameterGroups?: DBParameterGroupStatus[];
  AvailabilityZone?: string;
  DBSubnetGroup?: DBSubnetGroup;
  PreferredMaintenanceWindow?: string;
  PendingModifiedValues?: PendingModifiedValues;
  LatestRestorableTime?: Date;
  MultiAZ?: boolean;
  EngineVersion?: string;
  AutoMinorVersionUpgrade?: boolean;
  ReadReplicaSourceDBInstanceIdentifier?: string;
  ReadReplicaDBInstanceIdentifiers?: string[];
  ReadReplicaDBClusterIdentifiers?: string[];
  ReplicaMode?: ReplicaMode;
  LicenseModel?: string;
  Iops?: number;
  OptionGroupMemberships?: OptionGroupMembership[];
  CharacterSetName?: string;
  NcharCharacterSetName?: string;
  SecondaryAvailabilityZone?: string;
  PubliclyAccessible?: boolean;
  StatusInfos?: DBInstanceStatusInfo[];
  StorageType?: string;
  TdeCredentialArn?: string;
  DbInstancePort?: number;
  DBClusterIdentifier?: string;
  StorageEncrypted?: boolean;
  KmsKeyId?: string;
  DbiResourceId?: string;
  CACertificateIdentifier?: string;
  DomainMemberships?: DomainMembership[];
  CopyTagsToSnapshot?: boolean;
  MonitoringInterval?: number;
  EnhancedMonitoringResourceArn?: string;
  MonitoringRoleArn?: string;
  PromotionTier?: number;
  DBInstanceArn?: string;
  Timezone?: string;
  IAMDatabaseAuthenticationEnabled?: boolean;
  PerformanceInsightsEnabled?: boolean;
  PerformanceInsightsKMSKeyId?: string;
  PerformanceInsightsRetentionPeriod?: number;
  EnabledCloudwatchLogsExports?: string[];
  ProcessorFeatures?: ProcessorFeature[];
  DeletionProtection?: boolean;
  AssociatedRoles?: DBInstanceRole[];
  ListenerEndpoint?: Endpoint;
  MaxAllocatedStorage?: number;
  TagList?: Tag[];
  DBInstanceAutomatedBackupsReplications?: DBInstanceAutomatedBackupsReplication[];
  CustomerOwnedIpEnabled?: boolean;
  AwsBackupRecoveryPointArn?: string;
  ActivityStreamStatus?: ActivityStreamStatus;
  ActivityStreamKmsKeyId?: string;
  ActivityStreamKinesisStreamName?: string;
  ActivityStreamMode?: ActivityStreamMode;
  ActivityStreamEngineNativeAuditFieldsIncluded?: boolean;
  AutomationMode?: AutomationMode;
  ResumeFullAutomationModeTime?: Date;
  CustomIamInstanceProfile?: string;
  BackupTarget?: string;
  NetworkType?: string;
  ActivityStreamPolicyStatus?: ActivityStreamPolicyStatus;
  StorageThroughput?: number;
  DBSystemId?: string;
  MasterUserSecret?: MasterUserSecret;
  CertificateDetails?: CertificateDetails;
  ReadReplicaSourceDBClusterIdentifier?: string;
  PercentProgress?: string;
  DedicatedLogVolume?: boolean;
  IsStorageConfigUpgradeAvailable?: boolean;
  MultiTenant?: boolean;
  EngineLifecycleSupport?: string;
}
export interface CreateDBInstanceResult {
  DBInstance?: DBInstance;
}
export declare class DBInstanceAlreadyExistsFault extends __BaseException {
  readonly name: "DBInstanceAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBInstanceAlreadyExistsFault, __BaseException>
  );
}
export declare class NetworkTypeNotSupported extends __BaseException {
  readonly name: "NetworkTypeNotSupported";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<NetworkTypeNotSupported, __BaseException>
  );
}
export declare class ProvisionedIopsNotAvailableInAZFault extends __BaseException {
  readonly name: "ProvisionedIopsNotAvailableInAZFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ProvisionedIopsNotAvailableInAZFault,
      __BaseException
    >
  );
}
export declare class StorageTypeNotSupportedFault extends __BaseException {
  readonly name: "StorageTypeNotSupportedFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<StorageTypeNotSupportedFault, __BaseException>
  );
}
export declare class TenantDatabaseQuotaExceededFault extends __BaseException {
  readonly name: "TenantDatabaseQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      TenantDatabaseQuotaExceededFault,
      __BaseException
    >
  );
}
export interface CreateDBInstanceReadReplicaMessage {
  DBInstanceIdentifier: string | undefined;
  SourceDBInstanceIdentifier?: string;
  DBInstanceClass?: string;
  AvailabilityZone?: string;
  Port?: number;
  MultiAZ?: boolean;
  AutoMinorVersionUpgrade?: boolean;
  Iops?: number;
  OptionGroupName?: string;
  DBParameterGroupName?: string;
  PubliclyAccessible?: boolean;
  Tags?: Tag[];
  DBSubnetGroupName?: string;
  VpcSecurityGroupIds?: string[];
  StorageType?: string;
  CopyTagsToSnapshot?: boolean;
  MonitoringInterval?: number;
  MonitoringRoleArn?: string;
  KmsKeyId?: string;
  PreSignedUrl?: string;
  EnableIAMDatabaseAuthentication?: boolean;
  EnablePerformanceInsights?: boolean;
  PerformanceInsightsKMSKeyId?: string;
  PerformanceInsightsRetentionPeriod?: number;
  EnableCloudwatchLogsExports?: string[];
  ProcessorFeatures?: ProcessorFeature[];
  UseDefaultProcessorFeatures?: boolean;
  DeletionProtection?: boolean;
  Domain?: string;
  DomainIAMRoleName?: string;
  DomainFqdn?: string;
  DomainOu?: string;
  DomainAuthSecretArn?: string;
  DomainDnsIps?: string[];
  ReplicaMode?: ReplicaMode;
  MaxAllocatedStorage?: number;
  CustomIamInstanceProfile?: string;
  NetworkType?: string;
  StorageThroughput?: number;
  EnableCustomerOwnedIp?: boolean;
  AllocatedStorage?: number;
  SourceDBClusterIdentifier?: string;
  DedicatedLogVolume?: boolean;
  UpgradeStorageConfig?: boolean;
  CACertificateIdentifier?: string;
}
export interface CreateDBInstanceReadReplicaResult {
  DBInstance?: DBInstance;
}
export declare class DBSubnetGroupNotAllowedFault extends __BaseException {
  readonly name: "DBSubnetGroupNotAllowedFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBSubnetGroupNotAllowedFault, __BaseException>
  );
}
export interface CreateDBParameterGroupMessage {
  DBParameterGroupName: string | undefined;
  DBParameterGroupFamily: string | undefined;
  Description: string | undefined;
  Tags?: Tag[];
}
export interface CreateDBParameterGroupResult {
  DBParameterGroup?: DBParameterGroup;
}
export declare const AuthScheme: {
  readonly SECRETS: "SECRETS";
};
export type AuthScheme = (typeof AuthScheme)[keyof typeof AuthScheme];
export declare const ClientPasswordAuthType: {
  readonly MYSQL_NATIVE_PASSWORD: "MYSQL_NATIVE_PASSWORD";
  readonly POSTGRES_MD5: "POSTGRES_MD5";
  readonly POSTGRES_SCRAM_SHA_256: "POSTGRES_SCRAM_SHA_256";
  readonly SQL_SERVER_AUTHENTICATION: "SQL_SERVER_AUTHENTICATION";
};
export type ClientPasswordAuthType =
  (typeof ClientPasswordAuthType)[keyof typeof ClientPasswordAuthType];
export declare const IAMAuthMode: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
  readonly REQUIRED: "REQUIRED";
};
export type IAMAuthMode = (typeof IAMAuthMode)[keyof typeof IAMAuthMode];
export interface UserAuthConfig {
  Description?: string;
  UserName?: string;
  AuthScheme?: AuthScheme;
  SecretArn?: string;
  IAMAuth?: IAMAuthMode;
  ClientPasswordAuthType?: ClientPasswordAuthType;
}
export declare const EngineFamily: {
  readonly MYSQL: "MYSQL";
  readonly POSTGRESQL: "POSTGRESQL";
  readonly SQLSERVER: "SQLSERVER";
};
export type EngineFamily = (typeof EngineFamily)[keyof typeof EngineFamily];
export interface CreateDBProxyRequest {
  DBProxyName: string | undefined;
  EngineFamily: EngineFamily | undefined;
  Auth: UserAuthConfig[] | undefined;
  RoleArn: string | undefined;
  VpcSubnetIds: string[] | undefined;
  VpcSecurityGroupIds?: string[];
  RequireTLS?: boolean;
  IdleClientTimeout?: number;
  DebugLogging?: boolean;
  Tags?: Tag[];
}
export interface UserAuthConfigInfo {
  Description?: string;
  UserName?: string;
  AuthScheme?: AuthScheme;
  SecretArn?: string;
  IAMAuth?: IAMAuthMode;
  ClientPasswordAuthType?: ClientPasswordAuthType;
}
export declare const DBProxyStatus: {
  readonly AVAILABLE: "available";
  readonly CREATING: "creating";
  readonly DELETING: "deleting";
  readonly INCOMPATIBLE_NETWORK: "incompatible-network";
  readonly INSUFFICIENT_RESOURCE_LIMITS: "insufficient-resource-limits";
  readonly MODIFYING: "modifying";
  readonly REACTIVATING: "reactivating";
  readonly SUSPENDED: "suspended";
  readonly SUSPENDING: "suspending";
};
export type DBProxyStatus = (typeof DBProxyStatus)[keyof typeof DBProxyStatus];
export interface DBProxy {
  DBProxyName?: string;
  DBProxyArn?: string;
  Status?: DBProxyStatus;
  EngineFamily?: string;
  VpcId?: string;
  VpcSecurityGroupIds?: string[];
  VpcSubnetIds?: string[];
  Auth?: UserAuthConfigInfo[];
  RoleArn?: string;
  Endpoint?: string;
  RequireTLS?: boolean;
  IdleClientTimeout?: number;
  DebugLogging?: boolean;
  CreatedDate?: Date;
  UpdatedDate?: Date;
}
export interface CreateDBProxyResponse {
  DBProxy?: DBProxy;
}
export declare class DBProxyAlreadyExistsFault extends __BaseException {
  readonly name: "DBProxyAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBProxyAlreadyExistsFault, __BaseException>
  );
}
export declare class DBProxyQuotaExceededFault extends __BaseException {
  readonly name: "DBProxyQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBProxyQuotaExceededFault, __BaseException>
  );
}
export declare const DBProxyEndpointTargetRole: {
  readonly READ_ONLY: "READ_ONLY";
  readonly READ_WRITE: "READ_WRITE";
};
export type DBProxyEndpointTargetRole =
  (typeof DBProxyEndpointTargetRole)[keyof typeof DBProxyEndpointTargetRole];
export interface CreateDBProxyEndpointRequest {
  DBProxyName: string | undefined;
  DBProxyEndpointName: string | undefined;
  VpcSubnetIds: string[] | undefined;
  VpcSecurityGroupIds?: string[];
  TargetRole?: DBProxyEndpointTargetRole;
  Tags?: Tag[];
}
export declare const DBProxyEndpointStatus: {
  readonly AVAILABLE: "available";
  readonly CREATING: "creating";
  readonly DELETING: "deleting";
  readonly INCOMPATIBLE_NETWORK: "incompatible-network";
  readonly INSUFFICIENT_RESOURCE_LIMITS: "insufficient-resource-limits";
  readonly MODIFYING: "modifying";
};
export type DBProxyEndpointStatus =
  (typeof DBProxyEndpointStatus)[keyof typeof DBProxyEndpointStatus];
export interface DBProxyEndpoint {
  DBProxyEndpointName?: string;
  DBProxyEndpointArn?: string;
  DBProxyName?: string;
  Status?: DBProxyEndpointStatus;
  VpcId?: string;
  VpcSecurityGroupIds?: string[];
  VpcSubnetIds?: string[];
  Endpoint?: string;
  CreatedDate?: Date;
  TargetRole?: DBProxyEndpointTargetRole;
  IsDefault?: boolean;
}
export interface CreateDBProxyEndpointResponse {
  DBProxyEndpoint?: DBProxyEndpoint;
}
export declare class DBProxyEndpointAlreadyExistsFault extends __BaseException {
  readonly name: "DBProxyEndpointAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBProxyEndpointAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class DBProxyEndpointQuotaExceededFault extends __BaseException {
  readonly name: "DBProxyEndpointQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBProxyEndpointQuotaExceededFault,
      __BaseException
    >
  );
}
export declare class InvalidDBProxyStateFault extends __BaseException {
  readonly name: "InvalidDBProxyStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidDBProxyStateFault, __BaseException>
  );
}
export interface CreateDBSecurityGroupMessage {
  DBSecurityGroupName: string | undefined;
  DBSecurityGroupDescription: string | undefined;
  Tags?: Tag[];
}
export interface CreateDBSecurityGroupResult {
  DBSecurityGroup?: DBSecurityGroup;
}
export declare class DBSecurityGroupAlreadyExistsFault extends __BaseException {
  readonly name: "DBSecurityGroupAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBSecurityGroupAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class DBSecurityGroupNotSupportedFault extends __BaseException {
  readonly name: "DBSecurityGroupNotSupportedFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBSecurityGroupNotSupportedFault,
      __BaseException
    >
  );
}
export declare class DBSecurityGroupQuotaExceededFault extends __BaseException {
  readonly name: "DBSecurityGroupQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBSecurityGroupQuotaExceededFault,
      __BaseException
    >
  );
}
export interface CreateDBShardGroupMessage {
  DBShardGroupIdentifier: string | undefined;
  DBClusterIdentifier: string | undefined;
  ComputeRedundancy?: number;
  MaxACU: number | undefined;
  MinACU?: number;
  PubliclyAccessible?: boolean;
}
export interface DBShardGroup {
  DBShardGroupResourceId?: string;
  DBShardGroupIdentifier?: string;
  DBClusterIdentifier?: string;
  MaxACU?: number;
  MinACU?: number;
  ComputeRedundancy?: number;
  Status?: string;
  PubliclyAccessible?: boolean;
  Endpoint?: string;
}
export declare class DBShardGroupAlreadyExistsFault extends __BaseException {
  readonly name: "DBShardGroupAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBShardGroupAlreadyExistsFault, __BaseException>
  );
}
export declare class InvalidMaxAcuFault extends __BaseException {
  readonly name: "InvalidMaxAcuFault";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<InvalidMaxAcuFault, __BaseException>);
}
export declare class MaxDBShardGroupLimitReached extends __BaseException {
  readonly name: "MaxDBShardGroupLimitReached";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<MaxDBShardGroupLimitReached, __BaseException>
  );
}
export declare class UnsupportedDBEngineVersionFault extends __BaseException {
  readonly name: "UnsupportedDBEngineVersionFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      UnsupportedDBEngineVersionFault,
      __BaseException
    >
  );
}
export interface CreateDBSnapshotMessage {
  DBSnapshotIdentifier: string | undefined;
  DBInstanceIdentifier: string | undefined;
  Tags?: Tag[];
}
export interface CreateDBSnapshotResult {
  DBSnapshot?: DBSnapshot;
}
export interface CreateDBSubnetGroupMessage {
  DBSubnetGroupName: string | undefined;
  DBSubnetGroupDescription: string | undefined;
  SubnetIds: string[] | undefined;
  Tags?: Tag[];
}
export interface CreateDBSubnetGroupResult {
  DBSubnetGroup?: DBSubnetGroup;
}
export declare class DBSubnetGroupAlreadyExistsFault extends __BaseException {
  readonly name: "DBSubnetGroupAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBSubnetGroupAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class DBSubnetGroupQuotaExceededFault extends __BaseException {
  readonly name: "DBSubnetGroupQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBSubnetGroupQuotaExceededFault,
      __BaseException
    >
  );
}
export declare class DBSubnetQuotaExceededFault extends __BaseException {
  readonly name: "DBSubnetQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBSubnetQuotaExceededFault, __BaseException>
  );
}
export interface CreateEventSubscriptionMessage {
  SubscriptionName: string | undefined;
  SnsTopicArn: string | undefined;
  SourceType?: string;
  EventCategories?: string[];
  SourceIds?: string[];
  Enabled?: boolean;
  Tags?: Tag[];
}
export interface CreateEventSubscriptionResult {
  EventSubscription?: EventSubscription;
}
export declare class EventSubscriptionQuotaExceededFault extends __BaseException {
  readonly name: "EventSubscriptionQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      EventSubscriptionQuotaExceededFault,
      __BaseException
    >
  );
}
export declare class SNSInvalidTopicFault extends __BaseException {
  readonly name: "SNSInvalidTopicFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<SNSInvalidTopicFault, __BaseException>
  );
}
export declare class SNSNoAuthorizationFault extends __BaseException {
  readonly name: "SNSNoAuthorizationFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<SNSNoAuthorizationFault, __BaseException>
  );
}
export declare class SNSTopicArnNotFoundFault extends __BaseException {
  readonly name: "SNSTopicArnNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<SNSTopicArnNotFoundFault, __BaseException>
  );
}
export declare class SubscriptionAlreadyExistFault extends __BaseException {
  readonly name: "SubscriptionAlreadyExistFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<SubscriptionAlreadyExistFault, __BaseException>
  );
}
export declare class SubscriptionCategoryNotFoundFault extends __BaseException {
  readonly name: "SubscriptionCategoryNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      SubscriptionCategoryNotFoundFault,
      __BaseException
    >
  );
}
export interface CreateGlobalClusterMessage {
  GlobalClusterIdentifier?: string;
  SourceDBClusterIdentifier?: string;
  Engine?: string;
  EngineVersion?: string;
  EngineLifecycleSupport?: string;
  DeletionProtection?: boolean;
  DatabaseName?: string;
  StorageEncrypted?: boolean;
}
export declare const FailoverStatus: {
  readonly CANCELLING: "cancelling";
  readonly FAILING_OVER: "failing-over";
  readonly PENDING: "pending";
};
export type FailoverStatus =
  (typeof FailoverStatus)[keyof typeof FailoverStatus];
export interface FailoverState {
  Status?: FailoverStatus;
  FromDbClusterArn?: string;
  ToDbClusterArn?: string;
  IsDataLossAllowed?: boolean;
}
export declare const GlobalClusterMemberSynchronizationStatus: {
  readonly CONNECTED: "connected";
  readonly PENDING_RESYNC: "pending-resync";
};
export type GlobalClusterMemberSynchronizationStatus =
  (typeof GlobalClusterMemberSynchronizationStatus)[keyof typeof GlobalClusterMemberSynchronizationStatus];
export interface GlobalClusterMember {
  DBClusterArn?: string;
  Readers?: string[];
  IsWriter?: boolean;
  GlobalWriteForwardingStatus?: WriteForwardingStatus;
  SynchronizationStatus?: GlobalClusterMemberSynchronizationStatus;
}
export interface GlobalCluster {
  GlobalClusterIdentifier?: string;
  GlobalClusterResourceId?: string;
  GlobalClusterArn?: string;
  Status?: string;
  Engine?: string;
  EngineVersion?: string;
  EngineLifecycleSupport?: string;
  DatabaseName?: string;
  StorageEncrypted?: boolean;
  DeletionProtection?: boolean;
  GlobalClusterMembers?: GlobalClusterMember[];
  FailoverState?: FailoverState;
}
export interface CreateGlobalClusterResult {
  GlobalCluster?: GlobalCluster;
}
export declare class GlobalClusterAlreadyExistsFault extends __BaseException {
  readonly name: "GlobalClusterAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      GlobalClusterAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class GlobalClusterQuotaExceededFault extends __BaseException {
  readonly name: "GlobalClusterQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      GlobalClusterQuotaExceededFault,
      __BaseException
    >
  );
}
export interface CreateIntegrationMessage {
  SourceArn: string | undefined;
  TargetArn: string | undefined;
  IntegrationName: string | undefined;
  KMSKeyId?: string;
  AdditionalEncryptionContext?: Record<string, string>;
  Tags?: Tag[];
  DataFilter?: string;
  Description?: string;
}
export interface IntegrationError {
  ErrorCode: string | undefined;
  ErrorMessage?: string;
}
export declare const IntegrationStatus: {
  readonly ACTIVE: "active";
  readonly CREATING: "creating";
  readonly DELETING: "deleting";
  readonly FAILED: "failed";
  readonly MODIFYING: "modifying";
  readonly NEEDS_ATTENTION: "needs_attention";
  readonly SYNCING: "syncing";
};
export type IntegrationStatus =
  (typeof IntegrationStatus)[keyof typeof IntegrationStatus];
export interface Integration {
  SourceArn?: string;
  TargetArn?: string;
  IntegrationName?: string;
  IntegrationArn?: string;
  KMSKeyId?: string;
  AdditionalEncryptionContext?: Record<string, string>;
  Status?: IntegrationStatus;
  Tags?: Tag[];
  CreateTime?: Date;
  Errors?: IntegrationError[];
  DataFilter?: string;
  Description?: string;
}
export declare class IntegrationAlreadyExistsFault extends __BaseException {
  readonly name: "IntegrationAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<IntegrationAlreadyExistsFault, __BaseException>
  );
}
export declare class IntegrationConflictOperationFault extends __BaseException {
  readonly name: "IntegrationConflictOperationFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      IntegrationConflictOperationFault,
      __BaseException
    >
  );
}
export declare class IntegrationQuotaExceededFault extends __BaseException {
  readonly name: "IntegrationQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<IntegrationQuotaExceededFault, __BaseException>
  );
}
export interface CreateOptionGroupMessage {
  OptionGroupName: string | undefined;
  EngineName: string | undefined;
  MajorEngineVersion: string | undefined;
  OptionGroupDescription: string | undefined;
  Tags?: Tag[];
}
export interface CreateOptionGroupResult {
  OptionGroup?: OptionGroup;
}
export interface CreateTenantDatabaseMessage {
  DBInstanceIdentifier: string | undefined;
  TenantDBName: string | undefined;
  MasterUsername: string | undefined;
  MasterUserPassword: string | undefined;
  CharacterSetName?: string;
  NcharCharacterSetName?: string;
  Tags?: Tag[];
}
export interface TenantDatabasePendingModifiedValues {
  MasterUserPassword?: string;
  TenantDBName?: string;
}
export interface TenantDatabase {
  TenantDatabaseCreateTime?: Date;
  DBInstanceIdentifier?: string;
  TenantDBName?: string;
  Status?: string;
  MasterUsername?: string;
  DbiResourceId?: string;
  TenantDatabaseResourceId?: string;
  TenantDatabaseARN?: string;
  CharacterSetName?: string;
  NcharCharacterSetName?: string;
  DeletionProtection?: boolean;
  PendingModifiedValues?: TenantDatabasePendingModifiedValues;
  TagList?: Tag[];
}
export interface CreateTenantDatabaseResult {
  TenantDatabase?: TenantDatabase;
}
export declare class TenantDatabaseAlreadyExistsFault extends __BaseException {
  readonly name: "TenantDatabaseAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      TenantDatabaseAlreadyExistsFault,
      __BaseException
    >
  );
}
export interface DeleteBlueGreenDeploymentRequest {
  BlueGreenDeploymentIdentifier: string | undefined;
  DeleteTarget?: boolean;
}
export interface DeleteBlueGreenDeploymentResponse {
  BlueGreenDeployment?: BlueGreenDeployment;
}
export declare class InvalidBlueGreenDeploymentStateFault extends __BaseException {
  readonly name: "InvalidBlueGreenDeploymentStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidBlueGreenDeploymentStateFault,
      __BaseException
    >
  );
}
export declare class CustomDBEngineVersionNotFoundFault extends __BaseException {
  readonly name: "CustomDBEngineVersionNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      CustomDBEngineVersionNotFoundFault,
      __BaseException
    >
  );
}
export interface DeleteCustomDBEngineVersionMessage {
  Engine: string | undefined;
  EngineVersion: string | undefined;
}
export declare class InvalidCustomDBEngineVersionStateFault extends __BaseException {
  readonly name: "InvalidCustomDBEngineVersionStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidCustomDBEngineVersionStateFault,
      __BaseException
    >
  );
}
export declare class DBClusterAutomatedBackupQuotaExceededFault extends __BaseException {
  readonly name: "DBClusterAutomatedBackupQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBClusterAutomatedBackupQuotaExceededFault,
      __BaseException
    >
  );
}
export interface DeleteDBClusterMessage {
  DBClusterIdentifier: string | undefined;
  SkipFinalSnapshot?: boolean;
  FinalDBSnapshotIdentifier?: string;
  DeleteAutomatedBackups?: boolean;
}
export interface DeleteDBClusterResult {
  DBCluster?: DBCluster;
}
export declare class DBClusterAutomatedBackupNotFoundFault extends __BaseException {
  readonly name: "DBClusterAutomatedBackupNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBClusterAutomatedBackupNotFoundFault,
      __BaseException
    >
  );
}
export interface DeleteDBClusterAutomatedBackupMessage {
  DbClusterResourceId: string | undefined;
}
export interface RestoreWindow {
  EarliestTime?: Date;
  LatestTime?: Date;
}
export interface DBClusterAutomatedBackup {
  Engine?: string;
  VpcId?: string;
  DBClusterAutomatedBackupsArn?: string;
  DBClusterIdentifier?: string;
  RestoreWindow?: RestoreWindow;
  MasterUsername?: string;
  DbClusterResourceId?: string;
  Region?: string;
  LicenseModel?: string;
  Status?: string;
  IAMDatabaseAuthenticationEnabled?: boolean;
  ClusterCreateTime?: Date;
  StorageEncrypted?: boolean;
  AllocatedStorage?: number;
  EngineVersion?: string;
  DBClusterArn?: string;
  BackupRetentionPeriod?: number;
  EngineMode?: string;
  AvailabilityZones?: string[];
  Port?: number;
  KmsKeyId?: string;
  StorageType?: string;
  Iops?: number;
  AwsBackupRecoveryPointArn?: string;
  StorageThroughput?: number;
}
export interface DeleteDBClusterAutomatedBackupResult {
  DBClusterAutomatedBackup?: DBClusterAutomatedBackup;
}
export declare class InvalidDBClusterAutomatedBackupStateFault extends __BaseException {
  readonly name: "InvalidDBClusterAutomatedBackupStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidDBClusterAutomatedBackupStateFault,
      __BaseException
    >
  );
}
export declare class DBClusterEndpointNotFoundFault extends __BaseException {
  readonly name: "DBClusterEndpointNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBClusterEndpointNotFoundFault, __BaseException>
  );
}
export interface DeleteDBClusterEndpointMessage {
  DBClusterEndpointIdentifier: string | undefined;
}
export declare class InvalidDBClusterEndpointStateFault extends __BaseException {
  readonly name: "InvalidDBClusterEndpointStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidDBClusterEndpointStateFault,
      __BaseException
    >
  );
}
export interface DeleteDBClusterParameterGroupMessage {
  DBClusterParameterGroupName: string | undefined;
}
export declare class InvalidDBParameterGroupStateFault extends __BaseException {
  readonly name: "InvalidDBParameterGroupStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidDBParameterGroupStateFault,
      __BaseException
    >
  );
}
export interface DeleteDBClusterSnapshotMessage {
  DBClusterSnapshotIdentifier: string | undefined;
}
export interface DeleteDBClusterSnapshotResult {
  DBClusterSnapshot?: DBClusterSnapshot;
}
export declare class DBInstanceAutomatedBackupQuotaExceededFault extends __BaseException {
  readonly name: "DBInstanceAutomatedBackupQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBInstanceAutomatedBackupQuotaExceededFault,
      __BaseException
    >
  );
}
export interface DeleteDBInstanceMessage {
  DBInstanceIdentifier: string | undefined;
  SkipFinalSnapshot?: boolean;
  FinalDBSnapshotIdentifier?: string;
  DeleteAutomatedBackups?: boolean;
}
export interface DeleteDBInstanceResult {
  DBInstance?: DBInstance;
}
export declare class DBInstanceAutomatedBackupNotFoundFault extends __BaseException {
  readonly name: "DBInstanceAutomatedBackupNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBInstanceAutomatedBackupNotFoundFault,
      __BaseException
    >
  );
}
export interface DeleteDBInstanceAutomatedBackupMessage {
  DbiResourceId?: string;
  DBInstanceAutomatedBackupsArn?: string;
}
export interface DBInstanceAutomatedBackup {
  DBInstanceArn?: string;
  DbiResourceId?: string;
  Region?: string;
  DBInstanceIdentifier?: string;
  RestoreWindow?: RestoreWindow;
  AllocatedStorage?: number;
  Status?: string;
  Port?: number;
  AvailabilityZone?: string;
  VpcId?: string;
  InstanceCreateTime?: Date;
  MasterUsername?: string;
  Engine?: string;
  EngineVersion?: string;
  LicenseModel?: string;
  Iops?: number;
  OptionGroupName?: string;
  TdeCredentialArn?: string;
  Encrypted?: boolean;
  StorageType?: string;
  KmsKeyId?: string;
  Timezone?: string;
  IAMDatabaseAuthenticationEnabled?: boolean;
  BackupRetentionPeriod?: number;
  DBInstanceAutomatedBackupsArn?: string;
  DBInstanceAutomatedBackupsReplications?: DBInstanceAutomatedBackupsReplication[];
  BackupTarget?: string;
  StorageThroughput?: number;
  AwsBackupRecoveryPointArn?: string;
  DedicatedLogVolume?: boolean;
  MultiTenant?: boolean;
}
export interface DeleteDBInstanceAutomatedBackupResult {
  DBInstanceAutomatedBackup?: DBInstanceAutomatedBackup;
}
export declare class InvalidDBInstanceAutomatedBackupStateFault extends __BaseException {
  readonly name: "InvalidDBInstanceAutomatedBackupStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidDBInstanceAutomatedBackupStateFault,
      __BaseException
    >
  );
}
export interface DeleteDBParameterGroupMessage {
  DBParameterGroupName: string | undefined;
}
export interface DeleteDBProxyRequest {
  DBProxyName: string | undefined;
}
export interface DeleteDBProxyResponse {
  DBProxy?: DBProxy;
}
export declare class DBProxyEndpointNotFoundFault extends __BaseException {
  readonly name: "DBProxyEndpointNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBProxyEndpointNotFoundFault, __BaseException>
  );
}
export interface DeleteDBProxyEndpointRequest {
  DBProxyEndpointName: string | undefined;
}
export interface DeleteDBProxyEndpointResponse {
  DBProxyEndpoint?: DBProxyEndpoint;
}
export declare class InvalidDBProxyEndpointStateFault extends __BaseException {
  readonly name: "InvalidDBProxyEndpointStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidDBProxyEndpointStateFault,
      __BaseException
    >
  );
}
export interface DeleteDBSecurityGroupMessage {
  DBSecurityGroupName: string | undefined;
}
export declare class DBShardGroupNotFoundFault extends __BaseException {
  readonly name: "DBShardGroupNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBShardGroupNotFoundFault, __BaseException>
  );
}
export interface DeleteDBShardGroupMessage {
  DBShardGroupIdentifier: string | undefined;
}
export declare class InvalidDBShardGroupStateFault extends __BaseException {
  readonly name: "InvalidDBShardGroupStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidDBShardGroupStateFault, __BaseException>
  );
}
export interface DeleteDBSnapshotMessage {
  DBSnapshotIdentifier: string | undefined;
}
export interface DeleteDBSnapshotResult {
  DBSnapshot?: DBSnapshot;
}
export interface DeleteDBSubnetGroupMessage {
  DBSubnetGroupName: string | undefined;
}
export declare class InvalidDBSubnetStateFault extends __BaseException {
  readonly name: "InvalidDBSubnetStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidDBSubnetStateFault, __BaseException>
  );
}
export interface DeleteEventSubscriptionMessage {
  SubscriptionName: string | undefined;
}
export interface DeleteEventSubscriptionResult {
  EventSubscription?: EventSubscription;
}
export declare class InvalidEventSubscriptionStateFault extends __BaseException {
  readonly name: "InvalidEventSubscriptionStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidEventSubscriptionStateFault,
      __BaseException
    >
  );
}
export interface DeleteGlobalClusterMessage {
  GlobalClusterIdentifier: string | undefined;
}
export interface DeleteGlobalClusterResult {
  GlobalCluster?: GlobalCluster;
}
export interface DeleteIntegrationMessage {
  IntegrationIdentifier: string | undefined;
}
export declare class InvalidIntegrationStateFault extends __BaseException {
  readonly name: "InvalidIntegrationStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidIntegrationStateFault, __BaseException>
  );
}
export interface DeleteOptionGroupMessage {
  OptionGroupName: string | undefined;
}
export declare class InvalidOptionGroupStateFault extends __BaseException {
  readonly name: "InvalidOptionGroupStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidOptionGroupStateFault, __BaseException>
  );
}
export interface DeleteTenantDatabaseMessage {
  DBInstanceIdentifier: string | undefined;
  TenantDBName: string | undefined;
  SkipFinalSnapshot?: boolean;
  FinalDBSnapshotIdentifier?: string;
}
export declare const CreateTenantDatabaseMessageFilterSensitiveLog: (
  obj: CreateTenantDatabaseMessage
) => any;
export declare const TenantDatabasePendingModifiedValuesFilterSensitiveLog: (
  obj: TenantDatabasePendingModifiedValues
) => any;
export declare const TenantDatabaseFilterSensitiveLog: (
  obj: TenantDatabase
) => any;
export declare const CreateTenantDatabaseResultFilterSensitiveLog: (
  obj: CreateTenantDatabaseResult
) => any;
