import { AppSyncServiceException as __BaseException } from "./AppSyncServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
export const AuthenticationType = {
    AMAZON_COGNITO_USER_POOLS: "AMAZON_COGNITO_USER_POOLS",
    API_KEY: "API_KEY",
    AWS_IAM: "AWS_IAM",
    AWS_LAMBDA: "AWS_LAMBDA",
    OPENID_CONNECT: "OPENID_CONNECT",
};
export const AssociationStatus = {
    Failed: "FAILED",
    Processing: "PROCESSING",
    Success: "SUCCESS",
};
export const ApiCachingBehavior = {
    FULL_REQUEST_CACHING: "FULL_REQUEST_CACHING",
    PER_RESOLVER_CACHING: "PER_RESOLVER_CACHING",
};
export const CacheHealthMetricsConfig = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const ApiCacheStatus = {
    AVAILABLE: "AVAILABLE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    MODIFYING: "MODIFYING",
};
export const ApiCacheType = {
    LARGE: "LARGE",
    LARGE_12X: "LARGE_12X",
    LARGE_2X: "LARGE_2X",
    LARGE_4X: "LARGE_4X",
    LARGE_8X: "LARGE_8X",
    MEDIUM: "MEDIUM",
    R4_2XLARGE: "R4_2XLARGE",
    R4_4XLARGE: "R4_4XLARGE",
    R4_8XLARGE: "R4_8XLARGE",
    R4_LARGE: "R4_LARGE",
    R4_XLARGE: "R4_XLARGE",
    SMALL: "SMALL",
    T2_MEDIUM: "T2_MEDIUM",
    T2_SMALL: "T2_SMALL",
    XLARGE: "XLARGE",
};
export class ApiKeyLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ApiKeyLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ApiKeyLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApiKeyLimitExceededException.prototype);
    }
}
export class ApiKeyValidityOutOfBoundsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ApiKeyValidityOutOfBoundsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ApiKeyValidityOutOfBoundsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApiKeyValidityOutOfBoundsException.prototype);
    }
}
export class ApiLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ApiLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ApiLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApiLimitExceededException.prototype);
    }
}
export const RuntimeName = {
    APPSYNC_JS: "APPSYNC_JS",
};
export const BadRequestReason = {
    CODE_ERROR: "CODE_ERROR",
};
export class BadRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.reason = opts.reason;
        this.detail = opts.detail;
    }
}
export class InternalFailureException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalFailureException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalFailureException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalFailureException.prototype);
    }
}
export class NotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
    }
}
export const MergeType = {
    AUTO_MERGE: "AUTO_MERGE",
    MANUAL_MERGE: "MANUAL_MERGE",
};
export const SourceApiAssociationStatus = {
    AUTO_MERGE_SCHEDULE_FAILED: "AUTO_MERGE_SCHEDULE_FAILED",
    DELETION_FAILED: "DELETION_FAILED",
    DELETION_IN_PROGRESS: "DELETION_IN_PROGRESS",
    DELETION_SCHEDULED: "DELETION_SCHEDULED",
    MERGE_FAILED: "MERGE_FAILED",
    MERGE_IN_PROGRESS: "MERGE_IN_PROGRESS",
    MERGE_SCHEDULED: "MERGE_SCHEDULED",
    MERGE_SUCCESS: "MERGE_SUCCESS",
};
export class ConcurrentModificationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
export class UnauthorizedException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnauthorizedException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
    }
}
export const AuthorizationType = {
    AWS_IAM: "AWS_IAM",
};
export const DataSourceLevelMetricsConfig = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const RelationalDatabaseSourceType = {
    RDS_HTTP_ENDPOINT: "RDS_HTTP_ENDPOINT",
};
export const DataSourceType = {
    AMAZON_DYNAMODB: "AMAZON_DYNAMODB",
    AMAZON_ELASTICSEARCH: "AMAZON_ELASTICSEARCH",
    AMAZON_EVENTBRIDGE: "AMAZON_EVENTBRIDGE",
    AMAZON_OPENSEARCH_SERVICE: "AMAZON_OPENSEARCH_SERVICE",
    AWS_LAMBDA: "AWS_LAMBDA",
    HTTP: "HTTP",
    NONE: "NONE",
    RELATIONAL_DATABASE: "RELATIONAL_DATABASE",
};
export const ConflictDetectionType = {
    NONE: "NONE",
    VERSION: "VERSION",
};
export const ConflictHandlerType = {
    AUTOMERGE: "AUTOMERGE",
    LAMBDA: "LAMBDA",
    NONE: "NONE",
    OPTIMISTIC_CONCURRENCY: "OPTIMISTIC_CONCURRENCY",
};
export const GraphQLApiType = {
    GRAPHQL: "GRAPHQL",
    MERGED: "MERGED",
};
export const DataSourceLevelMetricsBehavior = {
    FULL_REQUEST_DATA_SOURCE_METRICS: "FULL_REQUEST_DATA_SOURCE_METRICS",
    PER_DATA_SOURCE_METRICS: "PER_DATA_SOURCE_METRICS",
};
export const OperationLevelMetricsConfig = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const ResolverLevelMetricsBehavior = {
    FULL_REQUEST_RESOLVER_METRICS: "FULL_REQUEST_RESOLVER_METRICS",
    PER_RESOLVER_METRICS: "PER_RESOLVER_METRICS",
};
export const GraphQLApiIntrospectionConfig = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const FieldLogLevel = {
    ALL: "ALL",
    DEBUG: "DEBUG",
    ERROR: "ERROR",
    INFO: "INFO",
    NONE: "NONE",
};
export const DefaultAction = {
    ALLOW: "ALLOW",
    DENY: "DENY",
};
export const GraphQLApiVisibility = {
    GLOBAL: "GLOBAL",
    PRIVATE: "PRIVATE",
};
export const ResolverKind = {
    PIPELINE: "PIPELINE",
    UNIT: "UNIT",
};
export const ResolverLevelMetricsConfig = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const TypeDefinitionFormat = {
    JSON: "JSON",
    SDL: "SDL",
};
export const DataSourceIntrospectionStatus = {
    FAILED: "FAILED",
    PROCESSING: "PROCESSING",
    SUCCESS: "SUCCESS",
};
export const OutputType = {
    JSON: "JSON",
    SDL: "SDL",
};
export class GraphQLSchemaException extends __BaseException {
    constructor(opts) {
        super({
            name: "GraphQLSchemaException",
            $fault: "client",
            ...opts,
        });
        this.name = "GraphQLSchemaException";
        this.$fault = "client";
        Object.setPrototypeOf(this, GraphQLSchemaException.prototype);
    }
}
export const SchemaStatus = {
    Active: "ACTIVE",
    Deleting: "DELETING",
    Failed: "FAILED",
    NotApplicable: "NOT_APPLICABLE",
    Processing: "PROCESSING",
    Success: "SUCCESS",
};
export const Ownership = {
    CURRENT_ACCOUNT: "CURRENT_ACCOUNT",
    OTHER_ACCOUNTS: "OTHER_ACCOUNTS",
};
