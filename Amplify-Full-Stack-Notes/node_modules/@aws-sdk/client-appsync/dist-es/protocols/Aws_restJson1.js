import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { AppSyncServiceException as __BaseException } from "../models/AppSyncServiceException";
import { AccessDeniedException, ApiKeyLimitExceededException, ApiKeyValidityOutOfBoundsException, ApiLimitExceededException, BadRequestException, ConcurrentModificationException, GraphQLSchemaException, InternalFailureException, LimitExceededException, NotFoundException, UnauthorizedException, } from "../models/models_0";
export const se_AssociateApiCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/domainnames/{domainName}/apiassociation");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    let body;
    body = JSON.stringify(take(input, {
        apiId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_AssociateMergedGraphqlApiCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/sourceApis/{sourceApiIdentifier}/mergedApiAssociations");
    b.p("sourceApiIdentifier", () => input.sourceApiIdentifier, "{sourceApiIdentifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        mergedApiIdentifier: [],
        sourceApiAssociationConfig: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_AssociateSourceGraphqlApiCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations");
    b.p("mergedApiIdentifier", () => input.mergedApiIdentifier, "{mergedApiIdentifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        sourceApiAssociationConfig: (_) => _json(_),
        sourceApiIdentifier: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateApiCacheCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/ApiCaches");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(take(input, {
        apiCachingBehavior: [],
        atRestEncryptionEnabled: [],
        healthMetricsConfig: [],
        transitEncryptionEnabled: [],
        ttl: [],
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateApiKeyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/apikeys");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        expires: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/datasources");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        dynamodbConfig: (_) => _json(_),
        elasticsearchConfig: (_) => _json(_),
        eventBridgeConfig: (_) => _json(_),
        httpConfig: (_) => _json(_),
        lambdaConfig: (_) => _json(_),
        metricsConfig: [],
        name: [],
        openSearchServiceConfig: (_) => _json(_),
        relationalDatabaseConfig: (_) => _json(_),
        serviceRoleArn: [],
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDomainNameCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/domainnames");
    let body;
    body = JSON.stringify(take(input, {
        certificateArn: [],
        description: [],
        domainName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateFunctionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/functions");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(take(input, {
        code: [],
        dataSourceName: [],
        description: [],
        functionVersion: [],
        maxBatchSize: [],
        name: [],
        requestMappingTemplate: [],
        responseMappingTemplate: [],
        runtime: (_) => _json(_),
        syncConfig: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateGraphqlApiCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis");
    let body;
    body = JSON.stringify(take(input, {
        additionalAuthenticationProviders: (_) => _json(_),
        apiType: [],
        authenticationType: [],
        enhancedMetricsConfig: (_) => _json(_),
        introspectionConfig: [],
        lambdaAuthorizerConfig: (_) => _json(_),
        logConfig: (_) => _json(_),
        mergedApiExecutionRoleArn: [],
        name: [],
        openIDConnectConfig: (_) => _json(_),
        ownerContact: [],
        queryDepthLimit: [],
        resolverCountLimit: [],
        tags: (_) => _json(_),
        userPoolConfig: (_) => _json(_),
        visibility: [],
        xrayEnabled: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateResolverCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/types/{typeName}/resolvers");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("typeName", () => input.typeName, "{typeName}", false);
    let body;
    body = JSON.stringify(take(input, {
        cachingConfig: (_) => _json(_),
        code: [],
        dataSourceName: [],
        fieldName: [],
        kind: [],
        maxBatchSize: [],
        metricsConfig: [],
        pipelineConfig: (_) => _json(_),
        requestMappingTemplate: [],
        responseMappingTemplate: [],
        runtime: (_) => _json(_),
        syncConfig: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateTypeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/types");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(take(input, {
        definition: [],
        format: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteApiCacheCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/ApiCaches");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteApiKeyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/apikeys/{id}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/datasources/{name}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("name", () => input.name, "{name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteDomainNameCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/domainnames/{domainName}");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteFunctionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/functions/{functionId}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("functionId", () => input.functionId, "{functionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteGraphqlApiCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteResolverCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("typeName", () => input.typeName, "{typeName}", false);
    b.p("fieldName", () => input.fieldName, "{fieldName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteTypeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/types/{typeName}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("typeName", () => input.typeName, "{typeName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateApiCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/domainnames/{domainName}/apiassociation");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateMergedGraphqlApiCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/sourceApis/{sourceApiIdentifier}/mergedApiAssociations/{associationId}");
    b.p("sourceApiIdentifier", () => input.sourceApiIdentifier, "{sourceApiIdentifier}", false);
    b.p("associationId", () => input.associationId, "{associationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateSourceGraphqlApiCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}");
    b.p("mergedApiIdentifier", () => input.mergedApiIdentifier, "{mergedApiIdentifier}", false);
    b.p("associationId", () => input.associationId, "{associationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_EvaluateCodeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/dataplane-evaluatecode");
    let body;
    body = JSON.stringify(take(input, {
        code: [],
        context: [],
        function: [],
        runtime: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_EvaluateMappingTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/dataplane-evaluatetemplate");
    let body;
    body = JSON.stringify(take(input, {
        context: [],
        template: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_FlushApiCacheCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/FlushCache");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetApiAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/domainnames/{domainName}/apiassociation");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetApiCacheCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/ApiCaches");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/datasources/{name}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("name", () => input.name, "{name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDataSourceIntrospectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/datasources/introspections/{introspectionId}");
    b.p("introspectionId", () => input.introspectionId, "{introspectionId}", false);
    const query = map({
        [_iMSDL]: [() => input.includeModelsSDL !== void 0, () => input[_iMSDL].toString()],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetDomainNameCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/domainnames/{domainName}");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetFunctionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/functions/{functionId}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("functionId", () => input.functionId, "{functionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetGraphqlApiCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetGraphqlApiEnvironmentVariablesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/environmentVariables");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetIntrospectionSchemaCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/schema");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    const query = map({
        [_f]: [, __expectNonNull(input[_f], `format`)],
        [_iD]: [() => input.includeDirectives !== void 0, () => input[_iD].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetResolverCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("typeName", () => input.typeName, "{typeName}", false);
    b.p("fieldName", () => input.fieldName, "{fieldName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSchemaCreationStatusCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/schemacreation");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSourceApiAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}");
    b.p("mergedApiIdentifier", () => input.mergedApiIdentifier, "{mergedApiIdentifier}", false);
    b.p("associationId", () => input.associationId, "{associationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetTypeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/types/{typeName}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("typeName", () => input.typeName, "{typeName}", false);
    const query = map({
        [_f]: [, __expectNonNull(input[_f], `format`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListApiKeysCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/apikeys");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDataSourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/datasources");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDomainNamesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/domainnames");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListFunctionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/functions");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListGraphqlApisCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_aT]: [, input[_aT]],
        [_o]: [, input[_o]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListResolversCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/types/{typeName}/resolvers");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("typeName", () => input.typeName, "{typeName}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListResolversByFunctionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/functions/{functionId}/resolvers");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("functionId", () => input.functionId, "{functionId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSourceApiAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/sourceApiAssociations");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListTypesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/types");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    const query = map({
        [_f]: [, __expectNonNull(input[_f], `format`)],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTypesByAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}/types");
    b.p("mergedApiIdentifier", () => input.mergedApiIdentifier, "{mergedApiIdentifier}", false);
    b.p("associationId", () => input.associationId, "{associationId}", false);
    const query = map({
        [_f]: [, __expectNonNull(input[_f], `format`)],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_PutGraphqlApiEnvironmentVariablesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/environmentVariables");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(take(input, {
        environmentVariables: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartDataSourceIntrospectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/datasources/introspections");
    let body;
    body = JSON.stringify(take(input, {
        rdsDataApiConfig: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartSchemaCreationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/schemacreation");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(take(input, {
        definition: (_) => context.base64Encoder(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartSchemaMergeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}/merge");
    b.p("associationId", () => input.associationId, "{associationId}", false);
    b.p("mergedApiIdentifier", () => input.mergedApiIdentifier, "{mergedApiIdentifier}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [__expectNonNull(input.tagKeys, `tagKeys`) != null, () => input[_tK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateApiCacheCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/ApiCaches/update");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(take(input, {
        apiCachingBehavior: [],
        healthMetricsConfig: [],
        ttl: [],
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateApiKeyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/apikeys/{id}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("id", () => input.id, "{id}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        expires: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/datasources/{name}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("name", () => input.name, "{name}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        dynamodbConfig: (_) => _json(_),
        elasticsearchConfig: (_) => _json(_),
        eventBridgeConfig: (_) => _json(_),
        httpConfig: (_) => _json(_),
        lambdaConfig: (_) => _json(_),
        metricsConfig: [],
        openSearchServiceConfig: (_) => _json(_),
        relationalDatabaseConfig: (_) => _json(_),
        serviceRoleArn: [],
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateDomainNameCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/domainnames/{domainName}");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateFunctionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/functions/{functionId}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("functionId", () => input.functionId, "{functionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        code: [],
        dataSourceName: [],
        description: [],
        functionVersion: [],
        maxBatchSize: [],
        name: [],
        requestMappingTemplate: [],
        responseMappingTemplate: [],
        runtime: (_) => _json(_),
        syncConfig: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateGraphqlApiCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(take(input, {
        additionalAuthenticationProviders: (_) => _json(_),
        authenticationType: [],
        enhancedMetricsConfig: (_) => _json(_),
        introspectionConfig: [],
        lambdaAuthorizerConfig: (_) => _json(_),
        logConfig: (_) => _json(_),
        mergedApiExecutionRoleArn: [],
        name: [],
        openIDConnectConfig: (_) => _json(_),
        ownerContact: [],
        queryDepthLimit: [],
        resolverCountLimit: [],
        userPoolConfig: (_) => _json(_),
        xrayEnabled: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateResolverCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("typeName", () => input.typeName, "{typeName}", false);
    b.p("fieldName", () => input.fieldName, "{fieldName}", false);
    let body;
    body = JSON.stringify(take(input, {
        cachingConfig: (_) => _json(_),
        code: [],
        dataSourceName: [],
        kind: [],
        maxBatchSize: [],
        metricsConfig: [],
        pipelineConfig: (_) => _json(_),
        requestMappingTemplate: [],
        responseMappingTemplate: [],
        runtime: (_) => _json(_),
        syncConfig: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateSourceApiAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}");
    b.p("associationId", () => input.associationId, "{associationId}", false);
    b.p("mergedApiIdentifier", () => input.mergedApiIdentifier, "{mergedApiIdentifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        sourceApiAssociationConfig: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateTypeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/types/{typeName}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("typeName", () => input.typeName, "{typeName}", false);
    let body;
    body = JSON.stringify(take(input, {
        definition: [],
        format: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_AssociateApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        apiAssociation: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateMergedGraphqlApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        sourceApiAssociation: (_) => de_SourceApiAssociation(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateSourceGraphqlApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        sourceApiAssociation: (_) => de_SourceApiAssociation(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateApiCacheCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        apiCache: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateApiKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        apiKey: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataSource: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDomainNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        domainNameConfig: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateFunctionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        functionConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateGraphqlApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        graphqlApi: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateResolverCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        resolver: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateTypeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        type: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteApiCacheCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteApiKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteDomainNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteFunctionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteGraphqlApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteResolverCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteTypeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateMergedGraphqlApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        sourceApiAssociationStatus: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateSourceGraphqlApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        sourceApiAssociationStatus: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_EvaluateCodeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        error: _json,
        evaluationResult: __expectString,
        logs: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_EvaluateMappingTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        error: _json,
        evaluationResult: __expectString,
        logs: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_FlushApiCacheCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetApiAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        apiAssociation: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetApiCacheCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        apiCache: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataSource: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDataSourceIntrospectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        introspectionId: __expectString,
        introspectionResult: (_) => de_DataSourceIntrospectionResult(_, context),
        introspectionStatus: __expectString,
        introspectionStatusDetail: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDomainNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        domainNameConfig: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFunctionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        functionConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetGraphqlApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        graphqlApi: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetGraphqlApiEnvironmentVariablesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        environmentVariables: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetIntrospectionSchemaCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = await collectBody(output.body, context);
    contents.schema = data;
    return contents;
};
export const de_GetResolverCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        resolver: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSchemaCreationStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        details: __expectString,
        status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSourceApiAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        sourceApiAssociation: (_) => de_SourceApiAssociation(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetTypeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        type: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListApiKeysCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        apiKeys: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDataSourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataSources: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDomainNamesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        domainNameConfigs: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFunctionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        functions: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListGraphqlApisCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        graphqlApis: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListResolversCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        resolvers: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListResolversByFunctionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        resolvers: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSourceApiAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        sourceApiAssociationSummaries: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTypesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        types: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTypesByAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        types: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutGraphqlApiEnvironmentVariablesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        environmentVariables: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartDataSourceIntrospectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        introspectionId: __expectString,
        introspectionStatus: __expectString,
        introspectionStatusDetail: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartSchemaCreationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartSchemaMergeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        sourceApiAssociationStatus: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateApiCacheCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        apiCache: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateApiKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        apiKey: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataSource: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateDomainNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        domainNameConfig: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateFunctionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        functionConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateGraphqlApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        graphqlApi: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateResolverCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        resolver: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateSourceApiAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        sourceApiAssociation: (_) => de_SourceApiAssociation(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateTypeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        type: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.appsync#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.appsync#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.appsync#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.appsync#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.appsync#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.appsync#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.appsync#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        case "ApiKeyLimitExceededException":
        case "com.amazonaws.appsync#ApiKeyLimitExceededException":
            throw await de_ApiKeyLimitExceededExceptionRes(parsedOutput, context);
        case "ApiKeyValidityOutOfBoundsException":
        case "com.amazonaws.appsync#ApiKeyValidityOutOfBoundsException":
            throw await de_ApiKeyValidityOutOfBoundsExceptionRes(parsedOutput, context);
        case "ApiLimitExceededException":
        case "com.amazonaws.appsync#ApiLimitExceededException":
            throw await de_ApiLimitExceededExceptionRes(parsedOutput, context);
        case "GraphQLSchemaException":
        case "com.amazonaws.appsync#GraphQLSchemaException":
            throw await de_GraphQLSchemaExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ApiKeyLimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ApiKeyLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ApiKeyValidityOutOfBoundsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ApiKeyValidityOutOfBoundsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ApiLimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ApiLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        detail: _json,
        message: __expectString,
        reason: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_GraphQLSchemaExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new GraphQLSchemaException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalFailureExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_DataSourceIntrospectionModel = (output, context) => {
    return take(output, {
        fields: (_) => de_DataSourceIntrospectionModelFields(_, context),
        indexes: _json,
        name: __expectString,
        primaryKey: _json,
        sdl: __expectString,
    });
};
const de_DataSourceIntrospectionModelField = (output, context) => {
    return take(output, {
        length: __expectLong,
        name: __expectString,
        type: (_) => de_DataSourceIntrospectionModelFieldType(_, context),
    });
};
const de_DataSourceIntrospectionModelFields = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataSourceIntrospectionModelField(entry, context);
    });
    return retVal;
};
const de_DataSourceIntrospectionModelFieldType = (output, context) => {
    return take(output, {
        kind: __expectString,
        name: __expectString,
        type: (_) => de_DataSourceIntrospectionModelFieldType(_, context),
        values: _json,
    });
};
const de_DataSourceIntrospectionModels = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataSourceIntrospectionModel(entry, context);
    });
    return retVal;
};
const de_DataSourceIntrospectionResult = (output, context) => {
    return take(output, {
        models: (_) => de_DataSourceIntrospectionModels(_, context),
        nextToken: __expectString,
    });
};
const de_SourceApiAssociation = (output, context) => {
    return take(output, {
        associationArn: __expectString,
        associationId: __expectString,
        description: __expectString,
        lastSuccessfulMergeDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        mergedApiArn: __expectString,
        mergedApiId: __expectString,
        sourceApiArn: __expectString,
        sourceApiAssociationConfig: _json,
        sourceApiAssociationStatus: __expectString,
        sourceApiAssociationStatusDetail: __expectString,
        sourceApiId: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const _aT = "apiType";
const _f = "format";
const _iD = "includeDirectives";
const _iMSDL = "includeModelsSDL";
const _mR = "maxResults";
const _nT = "nextToken";
const _o = "owner";
const _tK = "tagKeys";
