import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { AppSyncServiceException as __BaseException } from "./AppSyncServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const AuthenticationType: {
  readonly AMAZON_COGNITO_USER_POOLS: "AMAZON_COGNITO_USER_POOLS";
  readonly API_KEY: "API_KEY";
  readonly AWS_IAM: "AWS_IAM";
  readonly AWS_LAMBDA: "AWS_LAMBDA";
  readonly OPENID_CONNECT: "OPENID_CONNECT";
};
export type AuthenticationType =
  (typeof AuthenticationType)[keyof typeof AuthenticationType];
export interface LambdaAuthorizerConfig {
  authorizerResultTtlInSeconds?: number;
  authorizerUri: string | undefined;
  identityValidationExpression?: string;
}
export interface OpenIDConnectConfig {
  issuer: string | undefined;
  clientId?: string;
  iatTTL?: number;
  authTTL?: number;
}
export interface CognitoUserPoolConfig {
  userPoolId: string | undefined;
  awsRegion: string | undefined;
  appIdClientRegex?: string;
}
export interface AdditionalAuthenticationProvider {
  authenticationType?: AuthenticationType;
  openIDConnectConfig?: OpenIDConnectConfig;
  userPoolConfig?: CognitoUserPoolConfig;
  lambdaAuthorizerConfig?: LambdaAuthorizerConfig;
}
export declare const AssociationStatus: {
  readonly Failed: "FAILED";
  readonly Processing: "PROCESSING";
  readonly Success: "SUCCESS";
};
export type AssociationStatus =
  (typeof AssociationStatus)[keyof typeof AssociationStatus];
export interface ApiAssociation {
  domainName?: string;
  apiId?: string;
  associationStatus?: AssociationStatus;
  deploymentDetail?: string;
}
export declare const ApiCachingBehavior: {
  readonly FULL_REQUEST_CACHING: "FULL_REQUEST_CACHING";
  readonly PER_RESOLVER_CACHING: "PER_RESOLVER_CACHING";
};
export type ApiCachingBehavior =
  (typeof ApiCachingBehavior)[keyof typeof ApiCachingBehavior];
export declare const CacheHealthMetricsConfig: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type CacheHealthMetricsConfig =
  (typeof CacheHealthMetricsConfig)[keyof typeof CacheHealthMetricsConfig];
export declare const ApiCacheStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly MODIFYING: "MODIFYING";
};
export type ApiCacheStatus =
  (typeof ApiCacheStatus)[keyof typeof ApiCacheStatus];
export declare const ApiCacheType: {
  readonly LARGE: "LARGE";
  readonly LARGE_12X: "LARGE_12X";
  readonly LARGE_2X: "LARGE_2X";
  readonly LARGE_4X: "LARGE_4X";
  readonly LARGE_8X: "LARGE_8X";
  readonly MEDIUM: "MEDIUM";
  readonly R4_2XLARGE: "R4_2XLARGE";
  readonly R4_4XLARGE: "R4_4XLARGE";
  readonly R4_8XLARGE: "R4_8XLARGE";
  readonly R4_LARGE: "R4_LARGE";
  readonly R4_XLARGE: "R4_XLARGE";
  readonly SMALL: "SMALL";
  readonly T2_MEDIUM: "T2_MEDIUM";
  readonly T2_SMALL: "T2_SMALL";
  readonly XLARGE: "XLARGE";
};
export type ApiCacheType = (typeof ApiCacheType)[keyof typeof ApiCacheType];
export interface ApiCache {
  ttl?: number;
  apiCachingBehavior?: ApiCachingBehavior;
  transitEncryptionEnabled?: boolean;
  atRestEncryptionEnabled?: boolean;
  type?: ApiCacheType;
  status?: ApiCacheStatus;
  healthMetricsConfig?: CacheHealthMetricsConfig;
}
export interface ApiKey {
  id?: string;
  description?: string;
  expires?: number;
  deletes?: number;
}
export declare class ApiKeyLimitExceededException extends __BaseException {
  readonly name: "ApiKeyLimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ApiKeyLimitExceededException, __BaseException>
  );
}
export declare class ApiKeyValidityOutOfBoundsException extends __BaseException {
  readonly name: "ApiKeyValidityOutOfBoundsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ApiKeyValidityOutOfBoundsException,
      __BaseException
    >
  );
}
export declare class ApiLimitExceededException extends __BaseException {
  readonly name: "ApiLimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ApiLimitExceededException, __BaseException>
  );
}
export declare const RuntimeName: {
  readonly APPSYNC_JS: "APPSYNC_JS";
};
export type RuntimeName = (typeof RuntimeName)[keyof typeof RuntimeName];
export interface AppSyncRuntime {
  name: RuntimeName | undefined;
  runtimeVersion: string | undefined;
}
export interface AssociateApiRequest {
  domainName: string | undefined;
  apiId: string | undefined;
}
export interface AssociateApiResponse {
  apiAssociation?: ApiAssociation;
}
export interface CodeErrorLocation {
  line?: number;
  column?: number;
  span?: number;
}
export interface CodeError {
  errorType?: string;
  value?: string;
  location?: CodeErrorLocation;
}
export interface BadRequestDetail {
  codeErrors?: CodeError[];
}
export declare const BadRequestReason: {
  readonly CODE_ERROR: "CODE_ERROR";
};
export type BadRequestReason =
  (typeof BadRequestReason)[keyof typeof BadRequestReason];
export declare class BadRequestException extends __BaseException {
  readonly name: "BadRequestException";
  readonly $fault: "client";
  reason?: BadRequestReason;
  detail?: BadRequestDetail;
  constructor(
    opts: __ExceptionOptionType<BadRequestException, __BaseException>
  );
}
export declare class InternalFailureException extends __BaseException {
  readonly name: "InternalFailureException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalFailureException, __BaseException>
  );
}
export declare class NotFoundException extends __BaseException {
  readonly name: "NotFoundException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
}
export declare const MergeType: {
  readonly AUTO_MERGE: "AUTO_MERGE";
  readonly MANUAL_MERGE: "MANUAL_MERGE";
};
export type MergeType = (typeof MergeType)[keyof typeof MergeType];
export interface SourceApiAssociationConfig {
  mergeType?: MergeType;
}
export interface AssociateMergedGraphqlApiRequest {
  sourceApiIdentifier: string | undefined;
  mergedApiIdentifier: string | undefined;
  description?: string;
  sourceApiAssociationConfig?: SourceApiAssociationConfig;
}
export declare const SourceApiAssociationStatus: {
  readonly AUTO_MERGE_SCHEDULE_FAILED: "AUTO_MERGE_SCHEDULE_FAILED";
  readonly DELETION_FAILED: "DELETION_FAILED";
  readonly DELETION_IN_PROGRESS: "DELETION_IN_PROGRESS";
  readonly DELETION_SCHEDULED: "DELETION_SCHEDULED";
  readonly MERGE_FAILED: "MERGE_FAILED";
  readonly MERGE_IN_PROGRESS: "MERGE_IN_PROGRESS";
  readonly MERGE_SCHEDULED: "MERGE_SCHEDULED";
  readonly MERGE_SUCCESS: "MERGE_SUCCESS";
};
export type SourceApiAssociationStatus =
  (typeof SourceApiAssociationStatus)[keyof typeof SourceApiAssociationStatus];
export interface SourceApiAssociation {
  associationId?: string;
  associationArn?: string;
  sourceApiId?: string;
  sourceApiArn?: string;
  mergedApiArn?: string;
  mergedApiId?: string;
  description?: string;
  sourceApiAssociationConfig?: SourceApiAssociationConfig;
  sourceApiAssociationStatus?: SourceApiAssociationStatus;
  sourceApiAssociationStatusDetail?: string;
  lastSuccessfulMergeDate?: Date;
}
export interface AssociateMergedGraphqlApiResponse {
  sourceApiAssociation?: SourceApiAssociation;
}
export declare class ConcurrentModificationException extends __BaseException {
  readonly name: "ConcurrentModificationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ConcurrentModificationException,
      __BaseException
    >
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class UnauthorizedException extends __BaseException {
  readonly name: "UnauthorizedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UnauthorizedException, __BaseException>
  );
}
export interface AssociateSourceGraphqlApiRequest {
  mergedApiIdentifier: string | undefined;
  sourceApiIdentifier: string | undefined;
  description?: string;
  sourceApiAssociationConfig?: SourceApiAssociationConfig;
}
export interface AssociateSourceGraphqlApiResponse {
  sourceApiAssociation?: SourceApiAssociation;
}
export declare const AuthorizationType: {
  readonly AWS_IAM: "AWS_IAM";
};
export type AuthorizationType =
  (typeof AuthorizationType)[keyof typeof AuthorizationType];
export interface AwsIamConfig {
  signingRegion?: string;
  signingServiceName?: string;
}
export interface AuthorizationConfig {
  authorizationType: AuthorizationType | undefined;
  awsIamConfig?: AwsIamConfig;
}
export interface CreateApiCacheRequest {
  apiId: string | undefined;
  ttl: number | undefined;
  transitEncryptionEnabled?: boolean;
  atRestEncryptionEnabled?: boolean;
  apiCachingBehavior: ApiCachingBehavior | undefined;
  type: ApiCacheType | undefined;
  healthMetricsConfig?: CacheHealthMetricsConfig;
}
export interface CreateApiCacheResponse {
  apiCache?: ApiCache;
}
export interface CreateApiKeyRequest {
  apiId: string | undefined;
  description?: string;
  expires?: number;
}
export interface CreateApiKeyResponse {
  apiKey?: ApiKey;
}
export interface DeltaSyncConfig {
  baseTableTTL?: number;
  deltaSyncTableName?: string;
  deltaSyncTableTTL?: number;
}
export interface DynamodbDataSourceConfig {
  tableName: string | undefined;
  awsRegion: string | undefined;
  useCallerCredentials?: boolean;
  deltaSyncConfig?: DeltaSyncConfig;
  versioned?: boolean;
}
export interface ElasticsearchDataSourceConfig {
  endpoint: string | undefined;
  awsRegion: string | undefined;
}
export interface EventBridgeDataSourceConfig {
  eventBusArn: string | undefined;
}
export interface HttpDataSourceConfig {
  endpoint?: string;
  authorizationConfig?: AuthorizationConfig;
}
export interface LambdaDataSourceConfig {
  lambdaFunctionArn: string | undefined;
}
export declare const DataSourceLevelMetricsConfig: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type DataSourceLevelMetricsConfig =
  (typeof DataSourceLevelMetricsConfig)[keyof typeof DataSourceLevelMetricsConfig];
export interface OpenSearchServiceDataSourceConfig {
  endpoint: string | undefined;
  awsRegion: string | undefined;
}
export interface RdsHttpEndpointConfig {
  awsRegion?: string;
  dbClusterIdentifier?: string;
  databaseName?: string;
  schema?: string;
  awsSecretStoreArn?: string;
}
export declare const RelationalDatabaseSourceType: {
  readonly RDS_HTTP_ENDPOINT: "RDS_HTTP_ENDPOINT";
};
export type RelationalDatabaseSourceType =
  (typeof RelationalDatabaseSourceType)[keyof typeof RelationalDatabaseSourceType];
export interface RelationalDatabaseDataSourceConfig {
  relationalDatabaseSourceType?: RelationalDatabaseSourceType;
  rdsHttpEndpointConfig?: RdsHttpEndpointConfig;
}
export declare const DataSourceType: {
  readonly AMAZON_DYNAMODB: "AMAZON_DYNAMODB";
  readonly AMAZON_ELASTICSEARCH: "AMAZON_ELASTICSEARCH";
  readonly AMAZON_EVENTBRIDGE: "AMAZON_EVENTBRIDGE";
  readonly AMAZON_OPENSEARCH_SERVICE: "AMAZON_OPENSEARCH_SERVICE";
  readonly AWS_LAMBDA: "AWS_LAMBDA";
  readonly HTTP: "HTTP";
  readonly NONE: "NONE";
  readonly RELATIONAL_DATABASE: "RELATIONAL_DATABASE";
};
export type DataSourceType =
  (typeof DataSourceType)[keyof typeof DataSourceType];
export interface CreateDataSourceRequest {
  apiId: string | undefined;
  name: string | undefined;
  description?: string;
  type: DataSourceType | undefined;
  serviceRoleArn?: string;
  dynamodbConfig?: DynamodbDataSourceConfig;
  lambdaConfig?: LambdaDataSourceConfig;
  elasticsearchConfig?: ElasticsearchDataSourceConfig;
  openSearchServiceConfig?: OpenSearchServiceDataSourceConfig;
  httpConfig?: HttpDataSourceConfig;
  relationalDatabaseConfig?: RelationalDatabaseDataSourceConfig;
  eventBridgeConfig?: EventBridgeDataSourceConfig;
  metricsConfig?: DataSourceLevelMetricsConfig;
}
export interface DataSource {
  dataSourceArn?: string;
  name?: string;
  description?: string;
  type?: DataSourceType;
  serviceRoleArn?: string;
  dynamodbConfig?: DynamodbDataSourceConfig;
  lambdaConfig?: LambdaDataSourceConfig;
  elasticsearchConfig?: ElasticsearchDataSourceConfig;
  openSearchServiceConfig?: OpenSearchServiceDataSourceConfig;
  httpConfig?: HttpDataSourceConfig;
  relationalDatabaseConfig?: RelationalDatabaseDataSourceConfig;
  eventBridgeConfig?: EventBridgeDataSourceConfig;
  metricsConfig?: DataSourceLevelMetricsConfig;
}
export interface CreateDataSourceResponse {
  dataSource?: DataSource;
}
export interface CreateDomainNameRequest {
  domainName: string | undefined;
  certificateArn: string | undefined;
  description?: string;
}
export interface DomainNameConfig {
  domainName?: string;
  description?: string;
  certificateArn?: string;
  appsyncDomainName?: string;
  hostedZoneId?: string;
}
export interface CreateDomainNameResponse {
  domainNameConfig?: DomainNameConfig;
}
export declare const ConflictDetectionType: {
  readonly NONE: "NONE";
  readonly VERSION: "VERSION";
};
export type ConflictDetectionType =
  (typeof ConflictDetectionType)[keyof typeof ConflictDetectionType];
export declare const ConflictHandlerType: {
  readonly AUTOMERGE: "AUTOMERGE";
  readonly LAMBDA: "LAMBDA";
  readonly NONE: "NONE";
  readonly OPTIMISTIC_CONCURRENCY: "OPTIMISTIC_CONCURRENCY";
};
export type ConflictHandlerType =
  (typeof ConflictHandlerType)[keyof typeof ConflictHandlerType];
export interface LambdaConflictHandlerConfig {
  lambdaConflictHandlerArn?: string;
}
export interface SyncConfig {
  conflictHandler?: ConflictHandlerType;
  conflictDetection?: ConflictDetectionType;
  lambdaConflictHandlerConfig?: LambdaConflictHandlerConfig;
}
export interface CreateFunctionRequest {
  apiId: string | undefined;
  name: string | undefined;
  description?: string;
  dataSourceName: string | undefined;
  requestMappingTemplate?: string;
  responseMappingTemplate?: string;
  functionVersion?: string;
  syncConfig?: SyncConfig;
  maxBatchSize?: number;
  runtime?: AppSyncRuntime;
  code?: string;
}
export interface FunctionConfiguration {
  functionId?: string;
  functionArn?: string;
  name?: string;
  description?: string;
  dataSourceName?: string;
  requestMappingTemplate?: string;
  responseMappingTemplate?: string;
  functionVersion?: string;
  syncConfig?: SyncConfig;
  maxBatchSize?: number;
  runtime?: AppSyncRuntime;
  code?: string;
}
export interface CreateFunctionResponse {
  functionConfiguration?: FunctionConfiguration;
}
export declare const GraphQLApiType: {
  readonly GRAPHQL: "GRAPHQL";
  readonly MERGED: "MERGED";
};
export type GraphQLApiType =
  (typeof GraphQLApiType)[keyof typeof GraphQLApiType];
export declare const DataSourceLevelMetricsBehavior: {
  readonly FULL_REQUEST_DATA_SOURCE_METRICS: "FULL_REQUEST_DATA_SOURCE_METRICS";
  readonly PER_DATA_SOURCE_METRICS: "PER_DATA_SOURCE_METRICS";
};
export type DataSourceLevelMetricsBehavior =
  (typeof DataSourceLevelMetricsBehavior)[keyof typeof DataSourceLevelMetricsBehavior];
export declare const OperationLevelMetricsConfig: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type OperationLevelMetricsConfig =
  (typeof OperationLevelMetricsConfig)[keyof typeof OperationLevelMetricsConfig];
export declare const ResolverLevelMetricsBehavior: {
  readonly FULL_REQUEST_RESOLVER_METRICS: "FULL_REQUEST_RESOLVER_METRICS";
  readonly PER_RESOLVER_METRICS: "PER_RESOLVER_METRICS";
};
export type ResolverLevelMetricsBehavior =
  (typeof ResolverLevelMetricsBehavior)[keyof typeof ResolverLevelMetricsBehavior];
export interface EnhancedMetricsConfig {
  resolverLevelMetricsBehavior: ResolverLevelMetricsBehavior | undefined;
  dataSourceLevelMetricsBehavior: DataSourceLevelMetricsBehavior | undefined;
  operationLevelMetricsConfig: OperationLevelMetricsConfig | undefined;
}
export declare const GraphQLApiIntrospectionConfig: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type GraphQLApiIntrospectionConfig =
  (typeof GraphQLApiIntrospectionConfig)[keyof typeof GraphQLApiIntrospectionConfig];
export declare const FieldLogLevel: {
  readonly ALL: "ALL";
  readonly DEBUG: "DEBUG";
  readonly ERROR: "ERROR";
  readonly INFO: "INFO";
  readonly NONE: "NONE";
};
export type FieldLogLevel = (typeof FieldLogLevel)[keyof typeof FieldLogLevel];
export interface LogConfig {
  fieldLogLevel: FieldLogLevel | undefined;
  cloudWatchLogsRoleArn: string | undefined;
  excludeVerboseContent?: boolean;
}
export declare const DefaultAction: {
  readonly ALLOW: "ALLOW";
  readonly DENY: "DENY";
};
export type DefaultAction = (typeof DefaultAction)[keyof typeof DefaultAction];
export interface UserPoolConfig {
  userPoolId: string | undefined;
  awsRegion: string | undefined;
  defaultAction: DefaultAction | undefined;
  appIdClientRegex?: string;
}
export declare const GraphQLApiVisibility: {
  readonly GLOBAL: "GLOBAL";
  readonly PRIVATE: "PRIVATE";
};
export type GraphQLApiVisibility =
  (typeof GraphQLApiVisibility)[keyof typeof GraphQLApiVisibility];
export interface CreateGraphqlApiRequest {
  name: string | undefined;
  logConfig?: LogConfig;
  authenticationType: AuthenticationType | undefined;
  userPoolConfig?: UserPoolConfig;
  openIDConnectConfig?: OpenIDConnectConfig;
  tags?: Record<string, string>;
  additionalAuthenticationProviders?: AdditionalAuthenticationProvider[];
  xrayEnabled?: boolean;
  lambdaAuthorizerConfig?: LambdaAuthorizerConfig;
  visibility?: GraphQLApiVisibility;
  apiType?: GraphQLApiType;
  mergedApiExecutionRoleArn?: string;
  ownerContact?: string;
  introspectionConfig?: GraphQLApiIntrospectionConfig;
  queryDepthLimit?: number;
  resolverCountLimit?: number;
  enhancedMetricsConfig?: EnhancedMetricsConfig;
}
export interface GraphqlApi {
  name?: string;
  apiId?: string;
  authenticationType?: AuthenticationType;
  logConfig?: LogConfig;
  userPoolConfig?: UserPoolConfig;
  openIDConnectConfig?: OpenIDConnectConfig;
  arn?: string;
  uris?: Record<string, string>;
  tags?: Record<string, string>;
  additionalAuthenticationProviders?: AdditionalAuthenticationProvider[];
  xrayEnabled?: boolean;
  wafWebAclArn?: string;
  lambdaAuthorizerConfig?: LambdaAuthorizerConfig;
  dns?: Record<string, string>;
  visibility?: GraphQLApiVisibility;
  apiType?: GraphQLApiType;
  mergedApiExecutionRoleArn?: string;
  owner?: string;
  ownerContact?: string;
  introspectionConfig?: GraphQLApiIntrospectionConfig;
  queryDepthLimit?: number;
  resolverCountLimit?: number;
  enhancedMetricsConfig?: EnhancedMetricsConfig;
}
export interface CreateGraphqlApiResponse {
  graphqlApi?: GraphqlApi;
}
export interface CachingConfig {
  ttl: number | undefined;
  cachingKeys?: string[];
}
export declare const ResolverKind: {
  readonly PIPELINE: "PIPELINE";
  readonly UNIT: "UNIT";
};
export type ResolverKind = (typeof ResolverKind)[keyof typeof ResolverKind];
export declare const ResolverLevelMetricsConfig: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type ResolverLevelMetricsConfig =
  (typeof ResolverLevelMetricsConfig)[keyof typeof ResolverLevelMetricsConfig];
export interface PipelineConfig {
  functions?: string[];
}
export interface CreateResolverRequest {
  apiId: string | undefined;
  typeName: string | undefined;
  fieldName: string | undefined;
  dataSourceName?: string;
  requestMappingTemplate?: string;
  responseMappingTemplate?: string;
  kind?: ResolverKind;
  pipelineConfig?: PipelineConfig;
  syncConfig?: SyncConfig;
  cachingConfig?: CachingConfig;
  maxBatchSize?: number;
  runtime?: AppSyncRuntime;
  code?: string;
  metricsConfig?: ResolverLevelMetricsConfig;
}
export interface Resolver {
  typeName?: string;
  fieldName?: string;
  dataSourceName?: string;
  resolverArn?: string;
  requestMappingTemplate?: string;
  responseMappingTemplate?: string;
  kind?: ResolverKind;
  pipelineConfig?: PipelineConfig;
  syncConfig?: SyncConfig;
  cachingConfig?: CachingConfig;
  maxBatchSize?: number;
  runtime?: AppSyncRuntime;
  code?: string;
  metricsConfig?: ResolverLevelMetricsConfig;
}
export interface CreateResolverResponse {
  resolver?: Resolver;
}
export declare const TypeDefinitionFormat: {
  readonly JSON: "JSON";
  readonly SDL: "SDL";
};
export type TypeDefinitionFormat =
  (typeof TypeDefinitionFormat)[keyof typeof TypeDefinitionFormat];
export interface CreateTypeRequest {
  apiId: string | undefined;
  definition: string | undefined;
  format: TypeDefinitionFormat | undefined;
}
export interface Type {
  name?: string;
  description?: string;
  arn?: string;
  definition?: string;
  format?: TypeDefinitionFormat;
}
export interface CreateTypeResponse {
  type?: Type;
}
export interface DeleteApiCacheRequest {
  apiId: string | undefined;
}
export interface DeleteApiCacheResponse {}
export interface DeleteApiKeyRequest {
  apiId: string | undefined;
  id: string | undefined;
}
export interface DeleteApiKeyResponse {}
export interface DeleteDataSourceRequest {
  apiId: string | undefined;
  name: string | undefined;
}
export interface DeleteDataSourceResponse {}
export interface DeleteDomainNameRequest {
  domainName: string | undefined;
}
export interface DeleteDomainNameResponse {}
export interface DeleteFunctionRequest {
  apiId: string | undefined;
  functionId: string | undefined;
}
export interface DeleteFunctionResponse {}
export interface DeleteGraphqlApiRequest {
  apiId: string | undefined;
}
export interface DeleteGraphqlApiResponse {}
export interface DeleteResolverRequest {
  apiId: string | undefined;
  typeName: string | undefined;
  fieldName: string | undefined;
}
export interface DeleteResolverResponse {}
export interface DeleteTypeRequest {
  apiId: string | undefined;
  typeName: string | undefined;
}
export interface DeleteTypeResponse {}
export interface DisassociateApiRequest {
  domainName: string | undefined;
}
export interface DisassociateApiResponse {}
export interface DisassociateMergedGraphqlApiRequest {
  sourceApiIdentifier: string | undefined;
  associationId: string | undefined;
}
export interface DisassociateMergedGraphqlApiResponse {
  sourceApiAssociationStatus?: SourceApiAssociationStatus;
}
export interface DisassociateSourceGraphqlApiRequest {
  mergedApiIdentifier: string | undefined;
  associationId: string | undefined;
}
export interface DisassociateSourceGraphqlApiResponse {
  sourceApiAssociationStatus?: SourceApiAssociationStatus;
}
export interface EvaluateCodeRequest {
  runtime: AppSyncRuntime | undefined;
  code: string | undefined;
  context: string | undefined;
  function?: string;
}
export interface EvaluateCodeErrorDetail {
  message?: string;
  codeErrors?: CodeError[];
}
export interface EvaluateCodeResponse {
  evaluationResult?: string;
  error?: EvaluateCodeErrorDetail;
  logs?: string[];
}
export interface EvaluateMappingTemplateRequest {
  template: string | undefined;
  context: string | undefined;
}
export interface ErrorDetail {
  message?: string;
}
export interface EvaluateMappingTemplateResponse {
  evaluationResult?: string;
  error?: ErrorDetail;
  logs?: string[];
}
export interface FlushApiCacheRequest {
  apiId: string | undefined;
}
export interface FlushApiCacheResponse {}
export interface GetApiAssociationRequest {
  domainName: string | undefined;
}
export interface GetApiAssociationResponse {
  apiAssociation?: ApiAssociation;
}
export interface GetApiCacheRequest {
  apiId: string | undefined;
}
export interface GetApiCacheResponse {
  apiCache?: ApiCache;
}
export interface GetDataSourceRequest {
  apiId: string | undefined;
  name: string | undefined;
}
export interface GetDataSourceResponse {
  dataSource?: DataSource;
}
export interface GetDataSourceIntrospectionRequest {
  introspectionId: string | undefined;
  includeModelsSDL?: boolean;
  nextToken?: string;
  maxResults?: number;
}
export interface DataSourceIntrospectionModelIndex {
  name?: string;
  fields?: string[];
}
export declare const DataSourceIntrospectionStatus: {
  readonly FAILED: "FAILED";
  readonly PROCESSING: "PROCESSING";
  readonly SUCCESS: "SUCCESS";
};
export type DataSourceIntrospectionStatus =
  (typeof DataSourceIntrospectionStatus)[keyof typeof DataSourceIntrospectionStatus];
export interface GetDomainNameRequest {
  domainName: string | undefined;
}
export interface GetDomainNameResponse {
  domainNameConfig?: DomainNameConfig;
}
export interface GetFunctionRequest {
  apiId: string | undefined;
  functionId: string | undefined;
}
export interface GetFunctionResponse {
  functionConfiguration?: FunctionConfiguration;
}
export interface GetGraphqlApiRequest {
  apiId: string | undefined;
}
export interface GetGraphqlApiResponse {
  graphqlApi?: GraphqlApi;
}
export interface GetGraphqlApiEnvironmentVariablesRequest {
  apiId: string | undefined;
}
export interface GetGraphqlApiEnvironmentVariablesResponse {
  environmentVariables?: Record<string, string>;
}
export declare const OutputType: {
  readonly JSON: "JSON";
  readonly SDL: "SDL";
};
export type OutputType = (typeof OutputType)[keyof typeof OutputType];
export interface GetIntrospectionSchemaRequest {
  apiId: string | undefined;
  format: OutputType | undefined;
  includeDirectives?: boolean;
}
export interface GetIntrospectionSchemaResponse {
  schema?: Uint8Array;
}
export declare class GraphQLSchemaException extends __BaseException {
  readonly name: "GraphQLSchemaException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<GraphQLSchemaException, __BaseException>
  );
}
export interface GetResolverRequest {
  apiId: string | undefined;
  typeName: string | undefined;
  fieldName: string | undefined;
}
export interface GetResolverResponse {
  resolver?: Resolver;
}
export interface GetSchemaCreationStatusRequest {
  apiId: string | undefined;
}
export declare const SchemaStatus: {
  readonly Active: "ACTIVE";
  readonly Deleting: "DELETING";
  readonly Failed: "FAILED";
  readonly NotApplicable: "NOT_APPLICABLE";
  readonly Processing: "PROCESSING";
  readonly Success: "SUCCESS";
};
export type SchemaStatus = (typeof SchemaStatus)[keyof typeof SchemaStatus];
export interface GetSchemaCreationStatusResponse {
  status?: SchemaStatus;
  details?: string;
}
export interface GetSourceApiAssociationRequest {
  mergedApiIdentifier: string | undefined;
  associationId: string | undefined;
}
export interface GetSourceApiAssociationResponse {
  sourceApiAssociation?: SourceApiAssociation;
}
export interface GetTypeRequest {
  apiId: string | undefined;
  typeName: string | undefined;
  format: TypeDefinitionFormat | undefined;
}
export interface GetTypeResponse {
  type?: Type;
}
export interface ListApiKeysRequest {
  apiId: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ListApiKeysResponse {
  apiKeys?: ApiKey[];
  nextToken?: string;
}
export interface ListDataSourcesRequest {
  apiId: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ListDataSourcesResponse {
  dataSources?: DataSource[];
  nextToken?: string;
}
export interface ListDomainNamesRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface ListDomainNamesResponse {
  domainNameConfigs?: DomainNameConfig[];
  nextToken?: string;
}
export interface ListFunctionsRequest {
  apiId: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ListFunctionsResponse {
  functions?: FunctionConfiguration[];
  nextToken?: string;
}
export declare const Ownership: {
  readonly CURRENT_ACCOUNT: "CURRENT_ACCOUNT";
  readonly OTHER_ACCOUNTS: "OTHER_ACCOUNTS";
};
export type Ownership = (typeof Ownership)[keyof typeof Ownership];
export interface ListGraphqlApisRequest {
  nextToken?: string;
  maxResults?: number;
  apiType?: GraphQLApiType;
  owner?: Ownership;
}
export interface ListGraphqlApisResponse {
  graphqlApis?: GraphqlApi[];
  nextToken?: string;
}
export interface ListResolversRequest {
  apiId: string | undefined;
  typeName: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ListResolversResponse {
  resolvers?: Resolver[];
  nextToken?: string;
}
export interface ListResolversByFunctionRequest {
  apiId: string | undefined;
  functionId: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ListResolversByFunctionResponse {
  resolvers?: Resolver[];
  nextToken?: string;
}
export interface ListSourceApiAssociationsRequest {
  apiId: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface SourceApiAssociationSummary {
  associationId?: string;
  associationArn?: string;
  sourceApiId?: string;
  sourceApiArn?: string;
  mergedApiId?: string;
  mergedApiArn?: string;
  description?: string;
}
export interface ListSourceApiAssociationsResponse {
  sourceApiAssociationSummaries?: SourceApiAssociationSummary[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface ListTypesRequest {
  apiId: string | undefined;
  format: TypeDefinitionFormat | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ListTypesResponse {
  types?: Type[];
  nextToken?: string;
}
export interface ListTypesByAssociationRequest {
  mergedApiIdentifier: string | undefined;
  associationId: string | undefined;
  format: TypeDefinitionFormat | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ListTypesByAssociationResponse {
  types?: Type[];
  nextToken?: string;
}
export interface PutGraphqlApiEnvironmentVariablesRequest {
  apiId: string | undefined;
  environmentVariables: Record<string, string> | undefined;
}
export interface PutGraphqlApiEnvironmentVariablesResponse {
  environmentVariables?: Record<string, string>;
}
export interface RdsDataApiConfig {
  resourceArn: string | undefined;
  secretArn: string | undefined;
  databaseName: string | undefined;
}
export interface StartDataSourceIntrospectionRequest {
  rdsDataApiConfig?: RdsDataApiConfig;
}
export interface StartDataSourceIntrospectionResponse {
  introspectionId?: string;
  introspectionStatus?: DataSourceIntrospectionStatus;
  introspectionStatusDetail?: string;
}
export interface StartSchemaCreationRequest {
  apiId: string | undefined;
  definition: Uint8Array | undefined;
}
export interface StartSchemaCreationResponse {
  status?: SchemaStatus;
}
export interface StartSchemaMergeRequest {
  associationId: string | undefined;
  mergedApiIdentifier: string | undefined;
}
export interface StartSchemaMergeResponse {
  sourceApiAssociationStatus?: SourceApiAssociationStatus;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateApiCacheRequest {
  apiId: string | undefined;
  ttl: number | undefined;
  apiCachingBehavior: ApiCachingBehavior | undefined;
  type: ApiCacheType | undefined;
  healthMetricsConfig?: CacheHealthMetricsConfig;
}
export interface UpdateApiCacheResponse {
  apiCache?: ApiCache;
}
export interface UpdateApiKeyRequest {
  apiId: string | undefined;
  id: string | undefined;
  description?: string;
  expires?: number;
}
export interface UpdateApiKeyResponse {
  apiKey?: ApiKey;
}
export interface UpdateDataSourceRequest {
  apiId: string | undefined;
  name: string | undefined;
  description?: string;
  type: DataSourceType | undefined;
  serviceRoleArn?: string;
  dynamodbConfig?: DynamodbDataSourceConfig;
  lambdaConfig?: LambdaDataSourceConfig;
  elasticsearchConfig?: ElasticsearchDataSourceConfig;
  openSearchServiceConfig?: OpenSearchServiceDataSourceConfig;
  httpConfig?: HttpDataSourceConfig;
  relationalDatabaseConfig?: RelationalDatabaseDataSourceConfig;
  eventBridgeConfig?: EventBridgeDataSourceConfig;
  metricsConfig?: DataSourceLevelMetricsConfig;
}
export interface UpdateDataSourceResponse {
  dataSource?: DataSource;
}
export interface UpdateDomainNameRequest {
  domainName: string | undefined;
  description?: string;
}
export interface UpdateDomainNameResponse {
  domainNameConfig?: DomainNameConfig;
}
export interface UpdateFunctionRequest {
  apiId: string | undefined;
  name: string | undefined;
  description?: string;
  functionId: string | undefined;
  dataSourceName: string | undefined;
  requestMappingTemplate?: string;
  responseMappingTemplate?: string;
  functionVersion?: string;
  syncConfig?: SyncConfig;
  maxBatchSize?: number;
  runtime?: AppSyncRuntime;
  code?: string;
}
export interface UpdateFunctionResponse {
  functionConfiguration?: FunctionConfiguration;
}
export interface UpdateGraphqlApiRequest {
  apiId: string | undefined;
  name: string | undefined;
  logConfig?: LogConfig;
  authenticationType: AuthenticationType | undefined;
  userPoolConfig?: UserPoolConfig;
  openIDConnectConfig?: OpenIDConnectConfig;
  additionalAuthenticationProviders?: AdditionalAuthenticationProvider[];
  xrayEnabled?: boolean;
  lambdaAuthorizerConfig?: LambdaAuthorizerConfig;
  mergedApiExecutionRoleArn?: string;
  ownerContact?: string;
  introspectionConfig?: GraphQLApiIntrospectionConfig;
  queryDepthLimit?: number;
  resolverCountLimit?: number;
  enhancedMetricsConfig?: EnhancedMetricsConfig;
}
export interface UpdateGraphqlApiResponse {
  graphqlApi?: GraphqlApi;
}
export interface UpdateResolverRequest {
  apiId: string | undefined;
  typeName: string | undefined;
  fieldName: string | undefined;
  dataSourceName?: string;
  requestMappingTemplate?: string;
  responseMappingTemplate?: string;
  kind?: ResolverKind;
  pipelineConfig?: PipelineConfig;
  syncConfig?: SyncConfig;
  cachingConfig?: CachingConfig;
  maxBatchSize?: number;
  runtime?: AppSyncRuntime;
  code?: string;
  metricsConfig?: ResolverLevelMetricsConfig;
}
export interface UpdateResolverResponse {
  resolver?: Resolver;
}
export interface UpdateSourceApiAssociationRequest {
  associationId: string | undefined;
  mergedApiIdentifier: string | undefined;
  description?: string;
  sourceApiAssociationConfig?: SourceApiAssociationConfig;
}
export interface UpdateSourceApiAssociationResponse {
  sourceApiAssociation?: SourceApiAssociation;
}
export interface UpdateTypeRequest {
  apiId: string | undefined;
  typeName: string | undefined;
  definition?: string;
  format: TypeDefinitionFormat | undefined;
}
export interface UpdateTypeResponse {
  type?: Type;
}
export interface DataSourceIntrospectionModelFieldType {
  kind?: string;
  name?: string;
  type?: DataSourceIntrospectionModelFieldType;
  values?: string[];
}
export interface DataSourceIntrospectionModelField {
  name?: string;
  type?: DataSourceIntrospectionModelFieldType;
  length?: number;
}
export interface DataSourceIntrospectionModel {
  name?: string;
  fields?: DataSourceIntrospectionModelField[];
  primaryKey?: DataSourceIntrospectionModelIndex;
  indexes?: DataSourceIntrospectionModelIndex[];
  sdl?: string;
}
export interface DataSourceIntrospectionResult {
  models?: DataSourceIntrospectionModel[];
  nextToken?: string;
}
export interface GetDataSourceIntrospectionResponse {
  introspectionId?: string;
  introspectionStatus?: DataSourceIntrospectionStatus;
  introspectionStatusDetail?: string;
  introspectionResult?: DataSourceIntrospectionResult;
}
